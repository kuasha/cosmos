# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/.bowerrc', 'data': base64.b64decode('ewogICJkaXJlY3RvcnkiOiAiYXBwL2Jvd2VyX2NvbXBvbmVudHMiCn0=')
},
{
'name': '/LICENSE', 'data': base64.b64decode('VGhlIE1JVCBMaWNlbnNlCgpDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCgo=')
},
{
'name': '/bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImNvc21vcy1hZG1pbi1wYW5lbCIsCiAgImRlc2NyaXB0aW9uIjogIkFkbWluIHBhbmVsIGZvciBjb3Ntb3MgZnJhbWV3b3JrIiwKICAidmVyc2lvbiI6ICIwLjAuMCIsCiAgImhvbWVwYWdlIjogImh0dHA6Ly9jb3Ntb3NmcmFtZXdvcmsuY29tIiwKICAibGljZW5zZSI6ICJNSVQiLAogICJwcml2YXRlIjogdHJ1ZSwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiMS4yLngiLAogICAgImFuZ3VsYXItcm91dGUiOiAiMS4yLngiLAogICAgImFuZ3VsYXItbG9hZGVyIjogIjEuMi54IiwKICAgICJhbmd1bGFyLW1vY2tzIjogIn4xLjIueCIsCiAgICAiaHRtbDUtYm9pbGVycGxhdGUiOiAifjQuMy4wIiwKICAgICJhbmd1bGFyLWJvb3RzdHJhcCI6ICJ+MC4xMS54IgogIH0KfQo=')
},
{
'name': '/app/index.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjwhLS1baWYgbHQgSUUgN10+ICAgICAgPGh0bWwgbGFuZz0iZW4iIG5nLWFwcD0ibXlBcHAiIG5nLWNvbnRyb2xsZXI9IkFkbWluTWFpbkN0cmwiIGNsYXNzPSJuby1qcyBsdC1pZTkgbHQtaWU4IGx0LWllNyI+IDwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPiAgICAgICAgIDxodG1sIGxhbmc9ImVuIiBuZy1hcHA9Im15QXBwIiBuZy1jb250cm9sbGVyPSJBZG1pbk1haW5DdHJsIiBjbGFzcz0ibm8tanMgbHQtaWU5IGx0LWllOCI+IDwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDhdPiAgICAgICAgIDxodG1sIGxhbmc9ImVuIiBuZy1hcHA9Im15QXBwIiBuZy1jb250cm9sbGVyPSJBZG1pbk1haW5DdHJsIiBjbGFzcz0ibm8tanMgbHQtaWU5Ij4gPCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOF0+PCEtLT4gPGh0bWwgbGFuZz0iZW4iIG5nLWFwcD0ibXlBcHAiIG5nLWNvbnRyb2xsZXI9IkFkbWluTWFpbkN0cmwiIGNsYXNzPSJuby1qcyI+IDwhLS08IVtlbmRpZl0tLT4KCjxoZWFkPgogIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogIDx0aXRsZT5Db3Ntb3MgQWRtaW4gQXBwPC90aXRsZT4KICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iIj4KICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iYm93ZXJfY29tcG9uZW50cy9odG1sNS1ib2lsZXJwbGF0ZS9jc3Mvbm9ybWFsaXplLmNzcyI+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJib3dlcl9jb21wb25lbnRzL2h0bWw1LWJvaWxlcnBsYXRlL2Nzcy9tYWluLmNzcyI+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJjc3MvYXBwLmNzcyIvPgogIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2h0bWw1LWJvaWxlcnBsYXRlL2pzL3ZlbmRvci9tb2Rlcm5penItMi42LjIubWluLmpzIj48L3NjcmlwdD4KICA8c3R5bGU+CiAgICAgIGJvZHkgewogICAgICAgICAgcGFkZGluZy10b3A6IDUwcHg7CiAgICAgIH0KICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5PgogICAgPGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyI+Q29zbW9zIEZyYW1ld29yazwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyI+SG9tZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIjL3VzZXJzIj5Vc2VyczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIjL3JvbGVzIj5Sb2xlczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSJsb2dnZWRJbigpIj4gPGEgaHJlZj0iL2xvZ291dC8iPkxvZ291dCBbe3t1c2VyTmFtZX19XTwvYT4gPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0iIWxvZ2dlZEluKCkiPjxhIGhyZWY9Ii9sb2dpbi5odG1sIj5Mb2dpbjwvYT48L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+PCEtLS8ubmF2LWNvbGxhcHNlIC0tPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8IS0tW2lmIGx0IElFIDddPgogICAgPHAgY2xhc3M9ImJyb3dzZWhhcHB5Ij5Zb3UgYXJlIHVzaW5nIGFuIDxzdHJvbmc+b3V0ZGF0ZWQ8L3N0cm9uZz4gYnJvd3Nlci4gUGxlYXNlIDxhIGhyZWY9Imh0dHA6Ly9icm93c2VoYXBweS5jb20vIj51cGdyYWRlIHlvdXIgYnJvd3NlcjwvYT4gdG8gaW1wcm92ZSB5b3VyIGV4cGVyaWVuY2UuPC9wPgogICAgPCFbZW5kaWZdLS0+CgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgICAgICAgICAgPGRpdiBuZy12aWV3PjwvZGl2PgogICAgPC9kaXY+CgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci9hbmd1bGFyLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItcm91dGUvYW5ndWxhci1yb3V0ZS5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLWJvb3RzdHJhcC91aS1ib290c3RyYXAuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1ib290c3RyYXAvdWktYm9vdHN0cmFwLXRwbHMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL3V0aWxzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9hcHAuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL3NlcnZpY2VzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvZmlsdGVycy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvZGlyZWN0aXZlcy5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTEuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSIvL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjEuMS9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4xLjEvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiAvPgo8L2JvZHk+CjwvaHRtbD4K')
},
{
'name': '/app/login.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjxodG1sIG5nLWFwcD0ibXlBcHAiPgo8aGVhZCBsYW5nPSJlbiI+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+TG9naW48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5ICByb2xlPSJkb2N1bWVudCIgbmctY29udHJvbGxlcj0iQWRtaW5NYWluQ3RybCI+CiAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+CiAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvIj5Db3Ntb3MgRnJhbWV3b3JrPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSI+CiAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPjxhIGhyZWY9Ii8iPkhvbWU8L2E+PC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+PCEtLS8ubmF2LWNvbGxhcHNlIC0tPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciB0aGVtZS1zaG93Y2FzZSIgcm9sZT0ibWFpbiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJqdW1ib3Ryb24iPgogICAgICAgICAgICA8aDMgIG5nLXNob3c9IiFsb2dnZWRJbigpIj5Mb2dpbjwvaDM+CiAgICAgICAgICAgIDxkaXYgIG5nLXNob3c9ImZhbHNlIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXNtYWxsIGJ0bi1wcmltYXJ5IiBocmVmPSIvbG9naW4vZ29vZ2xlLyI+R29vZ2xlPC9hPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tc21hbGwgYnRuLXByaW1hcnkiIGhyZWY9Ii9sb2dpbi9mYWNlYm9va2dyYXBoLyI+RmFjZWJvb2s8L2E+CiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvbG9naW4vb3BlbmlkLyIgbWV0aG9kPSJnZXQiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5PcGVuaWQ8L2xhYmVsPjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJvcGVuaWQub3BfZW5kcG9pbnQiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSJMb2dpbiI+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxmb3JtIG5nLXNob3c9IiFsb2dnZWRJbigpIiByb2xlPSJmb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2xvZ2luLyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlciBuYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InVzZXJuYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSIvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UGFzc3dvcmQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InN1Ym1pdCIgdmFsdWU9IkxvZ2luIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiAvPgogICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICA8ZGl2IG5nLXNob3c9ImxvZ2dlZEluKCkiPldlbGNvbWU8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgaWQ9InN0YXR1cyI+PC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyL2FuZ3VsYXIuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1yb3V0ZS9hbmd1bGFyLXJvdXRlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLWJvb3RzdHJhcC91aS1ib290c3RyYXAtdHBscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvdXRpbHMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2FwcC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvc2VydmljZXMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2NvbnRyb2xsZXJzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9maWx0ZXJzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9kaXJlY3RpdmVzLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0iLy9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS4xMS4xL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Ii8vbmV0ZG5hLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuMS4xL2pzL2Jvb3RzdHJhcC5taW4uanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjEuMS9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiIC8+CjwvYm9keT4KPC9odG1sPgo=')
},
{
'name': '/app/js/serviceapi.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgTWFydWYgTWFuaXJ1enphbWFuIChtYXJ1Zm1AY29zbW9zZnJhbWV3b3JrLmNvbSkgb24gNi8xNC8xNC4KICovCgpmdW5jdGlvbiBwcm9jZXNzRXJyb3IoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKXsKICAgIGpRdWVyeSgiI3N0YXR1cyIpLmh0bWwoIjxoMz5FcnJvcjwvaDM+PGRpdj4iK2Vycm9yVGhyb3duKyI8L2Rpdj4iKTsKfQoKZnVuY3Rpb24gcHJvY2Vzc1N1Y2Nlc3MoZGF0YSl7CiAgICB2YXIgZGF0YTIgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgalF1ZXJ5KCIjcmVzdWx0IikudmFsKEpTT04uc3RyaW5naWZ5KGRhdGEyLHVuZGVmaW5lZCwgMikpOwp9CgpmdW5jdGlvbiBnZXRTZXJ2aWNlVXJsKHNlcnZpY2UpIHsKICAgIHZhciByb290ID0gZG9jdW1lbnQuVVJMOwogICAgaWYoc2VydmljZVswXSA9PSAnLycpewogICAgICAgIHNlcnZpY2UgPSBzZXJ2aWNlLnN1YnN0cmluZygxKTsKICAgIH0KICAgIHJldHVybiByb290K3NlcnZpY2U7Cn0KCmZ1bmN0aW9uIGRvX29wZXJhdGlvbih1cmwsIG1ldGhvZCwgZGF0YSwgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrKXsKICAgIGpRdWVyeSgiI3Jlc3VsdCIpLnZhbCgiIik7CiAgICBqUXVlcnkoIiNzdGF0dXMiKS5odG1sKCIiKTsKICAgIGNvbnNvbGUubG9nKG1ldGhvZCsgIjogIit1cmwpCiAgICAkLmFqYXgoewogICAgICAgIHVybDogdXJsLAogICAgICAgIHR5cGU6IG1ldGhvZCwKICAgICAgICBkYXRhOmRhdGEsCiAgICAgICAgc3VjY2VzczogY2FsbGJhY2ssCiAgICAgICAgZXJyb3I6IGVycm9yX2NhbGxiYWNrCiAgICB9KTsKfQoKZnVuY3Rpb24gaW5zZXJ0U2VydmljZSgpewogICAgdmFyIG5hbWUgPSBqUXVlcnkoIiNuYW1lIikudmFsKCk7CiAgICB2YXIgZGF0YSA9IGpRdWVyeSgiI2RhdGEiKS52YWwoKTsKCiAgICB2YXIgdXJsID0gIGdldFNlcnZpY2VVcmwobmFtZSk7CiAgICBkb19vcGVyYXRpb24odXJsLCAnUE9TVCcsIGRhdGEsIHByb2Nlc3NTdWNjZXNzLCBwcm9jZXNzRXJyb3IpOwp9CgpmdW5jdGlvbiBkZWxldGVJdGVtKCl7CiAgICB2YXIgbmFtZSA9IGpRdWVyeSgiI25hbWUiKS52YWwoKTsKICAgIHZhciBkYXRhID0galF1ZXJ5KCIjZGF0YSIpLnZhbCgpOwoKICAgIHZhciB1cmwgPSAgZ2V0U2VydmljZVVybChuYW1lKTsKCiAgICBkb19vcGVyYXRpb24odXJsLCAnREVMRVRFJywgZGF0YSwgcHJvY2Vzc1N1Y2Nlc3MsIHByb2Nlc3NFcnJvcik7Cn0KCmZ1bmN0aW9uIGxvYWRJdGVtKCl7CiAgICB2YXIgbmFtZSA9IGpRdWVyeSgiI25hbWUiKS52YWwoKTsKICAgIHZhciBkYXRhID0galF1ZXJ5KCIjZGF0YSIpLnZhbCgpOwogICAgdmFyIGNvbHVtbnMgPSBqUXVlcnkoIiNjb2x1bW5zIikudmFsKCk7CiAgICB2YXIgZmlsdGVyID0galF1ZXJ5KCIjZmlsdGVyIikudmFsKCk7CgogICAgdmFyIHVybCA9ICBnZXRTZXJ2aWNlVXJsKG5hbWUpOwogICAgaWYoY29sdW1ucyl7CiAgICAgICAgdXJsID0gdXJsKyI/IjsKICAgICAgICB1cmwgPXVybCsgImNvbHVtbnM9Iitjb2x1bW5zOwogICAgfQogICAgaWYoZmlsdGVyKXsKICAgICAgICBpZighY29sdW1ucykgewogICAgICAgICAgICB1cmwgPSB1cmwgKyAiPyI7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIHVybD11cmwrIiYiOwogICAgICAgIH0KICAgICAgICB1cmwgPSB1cmwrImZpbHRlcj0iK2ZpbHRlcgogICAgfQoKICAgIGRvX29wZXJhdGlvbih1cmwsICdHRVQnLCBkYXRhLCBwcm9jZXNzU3VjY2VzcyAscHJvY2Vzc0Vycm9yKTsKfQoKZnVuY3Rpb24gdXBkYXRlSXRlbSgpewogICAgdmFyIG5hbWUgPSBqUXVlcnkoIiNuYW1lIikudmFsKCk7CiAgICB2YXIgZGF0YSA9IGpRdWVyeSgiI2RhdGEiKS52YWwoKTsKCiAgICB2YXIgdXJsID0gIGdldFNlcnZpY2VVcmwobmFtZSk7CgogICAgZG9fb3BlcmF0aW9uKHVybCwgJ1BVVCcsIGRhdGEsIHByb2Nlc3NTdWNjZXNzLCBwcm9jZXNzRXJyb3IpOwp9CgpmdW5jdGlvbiBzdWJzY3JpYmUgKG1vbml0b3JfZW5kcG9pbnQsIG9iamVjdF9uYW1lLCBjYWxsYmFjaykgewogICAgLy9UT0RPOiBVbmlmeSB0aGUgb2JzZXJ2ZXIgdG8gbGlzdGVuIHRvIG1hbnkgb2JqZWN0cyBhdCBhIHRpbWUgdXNpbmcgZGlmZmVyZW50IGNhbGxiYWNrCiAgICAvL3ZhciBtb25pdG9yX2VuZHBvaW50ID0gIndzOi8vbG9jYWxob3N0OjgwODAvY2hhbmdlbW9uaXRvciIKICAgIHZhciB3ZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KG1vbml0b3JfZW5kcG9pbnQpOwogICAgdmFyIGZuID0gY2FsbGJhY2s7CiAgICB3ZWJzb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnNvbGUubG9nKCJTb2NrZXQgb3BlbmVkIik7CiAgICAgICAgd2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyJ0eXBlIjogIm1vbml0b3JfbnMiLCAibnMiOiBvYmplY3RfbmFtZX0pKQogICAgfQoKICAgIHdlYnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgY29uc29sZS5sb2coIk9uIG1lc3NhZ2U6ICIgKyBldnQuZGF0YSk7CiAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgIGZuKGV2dC5kYXRhKTsKICAgICAgICAgICAgLyoKICAgICAgICAgICAgIC8vSW4gY2FsbGJhY2sgeW91IG1heSBkbyBzb21ldGhpbmcgbGlrZSAoYWxzbyBjb25zaWRlciB0aGUgZXZ0LmRhdGEgaWYgeW91IGFyZSBtb25pdG9yaW5nIG11bHRpcGxlIG9iamVjdHMuOgogICAgICAgICAgICAgJGh0dHAuZ2V0KCcvc2VydmljZS8nK29iamVjdF9uYW1lKycvJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICovCiAgICAgICAgfQoKICAgIH0KCiAgICB3ZWJzb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zb2xlLmxvZygiT24gY2xvc2VkIik7CiAgICB9Cn0=')
},
{
'name': '/app/js/app.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKCi8vIERlY2xhcmUgYXBwIGxldmVsIG1vZHVsZSB3aGljaCBkZXBlbmRzIG9uIGZpbHRlcnMsIGFuZCBzZXJ2aWNlcwphbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbCiAgICAnbmdSb3V0ZScsCiAgICAndWkuYm9vdHN0cmFwJywKICAgICdteUFwcC5maWx0ZXJzJywKICAgICdteUFwcC5zZXJ2aWNlcycsCiAgICAnbXlBcHAuZGlyZWN0aXZlcycsCiAgICAnbXlBcHAuY29udHJvbGxlcnMnCl0pLgpjb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7CiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvaG9tZScsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2hvbWUuaHRtbCcsIGNvbnRyb2xsZXI6ICdIb21lQ3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy91c2VycycsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL3VzZXJzLmh0bWwnLCBjb250cm9sbGVyOiAnVXNlcnNDdHJsJ30pOwogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL3JvbGVzJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvcm9sZXMuaHRtbCcsIGNvbnRyb2xsZXI6ICdSb2xlc0N0cmwnfSk7CiAgICAkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe3JlZGlyZWN0VG86ICcvaG9tZSd9KTsKfV0pOwo=')
},
{
'name': '/app/js/directives.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogRGlyZWN0aXZlcyAqLwoKCmFuZ3VsYXIubW9kdWxlKCdteUFwcC5kaXJlY3RpdmVzJywgW10pLgogIGRpcmVjdGl2ZSgnYXBwVmVyc2lvbicsIFsndmVyc2lvbicsIGZ1bmN0aW9uKHZlcnNpb24pIHsKICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxtLCBhdHRycykgewogICAgICBlbG0udGV4dCh2ZXJzaW9uKTsKICAgIH07CiAgfV0pOwo=')
},
{
'name': '/app/js/services.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogU2VydmljZXMgKi8KCgphbmd1bGFyLm1vZHVsZSgnbXlBcHAuc2VydmljZXMnLCBbXSkKICAgIC5mYWN0b3J5KCdDb3Ntb3NTZXJ2aWNlJywgWyckaHR0cCcsIGZ1bmN0aW9uKCRodHRwKXsKICAgICAgICByZXR1cm57CiAgICAgICAgICAgIGdldDogZnVuY3Rpb24odXJpLCBjYWxsYmFjaywgZXJyb3JfY2FsbGJhY2spewogICAgICAgICAgICAgICAgJGh0dHAuZ2V0KHVyaSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cyl7CiAgICAgICAgICAgICAgICAgICAgaWYoZXJyb3JfY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfY2FsbGJhY2soZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcG9zdDogZnVuY3Rpb24odXJpLCBkYXRhLCBjYWxsYmFjaywgZXJyb3JfY2FsbGJhY2spewogICAgICAgICAgICAgICAgJGh0dHAucG9zdCh1cmksIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpOwogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbihkYXRhLCBzdGF0dXMpewogICAgICAgICAgICAgICAgICAgIGlmKGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHB1dDogZnVuY3Rpb24odXJpLCBkYXRhLCBjYWxsYmFjaywgZXJyb3JfY2FsbGJhY2spewogICAgICAgICAgICAgICAgJGh0dHAucHV0KHVyaSwgZGF0YSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cyl7CiAgICAgICAgICAgICAgICAgICAgaWYoZXJyb3JfY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfY2FsbGJhY2soZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVsZXRlOiBmdW5jdGlvbih1cmksIGNhbGxiYWNrLCBlcnJvcl9jYWxsYmFjayl7CiAgICAgICAgICAgICAgICAkaHR0cC5kZWxldGUodXJpKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTsKICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzKXsKICAgICAgICAgICAgICAgICAgICBpZihlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jYWxsYmFjayhkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH1dKQogICAgLnZhbHVlKCd2ZXJzaW9uJywgJzAuMScpOwo=')
},
{
'name': '/app/js/filters.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogRmlsdGVycyAqLwoKYW5ndWxhci5tb2R1bGUoJ215QXBwLmZpbHRlcnMnLCBbXSkuCiAgZmlsdGVyKCdpbnRlcnBvbGF0ZScsIFsndmVyc2lvbicsIGZ1bmN0aW9uKHZlcnNpb24pIHsKICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7CiAgICAgIHJldHVybiBTdHJpbmcodGV4dCkucmVwbGFjZSgvXCVWRVJTSU9OXCUvbWcsIHZlcnNpb24pOwogICAgfTsKICB9XSk7Cg==')
},
{
'name': '/app/js/utils.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgbWFuaXJ1enphbWFuIG9uIDcvNS8xNC4KICovCgoKZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHsKICAgIHZhciB2YWx1ZSA9ICI7ICIgKyBkb2N1bWVudC5jb29raWU7CiAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCgiOyAiICsgbmFtZSArICI9Iik7CiAgICBpZiAocGFydHMubGVuZ3RoID09IDIpIHJldHVybiBwYXJ0cy5wb3AoKS5zcGxpdCgiOyIpLnNoaWZ0KCk7Cn0KCmZ1bmN0aW9uIGdldFVzZXJOYW1lKGRlZmF1bHRfdXNlcil7CiAgICB2YXIgdXNlckNvb2tpZSA9IGdldENvb2tpZSgidXNlciIpOwogICAgaWYodXNlckNvb2tpZSl7CiAgICAgICAgdXNlckNvb2tpZSA9IHVzZXJDb29raWUucmVwbGFjZSgvXCIvZywgIiIpCiAgICAgICAgdmFyIGRlY29kZWQgPSBKU09OLnBhcnNlKHdpbmRvdy5hdG9iKHVzZXJDb29raWUpKTsKICAgICAgICByZXR1cm4gZGVjb2RlZFsidXNlcm5hbWUiXSB8fCBkZWZhdWx0X3VzZXI7CiAgICB9CgogICAgcmV0dXJuIGRlZmF1bHRfdXNlcjsKfQoKZnVuY3Rpb24gbG9nZ2VkSW4oKXsKICAgIHZhciB1c2VyQ29va2llID0gZ2V0Q29va2llKCJ1c2Vyc2VjcmV0Iik7CiAgICBpZih1c2VyQ29va2llKXsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQo=')
},
{
'name': '/app/js/controllers.js', 'data': base64.b64decode('')
},
{
'name': '/app/img/.gitkeep', 'data': base64.b64decode('')
},
{
'name': '/app/css/.gitkeep', 'data': base64.b64decode('')
},
{
'name': '/app/css/app.css', 'data': base64.b64decode('LyogYXBwIGNzcyBzdHlsZXNoZWV0ICovCgoubWVudSB7CiAgbGlzdC1zdHlsZTogbm9uZTsKICBib3JkZXItYm90dG9tOiAwLjFlbSBzb2xpZCBibGFjazsKICBtYXJnaW4tYm90dG9tOiAyZW07CiAgcGFkZGluZzogMCAwIDAuNWVtOwp9CgoubWVudTpiZWZvcmUgewogIGNvbnRlbnQ6ICJbIjsKfQoKLm1lbnU6YWZ0ZXIgewogIGNvbnRlbnQ6ICJdIjsKfQoKLm1lbnUgPiBsaSB7CiAgZGlzcGxheTogaW5saW5lOwp9CgoubWVudSA+IGxpOmJlZm9yZSB7CiAgY29udGVudDogInwiOwogIHBhZGRpbmctcmlnaHQ6IDAuM2VtOwp9CgoubWVudSA+IGxpOm50aC1jaGlsZCgxKTpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwogIHBhZGRpbmc6IDA7Cn0K')
},
{
'name': '/app/bower_components/html5-boilerplate/.htaccess', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/html5-boilerplate/CHANGELOG.md', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/html5-boilerplate/apple-touch-icon-precomposed.png', 'data': base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAJgAAACYCAMAAAAvHNATAAAAMFBMVEXriyPghiO7ciOZYCJsSCKDdEZGZ3A8VlwwSVEpMzYuPkMlKSpLNyEyKiEhISEWGyDowOD9AAAEVUlEQVR4Ae2ZYa7cIAyEB4iyCQR8/9u2Gz1ZRa23rDOR8oM5wffyecfAQ3toJtgEm2APygSbYBNsgk2wCTbBJlgpTwST5SjrVh4IFpO81vVVngZWQ2x5/Z3X/igwWYCjrauiPQYsBiTZ1h+0/BQwqeF36r5q8kPAFoSARV6rZn+GyhhCQJRt1WxPAJMjnKll1bzIYH6TfJcElREnWGw795OBYPLMu8o0DwBLOLG0ymiNAYLJM2yXYJj8e/wLHcxhUl1mZpWBY5JfZbhmUrnoVQaSyXMt/Tn+QgZzmNQcQqwyXF1HncvMqzKwTPrXEh+shj44iFWGKyaDhl9lYJjUNF6VgWNSx39jVRk4v0l1ubNcgmJSU9uLVGVgmDRcZjqYw6SuJcf4k8F0HXWhVRm8XGrSrrJLLsExqYmtcVyCc7DQ4CBVGS4f9m+qMnBN8qoMPJNaZfumKTQwGYtl8nQ5mK/AlpiGEoOdNJivwGrCWIIdDCUen/89AOP0d3eSSCvblsvw8EuNuJsK4ZDW9u2d/MWvMt1Mhlillbz9ZC+jYHKEW9GWJj+fy0ZTML9Ov0YTzS5YactNZEiqsc9ug/l1ejX2GQNrUhP4U//WmP/NVQbAtNJwt0ZN/maJyxHB1dgsjft3pwvRSrtXYzbr4n6dSE1asT/XOBi50hYxNRbvQTHhVo3+E6y/0rwaFexWnRjT6ADTu4f/KGFr9IO5darGZmu8BqYbiqsxl8YA00pjadwd90rWhkISsTSW5gBjbajD1ki7iTt+nU6N94OF6tboAIvjYFikrKtHowOsfjf657uPodEBRlsAreX1Hbu8aGDpK7DT5ZmX/bk4KiMcLhVNudhgciB8k3i6VDTVSAVzmAw4pKzel2LcZVJdara7wOT4eof3Lt1g/NPiIbvtkgcWv+XC0rnMN4FVx7Fa2uZ0iVtMamrnsvjBfGWBz4vc5RLXywIxWWhIbpe4XPtInw7dVfKqWW8BS7DvQVITyC7hN6n3oD036e5QZvm/hA4mh/G55DzXF0tn7Fy+ChHMLgvEQ58ud71DkRY5/Kd9pD9foHNpqpOxyOGtfYSfz6Up/3wW8i5yOE0i1e7BXnWyFjmcZbG0c+o1qvMI+LTINzJYjTCmvs/+V6UhNlf5w1H73dT3yfosZLksXLAEY+r7lP5ZSF06yh/jtW9NvSZ3z0IXD2UYM2lMvXn5V53uQxnGy0KnfuTlUivNXuQMsAhz6u3Lf4J9KCOB1f9NfS4fX7o9ixzDJpHq+OdSne5FjuGysKe+fPqTvIscQ7X/cer//9Ide5cEMK19e+rLyD8uHC4xYvLD1I9MqOHyusrRqbd1Goeyy8PfmlUSQ5GWjEV+Eczg2tt4autfV1hgbc+ez9Un2y4dYJqSHZ/LQitEMEXTkriAlnlgHVpu/mzqkgamaKrRj8YD05S9tIsp27rzwSgpTwXTTLAJNsEm2ASbYBNsgk2wCTbBbs4vAqz6xMjzVoYAAAAASUVORK5CYII=')
},
{
'name': '/app/bower_components/html5-boilerplate/robots.txt', 'data': base64.b64decode('IyByb2JvdHN0eHQub3JnLwoKVXNlci1hZ2VudDogKgo=')
},
{
'name': '/app/bower_components/html5-boilerplate/README.md', 'data': base64.b64decode('IyBbSFRNTDUgQm9pbGVycGxhdGVdKGh0dHA6Ly9odG1sNWJvaWxlcnBsYXRlLmNvbSkKCkhUTUw1IEJvaWxlcnBsYXRlIGlzIGEgcHJvZmVzc2lvbmFsIGZyb250LWVuZCB0ZW1wbGF0ZSBmb3IgYnVpbGRpbmcgZmFzdCwKcm9idXN0LCBhbmQgYWRhcHRhYmxlIHdlYiBhcHBzIG9yIHNpdGVzLgoKVGhpcyBwcm9qZWN0IGlzIHRoZSBwcm9kdWN0IG9mIG1hbnkgeWVhcnMgb2YgaXRlcmF0aXZlIGRldmVsb3BtZW50IGFuZCBjb21iaW5lZApjb21tdW5pdHkga25vd2xlZGdlLiBJdCBkb2VzIG5vdCBpbXBvc2UgYSBzcGVjaWZpYyBkZXZlbG9wbWVudCBwaGlsb3NvcGh5IG9yCmZyYW1ld29yaywgc28geW91J3JlIGZyZWUgdG8gYXJjaGl0ZWN0IHlvdXIgY29kZSBpbiB0aGUgd2F5IHRoYXQgeW91IHdhbnQuCgoqIFNvdXJjZTogW2h0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL2h0bWw1LWJvaWxlcnBsYXRlXShodHRwczovL2dpdGh1Yi5jb20vaDVicC9odG1sNS1ib2lsZXJwbGF0ZSkKKiBIb21lcGFnZTogW2h0dHA6Ly9odG1sNWJvaWxlcnBsYXRlLmNvbV0oaHR0cDovL2h0bWw1Ym9pbGVycGxhdGUuY29tKQoqIFR3aXR0ZXI6IFtAaDVicF0oaHR0cDovL3R3aXR0ZXIuY29tL2g1YnApCgoKIyMgUXVpY2sgc3RhcnQKCkNob29zZSBvbmUgb2YgdGhlIGZvbGxvd2luZyBvcHRpb25zOgoKMS4gRG93bmxvYWQgdGhlIGxhdGVzdCBzdGFibGUgcmVsZWFzZSBmcm9tCiAgIFtodG1sNWJvaWxlcnBsYXRlLmNvbV0oaHR0cDovL2h0bWw1Ym9pbGVycGxhdGUuY29tLykgb3IgYSBjdXN0b20gYnVpbGQgZnJvbQogICBbSW5pdGlhbGl6cl0oaHR0cDovL3d3dy5pbml0aWFsaXpyLmNvbSkuCjIuIENsb25lIHRoZSBnaXQgcmVwbyDigJQgYGdpdCBjbG9uZQogICBodHRwczovL2dpdGh1Yi5jb20vaDVicC9odG1sNS1ib2lsZXJwbGF0ZS5naXRgIC0gYW5kIGNoZWNrb3V0IHRoZSB0YWdnZWQKICAgcmVsZWFzZSB5b3UnZCBsaWtlIHRvIHVzZS4KCgojIyBGZWF0dXJlcwoKKiBIVE1MNSByZWFkeS4gVXNlIHRoZSBuZXcgZWxlbWVudHMgd2l0aCBjb25maWRlbmNlLgoqIENyb3NzLWJyb3dzZXIgY29tcGF0aWJsZSAoQ2hyb21lLCBPcGVyYSwgU2FmYXJpLCBGaXJlZm94IDMuNissIElFNispLgoqIERlc2lnbmVkIHdpdGggcHJvZ3Jlc3NpdmUgZW5oYW5jZW1lbnQgaW4gbWluZC4KKiBJbmNsdWRlcyBbTm9ybWFsaXplLmNzc10oaHR0cDovL25lY29sYXMuZ2l0aHViLmNvbS9ub3JtYWxpemUuY3NzLykgZm9yIENTUwogIG5vcm1hbGl6YXRpb25zIGFuZCBjb21tb24gYnVnIGZpeGVzLgoqIFRoZSBsYXRlc3QgW2pRdWVyeV0oaHR0cDovL2pxdWVyeS5jb20vKSB2aWEgQ0ROLCB3aXRoIGEgbG9jYWwgZmFsbGJhY2suCiogVGhlIGxhdGVzdCBbTW9kZXJuaXpyXShodHRwOi8vbW9kZXJuaXpyLmNvbS8pIGJ1aWxkIGZvciBmZWF0dXJlIGRldGVjdGlvbi4KKiBJRS1zcGVjaWZpYyBjbGFzc2VzIGZvciBlYXNpZXIgY3Jvc3MtYnJvd3NlciBjb250cm9sLgoqIFBsYWNlaG9sZGVyIENTUyBNZWRpYSBRdWVyaWVzLgoqIFVzZWZ1bCBDU1MgaGVscGVycy4KKiBEZWZhdWx0IHByaW50IENTUywgcGVyZm9ybWFuY2Ugb3B0aW1pemVkLgoqIFByb3RlY3Rpb24gYWdhaW5zdCBhbnkgc3RyYXkgYGNvbnNvbGUubG9nYCBjYXVzaW5nIEphdmFTY3JpcHQgZXJyb3JzIGluCiAgSUU2LzcuCiogQW4gb3B0aW1pemVkIEdvb2dsZSBBbmFseXRpY3Mgc25pcHBldC4KKiBBcGFjaGUgc2VydmVyIGNhY2hpbmcsIGNvbXByZXNzaW9uLCBhbmQgb3RoZXIgY29uZmlndXJhdGlvbiBkZWZhdWx0cyBmb3IKICBHcmFkZS1BIHBlcmZvcm1hbmNlLgoqIENyb3NzLWRvbWFpbiBBamF4IGFuZCBGbGFzaC4KKiAiRGVsZXRlLWtleSBmcmllbmRseS4iIEVhc3kgdG8gc3RyaXAgb3V0IHBhcnRzIHlvdSBkb24ndCBuZWVkLgoqIEV4dGVuc2l2ZSBpbmxpbmUgYW5kIGFjY29tcGFueWluZyBkb2N1bWVudGF0aW9uLgoKCiMjIERvY3VtZW50YXRpb24KClRha2UgYSBsb29rIGF0IHRoZSBbZG9jdW1lbnRhdGlvbiB0YWJsZSBvZiBjb250ZW50c10oZG9jL1RPQy5tZCkuIFRoaXMKZG9jdW1lbnRhdGlvbiBpcyBidW5kbGVkIHdpdGggdGhlIHByb2plY3QsIHdoaWNoIG1ha2VzIGl0IHJlYWRpbHkgYXZhaWxhYmxlIGZvcgpvZmZsaW5lIHJlYWRpbmcgYW5kIHByb3ZpZGVzIGEgdXNlZnVsIHN0YXJ0aW5nIHBvaW50IGZvciBhbnkgZG9jdW1lbnRhdGlvbiB5b3UKd2FudCB0byB3cml0ZSBhYm91dCB5b3VyIHByb2plY3QuCgoKIyMgQ29udHJpYnV0aW5nCgpBbnlvbmUgYW5kIGV2ZXJ5b25lIGlzIHdlbGNvbWUgdG8gW2NvbnRyaWJ1dGVdKENPTlRSSUJVVElORy5tZCkuIEh1bmRyZWRzIG9mCmRldmVsb3BlcnMgaGF2ZSBoZWxwZWQgbWFrZSB0aGUgSFRNTDUgQm9pbGVycGxhdGUgd2hhdCBpdCBpcyB0b2RheS4K')
},
{
'name': '/app/bower_components/html5-boilerplate/404.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KICAgIDxoZWFkPgogICAgICAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgICAgICA8dGl0bGU+UGFnZSBOb3QgRm91bmQgOig8L3RpdGxlPgogICAgICAgIDxzdHlsZT4KICAgICAgICAgICAgOjotbW96LXNlbGVjdGlvbiB7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjYjNkNGZjOwogICAgICAgICAgICAgICAgdGV4dC1zaGFkb3c6IG5vbmU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIDo6c2VsZWN0aW9uIHsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNiM2Q0ZmM7CiAgICAgICAgICAgICAgICB0ZXh0LXNoYWRvdzogbm9uZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaHRtbCB7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAzMHB4IDEwcHg7CiAgICAgICAgICAgICAgICBmb250LXNpemU6IDIwcHg7CiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDogMS40OwogICAgICAgICAgICAgICAgY29sb3I6ICM3MzczNzM7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAjZjBmMGYwOwogICAgICAgICAgICAgICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOwogICAgICAgICAgICAgICAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGh0bWwsCiAgICAgICAgICAgIGlucHV0IHsKICAgICAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAiSGVsdmV0aWNhIE5ldWUiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogICAgICAgICAgICB9CgogICAgICAgICAgICBib2R5IHsKICAgICAgICAgICAgICAgIG1heC13aWR0aDogNTAwcHg7CiAgICAgICAgICAgICAgICBfd2lkdGg6IDUwMHB4OwogICAgICAgICAgICAgICAgcGFkZGluZzogMzBweCAyMHB4IDUwcHg7CiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjYjNiM2IzOwogICAgICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4OwogICAgICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87CiAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDFweCAxMHB4ICNhN2E3YTcsIGluc2V0IDAgMXB4IDAgI2ZmZjsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmY2ZjZmM7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGgxIHsKICAgICAgICAgICAgICAgIG1hcmdpbjogMCAxMHB4OwogICAgICAgICAgICAgICAgZm9udC1zaXplOiA1MHB4OwogICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICB9CgogICAgICAgICAgICBoMSBzcGFuIHsKICAgICAgICAgICAgICAgIGNvbG9yOiAjYmJiOwogICAgICAgICAgICB9CgogICAgICAgICAgICBoMyB7CiAgICAgICAgICAgICAgICBtYXJnaW46IDEuNWVtIDAgMC41ZW07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHAgewogICAgICAgICAgICAgICAgbWFyZ2luOiAxZW0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdWwgewogICAgICAgICAgICAgICAgcGFkZGluZzogMCAwIDAgNDBweDsKICAgICAgICAgICAgICAgIG1hcmdpbjogMWVtIDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC5jb250YWluZXIgewogICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAzODBweDsKICAgICAgICAgICAgICAgIF93aWR0aDogMzgwcHg7CiAgICAgICAgICAgICAgICBtYXJnaW46IDAgYXV0bzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgLyogZ29vZ2xlIHNlYXJjaCAqLwoKICAgICAgICAgICAgI2dvb2ctZml4dXJsIHVsIHsKICAgICAgICAgICAgICAgIGxpc3Qtc3R5bGU6IG5vbmU7CiAgICAgICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgICAgICAgICAgbWFyZ2luOiAwOwogICAgICAgICAgICB9CgogICAgICAgICAgICAjZ29vZy1maXh1cmwgZm9ybSB7CiAgICAgICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICNnb29nLXdtLXF0LAogICAgICAgICAgICAjZ29vZy13bS1zYiB7CiAgICAgICAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjYmJiOwogICAgICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgICAgICAgICAgICAgbGluZS1oZWlnaHQ6IG5vcm1hbDsKICAgICAgICAgICAgICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7CiAgICAgICAgICAgICAgICBjb2xvcjogIzQ0NDsKICAgICAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDJweDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI2dvb2ctd20tcXQgewogICAgICAgICAgICAgICAgd2lkdGg6IDIyMHB4OwogICAgICAgICAgICAgICAgaGVpZ2h0OiAyMHB4OwogICAgICAgICAgICAgICAgcGFkZGluZzogNXB4OwogICAgICAgICAgICAgICAgbWFyZ2luOiA1cHggMTBweCAwIDA7CiAgICAgICAgICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwIDFweCAxcHggI2NjYzsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI2dvb2ctd20tc2IgewogICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICAgICAgaGVpZ2h0OiAzMnB4OwogICAgICAgICAgICAgICAgcGFkZGluZzogMCAxMHB4OwogICAgICAgICAgICAgICAgbWFyZ2luOiA1cHggMCAwOwogICAgICAgICAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7CiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChyZ2JhKDI1NSwyNTUsMjU1LDApLCAjZjFmMWYxKTsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IC1tb3otbGluZWFyLWdyYWRpZW50KHJnYmEoMjU1LDI1NSwyNTUsMCksICNmMWYxZjEpOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogLW1zLWxpbmVhci1ncmFkaWVudChyZ2JhKDI1NSwyNTUsMjU1LDApLCAjZjFmMWYxKTsKICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IC1vLWxpbmVhci1ncmFkaWVudChyZ2JhKDI1NSwyNTUsMjU1LDApLCAjZjFmMWYxKTsKICAgICAgICAgICAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsKICAgICAgICAgICAgICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTsKICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U6IG5vbmU7CiAgICAgICAgICAgICAgICAqb3ZlcmZsb3c6IHZpc2libGU7CiAgICAgICAgICAgICAgICAqZGlzcGxheTogaW5saW5lOwogICAgICAgICAgICAgICAgKnpvb206IDE7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICNnb29nLXdtLXNiOmhvdmVyLAogICAgICAgICAgICAjZ29vZy13bS1zYjpmb2N1cyB7CiAgICAgICAgICAgICAgICBib3JkZXItY29sb3I6ICNhYWE7CiAgICAgICAgICAgICAgICBib3gtc2hhZG93OiAwIDFweCAxcHggcmdiYSgwLCAwLCAwLCAwLjEpOwogICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgI2dvb2ctd20tcXQ6aG92ZXIsCiAgICAgICAgICAgICNnb29nLXdtLXF0OmZvY3VzIHsKICAgICAgICAgICAgICAgIGJvcmRlci1jb2xvcjogIzEwNWNiNjsKICAgICAgICAgICAgICAgIG91dGxpbmU6IDA7CiAgICAgICAgICAgICAgICBjb2xvcjogIzIyMjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIgewogICAgICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgICAgIGJvcmRlcjogMDsKICAgICAgICAgICAgfQogICAgICAgIDwvc3R5bGU+CiAgICA8L2hlYWQ+CiAgICA8Ym9keT4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8aDE+Tm90IGZvdW5kIDxzcGFuPjooPC9zcGFuPjwvaDE+CiAgICAgICAgICAgIDxwPlNvcnJ5LCBidXQgdGhlIHBhZ2UgeW91IHdlcmUgdHJ5aW5nIHRvIHZpZXcgZG9lcyBub3QgZXhpc3QuPC9wPgogICAgICAgICAgICA8cD5JdCBsb29rcyBsaWtlIHRoaXMgd2FzIHRoZSByZXN1bHQgb2YgZWl0aGVyOjwvcD4KICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgPGxpPmEgbWlzdHlwZWQgYWRkcmVzczwvbGk+CiAgICAgICAgICAgICAgICA8bGk+YW4gb3V0LW9mLWRhdGUgbGluazwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDxzY3JpcHQ+CiAgICAgICAgICAgICAgICB2YXIgR09PR19GSVhVUkxfTEFORyA9IChuYXZpZ2F0b3IubGFuZ3VhZ2UgfHwgJycpLnNsaWNlKDAsMiksR09PR19GSVhVUkxfU0lURSA9IGxvY2F0aW9uLmhvc3Q7CiAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICA8c2NyaXB0IHNyYz0iLy9saW5raGVscC5jbGllbnRzLmdvb2dsZS5jb20vdGJwcm94eS9saC93bS9maXh1cmwuanMiPjwvc2NyaXB0PgogICAgICAgIDwvZGl2PgogICAgPC9ib2R5Pgo8L2h0bWw+Cg==')
},
{
'name': '/app/bower_components/html5-boilerplate/crossdomain.xml', 'data': base64.b64decode('PD94bWwgdmVyc2lvbj0iMS4wIj8+CjwhRE9DVFlQRSBjcm9zcy1kb21haW4tcG9saWN5IFNZU1RFTSAiaHR0cDovL3d3dy5hZG9iZS5jb20veG1sL2R0ZHMvY3Jvc3MtZG9tYWluLXBvbGljeS5kdGQiPgo8Y3Jvc3MtZG9tYWluLXBvbGljeT4KICAgIDwhLS0gUmVhZCB0aGlzOiB3d3cuYWRvYmUuY29tL2Rldm5ldC9hcnRpY2xlcy9jcm9zc2RvbWFpbl9wb2xpY3lfZmlsZV9zcGVjLmh0bWwgLS0+CgogICAgPCEtLSBNb3N0IHJlc3RyaWN0aXZlIHBvbGljeTogLS0+CiAgICA8c2l0ZS1jb250cm9sIHBlcm1pdHRlZC1jcm9zcy1kb21haW4tcG9saWNpZXM9Im5vbmUiLz4KCiAgICA8IS0tIExlYXN0IHJlc3RyaWN0aXZlIHBvbGljeTogLS0+CiAgICA8IS0tCiAgICA8c2l0ZS1jb250cm9sIHBlcm1pdHRlZC1jcm9zcy1kb21haW4tcG9saWNpZXM9ImFsbCIvPgogICAgPGFsbG93LWFjY2Vzcy1mcm9tIGRvbWFpbj0iKiIgdG8tcG9ydHM9IioiIHNlY3VyZT0iZmFsc2UiLz4KICAgIDxhbGxvdy1odHRwLXJlcXVlc3QtaGVhZGVycy1mcm9tIGRvbWFpbj0iKiIgaGVhZGVycz0iKiIgc2VjdXJlPSJmYWxzZSIvPgogICAgLS0+CjwvY3Jvc3MtZG9tYWluLXBvbGljeT4K')
},
{
'name': '/app/bower_components/html5-boilerplate/CONTRIBUTING.md', 'data': base64.b64decode('IyBDb250cmlidXRpbmcgdG8gSFRNTDUgQm9pbGVycGxhdGUKCuKZpSBbSFRNTDUgQm9pbGVycGxhdGVdKGh0dHA6Ly9odG1sNWJvaWxlcnBsYXRlLmNvbSkgYW5kIHdhbnQgdG8gZ2V0IGludm9sdmVkPwpUaGFua3MhIFRoZXJlIGFyZSBwbGVudHkgb2Ygd2F5cyB5b3UgY2FuIGhlbHAhCgpQbGVhc2UgdGFrZSBhIG1vbWVudCB0byByZXZpZXcgdGhpcyBkb2N1bWVudCBpbiBvcmRlciB0byBtYWtlIHRoZSBjb250cmlidXRpb24KcHJvY2VzcyBlYXN5IGFuZCBlZmZlY3RpdmUgZm9yIGV2ZXJ5b25lIGludm9sdmVkLgoKRm9sbG93aW5nIHRoZXNlIGd1aWRlbGluZXMgaGVscHMgdG8gY29tbXVuaWNhdGUgdGhhdCB5b3UgcmVzcGVjdCB0aGUgdGltZSBvZgp0aGUgZGV2ZWxvcGVycyBtYW5hZ2luZyBhbmQgZGV2ZWxvcGluZyB0aGlzIG9wZW4gc291cmNlIHByb2plY3QuIEluIHJldHVybiwKdGhleSBzaG91bGQgcmVjaXByb2NhdGUgdGhhdCByZXNwZWN0IGluIGFkZHJlc3NpbmcgeW91ciBpc3N1ZSBvciBhc3Nlc3NpbmcKcGF0Y2hlcyBhbmQgZmVhdHVyZXMuCgoKIyMgVXNpbmcgdGhlIGlzc3VlIHRyYWNrZXIKClRoZSBbaXNzdWUgdHJhY2tlcl0oaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvaHRtbDUtYm9pbGVycGxhdGUvaXNzdWVzKSBpcwp0aGUgcHJlZmVycmVkIGNoYW5uZWwgZm9yIFtidWcgcmVwb3J0c10oI2J1Z3MpLCBbZmVhdHVyZXMgcmVxdWVzdHNdKCNmZWF0dXJlcykKYW5kIFtzdWJtaXR0aW5nIHB1bGwgcmVxdWVzdHNdKCNwdWxsLXJlcXVlc3RzKSwgYnV0IHBsZWFzZSByZXNwZWN0IHRoZSBmb2xsb3dpbmcKcmVzdHJpY3Rpb25zOgoKKiBQbGVhc2UgKipkbyBub3QqKiB1c2UgdGhlIGlzc3VlIHRyYWNrZXIgZm9yIHBlcnNvbmFsIHN1cHBvcnQgcmVxdWVzdHMgKHVzZQogIFtTdGFjayBPdmVyZmxvd10oaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy90YWdnZWQvaHRtbDVib2lsZXJwbGF0ZSkKICBvciBJUkMpLgoKKiBQbGVhc2UgKipkbyBub3QqKiBkZXJhaWwgb3IgdHJvbGwgaXNzdWVzLiBLZWVwIHRoZSBkaXNjdXNzaW9uIG9uIHRvcGljIGFuZAogIHJlc3BlY3QgdGhlIG9waW5pb25zIG9mIG90aGVycy4KCiogUGxlYXNlICoqZG8gbm90Kiogb3BlbiBpc3N1ZXMgb3IgcHVsbCByZXF1ZXN0cyByZWdhcmRpbmcgdGhlIGNvZGUgaW4KICBbYC5odGFjY2Vzc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL3NlcnZlci1jb25maWdzLWFwYWNoZSksCiAgW2BqUXVlcnlgXShodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS8pLAogIFtgTW9kZXJuaXpyYF0oaHR0cHM6Ly9naXRodWIuY29tL01vZGVybml6ci9Nb2Rlcm5penIpIG9yCiAgW2BOb3JtYWxpemUuY3NzYF0oaHR0cHM6Ly9naXRodWIuY29tL25lY29sYXMvbm9ybWFsaXplLmNzcykgKG9wZW4gdGhlbSBpbgogIHRoZWlyIHJlc3BlY3RpdmUgcmVwb3NpdG9yaWVzKS4KCgo8YSBuYW1lPSJidWdzIj48L2E+CiMjIEJ1ZyByZXBvcnRzCgpBIGJ1ZyBpcyBhIF9kZW1vbnN0cmFibGUgcHJvYmxlbV8gdGhhdCBpcyBjYXVzZWQgYnkgdGhlIGNvZGUgaW4gdGhlIHJlcG9zaXRvcnkuCkdvb2QgYnVnIHJlcG9ydHMgYXJlIGV4dHJlbWVseSBoZWxwZnVsIC0gdGhhbmsgeW91IQoKR3VpZGVsaW5lcyBmb3IgYnVnIHJlcG9ydHM6CgoxLiAqKlVzZSB0aGUgR2l0SHViIGlzc3VlIHNlYXJjaCoqICZtZGFzaDsgY2hlY2sgaWYgdGhlIGlzc3VlIGhhcyBhbHJlYWR5IGJlZW4KICAgcmVwb3J0ZWQuCgoyLiAqKkNoZWNrIGlmIHRoZSBpc3N1ZSBoYXMgYmVlbiBmaXhlZCoqICZtZGFzaDsgdHJ5IHRvIHJlcHJvZHVjZSBpdCB1c2luZyB0aGUKICAgbGF0ZXN0IGBtYXN0ZXJgIG9yIGRldmVsb3BtZW50IGJyYW5jaCBpbiB0aGUgcmVwb3NpdG9yeS4KCjMuICoqSXNvbGF0ZSB0aGUgcHJvYmxlbSoqICZtZGFzaDsgaWRlYWxseSBjcmVhdGUgYSBbcmVkdWNlZCB0ZXN0CiAgIGNhc2VdKGh0dHA6Ly9jc3MtdHJpY2tzLmNvbS82MjYzLXJlZHVjZWQtdGVzdC1jYXNlcy8pIGFuZCBhIGxpdmUgZXhhbXBsZS4KCkEgZ29vZCBidWcgcmVwb3J0IHNob3VsZG4ndCBsZWF2ZSBvdGhlcnMgbmVlZGluZyB0byBjaGFzZSB5b3UgdXAgZm9yIG1vcmUKaW5mb3JtYXRpb24uIFBsZWFzZSB0cnkgdG8gYmUgYXMgZGV0YWlsZWQgYXMgcG9zc2libGUgaW4geW91ciByZXBvcnQuIFdoYXQgaXMKeW91ciBlbnZpcm9ubWVudD8gV2hhdCBzdGVwcyB3aWxsIHJlcHJvZHVjZSB0aGUgaXNzdWU/IFdoYXQgYnJvd3NlcihzKSBhbmQgT1MKZXhwZXJpZW5jZSB0aGUgcHJvYmxlbT8gV2hhdCB3b3VsZCB5b3UgZXhwZWN0IHRvIGJlIHRoZSBvdXRjb21lPyBBbGwgdGhlc2UKZGV0YWlscyB3aWxsIGhlbHAgcGVvcGxlIHRvIGZpeCBhbnkgcG90ZW50aWFsIGJ1Z3MuCgpFeGFtcGxlOgoKPiBTaG9ydCBhbmQgZGVzY3JpcHRpdmUgZXhhbXBsZSBidWcgcmVwb3J0IHRpdGxlCj4KPiBBIHN1bW1hcnkgb2YgdGhlIGlzc3VlIGFuZCB0aGUgYnJvd3Nlci9PUyBlbnZpcm9ubWVudCBpbiB3aGljaCBpdCBvY2N1cnMuIElmCj4gc3VpdGFibGUsIGluY2x1ZGUgdGhlIHN0ZXBzIHJlcXVpcmVkIHRvIHJlcHJvZHVjZSB0aGUgYnVnLgo+Cj4gMS4gVGhpcyBpcyB0aGUgZmlyc3Qgc3RlcAo+IDIuIFRoaXMgaXMgdGhlIHNlY29uZCBzdGVwCj4gMy4gRnVydGhlciBzdGVwcywgZXRjLgo+Cj4gYDx1cmw+YCAtIGEgbGluayB0byB0aGUgcmVkdWNlZCB0ZXN0IGNhc2UKPgo+IEFueSBvdGhlciBpbmZvcm1hdGlvbiB5b3Ugd2FudCB0byBzaGFyZSB0aGF0IGlzIHJlbGV2YW50IHRvIHRoZSBpc3N1ZSBiZWluZwo+IHJlcG9ydGVkLiBUaGlzIG1pZ2h0IGluY2x1ZGUgdGhlIGxpbmVzIG9mIGNvZGUgdGhhdCB5b3UgaGF2ZSBpZGVudGlmaWVkIGFzCj4gY2F1c2luZyB0aGUgYnVnLCBhbmQgcG90ZW50aWFsIHNvbHV0aW9ucyAoYW5kIHlvdXIgb3BpbmlvbnMgb24gdGhlaXIKPiBtZXJpdHMpLgoKCjxhIG5hbWU9ImZlYXR1cmVzIj48L2E+CiMjIEZlYXR1cmUgcmVxdWVzdHMKCkZlYXR1cmUgcmVxdWVzdHMgYXJlIHdlbGNvbWUuIEJ1dCB0YWtlIGEgbW9tZW50IHRvIGZpbmQgb3V0IHdoZXRoZXIgeW91ciBpZGVhCmZpdHMgd2l0aCB0aGUgc2NvcGUgYW5kIGFpbXMgb2YgdGhlIHByb2plY3QuIEl0J3MgdXAgdG8gKnlvdSogdG8gbWFrZSBhIHN0cm9uZwpjYXNlIHRvIGNvbnZpbmNlIHRoZSBwcm9qZWN0J3MgZGV2ZWxvcGVycyBvZiB0aGUgbWVyaXRzIG9mIHRoaXMgZmVhdHVyZS4gUGxlYXNlCnByb3ZpZGUgYXMgbXVjaCBkZXRhaWwgYW5kIGNvbnRleHQgYXMgcG9zc2libGUuCgoKPGEgbmFtZT0icHVsbC1yZXF1ZXN0cyI+PC9hPgojIyBQdWxsIHJlcXVlc3RzCgpHb29kIHB1bGwgcmVxdWVzdHMgLSBwYXRjaGVzLCBpbXByb3ZlbWVudHMsIG5ldyBmZWF0dXJlcyAtIGFyZSBhIGZhbnRhc3RpYwpoZWxwLiBUaGV5IHNob3VsZCByZW1haW4gZm9jdXNlZCBpbiBzY29wZSBhbmQgYXZvaWQgY29udGFpbmluZyB1bnJlbGF0ZWQKY29tbWl0cy4KCioqUGxlYXNlIGFzayBmaXJzdCoqIGJlZm9yZSBlbWJhcmtpbmcgb24gYW55IHNpZ25pZmljYW50IHB1bGwgcmVxdWVzdCAoZS5nLgppbXBsZW1lbnRpbmcgZmVhdHVyZXMsIHJlZmFjdG9yaW5nIGNvZGUsIHBvcnRpbmcgdG8gYSBkaWZmZXJlbnQgbGFuZ3VhZ2UpLApvdGhlcndpc2UgeW91IHJpc2sgc3BlbmRpbmcgYSBsb3Qgb2YgdGltZSB3b3JraW5nIG9uIHNvbWV0aGluZyB0aGF0IHRoZQpwcm9qZWN0J3MgZGV2ZWxvcGVycyBtaWdodCBub3Qgd2FudCB0byBtZXJnZSBpbnRvIHRoZSBwcm9qZWN0LgoKUGxlYXNlIGFkaGVyZSB0byB0aGUgY29kaW5nIGNvbnZlbnRpb25zIHVzZWQgdGhyb3VnaG91dCBhIHByb2plY3QgKGluZGVudGF0aW9uLAphY2N1cmF0ZSBjb21tZW50cywgZXRjLikgYW5kIGFueSBvdGhlciByZXF1aXJlbWVudHMgKHN1Y2ggYXMgdGVzdCBjb3ZlcmFnZSkuCgpBZGhlcmluZyB0byB0aGUgZm9sbG93aW5nIHRoaXMgcHJvY2VzcyBpcyB0aGUgYmVzdCB3YXkgdG8gZ2V0IHlvdXIgd29yawppbmNsdWRlZCBpbiB0aGUgcHJvamVjdDoKCjEuIFtGb3JrXShodHRwOi8vaGVscC5naXRodWIuY29tL2ZvcmstYS1yZXBvLykgdGhlIHByb2plY3QsIGNsb25lIHlvdXIgZm9yaywKICAgYW5kIGNvbmZpZ3VyZSB0aGUgcmVtb3RlczoKCiAgIGBgYGJhc2gKICAgIyBDbG9uZSB5b3VyIGZvcmsgb2YgdGhlIHJlcG8gaW50byB0aGUgY3VycmVudCBkaXJlY3RvcnkKICAgZ2l0IGNsb25lIGh0dHBzOi8vZ2l0aHViLmNvbS88eW91ci11c2VybmFtZT4vaHRtbDUtYm9pbGVycGxhdGUuZ2l0CiAgICMgTmF2aWdhdGUgdG8gdGhlIG5ld2x5IGNsb25lZCBkaXJlY3RvcnkKICAgY2QgaHRtbDUtYm9pbGVycGxhdGUKICAgIyBBc3NpZ24gdGhlIG9yaWdpbmFsIHJlcG8gdG8gYSByZW1vdGUgY2FsbGVkICJ1cHN0cmVhbSIKICAgZ2l0IHJlbW90ZSBhZGQgdXBzdHJlYW0gaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvaHRtbDUtYm9pbGVycGxhdGUuZ2l0CiAgIGBgYAoKMi4gSWYgeW91IGNsb25lZCBhIHdoaWxlIGFnbywgZ2V0IHRoZSBsYXRlc3QgY2hhbmdlcyBmcm9tIHVwc3RyZWFtOgoKICAgYGBgYmFzaAogICBnaXQgY2hlY2tvdXQgbWFzdGVyCiAgIGdpdCBwdWxsIHVwc3RyZWFtIG1hc3RlcgogICBgYGAKCjMuIENyZWF0ZSBhIG5ldyB0b3BpYyBicmFuY2ggKG9mZiB0aGUgbWFpbiBwcm9qZWN0IGRldmVsb3BtZW50IGJyYW5jaCkgdG8KICAgY29udGFpbiB5b3VyIGZlYXR1cmUsIGNoYW5nZSwgb3IgZml4OgoKICAgYGBgYmFzaAogICBnaXQgY2hlY2tvdXQgLWIgPHRvcGljLWJyYW5jaC1uYW1lPgogICBgYGAKCjQuIENvbW1pdCB5b3VyIGNoYW5nZXMgaW4gbG9naWNhbCBjaHVua3MuIFBsZWFzZSBhZGhlcmUgdG8gdGhlc2UgW2dpdCBjb21taXQKICAgbWVzc2FnZSBndWlkZWxpbmVzXShodHRwOi8vdGJhZ2dlcnkuY29tLzIwMDgvMDQvMTkvYS1ub3RlLWFib3V0LWdpdC1jb21taXQtbWVzc2FnZXMuaHRtbCkKICAgb3IgeW91ciBjb2RlIGlzIHVubGlrZWx5IGJlIG1lcmdlZCBpbnRvIHRoZSBtYWluIHByb2plY3QuIFVzZSBHaXQncwogICBbaW50ZXJhY3RpdmUgcmViYXNlXShodHRwczovL2hlbHAuZ2l0aHViLmNvbS9hcnRpY2xlcy9pbnRlcmFjdGl2ZS1yZWJhc2UpCiAgIGZlYXR1cmUgdG8gdGlkeSB1cCB5b3VyIGNvbW1pdHMgYmVmb3JlIG1ha2luZyB0aGVtIHB1YmxpYy4KCjUuIExvY2FsbHkgbWVyZ2UgKG9yIHJlYmFzZSkgdGhlIHVwc3RyZWFtIGRldmVsb3BtZW50IGJyYW5jaCBpbnRvIHlvdXIgdG9waWMgYnJhbmNoOgoKICAgYGBgYmFzaAogICBnaXQgcHVsbCBbLS1yZWJhc2VdIHVwc3RyZWFtIG1hc3RlcgogICBgYGAKCjYuIFB1c2ggeW91ciB0b3BpYyBicmFuY2ggdXAgdG8geW91ciBmb3JrOgoKICAgYGBgYmFzaAogICBnaXQgcHVzaCBvcmlnaW4gPHRvcGljLWJyYW5jaC1uYW1lPgogICBgYGAKCjcuIFtPcGVuIGEgUHVsbCBSZXF1ZXN0XShodHRwczovL2hlbHAuZ2l0aHViLmNvbS9hcnRpY2xlcy91c2luZy1wdWxsLXJlcXVlc3RzLykKICAgIHdpdGggYSBjbGVhciB0aXRsZSBhbmQgZGVzY3JpcHRpb24uCgoqKklNUE9SVEFOVCoqOiBCeSBzdWJtaXR0aW5nIGEgcGF0Y2gsIHlvdSBhZ3JlZSB0byBhbGxvdyB0aGUgcHJvamVjdCBvd25lcnMgdG8KbGljZW5zZSB5b3VyIHdvcmsgdW5kZXIgdGhlIHRoZSB0ZXJtcyBvZiB0aGUgW01JVCBMaWNlbnNlXShMSUNFTlNFLm1kKS4K')
},
{
'name': '/app/bower_components/html5-boilerplate/.gitignore', 'data': base64.b64decode('IyBJbmNsdWRlIHlvdXIgcHJvamVjdC1zcGVjaWZpYyBpZ25vcmVzIGluIHRoaXMgZmlsZQojIFJlYWQgYWJvdXQgaG93IHRvIHVzZSAuZ2l0aWdub3JlOiBodHRwczovL2hlbHAuZ2l0aHViLmNvbS9hcnRpY2xlcy9pZ25vcmluZy1maWxlcwo=')
},
{
'name': '/app/bower_components/html5-boilerplate/index.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjwhLS1baWYgbHQgSUUgN10+ICAgICAgPGh0bWwgY2xhc3M9Im5vLWpzIGx0LWllOSBsdC1pZTggbHQtaWU3Ij4gPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+ICAgICAgICAgPGh0bWwgY2xhc3M9Im5vLWpzIGx0LWllOSBsdC1pZTgiPiA8IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4gICAgICAgICA8aHRtbCBjbGFzcz0ibm8tanMgbHQtaWU5Ij4gPCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOF0+PCEtLT4gPGh0bWwgY2xhc3M9Im5vLWpzIj4gPCEtLTwhW2VuZGlmXS0tPgogICAgPGhlYWQ+CiAgICAgICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgICAgIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgICAgICAgPHRpdGxlPjwvdGl0bGU+CiAgICAgICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiI+CiAgICAgICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KCiAgICAgICAgPCEtLSBQbGFjZSBmYXZpY29uLmljbyBhbmQgYXBwbGUtdG91Y2gtaWNvbi5wbmcgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IC0tPgoKICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzcy9ub3JtYWxpemUuY3NzIj4KICAgICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzcy9tYWluLmNzcyI+CiAgICAgICAgPHNjcmlwdCBzcmM9ImpzL3ZlbmRvci9tb2Rlcm5penItMi42LjIubWluLmpzIj48L3NjcmlwdD4KICAgIDwvaGVhZD4KICAgIDxib2R5PgogICAgICAgIDwhLS1baWYgbHQgSUUgN10+CiAgICAgICAgICAgIDxwIGNsYXNzPSJicm93c2VoYXBweSI+WW91IGFyZSB1c2luZyBhbiA8c3Ryb25nPm91dGRhdGVkPC9zdHJvbmc+IGJyb3dzZXIuIFBsZWFzZSA8YSBocmVmPSJodHRwOi8vYnJvd3NlaGFwcHkuY29tLyI+dXBncmFkZSB5b3VyIGJyb3dzZXI8L2E+IHRvIGltcHJvdmUgeW91ciBleHBlcmllbmNlLjwvcD4KICAgICAgICA8IVtlbmRpZl0tLT4KCiAgICAgICAgPCEtLSBBZGQgeW91ciBzaXRlIG9yIGFwcGxpY2F0aW9uIGNvbnRlbnQgaGVyZSAtLT4KICAgICAgICA8cD5IZWxsbyB3b3JsZCEgVGhpcyBpcyBIVE1MNSBCb2lsZXJwbGF0ZS48L3A+CgogICAgICAgIDxzY3JpcHQgc3JjPSIvL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjEwLjIvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdD53aW5kb3cualF1ZXJ5IHx8IGRvY3VtZW50LndyaXRlKCc8c2NyaXB0IHNyYz0ianMvdmVuZG9yL2pxdWVyeS0xLjEwLjIubWluLmpzIj48XC9zY3JpcHQ+Jyk8L3NjcmlwdD4KICAgICAgICA8c2NyaXB0IHNyYz0ianMvcGx1Z2lucy5qcyI+PC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCBzcmM9ImpzL21haW4uanMiPjwvc2NyaXB0PgoKICAgICAgICA8IS0tIEdvb2dsZSBBbmFseXRpY3M6IGNoYW5nZSBVQS1YWFhYWC1YIHRvIGJlIHlvdXIgc2l0ZSdzIElELiAtLT4KICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICAoZnVuY3Rpb24oYixvLGksbCxlLHIpe2IuR29vZ2xlQW5hbHl0aWNzT2JqZWN0PWw7YltsXXx8KGJbbF09CiAgICAgICAgICAgIGZ1bmN0aW9uKCl7KGJbbF0ucT1iW2xdLnF8fFtdKS5wdXNoKGFyZ3VtZW50cyl9KTtiW2xdLmw9K25ldyBEYXRlOwogICAgICAgICAgICBlPW8uY3JlYXRlRWxlbWVudChpKTtyPW8uZ2V0RWxlbWVudHNCeVRhZ05hbWUoaSlbMF07CiAgICAgICAgICAgIGUuc3JjPScvL3d3dy5nb29nbGUtYW5hbHl0aWNzLmNvbS9hbmFseXRpY3MuanMnOwogICAgICAgICAgICByLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUscil9KHdpbmRvdyxkb2N1bWVudCwnc2NyaXB0JywnZ2EnKSk7CiAgICAgICAgICAgIGdhKCdjcmVhdGUnLCdVQS1YWFhYWC1YJyk7Z2EoJ3NlbmQnLCdwYWdldmlldycpOwogICAgICAgIDwvc2NyaXB0PgogICAgPC9ib2R5Pgo8L2h0bWw+Cg==')
},
{
'name': '/app/bower_components/html5-boilerplate/LICENSE.md', 'data': base64.b64decode('Q29weXJpZ2h0IChjKSBIVE1MNSBCb2lsZXJwbGF0ZQoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZgp0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbgp0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvCnVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzCm9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbwpzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwKY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLApPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRQpTT0ZUV0FSRS4K')
},
{
'name': '/app/bower_components/html5-boilerplate/humans.txt', 'data': base64.b64decode('IyBodW1hbnN0eHQub3JnLwojIFRoZSBodW1hbnMgcmVzcG9uc2libGUgJiB0ZWNobm9sb2d5IGNvbG9waG9uCgojIFRFQU0KCiAgICA8bmFtZT4gLS0gPHJvbGU+IC0tIDx0d2l0dGVyPgoKIyBUSEFOS1MKCiAgICA8bmFtZT4KCiMgVEVDSE5PTE9HWSBDT0xPUEhPTgoKICAgIEhUTUw1LCBDU1MzCiAgICBOb3JtYWxpemUuY3NzLCBqUXVlcnksIE1vZGVybml6cgo=')
},
{
'name': '/app/bower_components/html5-boilerplate/.gitattributes', 'data': base64.b64decode('KiB0ZXh0PWF1dG8=')
},
{
'name': '/app/bower_components/html5-boilerplate/.bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImh0bWw1LWJvaWxlcnBsYXRlIiwKICAiaG9tZXBhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvaHRtbDUtYm9pbGVycGxhdGUiLAogICJ2ZXJzaW9uIjogIjQuMy4wIiwKICAiX3JlbGVhc2UiOiAiNC4zLjAiLAogICJfcmVzb2x1dGlvbiI6IHsKICAgICJ0eXBlIjogInZlcnNpb24iLAogICAgInRhZyI6ICJ2NC4zLjAiLAogICAgImNvbW1pdCI6ICI3MmNkZjFlOTZjNjUwNmM3NmM1MWU1M2FiYzFmMmJkMjI0Nzc2NjQ5IgogIH0sCiAgIl9zb3VyY2UiOiAiZ2l0Oi8vZ2l0aHViLmNvbS9oNWJwL2h0bWw1LWJvaWxlcnBsYXRlLmdpdCIsCiAgIl90YXJnZXQiOiAifjQuMy4wIiwKICAiX29yaWdpbmFsU291cmNlIjogImh0bWw1LWJvaWxlcnBsYXRlIgp9')
},
{
'name': '/app/bower_components/html5-boilerplate/favicon.ico', 'data': base64.b64decode('AAABAAEAICAQAAEABADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYGyAAISAgAA4gMQAFKUkAATVlAABFhQAAUJgAAFamAABhuQAFZ8MACGzIAA1xzAATd9QAHYHbAAAAAAAAAAAAERERERERERERERERERERERERERERERERERERERERERERERFDERERERERERA0EREREREQWDAREREREREEpBERERERESq1IRERERECbHIREREREREFy2MREREQOLtRERERERERFKu4QhERJKu5QRERERERERKKqrUhE2yqpyEREREREREQXKqsgzi6qrURERERERERETuqqrqqqqmUEREREREREREouqqqqqqrchERERERERERBcqqqqqqrFERERERERERERO6qqqqqqkxERERERERERAmqqqqqqqqUhEREREREREEnKqqqqqqqshCERERERECbMqqqqqqqqqstSEREREQSdqqqqqqqqqqqr2EAREQJsyqqqqqqqqqqqqqzFIRJd3d3d3duqqqq93d3d3cUjdlVVVVVYuqqshVVVVVVnMRARERERBdqqvVARERERARERERERERO7u8kxEREREREREREREREQjbvXIREREREREREREREREF271RERERERERERERERERE8zKMRERERERERERERERERCN1yEREREREREREREREREQXdURERERERERERERERERET2zEREREREREREREREREREKghERERERERERERERERERFnERERERERERERERERERERMxEREREREREREREREREREREREREREREREAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==')
},
{
'name': '/app/bower_components/html5-boilerplate/js/main.js', 'data': base64.b64decode('Cg==')
},
{
'name': '/app/bower_components/html5-boilerplate/js/plugins.js', 'data': base64.b64decode('Ly8gQXZvaWQgYGNvbnNvbGVgIGVycm9ycyBpbiBicm93c2VycyB0aGF0IGxhY2sgYSBjb25zb2xlLgooZnVuY3Rpb24oKSB7CiAgICB2YXIgbWV0aG9kOwogICAgdmFyIG5vb3AgPSBmdW5jdGlvbiAoKSB7fTsKICAgIHZhciBtZXRob2RzID0gWwogICAgICAgICdhc3NlcnQnLCAnY2xlYXInLCAnY291bnQnLCAnZGVidWcnLCAnZGlyJywgJ2RpcnhtbCcsICdlcnJvcicsCiAgICAgICAgJ2V4Y2VwdGlvbicsICdncm91cCcsICdncm91cENvbGxhcHNlZCcsICdncm91cEVuZCcsICdpbmZvJywgJ2xvZycsCiAgICAgICAgJ21hcmtUaW1lbGluZScsICdwcm9maWxlJywgJ3Byb2ZpbGVFbmQnLCAndGFibGUnLCAndGltZScsICd0aW1lRW5kJywKICAgICAgICAndGltZVN0YW1wJywgJ3RyYWNlJywgJ3dhcm4nCiAgICBdOwogICAgdmFyIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoOwogICAgdmFyIGNvbnNvbGUgPSAod2luZG93LmNvbnNvbGUgPSB3aW5kb3cuY29uc29sZSB8fCB7fSk7CgogICAgd2hpbGUgKGxlbmd0aC0tKSB7CiAgICAgICAgbWV0aG9kID0gbWV0aG9kc1tsZW5ndGhdOwoKICAgICAgICAvLyBPbmx5IHN0dWIgdW5kZWZpbmVkIG1ldGhvZHMuCiAgICAgICAgaWYgKCFjb25zb2xlW21ldGhvZF0pIHsKICAgICAgICAgICAgY29uc29sZVttZXRob2RdID0gbm9vcDsKICAgICAgICB9CiAgICB9Cn0oKSk7CgovLyBQbGFjZSBhbnkgalF1ZXJ5L2hlbHBlciBwbHVnaW5zIGluIGhlcmUuCg==')
},
{
'name': '/app/bower_components/html5-boilerplate/js/vendor/jquery-1.10.2.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/html5-boilerplate/js/vendor/modernizr-2.6.2.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/html5-boilerplate/img/.gitignore', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/faq.md', 'data': base64.b64decode('W0hUTUw1IEJvaWxlcnBsYXRlIGhvbWVwYWdlXShodHRwOi8vaHRtbDVib2lsZXJwbGF0ZS5jb20pIHwgW0RvY3VtZW50YXRpb24KdGFibGUgb2YgY29udGVudHNdKFRPQy5tZCkKCiMgRnJlcXVlbnRseSBhc2tlZCBxdWVzdGlvbnMKCiMjIyBXaHkgaXMgdGhlIFVSTCBmb3IgalF1ZXJ5IHdpdGhvdXQgImh0dHAiPwoKVGhpcyBpcyBhbiBpbnRlbnRpb25hbCB1c2Ugb2YgW3Byb3RvY29sLXJlbGF0aXZlClVSTHNdKGh0dHA6Ly9wYXVsaXJpc2guY29tLzIwMTAvdGhlLXByb3RvY29sLXJlbGF0aXZlLXVybC8pCgoqKk4uQi4qKiBVc2luZyBhIHByb3RvY29sLXJlbGF0aXZlIFVSTCBmb3IgZmlsZXMgdGhhdCBleGlzdCBvbiBhIENETiBpcwpwcm9ibGVtYXRpYyB3aGVuIHlvdSB0cnkgdG8gdmlldyB5b3VyIGxvY2FsIGZpbGVzIGRpcmVjdGx5IGluIHRoZSBicm93c2VyLiBUaGUKYnJvd3NlciB3aWxsIGF0dGVtcHQgdG8gZmV0Y2ggdGhlIGZpbGUgZnJvbSB5b3VyIGxvY2FsIGZpbGUgc3lzdGVtLiBXZQpyZWNvbW1lbmQgdGhhdCB5b3UgdXNlIGEgbG9jYWwgc2VydmVyIHRvIHRlc3QgeW91ciBwYWdlcyAob3IgRHJvcGJveCkuIFRoaXMgY2FuCmJlIGRvbmUgdXNpbmcgUHl0aG9uIDIueCBieSBydW5uaW5nIGBweXRob24gLW0gU2ltcGxlSFRUUFNlcnZlcmAgb3IgUHl0aG9uIDMueAp3aXRoIGBweXRob24gLW0gaHR0cC5zZXJ2ZXJgIGZyb20geW91ciBsb2NhbCBkaXJlY3RvcnksIHVzaW5nIFJ1YnkgYnkgaW5zdGFsbGluZwphbmQgcnVubmluZyBbYXNkZl0oaHR0cHM6Ly9ydWJ5Z2Vtcy5vcmcvZ2Vtcy9hc2RmKSwgYW5kIGJ5IGluc3RhbGxpbmcgYW55IG9uZSBvZgpYQU1QUCwgTUFNUCwgb3IgV0FNUC4KCiMjIyBXaHkgZG9uJ3QgeW91IGF1dG9tYXRpY2FsbHkgbG9hZCB0aGUgbGF0ZXN0IHZlcnNpb24gb2YgalF1ZXJ5IGZyb20gdGhlIEdvb2dsZSBDRE4/CgoxLiBUaGUgbGF0ZXN0IHZlcnNpb24gb2YgalF1ZXJ5IG1heSBub3QgYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBleGlzdGluZwogICBwbHVnaW5zL2NvZGUgb24gdGhlIHNpdGUuIFZlcnNpb24gdXBkYXRpbmcgc2hvdWxkIGJlIGFuIGludGVudGlvbmFsCiAgIGRlY2lzaW9uLgoyLiBUaGUgbGF0ZXN0IHZlcnNpb24gaGFzIGEgdmVyeSBzaG9ydCBgbWF4LWFnZT0zNjAwYCBjb21wYXJlcyB0byB0aGUgc3BlY2lmaWMKICAgdmVyc2lvbiBvZiBgbWF4LWFnZT0zMTUzNjAwMGAsIHdoaWNoIG1lYW5zIHlvdSB3b24ndCBnZXQgdGhlIGJlbmVmaXRzIG9mCiAgIGxvbmctdGVybSBjYWNoaW5nLgoKCiMjIyBXaHkgaXMgdGhlIEdvb2dsZSBBbmFseXRpY3MgY29kZSBhdCB0aGUgYm90dG9tPyBHb29nbGUgcmVjb21tZW5kcyBpdCBiZSBwbGFjZWQgdGhlIGBoZWFkYC4KClRoZSBhZHZhbnRhZ2UgdG8gcGxhY2luZyBpdCBpbiB0aGUgYGhlYWRgIGlzIHRoYXQgeW91IHdpbGwgdHJhY2sgYSB1c2VyJ3MKcGFnZXZpZXcgZXZlbiBpZiB0aGV5IGxlYXZlIHRoZSBwYWdlIGJlZm9yZSBpdCBoYXMgYmVlbiBmdWxseSBsb2FkZWQuIEhvd2V2ZXIsCnB1dHRpbmcgdGhlIGNvZGUgYXQgdGhlIGJvdHRvbSBrZWVwcyBhbGwgdGhlIHNjcmlwdHMgdG9nZXRoZXIgYW5kIHJlaW5mb3JjZXMKdGhhdCBzY3JpcHRzIGF0IHRoZSBib3R0b20gYXJlIHRoZSByaWdodCBtb3ZlLgoKCiMjIyBIb3cgY2FuIEkgaW50ZWdyYXRlIFtUd2l0dGVyIEJvb3RzdHJhcF0oaHR0cDovL3R3aXR0ZXIuZ2l0aHViLmNvbS9ib290c3RyYXAvKSB3aXRoIEhUTUw1IEJvaWxlcnBsYXRlPwoKWW91IGNhbiB1c2UgW0luaXRpYWxpenJdKGh0dHA6Ly9pbml0aWFsaXpyLmNvbSkgdG8gY3JlYXRlIGEgY3VzdG9tIGJ1aWxkIHRoYXQKaW5jbHVkZXMgSFRNTDUgQm9pbGVycGxhdGUgd2l0aCBUd2l0dGVyIEJvb3RzdHJhcC4KClJlYWQgbW9yZSBhYm91dCBob3cgW0hUTUw1IEJvaWxlcnBsYXRlIGFuZCBUd2l0dGVyIEJvb3RzdHJhcCBjb21wbGVtZW50IGVhY2gKb3RoZXJdKGh0dHA6Ly93d3cucXVvcmEuY29tL0lzLUJvb3RzdHJhcC1hLWNvbXBsZW1lbnQtT1ItYW4tYWx0ZXJuYXRpdmUtdG8tSFRNTDUtQm9pbGVycGxhdGUtb3ItdmljZXZlcnNhL2Fuc3dlci9OaWNvbGFzLUdhbGxhZ2hlcikuCgoKIyMjIEhvdyBkbyBJIHByZXZlbnQgcGhvbmUgbnVtYmVycyBsb29raW5nIHR3aWNlIGFzIGxhcmdlIGFuZCBoYXZpbmcgYSBTa3lwZSBoaWdobGlnaHQ/CgpJZiB0aGlzIGlzIG9jY3VycmluZywgaXQgaXMgYmVjYXVzZSBhIHVzZXIgaGFzIHRoZSBTa3lwZSBicm93c2VyIGV4dGVuc2lvbgppbnN0YWxsZWQuCgpVc2UgdGhlIGZvbGxvd2luZyBDU1MgdG8gcHJldmVudCBTa3lwZSBmcm9tIGZvcm1hdHRpbmcgdGhlIG51bWJlcnMgb24geW91cgpwYWdlOgoKYGBgY3NzCnNwYW4uc2t5cGVfcG5oX2NvbnRhaW5lciB7CiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7Cn0KCnNwYW4uc2t5cGVfcG5oX3ByaW50X2NvbnRhaW5lciB7CiAgICBkaXNwbGF5OiBpbmxpbmUgIWltcG9ydGFudDsKfQpgYGAKCgojIyMgRG8gSSBuZWVkIHRvIHVwZ3JhZGUgbXkgc2l0ZXMgZWFjaCB0aW1lIGEgbmV3IHZlcnNpb24gb2YgSFRNTDUgQm9pbGVycGxhdGUgaXMgcmVsZWFzZWQ/CgpOby4gWW91IGRvbid0IG5vcm1hbGx5IHJlcGxhY2UgdGhlIGZvdW5kYXRpb25zIG9mIGEgaG91c2Ugb25jZSBpdCBoYXMgYmVlbgpidWlsdC4gVGhlcmUgaXMgbm90aGluZyBzdG9wcGluZyB5b3UgZnJvbSB0cnlpbmcgdG8gd29yayBpbiB0aGUgbGF0ZXN0IGNoYW5nZXMKYnV0IHlvdSdsbCBoYXZlIHRvIGFzc2VzcyB0aGUgY29zdHMvYmVuZWZpdHMgb2YgZG9pbmcgc28uCgoKIyMjIFdoZXJlIGNhbiBJIGdldCBoZWxwIGZvciBzdXBwb3J0IHF1ZXN0aW9ucz8KClBsZWFzZSBhc2sgZm9yIGhlbHAgb24KW1N0YWNrT3ZlcmZsb3ddKGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkL2h0bWw1Ym9pbGVycGxhdGUpLgo=')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/css.md', 'data': base64.b64decode('W0hUTUw1IEJvaWxlcnBsYXRlIGhvbWVwYWdlXShodHRwOi8vaHRtbDVib2lsZXJwbGF0ZS5jb20pIHwgW0RvY3VtZW50YXRpb24KdGFibGUgb2YgY29udGVudHNdKFRPQy5tZCkKCiMgVGhlIENTUwoKVGhlIEhUTUw1IEJvaWxlcnBsYXRlIHN0YXJ0aW5nIENTUyBpbmNsdWRlczoKCiogW05vcm1hbGl6ZS5jc3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9uZWNvbGFzL25vcm1hbGl6ZS5jc3MpLgoqIFVzZWZ1bCBIVE1MNSBCb2lsZXJwbGF0ZSBkZWZhdWx0cy4KKiBDb21tb24gaGVscGVycy4KKiBQbGFjZWhvbGRlciBtZWRpYSBxdWVyaWVzLgoqIFByaW50IHN0eWxlcy4KClRoaXMgc3RhcnRpbmcgQ1NTIGRvZXMgbm90IHJlbHkgb24gdGhlIHByZXNlbmNlIG9mIGNvbmRpdGlvbmFsIGNsYXNzbmFtZXMsCmNvbmRpdGlvbmFsIHN0eWxlIHNoZWV0cywgb3IgTW9kZXJuaXpyLiBJdCBpcyByZWFkeSB0byB1c2Ugd2hhdGV2ZXIgeW91cgpkZXZlbG9wbWVudCBwcmVmZXJlbmNlcyBoYXBwZW4gdG8gYmUuCgoKIyMgTm9ybWFsaXplLmNzcwoKTm9ybWFsaXplLmNzcyBpcyBhIG1vZGVybiwgSFRNTDUtcmVhZHkgYWx0ZXJuYXRpdmUgdG8gQ1NTIHJlc2V0cy4gSXQgY29udGFpbnMKZXh0ZW5zaXZlIGlubGluZSBkb2N1bWVudGF0aW9uLiBQbGVhc2UgcmVmZXIgdG8gdGhlIFtOb3JtYWxpemUuY3NzCnByb2plY3RdKGh0dHA6Ly9uZWNvbGFzLmdpdGh1Yi5jb20vbm9ybWFsaXplLmNzcy8pIGZvciBtb3JlIGluZm9ybWF0aW9uLgoKCiMjIEhUTUw1IEJvaWxlcnBsYXRlIGRlZmF1bHRzCgpUaGlzIHByb2plY3QgaW5jbHVkZXMgYSBoYW5kZnVsIG9mIGJhc2Ugc3R5bGVzIHRoYXQgYnVpbGQgdXBvbiBOb3JtYWxpemUuY3NzLgpUaGVzZSBpbmNsdWRlOgoKKiBCYXNpYyB0eXBvZ3JhcGh5IHNldHRpbmdzIHRvIHByb3ZpZGUgaW1wcm92ZWQgdGV4dCByZWFkYWJpbGl0eSBieSBkZWZhdWx0LgoqIFByb3RlY3Rpb24gYWdhaW5zdCB1bndhbnRlZCBgdGV4dC1zaGFkb3dgIGR1cmluZyB0ZXh0IGhpZ2hsaWdodGluZy4KKiBUd2Vha3MgdG8gZGVmYXVsdCBpbWFnZSBhbGlnbm1lbnQsIGZpZWxkc2V0cywgYW5kIHRleHRhcmVhcy4KKiBBIHByZXR0eSBDaHJvbWUgRnJhbWUgcHJvbXB0LgoKWW91IGFyZSBmcmVlIHRvIG1vZGlmeSBvciBhZGQgdG8gdGhlc2UgYmFzZSBzdHlsZXMgYXMgeW91ciBwcm9qZWN0IHJlcXVpcmVzLgoKCiMjIENvbW1vbiBoZWxwZXJzCgojIyMjIGAuaXJgCgpBZGQgdGhlIGAuaXJgIGNsYXNzIHRvIGFueSBlbGVtZW50IHlvdSBhcmUgYXBwbHlpbmcgaW1hZ2UtcmVwbGFjZW1lbnQgdG8uIFdoZW4KcmVwbGFjaW5nIGFuIGVsZW1lbnQncyBjb250ZW50IHdpdGggYW4gaW1hZ2UsIG1ha2Ugc3VyZSB0byBhbHNvIHNldCBhIHNwZWNpZmljCmBiYWNrZ3JvdW5kLWltYWdlOiB1cmwocGF0aHRvaW1hZ2UucG5nKTtgLCBgd2lkdGhgLCBhbmQgYGhlaWdodGAgc28gdGhhdCB5b3VyCnJlcGxhY2VtZW50IGltYWdlIGFwcGVhcnMuCgojIyMjIGAuaGlkZGVuYAoKQWRkIHRoZSBgLmhpZGRlbmAgY2xhc3MgdG8gYW55IGVsZW1lbnRzIHRoYXQgeW91IHdhbnQgdG8gaGlkZSBmcm9tIGFsbApwcmVzZW50YXRpb25zLCBpbmNsdWRpbmcgc2NyZWVuIHJlYWRlcnMuIEl0IGNvdWxkIGJlIGFuIGVsZW1lbnQgdGhhdCB3aWxsIGJlCnBvcHVsYXRlZCBsYXRlciB3aXRoIEphdmFTY3JpcHQgb3IgYW4gZWxlbWVudCB5b3Ugd2lsbCBoaWRlIHdpdGggSmF2YVNjcmlwdC4gRG8Kbm90IHVzZSB0aGlzIGZvciBTRU8ga2V5d29yZCBzdHVmZmluZy4gVGhhdCBpcyBqdXN0IG5vdCBjb29sLgoKIyMjIyBgLnZpc3VhbGx5aGlkZGVuYAoKQWRkIHRoZSBgLnZpc3VhbGx5aGlkZGVuYCBjbGFzcyB0byBoaWRlIHRleHQgZnJvbSBicm93c2VycyBidXQgbWFrZSBpdAphdmFpbGFibGUgZm9yIHNjcmVlbiByZWFkZXJzLiBZb3UgY2FuIHVzZSB0aGlzIHRvIGhpZGUgdGV4dCB0aGF0IGlzIHNwZWNpZmljIHRvCnNjcmVlbiByZWFkZXJzIGJ1dCB0aGF0IG90aGVyIHVzZXJzIHNob3VsZCBub3Qgc2VlLiBbQWJvdXQgaW52aXNpYmxlCmNvbnRlbnRdKGh0dHA6Ly93d3cud2ViYWltLm9yZy90ZWNobmlxdWVzL2Nzcy9pbnZpc2libGVjb250ZW50LyksIFtIaWRpbmcKY29udGVudCBmb3IKYWNjZXNzaWJpbGl0eV0oaHR0cDovL3Nub29rLmNhL2FyY2hpdmVzL2h0bWxfYW5kX2Nzcy9oaWRpbmctY29udGVudC1mb3ItYWNjZXNzaWJpbGl0eSksCltIVE1MNSBCb2lsZXJwbGF0ZQppc3N1ZS9yZXNlYXJjaF0oaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvaHRtbDUtYm9pbGVycGxhdGUvaXNzdWVzLzE5NC8pLgoKIyMjIyBgLmludmlzaWJsZWAKCkFkZCB0aGUgYC5pbnZpc2libGVgIGNsYXNzIHRvIGFueSBlbGVtZW50IHlvdSB3YW50IHRvIGhpZGUgd2l0aG91dCBhZmZlY3RpbmcKbGF5b3V0LiBXaGVuIHlvdSB1c2UgYGRpc3BsYXk6IG5vbmVgIGFuIGVsZW1lbnQgaXMgZWZmZWN0aXZlbHkgcmVtb3ZlZCBmcm9tIHRoZQpsYXlvdXQuIEJ1dCBpbiBzb21lIGNhc2VzIHlvdSB3YW50IHRoZSBlbGVtZW50IHRvIHNpbXBseSBiZSBpbnZpc2libGUgd2hpbGUKcmVtYWluaW5nIGluIHRoZSBmbG93IGFuZCBub3QgYWZmZWN0aW5nIHRoZSBwb3NpdGlvbmluZyBvZiBzdXJyb3VuZGluZwpjb250ZW50LgoKIyMjIyBgLmNsZWFyZml4YAoKQWRkaW5nIGAuY2xlYXJmaXhgIHRvIGFuIGVsZW1lbnQgd2lsbCBlbnN1cmUgdGhhdCBpdCBhbHdheXMgZnVsbHkgY29udGFpbnMgaXRzCmZsb2F0ZWQgY2hpbGRyZW4uIFRoZXJlIGhhdmUgYmVlbiBtYW55IHZhcmlhbnRzIG9mIHRoZSBjbGVhcmZpeCBoYWNrIG92ZXIgdGhlCnllYXJzLCBhbmQgdGhlcmUgYXJlIG90aGVyIGhhY2tzIHRoYXQgY2FuIGFsc28gaGVscCB5b3UgdG8gY29udGFpbiBmbG9hdGVkCmNoaWxkcmVuLCBidXQgdGhlIEhUTUw1IEJvaWxlcnBsYXRlIGN1cnJlbnRseSB1c2VzIHRoZSBbbWljcm8KY2xlYXJmaXhdKGh0dHA6Ly9uaWNvbGFzZ2FsbGFnaGVyLmNvbS9taWNyby1jbGVhcmZpeC1oYWNrLykuCgoKIyMgTWVkaWEgUXVlcmllcwoKVGhlIGJvaWxlcnBsYXRlIG1ha2VzIGl0IGVhc3kgdG8gZ2V0IHN0YXJ0ZWQgd2l0aCBhICJNb2JpbGUgRmlyc3QiIGFuZApbUmVzcG9uc2l2ZSBXZWIKRGVzaWduXShodHRwOi8vd3d3LmFsaXN0YXBhcnQuY29tL2FydGljbGVzL3Jlc3BvbnNpdmUtd2ViLWRlc2lnbi8pIGFwcHJvYWNoIHRvCmRldmVsb3BtZW50LiBCdXQgaXQncyB3b3J0aCByZW1lbWJlcmluZyB0aGF0IHRoZXJlIGFyZSBbbm8gc2lsdmVyCmJ1bGxldHNdKGh0dHA6Ly93d3cuY2xvdWRmb3VyLmNvbS9jc3MtbWVkaWEtcXVlcnktZm9yLW1vYmlsZS1pcy1mb29scy1nb2xkLykuCgpXZSBpbmNsdWRlIGEgcGxhY2Vob2xkZXIgTWVkaWEgUXVlcmllcyB0byBidWlsZCB1cCB5b3VyIG1vYmlsZSBzdHlsZXMgZm9yIHdpZGVyCnZpZXdwb3J0cyBhbmQgaGlnaC1yZXNvbHV0aW9uIGRpc3BsYXlzLiBJdCdzIHJlY29tbWVuZGVkIHRoYXQgeW91IGFkYXB0IHRoZXNlCk1lZGlhIFF1ZXJpZXMgYmFzZWQgb24gdGhlIGNvbnRlbnQgb2YgeW91ciBzaXRlIHJhdGhlciB0aGFuIG1pcnJvcmluZyB0aGUgZml4ZWQKZGltZW5zaW9ucyBvZiBzcGVjaWZpYyBkZXZpY2VzLgoKSWYgeW91IGRvIG5vdCB3YW50IHRvIHRha2UgYSAiTW9iaWxlIEZpcnN0IiBhcHByb2FjaCwgeW91IGNhbiBzaW1wbHkgZWRpdCBvcgpyZW1vdmUgdGhlc2UgcGxhY2Vob2xkZXIgTWVkaWEgUXVlcmllcy4gT25lIHBvc3NpYmlsaXR5IHdvdWxkIGJlIHRvIHdvcmsgZnJvbQp3aWRlIHZpZXdwb3J0cyBkb3duIGFuZCB1c2UgYG1heC13aWR0aGAgTVFzIGluc3RlYWQsIGUuZy4sIGBAbWVkaWEgb25seSBzY3JlZW4KYW5kIChtYXgtd2lkdGg6IDQ4MHB4KWAuCgpUYWtlIGEgbG9vayBpbnRvIHRoZSBbTW9iaWxlCkJvaWxlcnBsYXRlXShodHRwczovL2dpdGh1Yi5jb20vaDVicC9tb2JpbGUtYm9pbGVycGxhdGUpIGZvciBmZWF0dXJlcyB0aGF0IGFyZQp1c2VmdWwgd2hlbiBkZXZlbG9waW5nIG1vYmlsZSB3ZXAgYXBwcy4KCgojIyBQcmludCBzdHlsZXMKCiogUHJpbnQgc3R5bGVzIGFyZSBpbmxpbmVkIHRvIFtyZWR1Y2UgdGhlIG51bWJlciBvZiBwYWdlCiAgcmVxdWVzdHNdKGh0dHA6Ly93d3cucGhwaWVkLmNvbS9kZWxheS1sb2FkaW5nLXlvdXItcHJpbnQtY3NzLykuCiogV2Ugc3RyaXAgYWxsIGJhY2tncm91bmQgY29sb3JzLCBjaGFuZ2UgdGhlIGZvbnQgY29sb3IgdG8gYmxhY2sgYW5kIHJlbW92ZQogIHRleHQtc2hhZG93LiBUaGlzIGlzIG1lYW50IHRvIFtoZWxwIHNhdmUgcHJpbnRlciBpbmsgYW5kIG1ha2UgdGhlIHByaW50aW5nCiAgcHJvY2VzcyBtdWNoIGZhc3Rlcl0oaHR0cDovL3d3dy5zYW5iZWlqaS5jb20vYXJjaGl2ZXMvOTUzKS4KKiBBbmNob3JzIGRvIG5vdCBuZWVkIGNvbG9ycyB0byBpbmRpY2F0ZSB0aGV5IGFyZSBsaW5rZWQuIFRoZXkgYXJlIHVuZGVybGluZWQKICB0byBpbmRpY2F0ZSBzby4KKiBBbmNob3JzIGFuZCBBYmJyZXZpYXRpb25zIGFyZSBleHBhbmRlZCB0byBpbmRpY2F0ZSB3aGVyZSB1c2VycyByZWFkaW5nIHRoZQogIHByaW50ZWQgcGFnZSBjYW4gcmVmZXIgdG8uCiogQnV0IHdlIGRvIG5vdCB3YW50IHRvIHNob3cgbGluayB0ZXh0IGZvciBpbWFnZSByZXBsYWNlZCBlbGVtZW50cyAoZ2l2ZW4gdGhhdAogIHRoZXkgYXJlIHByaW1hcmlseSBpbWFnZXMpLgoKIyMjIFBhZ2VkIG1lZGlhIHN0eWxlcwoKKiBQYWdlZCBtZWRpYSBpcyBzdXBwb3J0ZWQgb25seSBpbiBhIFtmZXcKICBicm93c2Vyc10oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21wYXJpc29uX29mX2xheW91dF9lbmdpbmVzXyUyOENhc2NhZGluZ19TdHlsZV9TaGVldHMlMjkjR3JhbW1hcl9hbmRfcnVsZXMpLgoqIFBhZ2VkIG1lZGlhIHN1cHBvcnQgbWVhbnMgYnJvd3NlcnMgd291bGQga25vdyBob3cgdG8gaW50ZXJwcmV0IGluc3RydWN0aW9ucwogIG9uIGJyZWFraW5nIGNvbnRlbnQgaW50byBwYWdlcyBhbmQgb24gb3JwaGFucy93aWRvd3MuCiogV2UgdXNlIGBwYWdlLWJyZWFrLWluc2lkZTogYXZvaWQ7YCB0byBwcmV2ZW50IGFuIGltYWdlIGFuZCB0YWJsZSByb3cgZnJvbQogIGJlaW5nIHNwbGl0IGludG8gdHdvIGRpZmZlcmVudCBwYWdlcywgc28gdXNlIHRoZSBzYW1lIGBwYWdlLWJyZWFrLWluc2lkZToKICBhdm9pZDtgIGZvciB0aGF0IGFzIHdlbGwuCiogSGVhZGluZ3Mgc2hvdWxkIGFsd2F5cyBhcHBlYXIgd2l0aCB0aGUgdGV4dCB0aGV5IGFyZSB0aXRsZXMgZm9yLiBTbywgd2UKICBlbnN1cmUgaGVhZGluZ3MgbmV2ZXIgYXBwZWFyIGluIGEgZGlmZmVyZW50IHBhZ2UgdGhhbiB0aGUgdGV4dCB0aGV5IGRlc2NyaWJlCiAgYnkgdXNpbmcgYHBhZ2UtYnJlYWstYWZ0ZXI6IGF2b2lkO2AuCiogV2UgYWxzbyBhcHBseSBhIGRlZmF1bHQgbWFyZ2luIGZvciB0aGUgcGFnZSBzcGVjaWZpZWQgaW4gYGNtYC4KKiBXZSBkbyBub3Qgd2FudCBbb3JwaGFucyBhbmQKICB3aWRvd3NdKGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvV2lkb3dzX2FuZF9vcnBoYW5zKSB0byBhcHBlYXIgb24gcGFnZXMKICB5b3UgcHJpbnQuIFNvLCBieSBkZWZpbmluZyBgb3JwaGFuczogM2AgYW5kIGB3aWRvd3M6IDNgIHlvdSBkZWZpbmUgdGhlIG1pbmltYWwKICBudW1iZXIgb2Ygd29yZHMgdGhhdCBldmVyeSBsaW5lIHNob3VsZCBjb250YWluLgo=')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/js.md', 'data': base64.b64decode('W0hUTUw1IEJvaWxlcnBsYXRlIGhvbWVwYWdlXShodHRwOi8vaHRtbDVib2lsZXJwbGF0ZS5jb20pIHwgW0RvY3VtZW50YXRpb24KdGFibGUgb2YgY29udGVudHNdKFRPQy5tZCkKCiMgVGhlIEphdmFTY3JpcHQKCkluZm9ybWF0aW9uIGFib3V0IHRoZSBkZWZhdWx0IEphdmFTY3JpcHQgaW5jbHVkZWQgaW4gdGhlIHByb2plY3QuCgojIyBtYWluLmpzCgpUaGlzIGZpbGUgY2FuIGJlIHVzZWQgdG8gY29udGFpbiBvciByZWZlcmVuY2UgeW91ciBzaXRlL2FwcCBKYXZhU2NyaXB0IGNvZGUuCkZvciBsYXJnZXIgcHJvamVjdHMsIHlvdSBjYW4gbWFrZSB1c2Ugb2YgYSBKYXZhU2NyaXB0IG1vZHVsZSBsb2FkZXIsIGxpa2UKW1JlcXVpcmUuanNdKGh0dHA6Ly9yZXF1aXJlanMub3JnLyksIHRvIGxvYWQgYW55IG90aGVyIHNjcmlwdHMgeW91IG5lZWQgdG8KcnVuLgoKIyMgcGx1Z2lucy5qcwoKVGhpcyBmaWxlIGNhbiBiZSB1c2VkIHRvIGNvbnRhaW4gYWxsIHlvdXIgcGx1Z2lucywgc3VjaCBhcyBqUXVlcnkgcGx1Z2lucyBhbmQKb3RoZXIgM3JkIHBhcnR5IHNjcmlwdHMuCgpPbmUgYXBwcm9hY2ggaXMgdG8gcHV0IGpRdWVyeSBwbHVnaW5zIGluc2lkZSBvZiBhIGAoZnVuY3Rpb24oJCl7IC4uLgp9KShqUXVlcnkpO2AgY2xvc3VyZSB0byBtYWtlIHN1cmUgdGhleSdyZSBpbiB0aGUgalF1ZXJ5IG5hbWVzcGFjZSBzYWZldHkKYmxhbmtldC4gUmVhZCBtb3JlIGFib3V0IFtqUXVlcnkgcGx1Z2luCmF1dGhvcmluZ10oaHR0cDovL2RvY3MuanF1ZXJ5LmNvbS9QbHVnaW5zL0F1dGhvcmluZyNHZXR0aW5nX1N0YXJ0ZWQpCgojIyB2ZW5kb3IKClRoaXMgZGlyZWN0b3J5IGNhbiBiZSB1c2VkIHRvIGNvbnRhaW4gYWxsIDNyZCBwYXJ0eSBsaWJyYXJ5IGNvZGUuCgpNaW5pZmllZCB2ZXJzaW9ucyBvZiB0aGUgbGF0ZXN0IGpRdWVyeSBhbmQgTW9kZXJuaXpyIGxpYnJhcmllcyBhcmUgaW5jbHVkZWQgYnkKZGVmYXVsdC4gWW91IG1heSB3aXNoIHRvIGNyZWF0ZSB5b3VyIG93biBbY3VzdG9tIE1vZGVybml6cgpidWlsZF0oaHR0cDovL3d3dy5tb2Rlcm5penIuY29tL2Rvd25sb2FkLykuCg==')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/TOC.md', 'data': base64.b64decode('W0hUTUw1IEJvaWxlcnBsYXRlIGhvbWVwYWdlXShodHRwOi8vaHRtbDVib2lsZXJwbGF0ZS5jb20pCgojIEhUTUw1IEJvaWxlcnBsYXRlIGRvY3VtZW50YXRpb246CgojIyBHZXR0aW5nIHN0YXJ0ZWQKCiogW1VzYWdlXSh1c2FnZS5tZCkg4oCUIE92ZXJ2aWV3IG9mIHRoZSBwcm9qZWN0IGNvbnRlbnRzLgoqIFtGQVFdKGZhcS5tZCkg4oCUIEZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zLCBhbG9uZyB3aXRoIHRoZWlyIGFuc3dlcnMuCgojIyBUaGUgY29yZSBvZiBIVE1MNSBCb2lsZXJwbGF0ZQoKKiBbSFRNTF0oaHRtbC5tZCkg4oCUIEEgZ3VpZGUgdG8gdGhlIGRlZmF1bHQgSFRNTC4KKiBbQ1NTXShjc3MubWQpIOKAlCBBIGd1aWRlIHRvIHRoZSBkZWZhdWx0IENTUy4KKiBbSmF2YVNjcmlwdF0oanMubWQpIOKAlCBBIGd1aWRlIHRvIHRoZSBkZWZhdWx0IEphdmFTY3JpcHQuCiogWy5odGFjY2Vzc10oaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvc2VydmVyLWNvbmZpZ3MtYXBhY2hlL3RyZWUvbWFzdGVyL2RvYykKICDigJQgQWxsIGFib3V0IHRoZSBBcGFjaGUgd2ViIHNlcnZlciBjb25maWdzIChhbHNvIHNlZSBvdXIgW2FsdGVybmF0aXZlIHNlcnZlcgogIGNvbmZpZ3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL3NlcnZlci1jb25maWdzL2Jsb2IvbWFzdGVyL1JFQURNRS5tZCkpLgoqIFtjcm9zc2RvbWFpbi54bWxdKGNyb3NzZG9tYWluLm1kKSDigJQgQW4gaW50cm9kdWN0aW9uIHRvIG1ha2luZyB1c2Ugb2YKICBjcm9zc2RvbWFpbiByZXF1ZXN0cy4KKiBbRXZlcnl0aGluZyBlbHNlXShtaXNjLm1kKS4KCiMjIERldmVsb3BtZW50CgoqIFtFeHRlbmRpbmcgYW5kIGN1c3RvbWl6aW5nIEhUTUw1IEJvaWxlcnBsYXRlXShleHRlbmQubWQpIOKAlCBHb2luZyBmdXJ0aGVyIHdpdGgKICB0aGUgYm9pbGVycGxhdGUuCgojIyBSZWxhdGVkIHByb2plY3RzCgpIVE1MNSBCb2lsZXJwbGF0ZSBoYXMgc2V2ZXJhbCByZWxhdGVkIHByb2plY3RzIHRvIGhlbHAgaW1wcm92ZSB0aGUgcGVyZm9ybWFuY2UKb2YgeW91ciBzaXRlL2FwcCBpbiB2YXJpb3VzIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzLgoKKiBbU2VydmVyIGNvbmZpZ3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL3NlcnZlci1jb25maWdzKSDigJQgQ29uZmlncyBmb3IKICBkaWZmZXJlbnQgc2VydmVycy4KKiBbTm9kZSBidWlsZCBzY3JpcHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL25vZGUtYnVpbGQtc2NyaXB0KSDigJQgQQogIGZlYXR1cmUtcmljaCBbZ3J1bnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9ncnVudGpzL2dydW50KSBwbHVnaW4uCiogW0FudCBidWlsZCBzY3JpcHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL2FudC1idWlsZC1zY3JpcHQpIOKAlCBUaGUgb3JpZ2luYWwKICBIVE1MNSBCb2lsZXJwbGF0ZSBidWlsZCBzY3JpcHQuCg==')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/html.md', 'data': base64.b64decode('W0hUTUw1IEJvaWxlcnBsYXRlIGhvbWVwYWdlXShodHRwOi8vaHRtbDVib2lsZXJwbGF0ZS5jb20pIHwgW0RvY3VtZW50YXRpb24KdGFibGUgb2YgY29udGVudHNdKFRPQy5tZCkKCiMgVGhlIEhUTUwKCiMjIENvbmRpdGlvbmFsIGBodG1sYCBjbGFzc2VzCgpBIHNlcmllcyBvZiBJRSBjb25kaXRpb25hbCBjb21tZW50cyBhcHBseSB0aGUgcmVsZXZhbnQgSUUtc3BlY2lmaWMgY2xhc3NlcyB0bwp0aGUgYGh0bWxgIHRhZy4gVGhpcyBwcm92aWRlcyBvbmUgbWV0aG9kIG9mIHNwZWNpZnlpbmcgQ1NTIGZpeGVzIGZvciBzcGVjaWZpYwpsZWdhY3kgdmVyc2lvbnMgb2YgSUUuIFdoaWxlIHlvdSBtYXkgb3IgbWF5IG5vdCBjaG9vc2UgdG8gdXNlIHRoaXMgdGVjaG5pcXVlIGluCnlvdXIgcHJvamVjdCBjb2RlLCBIVE1MNSBCb2lsZXJwbGF0ZSdzIGRlZmF1bHQgQ1NTIGRvZXMgbm90IHJlbHkgb24gaXQuCgpXaGVuIHVzaW5nIHRoZSBjb25kaXRpb25hbCBjbGFzc2VzIHRlY2huaXF1ZSwgYXBwbHlpbmcgY2xhc3NlcyB0byB0aGUgYGh0bWxgCmVsZW1lbnQgaGFzIHNldmVyYWwgYmVuZWZpdHM6CgoqIEl0IGF2b2lkcyBhIFtmaWxlIGJsb2NraW5nCiAgaXNzdWVdKGh0dHA6Ly93ZWJmb3JzY2hlci53b3JkcHJlc3MuY29tLzIwMTAvMDUvMjAvaWUtNi1zbG93aW5nLWRvd24taWUtOC8pCiAgZGlzY292ZXJlZCBieSBTdG95YW4gU3RlZmFub3YgYW5kIE1hcmt1cyBMZXB0aWVuLgoqIEl0IGF2b2lkcyB0aGUgbmVlZCBmb3IgYW4gZW1wdHkgY29tbWVudCB0aGF0IGFsc28gZml4ZXMgdGhlIGFib3ZlIGlzc3VlLgoqIENNU2VzIGxpa2UgV29yZFByZXNzIGFuZCBEcnVwYWwgdXNlIHRoZSBib2R5IGNsYXNzIG1vcmUgaGVhdmlseS4gVGhpcyBtYWtlcwogIGludGVncmF0aW5nIHRoZXJlIGEgdG91Y2ggc2ltcGxlci4KKiBJdCBzdGlsbCB2YWxpZGF0ZXMgYXMgSFRNTDUuCiogSXQgdXNlcyB0aGUgc2FtZSBlbGVtZW50IGFzIE1vZGVybml6ciAoYW5kIERvam8pLiBUaGF0IGZlZWxzIG5pY2UuCiogSXQgY2FuIGltcHJvdmUgdGhlIGNsYXJpdHkgb2YgY29kZSBpbiBtdWx0aS1kZXZlbG9wZXIgdGVhbXMuCgoKIyMgVGhlIGBuby1qc2AgY2xhc3MKCkFsbG93cyB5b3UgdG8gbW9yZSBlYXNpbHkgZXhwbGljaXRseSBhZGQgY3VzdG9tIHN0eWxlcyB3aGVuIEphdmFTY3JpcHQgaXMKZGlzYWJsZWQgKGBuby1qc2ApIG9yIGVuYWJsZWQgKGBqc2ApLiBNb3JlIGhlcmU6IFtBdm9pZGluZyB0aGUKRk9VQ10oaHR0cDovL3BhdWxpcmlzaC5jb20vMjAwOS9hdm9pZGluZy10aGUtZm91Yy12My8pLgoKCiMjIFRoZSBvcmRlciBvZiBtZXRhIHRhZ3MsIGFuZCBgPHRpdGxlPmAKCkFzIHJlY29tbWVuZGVkIGJ5IFt0aGUgSFRNTDUKc3BlY10oaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9jb21wbGV0ZS9zZW1hbnRpY3MuaHRtbCNjaGFyc2V0KQooNC4yLjUuNSBTcGVjaWZ5aW5nIHRoZSBkb2N1bWVudCdzIGNoYXJhY3RlciBlbmNvZGluZyksIGFkZCB5b3VyIGNoYXJzZXQKZGVjbGFyYXRpb24gZWFybHkgKGJlZm9yZSBhbnkgQVNDSUkgYXJ0IDspIHRvIGF2b2lkIGEgcG90ZW50aWFsCltlbmNvZGluZy1yZWxhdGVkIHNlY3VyaXR5Cmlzc3VlXShodHRwOi8vY29kZS5nb29nbGUuY29tL3AvZG9jdHlwZS1taXJyb3Ivd2lraS9BcnRpY2xlVXRmNykgaW4gSUUuIEl0CnNob3VsZCBjb21lIGluIHRoZSBmaXJzdCBbMTAyNApieXRlc10oaHR0cDovL3d3dy53aGF0d2cub3JnL3NwZWNzL3dlYi1hcHBzL2N1cnJlbnQtd29yay9tdWx0aXBhZ2Uvc2VtYW50aWNzLmh0bWwjY2hhcnNldCkuCgpUaGUgY2hhcnNldCBzaG91bGQgYWxzbyBjb21lIGJlZm9yZSB0aGUgYDx0aXRsZT5gIHRhZywgZHVlIHRvIFtwb3RlbnRpYWwgWFNTCnZlY3RvcnNdKGh0dHA6Ly9jb2RlLmdvb2dsZS5jb20vcC9kb2N0eXBlLW1pcnJvci93aWtpL0FydGljbGVVdGY3KS4KClRoZSBtZXRhIHRhZyBmb3IgY29tcGF0aWJpbGl0eSBtb2RlIFtuZWVkcyB0byBiZSBiZWZvcmUgYWxsIGVsZW1lbnRzIGV4Y2VwdAp0aXRsZSBhbmQgbWV0YV0oaHR0cDovL2g1YnAuY29tL2YgIkRlZmluaW5nIERvY3VtZW50IENvbXBhdGliaWxpdHkgLSBNU0ROIikuCkFuZCB0aGF0IHNhbWUgbWV0YSB0YWcgY2FuIG9ubHkgYmUgaW52b2tlZCBmb3IgR29vZ2xlIENocm9tZSBGcmFtZSBpZiBpdCBpcwp3aXRoaW4gdGhlIFtmaXJzdCAxMDI0CmJ5dGVzXShodHRwOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0yMzAwMykuCgoKIyMgWC1VQS1Db21wYXRpYmxlCgpUaGlzIG1ha2VzIHN1cmUgdGhlIGxhdGVzdCB2ZXJzaW9uIG9mIElFIGlzIHVzZWQgaW4gdmVyc2lvbnMgb2YgSUUgdGhhdCBjb250YWluCm11bHRpcGxlIHJlbmRlcmluZyBlbmdpbmVzLiBFdmVuIGlmIGEgc2l0ZSB2aXNpdG9yIGlzIHVzaW5nIElFOCBvciBJRTksIGl0J3MKcG9zc2libGUgdGhhdCB0aGV5J3JlIG5vdCB1c2luZyB0aGUgbGF0ZXN0IHJlbmRlcmluZyBlbmdpbmUgdGhlaXIgYnJvd3Nlcgpjb250YWlucy4gVG8gZml4IHRoaXMsIHVzZToKCmBgYGh0bWwKPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KYGBgCgpUaGUgYG1ldGFgIHRhZyB0ZWxscyB0aGUgSUUgcmVuZGVyaW5nIGVuZ2luZSBpdCBzaG91bGQgdXNlIHRoZSBsYXRlc3QsIG9yIGVkZ2UsCnZlcnNpb24gb2YgdGhlIElFIHJlbmRlcmluZyBlbnZpcm9ubWVudC4KClRoaXMgYG1ldGFgIHRhZyBlbnN1cmVzIHRoYXQgYW55b25lIGJyb3dzaW5nIHlvdXIgc2l0ZSBpbiBJRSBpcyB0cmVhdGVkIHRvIHRoZQpiZXN0IHBvc3NpYmxlIHVzZXIgZXhwZXJpZW5jZSB0aGF0IHRoZWlyIGJyb3dzZXIgY2FuIG9mZmVyLgoKVGhpcyBsaW5lIGJyZWFrcyB2YWxpZGF0aW9uLiBUbyBhdm9pZCB0aGlzIGVkZ2UgY2FzZSBpc3N1ZSBpdCBpcyByZWNvbW1lbmRlZAp0aGF0IHlvdSAqKnJlbW92ZSB0aGlzIGxpbmUgYW5kIHVzZSB0aGUgYC5odGFjY2Vzc2AqKiAob3Igb3RoZXIgc2VydmVyIGNvbmZpZykKdG8gc2VuZCB0aGVzZSBoZWFkZXJzIGluc3RlYWQuIFlvdSBhbHNvIG1pZ2h0IHdhbnQgdG8gcmVhZCBbVmFsaWRhdGluZzoKWC1VQS1Db21wYXRpYmxlXShodHRwOi8vZ3JvdXBzLmdvb2dsZS5jb20vZ3JvdXAvaHRtbDVib2lsZXJwbGF0ZS9icm93c2VfdGhyZWFkL3RocmVhZC82ZDFiNmIxNTJhY2E4ZWQyKS4KCklmIHlvdSBhcmUgc2VydmluZyB5b3VyIHNpdGUgb24gYSBub24tc3RhbmRhcmQgcG9ydCwgeW91IHdpbGwgbmVlZCB0byBzZXQgdGhpcwpoZWFkZXIgb24gdGhlIHNlcnZlci1zaWRlLiBUaGlzIGlzIGJlY2F1c2UgdGhlIElFIHByZWZlcmVuY2Ugb3B0aW9uICdEaXNwbGF5CmludHJhbmV0IHNpdGVzIGluIENvbXBhdGliaWxpdHkgVmlldycgaXMgY2hlY2tlZCBieSBkZWZhdWx0LgoKCiMjIE1vYmlsZSB2aWV3cG9ydAoKVGhlcmUgYXJlIGEgZmV3IGRpZmZlcmVudCBvcHRpb25zIHRoYXQgeW91IGNhbiB1c2Ugd2l0aCB0aGUgW2B2aWV3cG9ydGAgbWV0YQp0YWddKGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnQvdmlldz9pZD1ka3gzcXRtXzIyZHhzcmdjZjQgIlZpZXdwb3J0IGFuZApNZWRpYSBRdWVyaWVzIC0gVGhlIENvbXBsZXRlIElkaW90J3MgR3VpZGUiKS4gWW91IGNhbiBmaW5kIG91dCBtb3JlIGluIFt0aGUKQXBwbGUgZGV2ZWxvcGVyIGRvY3NdKGh0dHA6Ly9qLm1wL21vYmlsZXZpZXdwb3J0KS4gSFRNTDUgQm9pbGVycGxhdGUgY29tZXMgd2l0aAphIHNpbXBsZSBzZXR1cCB0aGF0IHN0cmlrZXMgYSBnb29kIGJhbGFuY2UgZm9yIGdlbmVyYWwgdXNlIGNhc2VzLgoKYGBgaHRtbAo8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgpgYGAKCiMjIEZhdmljb25zIGFuZCBUb3VjaCBJY29uCgpUaGUgc2hvcnRjdXQgaWNvbnMgc2hvdWxkIGJlIHB1dCBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgeW91ciBzaXRlLiBIVE1MNQpCb2lsZXJwbGF0ZSBjb21lcyB3aXRoIGEgZGVmYXVsdCBzZXQgb2YgaWNvbnMgKGluY2x1ZGUgZmF2aWNvbiBhbmQgb25lIEFwcGxlClRvdWNoIEljb24pIHRoYXQgeW91IGNhbiB1c2UgYXMgYSBiYXNlbGluZSB0byBjcmVhdGUgeW91ciBvd24uCgpQbGVhc2UgcmVmZXIgdG8gdGhlIG1vcmUgZGV0YWlsZWQgZGVzY3JpcHRpb24gaW4gdGhlIFtFeHRlbmQgc2VjdGlvbl0oZXh0ZW5kLm1kKQpvZiB0aGVzZSBkb2NzLgoKIyMgTW9kZXJuaXpyCgpIVE1MNSBCb2lsZXJwbGF0ZSB1c2VzIGEgY3VzdG9tIGJ1aWxkIG9mIE1vZGVybml6ci4KCltNb2Rlcm5penJdKGh0dHA6Ly9tb2Rlcm5penIuY29tKSBpcyBhIEphdmFTY3JpcHQgbGlicmFyeSB3aGljaCBhZGRzIGNsYXNzZXMgdG8KdGhlIGBodG1sYCBlbGVtZW50IGJhc2VkIG9uIHRoZSByZXN1bHRzIG9mIGZlYXR1cmUgdGVzdCBhbmQgd2hpY2ggZW5zdXJlcyB0aGF0CmFsbCBicm93c2VycyBjYW4gbWFrZSB1c2Ugb2YgSFRNTDUgZWxlbWVudHMgKGFzIGl0IGluY2x1ZGVzIHRoZSBIVE1MNSBTaGl2KS4KVGhpcyBhbGxvd3MgeW91IHRvIHRhcmdldCBwYXJ0cyBvZiB5b3VyIENTUyBhbmQgSmF2YVNjcmlwdCBiYXNlZCBvbiB0aGUKZmVhdHVyZXMgc3VwcG9ydGVkIGJ5IGEgYnJvd3Nlci4KCkluIGdlbmVyYWwsIGluIG9yZGVyIHRvIGtlZXAgcGFnZSBsb2FkIHRpbWVzIHRvIGEgbWluaW11bSwgaXQncyBiZXN0IHRvIGNhbGwKYW55IEphdmFTY3JpcHQgYXQgdGhlIGVuZCBvZiB0aGUgcGFnZSBiZWNhdXNlIGlmIGEgc2NyaXB0IGlzIHNsb3cgdG8gbG9hZApmcm9tIGFuIGV4dGVybmFsIHNlcnZlciBpdCBtYXkgY2F1c2UgdGhlIHdob2xlIHBhZ2UgdG8gaGFuZy4gVGhhdCBzYWlkLCB0aGUKTW9kZXJuaXpyIHNjcmlwdCAqbmVlZHMqIHRvIHJ1biAqYmVmb3JlKiB0aGUgYnJvd3NlciBiZWdpbnMgcmVuZGVyaW5nIHRoZSBwYWdlLApzbyB0aGF0IGJyb3dzZXJzIGxhY2tpbmcgc3VwcG9ydCBmb3Igc29tZSBvZiB0aGUgbmV3IEhUTUw1IGVsZW1lbnRzIGFyZSBhYmxlIHRvCmhhbmRsZSB0aGVtIHByb3Blcmx5LiBUaGVyZWZvcmUgdGhlIE1vZGVybml6ciBzY3JpcHQgaXMgdGhlIG9ubHkgSmF2YVNjcmlwdApmaWxlIHN5bmNocm9ub3VzbHkgbG9hZGVkIGF0IHRoZSB0b3Agb2YgdGhlIGRvY3VtZW50LgoKCiMjIFRoZSBjb250ZW50IGFyZWEKClRoZSBjZW50cmFsIHBhcnQgb2YgdGhlIGJvaWxlcnBsYXRlIHRlbXBsYXRlIGlzIHByZXR0eSBtdWNoIGVtcHR5LiBUaGlzIGlzCmludGVudGlvbmFsLCBpbiBvcmRlciB0byBtYWtlIHRoZSBib2lsZXJwbGF0ZSBzdWl0YWJsZSBmb3IgYm90aCB3ZWIgcGFnZSBhbmQKd2ViIGFwcCBkZXZlbG9wbWVudC4KCiMjIyBHb29nbGUgQ2hyb21lIEZyYW1lCgpUaGUgbWFpbiBjb250ZW50IGFyZWEgb2YgdGhlIGJvaWxlcnBsYXRlIGluY2x1ZGVzIGEgcHJvbXB0IHRvIGluc3RhbGwgQ2hyb21lCkZyYW1lICh3aGljaCBubyBsb25nZXIgcmVxdWlyZXMgYWRtaW5pc3RyYXRpdmUgcmlnaHRzKSBmb3IgdXNlcnMgb2YgSUUgNi4gSWYKeW91IGludGVuZGVkIHRvIHN1cHBvcnQgSUUgNiwgdGhlbiB5b3Ugc2hvdWxkIHJlbW92ZSB0aGUgc25pcHBldCBvZiBjb2RlLgoKIyMjIEdvb2dsZSBDRE4gZm9yIGpRdWVyeQoKVGhlIEdvb2dsZSBDRE4gdmVyc2lvbiBvZiB0aGUgalF1ZXJ5IEphdmFTY3JpcHQgbGlicmFyeSBpcyByZWZlcmVuY2VkIHRvd2FyZHMKdGhlIGJvdHRvbSBvZiB0aGUgcGFnZSB1c2luZyBhIHByb3RvY29sLWluZGVwZW5kZW50IHBhdGggKHJlYWQgbW9yZSBhYm91dCB0aGlzCmluIHRoZSBbRkFRXShmYXEubWQpKS4gQSBsb2NhbCBmYWxsYmFjayBvZiBqUXVlcnkgaXMgaW5jbHVkZWQgZm9yIHJhcmUgaW5zdGFuY2VzCndoZW4gdGhlIENETiB2ZXJzaW9uIG1pZ2h0IG5vdCBiZSBhdmFpbGFibGUsIGFuZCB0byBmYWNpbGl0YXRlIG9mZmxpbmUKZGV2ZWxvcG1lbnQuCgpSZWdhcmRsZXNzIG9mIHdoaWNoIEphdmFTY3JpcHQgbGlicmFyeSB5b3UgY2hvb3NlIHRvIHVzZSwgaXQgaXMgd2VsbCB3b3J0aCB0aGUKdGltZSBhbmQgZWZmb3J0IHRvIGxvb2sgdXAgYW5kIHJlZmVyZW5jZSB0aGUgR29vZ2xlIENETiAoQ29udGVudCBEZWxpdmVyeQpOZXR3b3JrKSB2ZXJzaW9uLiBZb3VyIHVzZXJzIG1heSBhbHJlYWR5IGhhdmUgdGhpcyB2ZXJzaW9uIGNhY2hlZCBpbiB0aGVpcgpicm93c2VycywgYW5kIEdvb2dsZSdzIENETiBpcyBsaWtlbHkgdG8gZGVsaXZlciB0aGUgYXNzZXQgZmFzdGVyIHRoYW4geW91cgpzZXJ2ZXIuCgojIyMgR29vZ2xlIEFuYWx5dGljcyBUcmFja2luZyBDb2RlCgpGaW5hbGx5LCBhbiBvcHRpbWl6ZWQgdmVyc2lvbiBvZiB0aGUgbGF0ZXN0IEdvb2dsZSBBbmFseXRpY3MgdHJhY2tpbmcgY29kZSBpcwppbmNsdWRlZC4gR29vZ2xlIHJlY29tbWVuZHMgdGhhdCB0aGlzIHNjcmlwdCBiZSBwbGFjZWQgYXQgdGhlIHRvcCBvZiB0aGUgcGFnZS4KRmFjdG9ycyB0byBjb25zaWRlcjogaWYgeW91IHBsYWNlIHRoaXMgc2NyaXB0IGF0IHRoZSB0b3Agb2YgdGhlIHBhZ2UsIHlvdeKAmWxsIGJlCmFibGUgdG8gY291bnQgdXNlcnMgd2hvIGRvbuKAmXQgZnVsbHkgbG9hZCB0aGUgcGFnZSwgYW5kIHlvdeKAmWxsIGluY3VyIHRoZSBtYXgKbnVtYmVyIG9mIHNpbXVsdGFuZW91cyBjb25uZWN0aW9ucyBvZiB0aGUgYnJvd3Nlci4KCkZ1cnRoZXIgaW5mb3JtYXRpb246CgoqIFtPcHRpbWl6aW5nIHRoZSBhc3luY2hyb25vdXMgR29vZ2xlIEFuYWx5dGljcwogIHNuaXBwZXRdKGh0dHA6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FzeW5jLWFuYWx5dGljcy1zbmlwcGV0KS4KKiBbVHJhY2tpbmcgU2l0ZSBBY3Rpdml0eSAtIEdvb2dsZQogIEFuYWx5dGljc10oaHR0cDovL2NvZGUuZ29vZ2xlLmNvbS9hcGlzL2FuYWx5dGljcy9kb2NzL3RyYWNraW5nL2FzeW5jVHJhY2tpbmcuaHRtbCkuCg==')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/usage.md', 'data': base64.b64decode('W0hUTUw1IEJvaWxlcnBsYXRlIGhvbWVwYWdlXShodHRwOi8vaHRtbDVib2lsZXJwbGF0ZS5jb20pIHwgW0RvY3VtZW50YXRpb24KdGFibGUgb2YgY29udGVudHNdKFRPQy5tZCkKCiMgVXNhZ2UKCk9uY2UgeW91IGhhdmUgY2xvbmVkIG9yIGRvd25sb2FkZWQgSFRNTDUgQm9pbGVycGxhdGUsIGNyZWF0aW5nIGEgc2l0ZSBvciBhcHAKdXN1YWxseSBpbnZvbHZlcyB0aGUgZm9sbG93aW5nOgoKMS4gU2V0IHVwIHRoZSBiYXNpYyBzdHJ1Y3R1cmUgb2YgdGhlIHNpdGUuCjIuIEFkZCBzb21lIGNvbnRlbnQsIHN0eWxlLCBhbmQgZnVuY3Rpb25hbGl0eS4KMy4gUnVuIHlvdXIgc2l0ZSBsb2NhbGx5IHRvIHNlZSBob3cgaXQgbG9va3MuCjQuIChPcHRpb25hbGx5IHJ1biBhIGJ1aWxkIHNjcmlwdCB0byBhdXRvbWF0ZSB0aGUgb3B0aW1pemF0aW9uIG9mIHlvdXIgc2l0ZSAtCiAgIGUuZy4gW2FudCBidWlsZCBzY3JpcHRdKGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL2FudC1idWlsZC1zY3JpcHQpIG9yIFtub2RlCiAgIGJ1aWxkIHNjcmlwdF0oaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvbm9kZS1idWlsZC1zY3JpcHQpKS4KNS4gRGVwbG95IHlvdXIgc2l0ZS4KCgojIyBCYXNpYyBzdHJ1Y3R1cmUKCkEgYmFzaWMgSFRNTDUgQm9pbGVycGxhdGUgc2l0ZSBpbml0aWFsbHkgbG9va3Mgc29tZXRoaW5nIGxpa2UgdGhpczoKCmBgYAouCuKUnOKUgOKUgCBjc3MK4pSCICAg4pSc4pSA4pSAIG1haW4uY3NzCuKUgiAgIOKUlOKUgOKUgCBub3JtYWxpemUuY3NzCuKUnOKUgOKUgCBkb2MK4pSc4pSA4pSAIGltZwrilJzilIDilIAganMK4pSCICAg4pSc4pSA4pSAIG1haW4uanMK4pSCICAg4pSc4pSA4pSAIHBsdWdpbnMuanMK4pSCICAg4pSU4pSA4pSAIHZlbmRvcgrilIIgICAgICAg4pSc4pSA4pSAIGpxdWVyeS5taW4uanMK4pSCICAgICAgIOKUlOKUgOKUgCBtb2Rlcm5penIubWluLmpzCuKUnOKUgOKUgCAuaHRhY2Nlc3MK4pSc4pSA4pSAIDQwNC5odG1sCuKUnOKUgOKUgCBhcHBsZS10b3VjaC1pY29uLXByZWNvbXBvc2VkLnBuZwrilJzilIDilIAgaW5kZXguaHRtbArilJzilIDilIAgaHVtYW5zLnR4dArilJzilIDilIAgcm9ib3RzLnR4dArilJzilIDilIAgY3Jvc3Nkb21haW4ueG1sCuKUlOKUgOKUgCBmYXZpY29uLmljbwpgYGAKCldoYXQgZm9sbG93cyBpcyBhIGdlbmVyYWwgb3ZlcnZpZXcgb2YgZWFjaCBtYWpvciBwYXJ0IGFuZCBob3cgdG8gdXNlIHRoZW0uCgojIyMgY3NzCgpUaGlzIGRpcmVjdG9yeSBzaG91bGQgY29udGFpbiBhbGwgeW91ciBwcm9qZWN0J3MgQ1NTIGZpbGVzLiBJdCBpbmNsdWRlcyBzb21lCmluaXRpYWwgQ1NTIHRvIGhlbHAgZ2V0IHlvdSBzdGFydGVkIGZyb20gYSBzb2xpZCBmb3VuZGF0aW9uLiBbQWJvdXQgdGhlCkNTU10oY3NzLm1kKS4KCiMjIyBkb2MKClRoaXMgZGlyZWN0b3J5IGNvbnRhaW5zIGFsbCB0aGUgSFRNTDUgQm9pbGVycGxhdGUgZG9jdW1lbnRhdGlvbi4gWW91IGNhbiB1c2UgaXQKYXMgdGhlIGxvY2F0aW9uIGFuZCBiYXNpcyBmb3IgeW91ciBvd24gcHJvamVjdCdzIGRvY3VtZW50YXRpb24uCgojIyMganMKClRoaXMgZGlyZWN0b3J5IHNob3VsZCBjb250YWluIGFsbCB5b3VyIHByb2plY3QncyBKUyBmaWxlcy4gTGlicmFyaWVzLCBwbHVnaW5zLAphbmQgY3VzdG9tIGNvZGUgY2FuIGFsbCBiZSBpbmNsdWRlZCBoZXJlLiBJdCBpbmNsdWRlcyBzb21lIGluaXRpYWwgSlMgdG8gaGVscApnZXQgeW91IHN0YXJ0ZWQuIFtBYm91dCB0aGUgSmF2YVNjcmlwdF0oanMubWQpLgoKIyMjIC5odGFjY2VzcwoKVGhlIGRlZmF1bHQgd2ViIHNlcnZlciBjb25maWdzIGFyZSBmb3IgQXBhY2hlLiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgcGxlYXNlCnJlZmVyIHRvIHRoZSBbQXBhY2hlIFNlcnZlciBDb25maWdzCmRvY3VtZW50YXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL3NlcnZlci1jb25maWdzLWFwYWNoZS90cmVlL21hc3Rlci9kb2MpLgoKSG9zdCB5b3VyIHNpdGUgb24gYSBzZXJ2ZXIgb3RoZXIgdGhhbiBBcGFjaGU/IFlvdSdyZSBsaWtlbHkgdG8gZmluZCB0aGUKY29ycmVzcG9uZGluZyBzZXJ2ZXIgY29uZmlncyBwcm9qZWN0IGxpc3RlZCBpbiBvdXIgW1NlcnZlciBDb25maWdzCl0oaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvc2VydmVyLWNvbmZpZ3MvYmxvYi9tYXN0ZXIvUkVBRE1FLm1kKSByZXBvc2l0b3J5LgoKIyMjIDQwNC5odG1sCgpBIGhlbHBmdWwgY3VzdG9tIDQwNCB0byBnZXQgeW91IHN0YXJ0ZWQuCgojIyMgaW5kZXguaHRtbAoKVGhpcyBpcyB0aGUgZGVmYXVsdCBIVE1MIHNrZWxldG9uIHRoYXQgc2hvdWxkIGZvcm0gdGhlIGJhc2lzIG9mIGFsbCBwYWdlcyBvbgp5b3VyIHNpdGUuIElmIHlvdSBhcmUgdXNpbmcgYSBzZXJ2ZXItc2lkZSB0ZW1wbGF0aW5nIGZyYW1ld29yaywgdGhlbiB5b3Ugd2lsbApuZWVkIHRvIGludGVncmF0ZSB0aGlzIHN0YXJ0aW5nIEhUTUwgd2l0aCB5b3VyIHNldHVwLgoKTWFrZSBzdXJlIHRoYXQgeW91IHVwZGF0ZSB0aGUgVVJMcyBmb3IgdGhlIHJlZmVyZW5jZWQgQ1NTIGFuZCBKYXZhU2NyaXB0IGlmIHlvdQptb2RpZnkgdGhlIGRpcmVjdG9yeSBzdHJ1Y3R1cmUgYXQgYWxsLgoKSWYgeW91IGFyZSB1c2luZyBHb29nbGUgQW5hbHl0aWNzLCBtYWtlIHN1cmUgdGhhdCB5b3UgZWRpdCB0aGUgY29ycmVzcG9uZGluZwpzbmlwcGV0IGF0IHRoZSBib3R0b20gdG8gaW5jbHVkZSB5b3VyIGFuYWx5dGljcyBJRC4KCiMjIyBodW1hbnMudHh0CgpFZGl0IHRoaXMgZmlsZSB0byBpbmNsdWRlIHRoZSB0ZWFtIHRoYXQgd29ya2VkIG9uIHlvdXIgc2l0ZS9hcHAsIGFuZCB0aGUKdGVjaG5vbG9neSBwb3dlcmluZyBpdC4KCiMjIyByb2JvdHMudHh0CgpFZGl0IHRoaXMgZmlsZSB0byBpbmNsdWRlIGFueSBwYWdlcyB5b3UgbmVlZCBoaWRkZW4gZnJvbSBzZWFyY2ggZW5naW5lcy4KCiMjIyBjcm9zc2RvbWFpbi54bWwKCkEgdGVtcGxhdGUgZm9yIHdvcmtpbmcgd2l0aCBjcm9zcy1kb21haW4gcmVxdWVzdHMuIFtBYm91dApjcm9zc2RvbWFpbi54bWxdKGNyb3NzZG9tYWluLm1kKS4KCiMjIyBJY29ucwoKUmVwbGFjZSB0aGUgZGVmYXVsdCBgZmF2aWNvbi5pY29gIGFuZCBBcHBsZSBUb3VjaCBJY29uIHdpdGggeW91ciBvd24uCgpJZiB5b3Ugd2FudCB0byB1c2UgZGlmZmVyZW50IEFwcGxlIFRvdWNoIEljb25zIGZvciBkaWZmZXJlbnQgcmVzb2x1dGlvbnMgcGxlYXNlCnJlZmVyIHRvIHRoZSBbYWNjb3JkaW5nIGRvY3VtZW50YXRpb25dKGV4dGVuZC5tZCNhcHBsZS10b3VjaC1pY29ucykuCgpZb3UgbWlnaHQgd2FudCB0byBjaGVjayBvdXQgSGFucycgaGFuZHkgW0hUTUw1IEJvaWxlcnBsYXRlIEZhdmljb24gYW5kIEFwcGxlClRvdWNoIEljb24KUFNELVRlbXBsYXRlXShodHRwOi8vZHJ1YmxpYy5kZS9ibG9nL2h0bWw1LWJvaWxlcnBsYXRlLWZhdmljb25zLXBzZC10ZW1wbGF0ZS8pLgo=')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/misc.md', 'data': base64.b64decode('W0hUTUw1IEJvaWxlcnBsYXRlIGhvbWVwYWdlXShodHRwOi8vaHRtbDVib2lsZXJwbGF0ZS5jb20pIHwgW0RvY3VtZW50YXRpb24KdGFibGUgb2YgY29udGVudHNdKFRPQy5tZCkKCiMgTWlzY2VsbGFuZW91cwoKIyMgLmdpdGlnbm9yZQoKSFRNTDUgQm9pbGVycGxhdGUgaW5jbHVkZXMgYSBiYXNpYyBwcm9qZWN0LWxldmVsIGAuZ2l0aWdub3JlYC4gVGhpcyBzaG91bGQKcHJpbWFyaWx5IGJlIHVzZWQgdG8gYXZvaWQgY2VydGFpbiBwcm9qZWN0LWxldmVsIGZpbGVzIGFuZCBkaXJlY3RvcmllcyBmcm9tCmJlaW5nIGtlcHQgdW5kZXIgc291cmNlIGNvbnRyb2wuIERpZmZlcmVudCBkZXZlbG9wbWVudC1lbnZpcm9ubWVudHMgd2lsbApiZW5lZml0IGZyb20gZGlmZmVyZW50IGNvbGxlY3Rpb25zIG9mIGlnbm9yZXMuCgpPUy1zcGVjaWZpYyBhbmQgZWRpdG9yLXNwZWNpZmljIGZpbGVzIHNob3VsZCBiZSBpZ25vcmVkIHVzaW5nIGEgImdsb2JhbAppZ25vcmUiIHRoYXQgYXBwbGllcyB0byBhbGwgcmVwb3NpdG9yaWVzIG9uIHlvdXIgc3lzdGVtLgoKRm9yIGV4YW1wbGUsIGFkZCB0aGUgZm9sbG93aW5nIHRvIHlvdXIgYH4vLmdpdGNvbmZpZ2AsIHdoZXJlIHRoZSBgLmdpdGlnbm9yZWAKaW4geW91ciBIT01FIGRpcmVjdG9yeSBjb250YWlucyB0aGUgZmlsZXMgYW5kIGRpcmVjdG9yaWVzIHlvdSdkIGxpa2UgdG8KZ2xvYmFsbHkgaWdub3JlOgoKYGBgZ2l0aWdub3JlCltjb3JlXQogICAgZXhjbHVkZXNmaWxlID0gfi8uZ2l0aWdub3JlCmBgYAoKKiBNb3JlIG9uIGdsb2JhbCBpZ25vcmVzOiBodHRwOi8vaGVscC5naXRodWIuY29tL2lnbm9yZS1maWxlcy8KKiBDb21wcmVoZW5zaXZlIHNldCBvZiBpZ25vcmVzIG9uIEdpdEh1YjogaHR0cHM6Ly9naXRodWIuY29tL2dpdGh1Yi9naXRpZ25vcmUK')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/extend.md', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/html5-boilerplate/doc/crossdomain.md', 'data': base64.b64decode('W0hUTUw1IEJvaWxlcnBsYXRlIGhvbWVwYWdlXShodHRwOi8vaHRtbDVib2lsZXJwbGF0ZS5jb20pIHwgW0RvY3VtZW50YXRpb24KdGFibGUgb2YgY29udGVudHNdKFRPQy5tZCkKCiMgY3Jvc3Nkb21haW4ueG1sCgpBIGNyb3NzLWRvbWFpbiBwb2xpY3kgZmlsZSBpcyBhbiBYTUwgZG9jdW1lbnQgdGhhdCBncmFudHMgYSB3ZWIgY2xpZW504oCUc3VjaCBhcwpBZG9iZSBGbGFzaCBQbGF5ZXIsIEFkb2JlIFJlYWRlciwgZXRjLiwgcGVybWlzc2lvbiB0byBoYW5kbGUgZGF0YSBhY3Jvc3MKbXVsdGlwbGUgZG9tYWlucy4gV2hlbiBhIGNsaWVudCBob3N0cyBjb250ZW50IGZyb20gYSBwYXJ0aWN1bGFyIHNvdXJjZSBkb21haW4KYW5kIHRoYXQgY29udGVudCBtYWtlcyByZXF1ZXN0cyBkaXJlY3RlZCB0b3dhcmRzIGEgZG9tYWluIG90aGVyIHRoYW4gaXRzIG93biwKdGhlIHJlbW90ZSBkb21haW4gd291bGQgbmVlZCB0byBob3N0IGEgY3Jvc3MtZG9tYWluIHBvbGljeSBmaWxlIHRoYXQgZ3JhbnRzCmFjY2VzcyB0byB0aGUgc291cmNlIGRvbWFpbiwgYWxsb3dpbmcgdGhlIGNsaWVudCB0byBjb250aW51ZSB3aXRoIHRoZQp0cmFuc2FjdGlvbi4gUG9saWN5IGZpbGVzIGdyYW50IHJlYWQgYWNjZXNzIHRvIGRhdGEsIHBlcm1pdCBhIGNsaWVudCB0byBpbmNsdWRlCmN1c3RvbSBoZWFkZXJzIGluIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgYW5kIGFyZSBhbHNvIHVzZWQgd2l0aCBzb2NrZXRzIHRvCmdyYW50IHBlcm1pc3Npb25zIGZvciBzb2NrZXQtYmFzZWQgY29ubmVjdGlvbnMuCgpGb3IgZnVsbCBkZXRhaWxzLCBjaGVjayBvdXQgQWRvYmUncyBhcnRpY2xlIGFib3V0IHRoZSBbY3Jvc3MtZG9tYWluIHBvbGljeSBmaWxlCnNwZWNpZmljYXRpb25dKGh0dHA6Ly93d3cuYWRvYmUuY29tL2Rldm5ldC9hcnRpY2xlcy9jcm9zc2RvbWFpbl9wb2xpY3lfZmlsZV9zcGVjLmh0bWwpLgo=')
},
{
'name': '/app/bower_components/html5-boilerplate/css/main.css', 'data': base64.b64decode('LyohIEhUTUw1IEJvaWxlcnBsYXRlIHY0LjMuMCB8IE1JVCBMaWNlbnNlIHwgaHR0cDovL2g1YnAuY29tLyAqLwoKLyoKICogV2hhdCBmb2xsb3dzIGlzIHRoZSByZXN1bHQgb2YgbXVjaCByZXNlYXJjaCBvbiBjcm9zcy1icm93c2VyIHN0eWxpbmcuCiAqIENyZWRpdCBsZWZ0IGlubGluZSBhbmQgYmlnIHRoYW5rcyB0byBOaWNvbGFzIEdhbGxhZ2hlciwgSm9uYXRoYW4gTmVhbCwKICogS3JvYyBDYW1lbiwgYW5kIHRoZSBINUJQIGRldiBjb21tdW5pdHkgYW5kIHRlYW0uCiAqLwoKLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgQmFzZSBzdHlsZXM6IG9waW5pb25hdGVkIGRlZmF1bHRzCiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgpodG1sLApidXR0b24sCmlucHV0LApzZWxlY3QsCnRleHRhcmVhIHsKICAgIGNvbG9yOiAjMjIyOwp9CgpodG1sIHsKICAgIGZvbnQtc2l6ZTogMWVtOwogICAgbGluZS1oZWlnaHQ6IDEuNDsKfQoKLyoKICogUmVtb3ZlIHRleHQtc2hhZG93IGluIHNlbGVjdGlvbiBoaWdobGlnaHQ6IGg1YnAuY29tL2kKICogVGhlc2Ugc2VsZWN0aW9uIHJ1bGUgc2V0cyBoYXZlIHRvIGJlIHNlcGFyYXRlLgogKiBDdXN0b21pemUgdGhlIGJhY2tncm91bmQgY29sb3IgdG8gbWF0Y2ggeW91ciBkZXNpZ24uCiAqLwoKOjotbW96LXNlbGVjdGlvbiB7CiAgICBiYWNrZ3JvdW5kOiAjYjNkNGZjOwogICAgdGV4dC1zaGFkb3c6IG5vbmU7Cn0KCjo6c2VsZWN0aW9uIHsKICAgIGJhY2tncm91bmQ6ICNiM2Q0ZmM7CiAgICB0ZXh0LXNoYWRvdzogbm9uZTsKfQoKLyoKICogQSBiZXR0ZXIgbG9va2luZyBkZWZhdWx0IGhvcml6b250YWwgcnVsZQogKi8KCmhyIHsKICAgIGRpc3BsYXk6IGJsb2NrOwogICAgaGVpZ2h0OiAxcHg7CiAgICBib3JkZXI6IDA7CiAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2NjYzsKICAgIG1hcmdpbjogMWVtIDA7CiAgICBwYWRkaW5nOiAwOwp9CgovKgogKiBSZW1vdmUgdGhlIGdhcCBiZXR3ZWVuIGltYWdlcywgdmlkZW9zLCBhdWRpbyBhbmQgY2FudmFzIGFuZCB0aGUgYm90dG9tIG9mCiAqIHRoZWlyIGNvbnRhaW5lcnM6IGg1YnAuY29tL2kvNDQwCiAqLwoKYXVkaW8sCmNhbnZhcywKaW1nLAp2aWRlbyB7CiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwp9CgovKgogKiBSZW1vdmUgZGVmYXVsdCBmaWVsZHNldCBzdHlsZXMuCiAqLwoKZmllbGRzZXQgewogICAgYm9yZGVyOiAwOwogICAgbWFyZ2luOiAwOwogICAgcGFkZGluZzogMDsKfQoKLyoKICogQWxsb3cgb25seSB2ZXJ0aWNhbCByZXNpemluZyBvZiB0ZXh0YXJlYXMuCiAqLwoKdGV4dGFyZWEgewogICAgcmVzaXplOiB2ZXJ0aWNhbDsKfQoKLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KICAgQnJvd3NlIEhhcHB5IHByb21wdAogICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKLmJyb3dzZWhhcHB5IHsKICAgIG1hcmdpbjogMC4yZW0gMDsKICAgIGJhY2tncm91bmQ6ICNjY2M7CiAgICBjb2xvcjogIzAwMDsKICAgIHBhZGRpbmc6IDAuMmVtIDA7Cn0KCi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgIEF1dGhvcidzIGN1c3RvbSBzdHlsZXMKICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi8KCgoKCgoKCgoKCgoKCgoKCgovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICBIZWxwZXIgY2xhc3NlcwogICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoKLyoKICogSW1hZ2UgcmVwbGFjZW1lbnQKICovCgouaXIgewogICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgICBib3JkZXI6IDA7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgLyogSUUgNi83IGZhbGxiYWNrICovCiAgICAqdGV4dC1pbmRlbnQ6IC05OTk5cHg7Cn0KCi5pcjpiZWZvcmUgewogICAgY29udGVudDogIiI7CiAgICBkaXNwbGF5OiBibG9jazsKICAgIHdpZHRoOiAwOwogICAgaGVpZ2h0OiAxNTAlOwp9CgovKgogKiBIaWRlIGZyb20gYm90aCBzY3JlZW5yZWFkZXJzIGFuZCBicm93c2VyczogaDVicC5jb20vdQogKi8KCi5oaWRkZW4gewogICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OwogICAgdmlzaWJpbGl0eTogaGlkZGVuOwp9CgovKgogKiBIaWRlIG9ubHkgdmlzdWFsbHksIGJ1dCBoYXZlIGl0IGF2YWlsYWJsZSBmb3Igc2NyZWVucmVhZGVyczogaDVicC5jb20vdgogKi8KCi52aXN1YWxseWhpZGRlbiB7CiAgICBib3JkZXI6IDA7CiAgICBjbGlwOiByZWN0KDAgMCAwIDApOwogICAgaGVpZ2h0OiAxcHg7CiAgICBtYXJnaW46IC0xcHg7CiAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgcGFkZGluZzogMDsKICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAgIHdpZHRoOiAxcHg7Cn0KCi8qCiAqIEV4dGVuZHMgdGhlIC52aXN1YWxseWhpZGRlbiBjbGFzcyB0byBhbGxvdyB0aGUgZWxlbWVudCB0byBiZSBmb2N1c2FibGUKICogd2hlbiBuYXZpZ2F0ZWQgdG8gdmlhIHRoZSBrZXlib2FyZDogaDVicC5jb20vcAogKi8KCi52aXN1YWxseWhpZGRlbi5mb2N1c2FibGU6YWN0aXZlLAoudmlzdWFsbHloaWRkZW4uZm9jdXNhYmxlOmZvY3VzIHsKICAgIGNsaXA6IGF1dG87CiAgICBoZWlnaHQ6IGF1dG87CiAgICBtYXJnaW46IDA7CiAgICBvdmVyZmxvdzogdmlzaWJsZTsKICAgIHBvc2l0aW9uOiBzdGF0aWM7CiAgICB3aWR0aDogYXV0bzsKfQoKLyoKICogSGlkZSB2aXN1YWxseSBhbmQgZnJvbSBzY3JlZW5yZWFkZXJzLCBidXQgbWFpbnRhaW4gbGF5b3V0CiAqLwoKLmludmlzaWJsZSB7CiAgICB2aXNpYmlsaXR5OiBoaWRkZW47Cn0KCi8qCiAqIENsZWFyZml4OiBjb250YWluIGZsb2F0cwogKgogKiBGb3IgbW9kZXJuIGJyb3dzZXJzCiAqIDEuIFRoZSBzcGFjZSBjb250ZW50IGlzIG9uZSB3YXkgdG8gYXZvaWQgYW4gT3BlcmEgYnVnIHdoZW4gdGhlCiAqICAgIGBjb250ZW50ZWRpdGFibGVgIGF0dHJpYnV0ZSBpcyBpbmNsdWRlZCBhbnl3aGVyZSBlbHNlIGluIHRoZSBkb2N1bWVudC4KICogICAgT3RoZXJ3aXNlIGl0IGNhdXNlcyBzcGFjZSB0byBhcHBlYXIgYXQgdGhlIHRvcCBhbmQgYm90dG9tIG9mIGVsZW1lbnRzCiAqICAgIHRoYXQgcmVjZWl2ZSB0aGUgYGNsZWFyZml4YCBjbGFzcy4KICogMi4gVGhlIHVzZSBvZiBgdGFibGVgIHJhdGhlciB0aGFuIGBibG9ja2AgaXMgb25seSBuZWNlc3NhcnkgaWYgdXNpbmcKICogICAgYDpiZWZvcmVgIHRvIGNvbnRhaW4gdGhlIHRvcC1tYXJnaW5zIG9mIGNoaWxkIGVsZW1lbnRzLgogKi8KCi5jbGVhcmZpeDpiZWZvcmUsCi5jbGVhcmZpeDphZnRlciB7CiAgICBjb250ZW50OiAiICI7IC8qIDEgKi8KICAgIGRpc3BsYXk6IHRhYmxlOyAvKiAyICovCn0KCi5jbGVhcmZpeDphZnRlciB7CiAgICBjbGVhcjogYm90aDsKfQoKLyoKICogRm9yIElFIDYvNyBvbmx5CiAqIEluY2x1ZGUgdGhpcyBydWxlIHRvIHRyaWdnZXIgaGFzTGF5b3V0IGFuZCBjb250YWluIGZsb2F0cy4KICovCgouY2xlYXJmaXggewogICAgKnpvb206IDE7Cn0KCi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgIEVYQU1QTEUgTWVkaWEgUXVlcmllcyBmb3IgUmVzcG9uc2l2ZSBEZXNpZ24uCiAgIFRoZXNlIGV4YW1wbGVzIG92ZXJyaWRlIHRoZSBwcmltYXJ5ICgnbW9iaWxlIGZpcnN0Jykgc3R5bGVzLgogICBNb2RpZnkgYXMgY29udGVudCByZXF1aXJlcy4KICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi8KCkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzVlbSkgewogICAgLyogU3R5bGUgYWRqdXN0bWVudHMgZm9yIHZpZXdwb3J0cyB0aGF0IG1lZXQgdGhlIGNvbmRpdGlvbiAqLwp9CgpAbWVkaWEgcHJpbnQsCiAgICAgICAoLW8tbWluLWRldmljZS1waXhlbC1yYXRpbzogNS80KSwKICAgICAgICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDEuMjUpLAogICAgICAgKG1pbi1yZXNvbHV0aW9uOiAxMjBkcGkpIHsKICAgIC8qIFN0eWxlIGFkanVzdG1lbnRzIGZvciBoaWdoIHJlc29sdXRpb24gZGV2aWNlcyAqLwp9CgovKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQogICBQcmludCBzdHlsZXMuCiAgIElubGluZWQgdG8gYXZvaWQgcmVxdWlyZWQgSFRUUCBjb25uZWN0aW9uOiBoNWJwLmNvbS9yCiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgpAbWVkaWEgcHJpbnQgewogICAgKiB7CiAgICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgIWltcG9ydGFudDsKICAgICAgICBjb2xvcjogIzAwMCAhaW1wb3J0YW50OyAvKiBCbGFjayBwcmludHMgZmFzdGVyOiBoNWJwLmNvbS9zICovCiAgICAgICAgYm94LXNoYWRvdzogbm9uZSAhaW1wb3J0YW50OwogICAgICAgIHRleHQtc2hhZG93OiBub25lICFpbXBvcnRhbnQ7CiAgICB9CgogICAgYSwKICAgIGE6dmlzaXRlZCB7CiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7CiAgICB9CgogICAgYVtocmVmXTphZnRlciB7CiAgICAgICAgY29udGVudDogIiAoIiBhdHRyKGhyZWYpICIpIjsKICAgIH0KCiAgICBhYmJyW3RpdGxlXTphZnRlciB7CiAgICAgICAgY29udGVudDogIiAoIiBhdHRyKHRpdGxlKSAiKSI7CiAgICB9CgogICAgLyoKICAgICAqIERvbid0IHNob3cgbGlua3MgZm9yIGltYWdlcywgb3IgamF2YXNjcmlwdC9pbnRlcm5hbCBsaW5rcwogICAgICovCgogICAgLmlyIGE6YWZ0ZXIsCiAgICBhW2hyZWZePSJqYXZhc2NyaXB0OiJdOmFmdGVyLAogICAgYVtocmVmXj0iIyJdOmFmdGVyIHsKICAgICAgICBjb250ZW50OiAiIjsKICAgIH0KCiAgICBwcmUsCiAgICBibG9ja3F1b3RlIHsKICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjOTk5OwogICAgICAgIHBhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDsKICAgIH0KCiAgICB0aGVhZCB7CiAgICAgICAgZGlzcGxheTogdGFibGUtaGVhZGVyLWdyb3VwOyAvKiBoNWJwLmNvbS90ICovCiAgICB9CgogICAgdHIsCiAgICBpbWcgewogICAgICAgIHBhZ2UtYnJlYWstaW5zaWRlOiBhdm9pZDsKICAgIH0KCiAgICBpbWcgewogICAgICAgIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50OwogICAgfQoKICAgIEBwYWdlIHsKICAgICAgICBtYXJnaW46IDAuNWNtOwogICAgfQoKICAgIHAsCiAgICBoMiwKICAgIGgzIHsKICAgICAgICBvcnBoYW5zOiAzOwogICAgICAgIHdpZG93czogMzsKICAgIH0KCiAgICBoMiwKICAgIGgzIHsKICAgICAgICBwYWdlLWJyZWFrLWFmdGVyOiBhdm9pZDsKICAgIH0KfQo=')
},
{
'name': '/app/bower_components/html5-boilerplate/css/normalize.css', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular-loader/angular-loader.min.js.map', 'data': base64.b64decode('ewoidmVyc2lvbiI6MywKImZpbGUiOiJhbmd1bGFyLWxvYWRlci5taW4uanMiLAoibGluZUNvdW50Ijo4LAoibWFwcGluZ3MiOiJBOzs7OzthQU1DLFNBQVEsRUFBRyxDQThCWkEsUUFBQUEsRUFBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsTUFBQUEsU0FBQUEsRUFBQUEsQ0FBQUEsSUFBQUEsRUFBQUEsU0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsRUFBQUEsR0FBQUEsRUFBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsQ0FBQUEsR0FBQUEsQ0FBQUEsRUFBQUEsRUFBQUEsQ0FBQUEsQ0FBQUEsdUNBQUFBLEVBQUFBLENBQUFBLENBQUFBLENBQUFBLENBQUFBLEdBQUFBLENBQUFBLEVBQUFBLEVBQUFBLENBQUFBLEtBQUFBLENBQUFBLENBQUFBLENBQUFBLENBQUFBLENBQUFBLENBQUFBLFNBQUFBLE9BQUFBLENBQUFBLENBQUFBLEVBQUFBLENBQUFBLENBQUFBLENBQUFBLENBQUFBLEVBQUFBLENBQUFBLEVBQUFBLENBQUFBLENBQUFBLEdBQUFBLENBQUFBLEdBQUFBLEVBQUFBLEdBQUFBLEVBQUFBLENBQUFBLENBQUFBLENBQUFBLEVBQUFBLEdBQUFBLENBQUFBLGtCQUFBQSxDQUFBQSxVQUFBQSxFQUFBQSxNQUFBQSxVQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxTQUFBQSxFQUFBQSxRQUFBQSxDQUFBQSxhQUFBQSxDQUFBQSxFQUFBQSxDQUFBQSxDQUFBQSxXQUFBQSxFQUFBQSxNQUFBQSxVQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxXQUFBQSxDQUFBQSxRQUFBQSxFQUFBQSxNQUFBQSxVQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxJQUFBQSxVQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxTQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxPQUFBQSxNQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQUFBQSxDQXVEQUMsU0FBMEIsQ0FBQ0MsQ0FBRCxDQUFTLENBRWpDLElBQUlDLEVBQWtCSCxDQUFBLENBQU8sV0FBUCxDQUF0QixDQUNJSSxFQUFXSixDQUFBLENBQU8sSUFBUCxDQU1YSyxFQUFBQSxDQUFpQkgsQ0FIWixRQUdMRztDQUFpQkgsQ0FIRSxRQUduQkcsQ0FIK0IsRUFHL0JBLENBR0pBLEVBQUFDLFNBQUEsQ0FBbUJELENBQUFDLFNBQW5CLEVBQXVDTixDQUV2QyxPQUFjSyxFQVJMLE9BUVQsR0FBY0EsQ0FSUyxPQVF2QixDQUFpQ0UsUUFBUSxFQUFHLENBRTFDLElBQUlDLEVBQVUsRUFxRGQsT0FBT0MsU0FBZSxDQUFDQyxDQUFELENBQU9DLENBQVAsQ0FBaUJDLENBQWpCLENBQTJCLENBRTdDLEdBQWEsZ0JBQWIsR0FLc0JGLENBTHRCLENBQ0UsS0FBTU4sRUFBQSxDQUFTLFNBQVQsQ0FJb0JTLFFBSnBCLENBQU4sQ0FLQUYsQ0FBSixFQUFnQkgsQ0FBQU0sZUFBQSxDQUF1QkosQ0FBdkIsQ0FBaEIsR0FDRUYsQ0FBQSxDQUFRRSxDQUFSLENBREYsQ0FDa0IsSUFEbEIsQ0FHQSxPQUFjRixFQTFFVCxDQTBFa0JFLENBMUVsQixDQTBFTCxHQUFjRixDQTFFSyxDQTBFSUUsQ0ExRUosQ0EwRW5CLENBQTZCSCxRQUFRLEVBQUcsQ0FrTnRDUSxRQUFTQSxFQUFXLENBQUNDLENBQUQsQ0FBV0MsQ0FBWCxDQUFtQkMsQ0FBbkIsQ0FBaUMsQ0FDbkQsTUFBTyxTQUFRLEVBQUcsQ0FDaEJDLENBQUEsQ0FBWUQsQ0FBWixFQUE0QixNQUE1QixDQUFBLENBQW9DLENBQUNGLENBQUQsQ0FBV0MsQ0FBWCxDQUFtQkcsU0FBbkIsQ0FBcEMsQ0FDQSxPQUFPQyxFQUZTLENBRGlDLENBak5yRCxHQUFJLENBQUNWLENBQUwsQ0FDRSxLQUFNUixFQUFBLENBQWdCLE9BQWhCLENBRWlETyxDQUZqRCxDQUFOLENBTUYsSUFBSVMsRUFBYyxFQUFsQixDQUdJRyxFQUFZLEVBSGhCLENBS0lDLEVBQVNSLENBQUEsQ0FBWSxXQUFaLENBQXlCLFFBQXpCLENBTGIsQ0FRSU0sRUFBaUIsY0FFTEYsQ0FGSyxZQUdQRyxDQUhPLFVBY1RYLENBZFMsTUF1QmJELENBdkJhLFVBb0NUSyxDQUFBLENBQVksVUFBWixDQUF3QixVQUF4QixDQXBDUyxTQStDVkEsQ0FBQSxDQUFZLFVBQVosQ0FBd0IsU0FBeEIsQ0EvQ1UsU0EwRFZBLENBQUEsQ0FBWSxVQUFaO0FBQXdCLFNBQXhCLENBMURVLE9BcUVaQSxDQUFBLENBQVksVUFBWixDQUF3QixPQUF4QixDQXJFWSxVQWlGVEEsQ0FBQSxDQUFZLFVBQVosQ0FBd0IsVUFBeEIsQ0FBb0MsU0FBcEMsQ0FqRlMsV0FtSFJBLENBQUEsQ0FBWSxrQkFBWixDQUFnQyxVQUFoQyxDQW5IUSxRQThIWEEsQ0FBQSxDQUFZLGlCQUFaLENBQStCLFVBQS9CLENBOUhXLFlBMElQQSxDQUFBLENBQVkscUJBQVosQ0FBbUMsVUFBbkMsQ0ExSU8sV0F1SlJBLENBQUEsQ0FBWSxrQkFBWixDQUFnQyxXQUFoQyxDQXZKUSxRQW9LWFEsQ0FwS1csS0FnTGRDLFFBQVEsQ0FBQ0MsQ0FBRCxDQUFRLENBQ25CSCxDQUFBSSxLQUFBLENBQWVELENBQWYsQ0FDQSxPQUFPLEtBRlksQ0FoTEYsQ0FzTGpCYixFQUFKLEVBQ0VXLENBQUEsQ0FBT1gsQ0FBUCxDQUdGLE9BQVFTLEVBMU04QixDQTFFVCxFQTBFL0IsQ0FYK0MsQ0F2RFAsQ0FSVCxFQVFuQyxDQWRpQyxDQUFuQ3BCLENBOFNBLENBQWtCQyxNQUFsQixDQW5ZWSxDQUFYLENBQUEsQ0FvWUVBLE1BcFlGOyIsCiJzb3VyY2VzIjpbImFuZ3VsYXItbG9hZGVyLmpzIl0sCiJuYW1lcyI6WyJtaW5FcnIiLCJzZXR1cE1vZHVsZUxvYWRlciIsIndpbmRvdyIsIiRpbmplY3Rvck1pbkVyciIsIm5nTWluRXJyIiwiYW5ndWxhciIsIiQkbWluRXJyIiwiZmFjdG9yeSIsIm1vZHVsZXMiLCJtb2R1bGUiLCJuYW1lIiwicmVxdWlyZXMiLCJjb25maWdGbiIsImNvbnRleHQiLCJoYXNPd25Qcm9wZXJ0eSIsImludm9rZUxhdGVyIiwicHJvdmlkZXIiLCJtZXRob2QiLCJpbnNlcnRNZXRob2QiLCJpbnZva2VRdWV1ZSIsImFyZ3VtZW50cyIsIm1vZHVsZUluc3RhbmNlIiwicnVuQmxvY2tzIiwiY29uZmlnIiwicnVuIiwiYmxvY2siLCJwdXNoIl0KfQo=')
},
{
'name': '/app/bower_components/angular-loader/README.md', 'data': base64.b64decode('IyBib3dlci1hbmd1bGFyLWxvYWRlcgoKVGhpcyByZXBvIGlzIGZvciBkaXN0cmlidXRpb24gb24gYGJvd2VyYC4gVGhlIHNvdXJjZSBmb3IgYGFuZ3VsYXItbG9hZGVyYCBpcyBpbiB0aGUKW21haW4gQW5ndWxhckpTIHJlcG9dKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvYmxvYi9tYXN0ZXIvc3JjL2xvYWRlci5qcykuClBsZWFzZSBmaWxlIGlzc3VlcyBhbmQgcHVsbCByZXF1ZXN0cyBhZ2FpbnN0IHRoYXQgcmVwby4KCiMjIEluc3RhbGwKCkluc3RhbGwgd2l0aCBgYm93ZXJgOgoKYGBgc2hlbGwKYm93ZXIgaW5zdGFsbCBhbmd1bGFyLWxvYWRlcgpgYGAKCkFkZCBhIGA8c2NyaXB0PmAgdG8geW91ciBgaW5kZXguaHRtbGA6CgpgYGBodG1sCjxzY3JpcHQgc3JjPSIvYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLWxvYWRlci9hbmd1bGFyLWxvYWRlci5qcyI+PC9zY3JpcHQ+CmBgYAoKIyMgRG9jdW1lbnRhdGlvbgoKRG9jdW1lbnRhdGlvbiBpcyBhdmFpbGFibGUgb24gdGhlCltBbmd1bGFySlMgZG9jcyBzaXRlXShodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2d1aWRlL2Jvb3RzdHJhcCkuCgojIyBMaWNlbnNlCgpUaGUgTUlUIExpY2Vuc2UKCkNvcHlyaWdodCAoYykgMjAxMC0yMDEyIEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZwoKUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQpvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAppbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCnRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCmZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgpUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbgphbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS4KClRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCAiQVMgSVMiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SCklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLApGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUKQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUgpMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLApPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOClRIRSBTT0ZUV0FSRS4K')
},
{
'name': '/app/bower_components/angular-loader/bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImFuZ3VsYXItbG9hZGVyIiwKICAidmVyc2lvbiI6ICIxLjIuMTkiLAogICJtYWluIjogIi4vYW5ndWxhci1sb2FkZXIuanMiLAogICJkZXBlbmRlbmNpZXMiOiB7CiAgICAiYW5ndWxhciI6ICIxLjIuMTkiCiAgfQp9Cg==')
},
{
'name': '/app/bower_components/angular-loader/angular-loader.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular-loader/angular-loader.min.js', 'data': base64.b64decode('LyoKIEFuZ3VsYXJKUyB2MS4yLjE5CiAoYykgMjAxMC0yMDE0IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZwogTGljZW5zZTogTUlUCiovCihmdW5jdGlvbigpeyd1c2Ugc3RyaWN0JztmdW5jdGlvbiBkKGEpe3JldHVybiBmdW5jdGlvbigpe3ZhciBjPWFyZ3VtZW50c1swXSxiLGM9IlsiKyhhP2ErIjoiOiIiKStjKyJdIGh0dHA6Ly9lcnJvcnMuYW5ndWxhcmpzLm9yZy8xLjIuMTkvIisoYT9hKyIvIjoiIikrYztmb3IoYj0xO2I8YXJndW1lbnRzLmxlbmd0aDtiKyspYz1jKygxPT1iPyI/IjoiJiIpKyJwIisoYi0xKSsiPSIrZW5jb2RlVVJJQ29tcG9uZW50KCJmdW5jdGlvbiI9PXR5cGVvZiBhcmd1bWVudHNbYl0/YXJndW1lbnRzW2JdLnRvU3RyaW5nKCkucmVwbGFjZSgvIFx7W1xzXFNdKiQvLCIiKToidW5kZWZpbmVkIj09dHlwZW9mIGFyZ3VtZW50c1tiXT8idW5kZWZpbmVkIjoic3RyaW5nIiE9dHlwZW9mIGFyZ3VtZW50c1tiXT9KU09OLnN0cmluZ2lmeShhcmd1bWVudHNbYl0pOmFyZ3VtZW50c1tiXSk7cmV0dXJuIEVycm9yKGMpfX0oZnVuY3Rpb24oYSl7dmFyIGM9ZCgiJGluamVjdG9yIiksYj1kKCJuZyIpO2E9YS5hbmd1bGFyfHwKKGEuYW5ndWxhcj17fSk7YS4kJG1pbkVycj1hLiQkbWluRXJyfHxkO3JldHVybiBhLm1vZHVsZXx8KGEubW9kdWxlPWZ1bmN0aW9uKCl7dmFyIGE9e307cmV0dXJuIGZ1bmN0aW9uKGUsZCxmKXtpZigiaGFzT3duUHJvcGVydHkiPT09ZSl0aHJvdyBiKCJiYWRuYW1lIiwibW9kdWxlIik7ZCYmYS5oYXNPd25Qcm9wZXJ0eShlKSYmKGFbZV09bnVsbCk7cmV0dXJuIGFbZV18fChhW2VdPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShjLGQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7YltlfHwicHVzaCJdKFtjLGQsYXJndW1lbnRzXSk7cmV0dXJuIGd9fWlmKCFkKXRocm93IGMoIm5vbW9kIixlKTt2YXIgYj1bXSxoPVtdLGs9YSgiJGluamVjdG9yIiwiaW52b2tlIiksZz17X2ludm9rZVF1ZXVlOmIsX3J1bkJsb2NrczpoLHJlcXVpcmVzOmQsbmFtZTplLHByb3ZpZGVyOmEoIiRwcm92aWRlIiwicHJvdmlkZXIiKSxmYWN0b3J5OmEoIiRwcm92aWRlIiwiZmFjdG9yeSIpLHNlcnZpY2U6YSgiJHByb3ZpZGUiLAoic2VydmljZSIpLHZhbHVlOmEoIiRwcm92aWRlIiwidmFsdWUiKSxjb25zdGFudDphKCIkcHJvdmlkZSIsImNvbnN0YW50IiwidW5zaGlmdCIpLGFuaW1hdGlvbjphKCIkYW5pbWF0ZVByb3ZpZGVyIiwicmVnaXN0ZXIiKSxmaWx0ZXI6YSgiJGZpbHRlclByb3ZpZGVyIiwicmVnaXN0ZXIiKSxjb250cm9sbGVyOmEoIiRjb250cm9sbGVyUHJvdmlkZXIiLCJyZWdpc3RlciIpLGRpcmVjdGl2ZTphKCIkY29tcGlsZVByb3ZpZGVyIiwiZGlyZWN0aXZlIiksY29uZmlnOmsscnVuOmZ1bmN0aW9uKGEpe2gucHVzaChhKTtyZXR1cm4gdGhpc319O2YmJmsoZik7cmV0dXJuIGd9KCkpfX0oKSl9KSh3aW5kb3cpfSkod2luZG93KTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ndWxhci1sb2FkZXIubWluLmpzLm1hcAo=')
},
{
'name': '/app/bower_components/angular-loader/.bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImFuZ3VsYXItbG9hZGVyIiwKICAidmVyc2lvbiI6ICIxLjIuMTkiLAogICJtYWluIjogIi4vYW5ndWxhci1sb2FkZXIuanMiLAogICJkZXBlbmRlbmNpZXMiOiB7CiAgICAiYW5ndWxhciI6ICIxLjIuMTkiCiAgfSwKICAiaG9tZXBhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYm93ZXItYW5ndWxhci1sb2FkZXIiLAogICJfcmVsZWFzZSI6ICIxLjIuMTkiLAogICJfcmVzb2x1dGlvbiI6IHsKICAgICJ0eXBlIjogInZlcnNpb24iLAogICAgInRhZyI6ICJ2MS4yLjE5IiwKICAgICJjb21taXQiOiAiYTg5YzFlZjJlODdhZTk0NDYyZWRiNzExOThiNjRhNzlmOWY1MDViOSIKICB9LAogICJfc291cmNlIjogImdpdDovL2dpdGh1Yi5jb20vYW5ndWxhci9ib3dlci1hbmd1bGFyLWxvYWRlci5naXQiLAogICJfdGFyZ2V0IjogIjEuMi54IiwKICAiX29yaWdpbmFsU291cmNlIjogImFuZ3VsYXItbG9hZGVyIgp9')
},
{
'name': '/app/bower_components/angular/angular.min.js.gzip', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular/angular.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular/angular-csp.css', 'data': base64.b64decode('LyogSW5jbHVkZSB0aGlzIGZpbGUgaW4geW91ciBodG1sIGlmIHlvdSBhcmUgdXNpbmcgdGhlIENTUCBtb2RlLiAqLwoKQGNoYXJzZXQgIlVURi04IjsKCltuZ1w6Y2xvYWtdLCBbbmctY2xvYWtdLCBbZGF0YS1uZy1jbG9ha10sIFt4LW5nLWNsb2FrXSwKLm5nLWNsb2FrLCAueC1uZy1jbG9haywKLm5nLWhpZGUgewogIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKfQoKbmdcOmZvcm0gewogIGRpc3BsYXk6IGJsb2NrOwp9CgoubmctYW5pbWF0ZS1ibG9jay10cmFuc2l0aW9ucyB7CiAgdHJhbnNpdGlvbjowcyBhbGwhaW1wb3J0YW50OwogIC13ZWJraXQtdHJhbnNpdGlvbjowcyBhbGwhaW1wb3J0YW50Owp9CgovKiBzaG93IHRoZSBlbGVtZW50IGR1cmluZyBhIHNob3cvaGlkZSBhbmltYXRpb24gd2hlbiB0aGUKICogYW5pbWF0aW9uIGlzIG9uZ29pbmcsIGJ1dCB0aGUgLm5nLWhpZGUgY2xhc3MgaXMgYWN0aXZlICovCi5uZy1oaWRlLWFkZC1hY3RpdmUsIC5uZy1oaWRlLXJlbW92ZSB7CiAgZGlzcGxheTogYmxvY2shaW1wb3J0YW50Owp9Cg==')
},
{
'name': '/app/bower_components/angular/README.md', 'data': base64.b64decode('IyBib3dlci1hbmd1bGFyCgpUaGlzIHJlcG8gaXMgZm9yIGRpc3RyaWJ1dGlvbiBvbiBgYm93ZXJgLiBUaGUgc291cmNlIGZvciB0aGlzIG1vZHVsZSBpcyBpbiB0aGUKW21haW4gQW5ndWxhckpTIHJlcG9dKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMpLgpQbGVhc2UgZmlsZSBpc3N1ZXMgYW5kIHB1bGwgcmVxdWVzdHMgYWdhaW5zdCB0aGF0IHJlcG8uCgojIyBJbnN0YWxsCgpJbnN0YWxsIHdpdGggYGJvd2VyYDoKCmBgYHNoZWxsCmJvd2VyIGluc3RhbGwgYW5ndWxhcgpgYGAKCkFkZCBhIGA8c2NyaXB0PmAgdG8geW91ciBgaW5kZXguaHRtbGA6CgpgYGBodG1sCjxzY3JpcHQgc3JjPSIvYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyL2FuZ3VsYXIuanMiPjwvc2NyaXB0PgpgYGAKCiMjIERvY3VtZW50YXRpb24KCkRvY3VtZW50YXRpb24gaXMgYXZhaWxhYmxlIG9uIHRoZQpbQW5ndWxhckpTIGRvY3Mgc2l0ZV0oaHR0cDovL2RvY3MuYW5ndWxhcmpzLm9yZy8pLgoKIyMgTGljZW5zZQoKVGhlIE1JVCBMaWNlbnNlCgpDb3B5cmlnaHQgKGMpIDIwMTAtMjAxMiBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCg==')
},
{
'name': '/app/bower_components/angular/angular.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular/bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImFuZ3VsYXIiLAogICJ2ZXJzaW9uIjogIjEuMi4xOSIsCiAgIm1haW4iOiAiLi9hbmd1bGFyLmpzIiwKICAiZGVwZW5kZW5jaWVzIjogewogIH0KfQo=')
},
{
'name': '/app/bower_components/angular/angular.min.js.map', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular/.bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImFuZ3VsYXIiLAogICJ2ZXJzaW9uIjogIjEuMi4xOSIsCiAgIm1haW4iOiAiLi9hbmd1bGFyLmpzIiwKICAiZGVwZW5kZW5jaWVzIjoge30sCiAgImhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2Jvd2VyLWFuZ3VsYXIiLAogICJfcmVsZWFzZSI6ICIxLjIuMTkiLAogICJfcmVzb2x1dGlvbiI6IHsKICAgICJ0eXBlIjogInZlcnNpb24iLAogICAgInRhZyI6ICJ2MS4yLjE5IiwKICAgICJjb21taXQiOiAiMmUxZjhjNDYxNGQ1MTRiMmU1MjJjOTk2ZDI0ZjA1YTgyM2I0NjkzNiIKICB9LAogICJfc291cmNlIjogImdpdDovL2dpdGh1Yi5jb20vYW5ndWxhci9ib3dlci1hbmd1bGFyLmdpdCIsCiAgIl90YXJnZXQiOiAiMS4yLngiLAogICJfb3JpZ2luYWxTb3VyY2UiOiAiYW5ndWxhciIKfQ==')
},
{
'name': '/app/bower_components/angular-bootstrap/ui-bootstrap.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular-bootstrap/bower.json', 'data': base64.b64decode('ewogICAgImF1dGhvciI6IHsKICAgICAgICAibmFtZSI6ICJodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci11aS9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycyIKICAgIH0sCiAgICAibmFtZSI6ICJhbmd1bGFyLWJvb3RzdHJhcCIsCiAgICAidmVyc2lvbiI6ICIwLjExLjAiLAogICAgIm1haW4iOiBbIi4vdWktYm9vdHN0cmFwLXRwbHMuanMiXSwKICAgICJkZXBlbmRlbmNpZXMiOiB7CiAgICAgICAgImFuZ3VsYXIiOiAiPj0xIgogICAgfSAgICAKfQo=')
},
{
'name': '/app/bower_components/angular-bootstrap/ui-bootstrap-tpls.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular-bootstrap/ui-bootstrap-tpls.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular-bootstrap/ui-bootstrap.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular-bootstrap/.bower.json', 'data': base64.b64decode('ewogICJhdXRob3IiOiB7CiAgICAibmFtZSI6ICJodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci11aS9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycyIKICB9LAogICJuYW1lIjogImFuZ3VsYXItYm9vdHN0cmFwIiwKICAidmVyc2lvbiI6ICIwLjExLjAiLAogICJtYWluIjogWwogICAgIi4vdWktYm9vdHN0cmFwLXRwbHMuanMiCiAgXSwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiPj0xIgogIH0sCiAgImhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyLXVpL2Jvb3RzdHJhcC1ib3dlciIsCiAgIl9yZWxlYXNlIjogIjAuMTEuMCIsCiAgIl9yZXNvbHV0aW9uIjogewogICAgInR5cGUiOiAidmVyc2lvbiIsCiAgICAidGFnIjogIjAuMTEuMCIsCiAgICAiY29tbWl0IjogIjc1YjMwMmY4MmMxYTNiMDY0NzY5NWEzZGZlYWNhYjBhMTUzZWE4YTAiCiAgfSwKICAiX3NvdXJjZSI6ICJnaXQ6Ly9naXRodWIuY29tL2FuZ3VsYXItdWkvYm9vdHN0cmFwLWJvd2VyLmdpdCIsCiAgIl90YXJnZXQiOiAifjAuMTEueCIsCiAgIl9vcmlnaW5hbFNvdXJjZSI6ICJhbmd1bGFyLWJvb3RzdHJhcCIKfQ==')
},
{
'name': '/app/bower_components/angular-mocks/angular-mocks.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular-mocks/README.md', 'data': base64.b64decode('IyBib3dlci1hbmd1bGFyLW1vY2tzCgpUaGlzIHJlcG8gaXMgZm9yIGRpc3RyaWJ1dGlvbiBvbiBgYm93ZXJgLiBUaGUgc291cmNlIGZvciB0aGlzIG1vZHVsZSBpcyBpbiB0aGUKW21haW4gQW5ndWxhckpTIHJlcG9dKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvdHJlZS9tYXN0ZXIvc3JjL25nTW9jaykuClBsZWFzZSBmaWxlIGlzc3VlcyBhbmQgcHVsbCByZXF1ZXN0cyBhZ2FpbnN0IHRoYXQgcmVwby4KCiMjIEluc3RhbGwKCkluc3RhbGwgd2l0aCBgYm93ZXJgOgoKYGBgc2hlbGwKYm93ZXIgaW5zdGFsbCBhbmd1bGFyLW1vY2tzCmBgYAoKIyMgRG9jdW1lbnRhdGlvbgoKRG9jdW1lbnRhdGlvbiBpcyBhdmFpbGFibGUgb24gdGhlCltBbmd1bGFySlMgZG9jcyBzaXRlXShodHRwOi8vZG9jcy5hbmd1bGFyanMub3JnL2d1aWRlL2Rldl9ndWlkZS51bml0LXRlc3RpbmcpLgoKIyMgTGljZW5zZQoKVGhlIE1JVCBMaWNlbnNlCgpDb3B5cmlnaHQgKGMpIDIwMTAtMjAxMiBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCg==')
},
{
'name': '/app/bower_components/angular-mocks/bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImFuZ3VsYXItbW9ja3MiLAogICJ2ZXJzaW9uIjogIjEuMi4xOSIsCiAgIm1haW4iOiAiLi9hbmd1bGFyLW1vY2tzLmpzIiwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiMS4yLjE5IgogIH0KfQo=')
},
{
'name': '/app/bower_components/angular-mocks/.bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImFuZ3VsYXItbW9ja3MiLAogICJ2ZXJzaW9uIjogIjEuMi4xOSIsCiAgIm1haW4iOiAiLi9hbmd1bGFyLW1vY2tzLmpzIiwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiMS4yLjE5IgogIH0sCiAgImhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2Jvd2VyLWFuZ3VsYXItbW9ja3MiLAogICJfcmVsZWFzZSI6ICIxLjIuMTkiLAogICJfcmVzb2x1dGlvbiI6IHsKICAgICJ0eXBlIjogInZlcnNpb24iLAogICAgInRhZyI6ICJ2MS4yLjE5IiwKICAgICJjb21taXQiOiAiZDJmYzZjZmJiN2QwNGZkNzRjZDk5YzUwMDhjYjhkOGY3NzNhMzQ3YyIKICB9LAogICJfc291cmNlIjogImdpdDovL2dpdGh1Yi5jb20vYW5ndWxhci9ib3dlci1hbmd1bGFyLW1vY2tzLmdpdCIsCiAgIl90YXJnZXQiOiAifjEuMi54IiwKICAiX29yaWdpbmFsU291cmNlIjogImFuZ3VsYXItbW9ja3MiCn0=')
},
{
'name': '/app/bower_components/angular-route/angular-route.js', 'data': base64.b64decode('')
},
{
'name': '/app/bower_components/angular-route/angular-route.min.js', 'data': base64.b64decode('LyoKIEFuZ3VsYXJKUyB2MS4yLjE5CiAoYykgMjAxMC0yMDE0IEdvb2dsZSwgSW5jLiBodHRwOi8vYW5ndWxhcmpzLm9yZwogTGljZW5zZTogTUlUCiovCihmdW5jdGlvbihuLGUsQSl7J3VzZSBzdHJpY3QnO2Z1bmN0aW9uIHgocyxnLGspe3JldHVybntyZXN0cmljdDoiRUNBIix0ZXJtaW5hbDohMCxwcmlvcml0eTo0MDAsdHJhbnNjbHVkZToiZWxlbWVudCIsbGluazpmdW5jdGlvbihhLGMsYixmLHcpe2Z1bmN0aW9uIHkoKXtwJiYocC5yZW1vdmUoKSxwPW51bGwpO2gmJihoLiRkZXN0cm95KCksaD1udWxsKTtsJiYoay5sZWF2ZShsLGZ1bmN0aW9uKCl7cD1udWxsfSkscD1sLGw9bnVsbCl9ZnVuY3Rpb24gdigpe3ZhciBiPXMuY3VycmVudCYmcy5jdXJyZW50LmxvY2FscztpZihlLmlzRGVmaW5lZChiJiZiLiR0ZW1wbGF0ZSkpe3ZhciBiPWEuJG5ldygpLGQ9cy5jdXJyZW50O2w9dyhiLGZ1bmN0aW9uKGQpe2suZW50ZXIoZCxudWxsLGx8fGMsZnVuY3Rpb24oKXshZS5pc0RlZmluZWQodCl8fHQmJiFhLiRldmFsKHQpfHxnKCl9KTt5KCl9KTtoPWQuc2NvcGU9YjtoLiRlbWl0KCIkdmlld0NvbnRlbnRMb2FkZWQiKTtoLiRldmFsKHUpfWVsc2UgeSgpfQp2YXIgaCxsLHAsdD1iLmF1dG9zY3JvbGwsdT1iLm9ubG9hZHx8IiI7YS4kb24oIiRyb3V0ZUNoYW5nZVN1Y2Nlc3MiLHYpO3YoKX19fWZ1bmN0aW9uIHooZSxnLGspe3JldHVybntyZXN0cmljdDoiRUNBIixwcmlvcml0eTotNDAwLGxpbms6ZnVuY3Rpb24oYSxjKXt2YXIgYj1rLmN1cnJlbnQsZj1iLmxvY2FscztjLmh0bWwoZi4kdGVtcGxhdGUpO3ZhciB3PWUoYy5jb250ZW50cygpKTtiLmNvbnRyb2xsZXImJihmLiRzY29wZT1hLGY9ZyhiLmNvbnRyb2xsZXIsZiksYi5jb250cm9sbGVyQXMmJihhW2IuY29udHJvbGxlckFzXT1mKSxjLmRhdGEoIiRuZ0NvbnRyb2xsZXJDb250cm9sbGVyIixmKSxjLmNoaWxkcmVuKCkuZGF0YSgiJG5nQ29udHJvbGxlckNvbnRyb2xsZXIiLGYpKTt3KGEpfX19bj1lLm1vZHVsZSgibmdSb3V0ZSIsWyJuZyJdKS5wcm92aWRlcigiJHJvdXRlIixmdW5jdGlvbigpe2Z1bmN0aW9uIHMoYSxjKXtyZXR1cm4gZS5leHRlbmQobmV3IChlLmV4dGVuZChmdW5jdGlvbigpe30sCntwcm90b3R5cGU6YX0pKSxjKX1mdW5jdGlvbiBnKGEsZSl7dmFyIGI9ZS5jYXNlSW5zZW5zaXRpdmVNYXRjaCxmPXtvcmlnaW5hbFBhdGg6YSxyZWdleHA6YX0saz1mLmtleXM9W107YT1hLnJlcGxhY2UoLyhbKCkuXSkvZywiXFwkMSIpLnJlcGxhY2UoLyhcLyk/OihcdyspKFtcP1wqXSk/L2csZnVuY3Rpb24oYSxlLGIsYyl7YT0iPyI9PT1jP2M6bnVsbDtjPSIqIj09PWM/YzpudWxsO2sucHVzaCh7bmFtZTpiLG9wdGlvbmFsOiEhYX0pO2U9ZXx8IiI7cmV0dXJuIiIrKGE/IiI6ZSkrIig/OiIrKGE/ZToiIikrKGMmJiIoLis/KSJ8fCIoW14vXSspIikrKGF8fCIiKSsiKSIrKGF8fCIiKX0pLnJlcGxhY2UoLyhbXC8kXCpdKS9nLCJcXCQxIik7Zi5yZWdleHA9UmVnRXhwKCJeIithKyIkIixiPyJpIjoiIik7cmV0dXJuIGZ9dmFyIGs9e307dGhpcy53aGVuPWZ1bmN0aW9uKGEsYyl7a1thXT1lLmV4dGVuZCh7cmVsb2FkT25TZWFyY2g6ITB9LGMsYSYmZyhhLGMpKTtpZihhKXt2YXIgYj0KIi8iPT1hW2EubGVuZ3RoLTFdP2Euc3Vic3RyKDAsYS5sZW5ndGgtMSk6YSsiLyI7a1tiXT1lLmV4dGVuZCh7cmVkaXJlY3RUbzphfSxnKGIsYykpfXJldHVybiB0aGlzfTt0aGlzLm90aGVyd2lzZT1mdW5jdGlvbihhKXt0aGlzLndoZW4obnVsbCxhKTtyZXR1cm4gdGhpc307dGhpcy4kZ2V0PVsiJHJvb3RTY29wZSIsIiRsb2NhdGlvbiIsIiRyb3V0ZVBhcmFtcyIsIiRxIiwiJGluamVjdG9yIiwiJGh0dHAiLCIkdGVtcGxhdGVDYWNoZSIsIiRzY2UiLGZ1bmN0aW9uKGEsYyxiLGYsZyxuLHYsaCl7ZnVuY3Rpb24gbCgpe3ZhciBkPXAoKSxtPXIuY3VycmVudDtpZihkJiZtJiZkLiQkcm91dGU9PT1tLiQkcm91dGUmJmUuZXF1YWxzKGQucGF0aFBhcmFtcyxtLnBhdGhQYXJhbXMpJiYhZC5yZWxvYWRPblNlYXJjaCYmIXUpbS5wYXJhbXM9ZC5wYXJhbXMsZS5jb3B5KG0ucGFyYW1zLGIpLGEuJGJyb2FkY2FzdCgiJHJvdXRlVXBkYXRlIixtKTtlbHNlIGlmKGR8fG0pdT0hMSxhLiRicm9hZGNhc3QoIiRyb3V0ZUNoYW5nZVN0YXJ0IiwKZCxtKSwoci5jdXJyZW50PWQpJiZkLnJlZGlyZWN0VG8mJihlLmlzU3RyaW5nKGQucmVkaXJlY3RUbyk/Yy5wYXRoKHQoZC5yZWRpcmVjdFRvLGQucGFyYW1zKSkuc2VhcmNoKGQucGFyYW1zKS5yZXBsYWNlKCk6Yy51cmwoZC5yZWRpcmVjdFRvKGQucGF0aFBhcmFtcyxjLnBhdGgoKSxjLnNlYXJjaCgpKSkucmVwbGFjZSgpKSxmLndoZW4oZCkudGhlbihmdW5jdGlvbigpe2lmKGQpe3ZhciBhPWUuZXh0ZW5kKHt9LGQucmVzb2x2ZSksYyxiO2UuZm9yRWFjaChhLGZ1bmN0aW9uKGQsYyl7YVtjXT1lLmlzU3RyaW5nKGQpP2cuZ2V0KGQpOmcuaW52b2tlKGQpfSk7ZS5pc0RlZmluZWQoYz1kLnRlbXBsYXRlKT9lLmlzRnVuY3Rpb24oYykmJihjPWMoZC5wYXJhbXMpKTplLmlzRGVmaW5lZChiPWQudGVtcGxhdGVVcmwpJiYoZS5pc0Z1bmN0aW9uKGIpJiYoYj1iKGQucGFyYW1zKSksYj1oLmdldFRydXN0ZWRSZXNvdXJjZVVybChiKSxlLmlzRGVmaW5lZChiKSYmKGQubG9hZGVkVGVtcGxhdGVVcmw9CmIsYz1uLmdldChiLHtjYWNoZTp2fSkudGhlbihmdW5jdGlvbihhKXtyZXR1cm4gYS5kYXRhfSkpKTtlLmlzRGVmaW5lZChjKSYmKGEuJHRlbXBsYXRlPWMpO3JldHVybiBmLmFsbChhKX19KS50aGVuKGZ1bmN0aW9uKGMpe2Q9PXIuY3VycmVudCYmKGQmJihkLmxvY2Fscz1jLGUuY29weShkLnBhcmFtcyxiKSksYS4kYnJvYWRjYXN0KCIkcm91dGVDaGFuZ2VTdWNjZXNzIixkLG0pKX0sZnVuY3Rpb24oYyl7ZD09ci5jdXJyZW50JiZhLiRicm9hZGNhc3QoIiRyb3V0ZUNoYW5nZUVycm9yIixkLG0sYyl9KX1mdW5jdGlvbiBwKCl7dmFyIGEsYjtlLmZvckVhY2goayxmdW5jdGlvbihmLGspe3ZhciBxO2lmKHE9IWIpe3ZhciBnPWMucGF0aCgpO3E9Zi5rZXlzO3ZhciBsPXt9O2lmKGYucmVnZXhwKWlmKGc9Zi5yZWdleHAuZXhlYyhnKSl7Zm9yKHZhciBoPTEscD1nLmxlbmd0aDtoPHA7KytoKXt2YXIgbj1xW2gtMV0scj0ic3RyaW5nIj09dHlwZW9mIGdbaF0/ZGVjb2RlVVJJQ29tcG9uZW50KGdbaF0pOgpnW2hdO24mJnImJihsW24ubmFtZV09cil9cT1sfWVsc2UgcT1udWxsO2Vsc2UgcT1udWxsO3E9YT1xfXEmJihiPXMoZix7cGFyYW1zOmUuZXh0ZW5kKHt9LGMuc2VhcmNoKCksYSkscGF0aFBhcmFtczphfSksYi4kJHJvdXRlPWYpfSk7cmV0dXJuIGJ8fGtbbnVsbF0mJnMoa1tudWxsXSx7cGFyYW1zOnt9LHBhdGhQYXJhbXM6e319KX1mdW5jdGlvbiB0KGEsYyl7dmFyIGI9W107ZS5mb3JFYWNoKChhfHwiIikuc3BsaXQoIjoiKSxmdW5jdGlvbihhLGQpe2lmKDA9PT1kKWIucHVzaChhKTtlbHNle3ZhciBlPWEubWF0Y2goLyhcdyspKC4qKS8pLGY9ZVsxXTtiLnB1c2goY1tmXSk7Yi5wdXNoKGVbMl18fCIiKTtkZWxldGUgY1tmXX19KTtyZXR1cm4gYi5qb2luKCIiKX12YXIgdT0hMSxyPXtyb3V0ZXM6ayxyZWxvYWQ6ZnVuY3Rpb24oKXt1PSEwO2EuJGV2YWxBc3luYyhsKX19O2EuJG9uKCIkbG9jYXRpb25DaGFuZ2VTdWNjZXNzIixsKTtyZXR1cm4gcn1dfSk7bi5wcm92aWRlcigiJHJvdXRlUGFyYW1zIiwKZnVuY3Rpb24oKXt0aGlzLiRnZXQ9ZnVuY3Rpb24oKXtyZXR1cm57fX19KTtuLmRpcmVjdGl2ZSgibmdWaWV3Iix4KTtuLmRpcmVjdGl2ZSgibmdWaWV3Iix6KTt4LiRpbmplY3Q9WyIkcm91dGUiLCIkYW5jaG9yU2Nyb2xsIiwiJGFuaW1hdGUiXTt6LiRpbmplY3Q9WyIkY29tcGlsZSIsIiRjb250cm9sbGVyIiwiJHJvdXRlIl19KSh3aW5kb3csd2luZG93LmFuZ3VsYXIpOwovLyMgc291cmNlTWFwcGluZ1VSTD1hbmd1bGFyLXJvdXRlLm1pbi5qcy5tYXAK')
},
{
'name': '/app/bower_components/angular-route/README.md', 'data': base64.b64decode('IyBib3dlci1hbmd1bGFyLXJvdXRlCgpUaGlzIHJlcG8gaXMgZm9yIGRpc3RyaWJ1dGlvbiBvbiBgYm93ZXJgLiBUaGUgc291cmNlIGZvciB0aGlzIG1vZHVsZSBpcyBpbiB0aGUKW21haW4gQW5ndWxhckpTIHJlcG9dKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvdHJlZS9tYXN0ZXIvc3JjL25nUm91dGUpLgpQbGVhc2UgZmlsZSBpc3N1ZXMgYW5kIHB1bGwgcmVxdWVzdHMgYWdhaW5zdCB0aGF0IHJlcG8uCgojIyBJbnN0YWxsCgpJbnN0YWxsIHdpdGggYGJvd2VyYDoKCmBgYHNoZWxsCmJvd2VyIGluc3RhbGwgYW5ndWxhci1yb3V0ZQpgYGAKCkFkZCBhIGA8c2NyaXB0PmAgdG8geW91ciBgaW5kZXguaHRtbGA6CgpgYGBodG1sCjxzY3JpcHQgc3JjPSIvYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXJvdXRlL2FuZ3VsYXItcm91dGUuanMiPjwvc2NyaXB0PgpgYGAKCkFuZCBhZGQgYG5nUm91dGVgIGFzIGEgZGVwZW5kZW5jeSBmb3IgeW91ciBhcHA6CgpgYGBqYXZhc2NyaXB0CmFuZ3VsYXIubW9kdWxlKCdteUFwcCcsIFsnbmdSb3V0ZSddKTsKYGBgCgojIyBEb2N1bWVudGF0aW9uCgpEb2N1bWVudGF0aW9uIGlzIGF2YWlsYWJsZSBvbiB0aGUKW0FuZ3VsYXJKUyBkb2NzIHNpdGVdKGh0dHA6Ly9kb2NzLmFuZ3VsYXJqcy5vcmcvYXBpL25nUm91dGUpLgoKIyMgTGljZW5zZQoKVGhlIE1JVCBMaWNlbnNlCgpDb3B5cmlnaHQgKGMpIDIwMTAtMjAxMiBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCg==')
},
{
'name': '/app/bower_components/angular-route/bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImFuZ3VsYXItcm91dGUiLAogICJ2ZXJzaW9uIjogIjEuMi4xOSIsCiAgIm1haW4iOiAiLi9hbmd1bGFyLXJvdXRlLmpzIiwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiMS4yLjE5IgogIH0KfQo=')
},
{
'name': '/app/bower_components/angular-route/.bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImFuZ3VsYXItcm91dGUiLAogICJ2ZXJzaW9uIjogIjEuMi4xOSIsCiAgIm1haW4iOiAiLi9hbmd1bGFyLXJvdXRlLmpzIiwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiMS4yLjE5IgogIH0sCiAgImhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2Jvd2VyLWFuZ3VsYXItcm91dGUiLAogICJfcmVsZWFzZSI6ICIxLjIuMTkiLAogICJfcmVzb2x1dGlvbiI6IHsKICAgICJ0eXBlIjogInZlcnNpb24iLAogICAgInRhZyI6ICJ2MS4yLjE5IiwKICAgICJjb21taXQiOiAiZDEwNzcyNDQ4N2YwOWRmZTFkMGRmZmJhODFhMDQ4MTEzOTU1NmYxZCIKICB9LAogICJfc291cmNlIjogImdpdDovL2dpdGh1Yi5jb20vYW5ndWxhci9ib3dlci1hbmd1bGFyLXJvdXRlLmdpdCIsCiAgIl90YXJnZXQiOiAiMS4yLngiLAogICJfb3JpZ2luYWxTb3VyY2UiOiAiYW5ndWxhci1yb3V0ZSIKfQ==')
},
{
'name': '/app/bower_components/angular-route/angular-route.min.js.map', 'data': base64.b64decode('')
},
{
'name': '/app/partials/.gitkeep', 'data': base64.b64decode('')
},
{
'name': '/app/partials/roles.html', 'data': base64.b64decode('PGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQiIG5nLWNsaWNrPSJjbGVhckVycm9yKCk7Ij48L2J1dHRvbj4KICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+PC9kaXY+CiAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KPC9kaXY+Cgo8aDM+Um9sZXM8L2gzPgoKPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+U0lEPC90aD4KICAgICAgICAgICAgPHRoPk5hbWU8L3RoPgogICAgICAgICAgICA8dGg+Jm5ic3A7PC90aD4KICAgICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgIDx0ciBuZy1yZXBlYXQ9InJvbGUgaW4gcm9sZXMiPgogICAgICAgIDx0ZD57e3JvbGUuc2lkfX08L3RkPjx0ZD57e3JvbGUubmFtZX19PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLXdhcm5pbmcgZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0IiBuZy1jbGljaz0iZWRpdFJvbGUoJGluZGV4KTsiPjwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIgZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUiIG5nLWNsaWNrPSJyZW1vdmVSb2xlKCRpbmRleCk7Ij48L2J1dHRvbj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDwvdGJvZHk+CjwvdGFibGU+Cgo8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJhZGRSb2xlKCdsZycpIj5DcmVhdGUgcm9sZTwvYnV0dG9uPg==')
},
{
'name': '/app/partials/home.html', 'data': base64.b64decode('PGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQiIG5nLWNsaWNrPSJjbGVhckVycm9yKCk7Ij48L2J1dHRvbj4KICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+PC9kaXY+CiAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KPC9kaXY+Cgo8aDM+T3BlcmF0aW9uczwvaDM+Cjxmb3JtIHJvbGU9ImZvcm0iPgogICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgPGxhYmVsPlNlcnZpY2UgVVJMIChyZWxhdGl2ZSkgKjwvbGFiZWw+CiAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJuYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJuYW1lIiBuZy1tb2RlbD0ic2VydmljZSIgLz4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgPGxhYmVsPkNvbHVtbnMgW0dFVF08L2xhYmVsPgogICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iY29sdW1ucyIgdHlwZT0idGV4dCIgbmFtZT0iY29sdW1ucyIgbmctbW9kZWw9ImNvbHVtbnMiIC8+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgIDxsYWJlbD5GaWx0ZXIgW0dFVF08L2xhYmVsPgogICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZmlsdGVyIiB0eXBlPSJ0ZXh0IiBuYW1lPSJmaWx0ZXIiIG5nLW1vZGVsPSJmaWx0ZXIiIC8+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgIDxsYWJlbD5EYXRhIFsqIFBPU1R8UFVUXTwvbGFiZWw+CiAgICAgICAgPHRleHRhcmVhIGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJkYXRhIiBuYW1lPSJkYXRhIiBuZy1tb2RlbD0iZGF0YSI+PC90ZXh0YXJlYT4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgIDxsYWJlbD5SZXN1bHQ8L2xhYmVsPgogICAgICAgIDx0ZXh0YXJlYSBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0icmVzdWx0IiBuYW1lPSJyZXN1bHQiIG5nLW1vZGVsPSJyZXN1bHQiPjwvdGV4dGFyZWE+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmctY2xpY2s9ImdldCgpIj4gIEdFVCA8L2J1dHRvbj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJwb3N0KCkiPiBQT1NUIDwvYnV0dG9uPgogICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4taW5mbyIgbmctY2xpY2s9InB1dCgpIj4gIFBVVCA8L2J1dHRvbj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRhbmdlciIgbmctY2xpY2s9ImRlbGV0ZSgpIj5ERUxFVEU8L2J1dHRvbj4KICAgIDwvZGl2Pgo8L2Zvcm0+')
},
{
'name': '/app/partials/adduser.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLXNob3c9IiFpc1VwZGF0aW5nIj5DcmVhdGUgbmV3IHVzZXI8L2gzPgogICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgbmctc2hvdz0iaXNVcGRhdGluZyI+VXBkYXRlIHVzZXI8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc2Vycm9yIj5UaGVyZSBpcyBhbiBlcnJvciEhITwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPlVzZXJuYW1lPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnVzZXJuYW1lIiBuZy1yZWFkb25seT0iaXNVcGRhdGluZyI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPlBhc3N3b3JkPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0idXNlci5wYXNzd29yZCIgbmctc2hvdz0iIWlzVXBkYXRpbmciIC8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkIiAgbmctc2hvdz0iaXNVcGRhdGluZyIKICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iTGVhdmUgYmxhbmsgdG8ga2VlcCBjdXJyZW50IHBhc3N3b3JkIiAvPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTMgY29udHJvbC1sYWJlbCI+UGFzc3dvcmQgYWdhaW48L2xhYmVsPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkX3JlIiBuZy1zaG93PSIhaXNVcGRhdGluZyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkX3JlIiBuZy1zaG93PSJpc1VwZGF0aW5nIgogICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJMZWF2ZSBibGFuayB0byBrZWVwIGN1cnJlbnQgcGFzc3dvcmQiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPkVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0idXNlci5lbWFpbCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIj5Sb2xlczwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCI+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWhvdmVyIj4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TSUQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+Jm5ic3A7PC90aD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGVfc2lkIGluIHVzZXIucm9sZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNwYW4+e3tnZXRSb2xlTmFtZShyb2xlX3NpZCk7fX08L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxzcGFuPnt7cm9sZV9zaWR9fTwvc3Bhbj4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciIgbmctY2xpY2s9InJlbW92ZVJvbGUoJGluZGV4KSI+eDwvYnV0dG9uPiA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0ic2VsZWN0ZWRfcm9sZSIgbmctb3B0aW9ucz0icm9sZS5zaWQgYXMgcm9sZS5uYW1lIGZvciByb2xlIGluIHJvbGVzIj48L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0iYWRkUm9sZShzZWxlY3RlZF9yb2xlKSI+QWRkPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib2soKSI+T0s8L2J1dHRvbj4KICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4td2FybmluZyIgbmctY2xpY2s9ImNhbmNlbCgpIj5DYW5jZWw8L2J1dHRvbj4KPC9kaXY+')
},
{
'name': '/app/partials/users.html', 'data': base64.b64decode('PGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQiIG5nLWNsaWNrPSJjbGVhckVycm9yKCk7Ij48L2J1dHRvbj4KICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+PC9kaXY+CiAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KPC9kaXY+Cgo8aDM+VXNlcnM8L2gzPgoKPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICA8dGhlYWQ+CiAgICA8dHI+CiAgICAgICAgPHRoPk5hbWU8L3RoPgogICAgICAgIDx0aD5FbWFpbDwvdGg+CiAgICAgICAgPHRoPiZuYnNwOzwvdGg+CiAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgIDx0ciBuZy1yZXBlYXQ9InVzZXIgaW4gdXNlcnMiPgogICAgICAgIDx0ZD57e3VzZXIudXNlcm5hbWV9fTwvdGQ+PHRkPnt7dXNlci5lbWFpbH19PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLXdhcm5pbmcgZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0IiBuZy1jbGljaz0iZWRpdFVzZXIoJGluZGV4KTsiPjwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIgZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUiIG5nLWNsaWNrPSJyZW1vdmVVc2VyKCRpbmRleCk7Ij48L2J1dHRvbj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDwvdGJvZHk+CjwvdGFibGU+Cgo8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJhZGRVc2VyKCdsZycpIj5DcmVhdGUgdXNlcjwvYnV0dG9uPgo=')
},
{
'name': '/app/partials/addrole.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLXNob3c9IiFpc1VwZGF0aW5nIj5DcmVhdGUgbmV3IHJvbGU8L2gzPgogICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgbmctc2hvdz0iaXNVcGRhdGluZyI+VXBkYXRlIHJvbGU8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc2Vycm9yIj5UaGVyZSBpcyBhbiBlcnJvciEhITwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0yIGNvbnRyb2wtbGFiZWwiPk5hbWUgKjwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZS5uYW1lIiBwbGFjZWhvbGRlcj0iUm9sZSBuYW1lIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTIgY29udHJvbC1sYWJlbCI+U0lEPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZS5zaWQiIG5nLXJlYWRvbmx5PSJpc1VwZGF0aW5nIiBwbGFjZWhvbGRlcj0iT3B0aW9uYWwsIHdpbGwgYmUgZ2VuZXJhdGVkIGlmIGxlZnQgZW1wdHkiPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIj5Sb2xlIGl0ZW1zPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEwIj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWNjZXNzIHR5cGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC14cy0yIj5PYmplY3QgbmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLXhzLTIiPlByb3BlcnR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjY2VzczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGVfaXRlbSBpbiByb2xlLnJvbGVfaXRlbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZV9pdGVtLnR5cGUiIG5nLW9wdGlvbnM9ImFjY2Vzc190eXBlLm5hbWUgYXMgYWNjZXNzX3R5cGUuZGlzcGxheSBmb3IgYWNjZXNzX3R5cGUgaW4gYWNjZXNzX3R5cGVzIj48L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC14cy0yIj48aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0idGV4dCIgbmctbW9kZWw9InJvbGVfaXRlbS5vYmplY3RfbmFtZSIgLz4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wteHMtMiI+PGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiIG5nLW1vZGVsPSJyb2xlX2l0ZW0ucHJvcGVydHlfbmFtZSIgLz4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0icm9sZV9pdGVtLmFjY2Vzc19iaXRzLnJlYWQiIC8+IFJlYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InJvbGVfaXRlbS5hY2Nlc3NfYml0cy5pbnNlcnQiIC8+IEluc2VydAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0icm9sZV9pdGVtLmFjY2Vzc19iaXRzLndyaXRlIiAvPiBXcml0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0icm9sZV9pdGVtLmFjY2Vzc19iaXRzLmRlbGV0ZSIgLz4gRGVsZXRlCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIiIG5nLWNsaWNrPSJyZW1vdmVSb2xlSXRlbSgkaW5kZXgpIj54PC9idXR0b24+IDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI1Ij48YnV0dG9uIG5nLWNsaWNrPSJhZGRSb2xlSXRlbSgpIj5BZGQ8L2J1dHRvbj4gPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib2soKSI+T0s8L2J1dHRvbj4KICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4td2FybmluZyIgbmctY2xpY2s9ImNhbmNlbCgpIj5DYW5jZWw8L2J1dHRvbj4KPC9kaXY+')
},
{
'name': '/test/karma.conf.js', 'data': base64.b64decode('bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihjb25maWcpewogIGNvbmZpZy5zZXQoewoKICAgIGJhc2VQYXRoIDogJy4uLycsCgogICAgZmlsZXMgOiBbCiAgICAgICdhcHAvYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyL2FuZ3VsYXIuanMnLAogICAgICAnYXBwL2Jvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1yb3V0ZS9hbmd1bGFyLXJvdXRlLmpzJywKICAgICAgJ2FwcC9ib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItbW9ja3MvYW5ndWxhci1tb2Nrcy5qcycsCiAgICAgICdhcHAvanMvKiovKi5qcycsCiAgICAgICd0ZXN0L3VuaXQvKiovKi5qcycKICAgIF0sCgogICAgYXV0b1dhdGNoIDogdHJ1ZSwKCiAgICBmcmFtZXdvcmtzOiBbJ2phc21pbmUnXSwKCiAgICBicm93c2VycyA6IFsnQ2hyb21lJ10sCgogICAgcGx1Z2lucyA6IFsKICAgICAgICAgICAgJ2thcm1hLWNocm9tZS1sYXVuY2hlcicsCiAgICAgICAgICAgICdrYXJtYS1maXJlZm94LWxhdW5jaGVyJywKICAgICAgICAgICAgJ2thcm1hLWphc21pbmUnLAogICAgICAgICAgICAna2FybWEtanVuaXQtcmVwb3J0ZXInCiAgICAgICAgICAgIF0sCgogICAganVuaXRSZXBvcnRlciA6IHsKICAgICAgb3V0cHV0RmlsZTogJ3Rlc3Rfb3V0L3VuaXQueG1sJywKICAgICAgc3VpdGU6ICd1bml0JwogICAgfQoKICB9KTsKfTsK')
},
{
'name': '/test/protractor-conf.js', 'data': base64.b64decode('ZXhwb3J0cy5jb25maWcgPSB7CiAgYWxsU2NyaXB0c1RpbWVvdXQ6IDExMDAwLAoKICBzcGVjczogWwogICAgJ2UyZS8qLmpzJwogIF0sCgogIGNhcGFiaWxpdGllczogewogICAgJ2Jyb3dzZXJOYW1lJzogJ2Nocm9tZScKICB9LAoKICBiYXNlVXJsOiAnaHR0cDovL2xvY2FsaG9zdDo4MDAwL2FwcC8nLAoKICBmcmFtZXdvcms6ICdqYXNtaW5lJywKCiAgamFzbWluZU5vZGVPcHRzOiB7CiAgICBkZWZhdWx0VGltZW91dEludGVydmFsOiAzMDAwMAogIH0KfTsK')
},
{
'name': '/test/unit/servicesSpec.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogamFzbWluZSBzcGVjcyBmb3Igc2VydmljZXMgZ28gaGVyZSAqLwoKZGVzY3JpYmUoJ3NlcnZpY2UnLCBmdW5jdGlvbigpIHsKICBiZWZvcmVFYWNoKG1vZHVsZSgnbXlBcHAuc2VydmljZXMnKSk7CgoKICBkZXNjcmliZSgndmVyc2lvbicsIGZ1bmN0aW9uKCkgewogICAgaXQoJ3Nob3VsZCByZXR1cm4gY3VycmVudCB2ZXJzaW9uJywgaW5qZWN0KGZ1bmN0aW9uKHZlcnNpb24pIHsKICAgICAgZXhwZWN0KHZlcnNpb24pLnRvRXF1YWwoJzAuMScpOwogICAgfSkpOwogIH0pOwp9KTsK')
},
{
'name': '/test/unit/controllersSpec.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogamFzbWluZSBzcGVjcyBmb3IgY29udHJvbGxlcnMgZ28gaGVyZSAqLwoKZGVzY3JpYmUoJ2NvbnRyb2xsZXJzJywgZnVuY3Rpb24oKXsKICBiZWZvcmVFYWNoKG1vZHVsZSgnbXlBcHAuY29udHJvbGxlcnMnKSk7CgoKICBpdCgnc2hvdWxkIC4uLi4nLCBpbmplY3QoZnVuY3Rpb24oJGNvbnRyb2xsZXIpIHsKICAgIC8vc3BlYyBib2R5CiAgICB2YXIgbXlDdHJsMSA9ICRjb250cm9sbGVyKCdNeUN0cmwxJywgeyAkc2NvcGU6IHt9IH0pOwogICAgZXhwZWN0KG15Q3RybDEpLnRvQmVEZWZpbmVkKCk7CiAgfSkpOwoKICBpdCgnc2hvdWxkIC4uLi4nLCBpbmplY3QoZnVuY3Rpb24oJGNvbnRyb2xsZXIpIHsKICAgIC8vc3BlYyBib2R5CiAgICB2YXIgbXlDdHJsMiA9ICRjb250cm9sbGVyKCdNeUN0cmwyJywgeyAkc2NvcGU6IHt9IH0pOwogICAgZXhwZWN0KG15Q3RybDIpLnRvQmVEZWZpbmVkKCk7CiAgfSkpOwp9KTsK')
},
{
'name': '/test/unit/filtersSpec.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogamFzbWluZSBzcGVjcyBmb3IgZmlsdGVycyBnbyBoZXJlICovCgpkZXNjcmliZSgnZmlsdGVyJywgZnVuY3Rpb24oKSB7CiAgYmVmb3JlRWFjaChtb2R1bGUoJ215QXBwLmZpbHRlcnMnKSk7CgoKICBkZXNjcmliZSgnaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigpIHsKICAgIGJlZm9yZUVhY2gobW9kdWxlKGZ1bmN0aW9uKCRwcm92aWRlKSB7CiAgICAgICRwcm92aWRlLnZhbHVlKCd2ZXJzaW9uJywgJ1RFU1RfVkVSJyk7CiAgICB9KSk7CgoKICAgIGl0KCdzaG91bGQgcmVwbGFjZSBWRVJTSU9OJywgaW5qZWN0KGZ1bmN0aW9uKGludGVycG9sYXRlRmlsdGVyKSB7CiAgICAgIGV4cGVjdChpbnRlcnBvbGF0ZUZpbHRlcignYmVmb3JlICVWRVJTSU9OJSBhZnRlcicpKS50b0VxdWFsKCdiZWZvcmUgVEVTVF9WRVIgYWZ0ZXInKTsKICAgIH0pKTsKICB9KTsKfSk7Cg==')
},
{
'name': '/test/unit/directivesSpec.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogamFzbWluZSBzcGVjcyBmb3IgZGlyZWN0aXZlcyBnbyBoZXJlICovCgpkZXNjcmliZSgnZGlyZWN0aXZlcycsIGZ1bmN0aW9uKCkgewogIGJlZm9yZUVhY2gobW9kdWxlKCdteUFwcC5kaXJlY3RpdmVzJykpOwoKICBkZXNjcmliZSgnYXBwLXZlcnNpb24nLCBmdW5jdGlvbigpIHsKICAgIGl0KCdzaG91bGQgcHJpbnQgY3VycmVudCB2ZXJzaW9uJywgZnVuY3Rpb24oKSB7CiAgICAgIG1vZHVsZShmdW5jdGlvbigkcHJvdmlkZSkgewogICAgICAgICRwcm92aWRlLnZhbHVlKCd2ZXJzaW9uJywgJ1RFU1RfVkVSJyk7CiAgICAgIH0pOwogICAgICBpbmplY3QoZnVuY3Rpb24oJGNvbXBpbGUsICRyb290U2NvcGUpIHsKICAgICAgICB2YXIgZWxlbWVudCA9ICRjb21waWxlKCc8c3BhbiBhcHAtdmVyc2lvbj48L3NwYW4+JykoJHJvb3RTY29wZSk7CiAgICAgICAgZXhwZWN0KGVsZW1lbnQudGV4dCgpKS50b0VxdWFsKCdURVNUX1ZFUicpOwogICAgICB9KTsKICAgIH0pOwogIH0pOwp9KTsK')
},
{
'name': '/test/e2e/scenarios.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvcHJvdHJhY3Rvci9ibG9iL21hc3Rlci9kb2NzL2dldHRpbmctc3RhcnRlZC5tZCAqLwoKZGVzY3JpYmUoJ215IGFwcCcsIGZ1bmN0aW9uKCkgewoKICBicm93c2VyLmdldCgnaW5kZXguaHRtbCcpOwoKICBpdCgnc2hvdWxkIGF1dG9tYXRpY2FsbHkgcmVkaXJlY3QgdG8gL3ZpZXcxIHdoZW4gbG9jYXRpb24gaGFzaC9mcmFnbWVudCBpcyBlbXB0eScsIGZ1bmN0aW9uKCkgewogICAgZXhwZWN0KGJyb3dzZXIuZ2V0TG9jYXRpb25BYnNVcmwoKSkudG9NYXRjaCgiL3ZpZXcxIik7CiAgfSk7CgoKICBkZXNjcmliZSgndmlldzEnLCBmdW5jdGlvbigpIHsKCiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkgewogICAgICBicm93c2VyLmdldCgnaW5kZXguaHRtbCMvdmlldzEnKTsKICAgIH0pOwoKCiAgICBpdCgnc2hvdWxkIHJlbmRlciB2aWV3MSB3aGVuIHVzZXIgbmF2aWdhdGVzIHRvIC92aWV3MScsIGZ1bmN0aW9uKCkgewogICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCdbbmctdmlld10gcCcpKS5maXJzdCgpLmdldFRleHQoKSkuCiAgICAgICAgdG9NYXRjaCgvcGFydGlhbCBmb3IgdmlldyAxLyk7CiAgICB9KTsKCiAgfSk7CgoKICBkZXNjcmliZSgndmlldzInLCBmdW5jdGlvbigpIHsKCiAgICBiZWZvcmVFYWNoKGZ1bmN0aW9uKCkgewogICAgICBicm93c2VyLmdldCgnaW5kZXguaHRtbCMvdmlldzInKTsKICAgIH0pOwoKCiAgICBpdCgnc2hvdWxkIHJlbmRlciB2aWV3MiB3aGVuIHVzZXIgbmF2aWdhdGVzIHRvIC92aWV3MicsIGZ1bmN0aW9uKCkgewogICAgICBleHBlY3QoZWxlbWVudC5hbGwoYnkuY3NzKCdbbmctdmlld10gcCcpKS5maXJzdCgpLmdldFRleHQoKSkuCiAgICAgICAgdG9NYXRjaCgvcGFydGlhbCBmb3IgdmlldyAyLyk7CiAgICB9KTsKCiAgfSk7Cn0pOwo=')
}]
