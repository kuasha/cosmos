# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/.bowerrc', 'data': base64.b64decode('ewogICJkaXJlY3RvcnkiOiAiYXBwL2Jvd2VyX2NvbXBvbmVudHMiCn0=')
},
{
'name': '/LICENSE', 'data': base64.b64decode('VGhlIE1JVCBMaWNlbnNlCgpDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCgo=')
},
{
'name': '/bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImNvc21vcy1hZG1pbi1wYW5lbCIsCiAgImRlc2NyaXB0aW9uIjogIkFkbWluIHBhbmVsIGZvciBjb3Ntb3MgZnJhbWV3b3JrIiwKICAidmVyc2lvbiI6ICIwLjAuMCIsCiAgImhvbWVwYWdlIjogImh0dHA6Ly9jb3Ntb3NmcmFtZXdvcmsuY29tIiwKICAibGljZW5zZSI6ICJNSVQiLAogICJwcml2YXRlIjogdHJ1ZSwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiMS4yLngiLAogICAgImFuZ3VsYXItcm91dGUiOiAiMS4yLngiLAogICAgImFuZ3VsYXItbG9hZGVyIjogIjEuMi54IiwKICAgICJhbmd1bGFyLW1vY2tzIjogIn4xLjMueCIsCiAgICAiaHRtbDUtYm9pbGVycGxhdGUiOiAifjQuMy4wIiwKICAgICJhbmd1bGFyLWJvb3RzdHJhcCI6ICJ+MC4xMS54IiwKICAgICJhbmd1bGFyLXVpLXNvcnRhYmxlIjoifjAuMTIueCIsCiAgICAiYW5ndWxhci11aS1hY2UiOiJ+MC4xLngiLAogICAgImFuZ3VsYXItanNvbi1odW1hbiI6In4xLjIueCIsCiAgICAiYW5ndWxhci1sb2NhbC1zdG9yYWdlIjogIiIsCiAgICAiYm9vdHN0cmFwIjogIiIsCiAgICAiYW5ndWxhci11aS1zZWxlY3QiOiAiIgogIH0sCiAgInJlc29sdXRpb25zIjogewogICAgImFuZ3VsYXIiOiAiMS4zLjAiCiAgfQp9Cg==')
},
{
'name': '/app/index.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjwhLS1baWYgbHQgSUUgN10+ICAgICAgPGh0bWwgeG1sbnM6bmc9Imh0dHA6Ly9hbmd1bGFyanMub3JnIiBsYW5nPSJlbiIgbmctYXBwPSJjb3Ntb3NVSSIgbmctY29udHJvbGxlcj0iQWRtaW5NYWluQ3RybCIgY2xhc3M9Im5vLWpzIGx0LWllOSBsdC1pZTggbHQtaWU3Ij4gPCFbZW5kaWZdLS0+CjwhLS1baWYgSUUgN10+ICAgICAgICAgPGh0bWwgeG1sbnM6bmc9Imh0dHA6Ly9hbmd1bGFyanMub3JnIiBsYW5nPSJlbiIgbmctYXBwPSJjb3Ntb3NVSSIgbmctY29udHJvbGxlcj0iQWRtaW5NYWluQ3RybCIgY2xhc3M9Im5vLWpzIGx0LWllOSBsdC1pZTgiPiA8IVtlbmRpZl0tLT4KPCEtLVtpZiBJRSA4XT4gICAgICAgICA8aHRtbCB4bWxuczpuZz0iaHR0cDovL2FuZ3VsYXJqcy5vcmciIGxhbmc9ImVuIiBuZy1hcHA9ImNvc21vc1VJIiBuZy1jb250cm9sbGVyPSJBZG1pbk1haW5DdHJsIiBjbGFzcz0ibm8tanMgbHQtaWU5Ij4gPCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOF0+PCEtLT4gPGh0bWwgeG1sbnM6bmc9Imh0dHA6Ly9hbmd1bGFyanMub3JnIiBsYW5nPSJlbiIgbmctYXBwPSJjb3Ntb3NVSSIgbmctY29udHJvbGxlcj0iQWRtaW5NYWluQ3RybCIgY2xhc3M9Im5vLWpzIj4gPCEtLTwhW2VuZGlmXS0tPgoKPGhlYWQ+CiAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogIDxtZXRhIGh0dHAtZXF1aXY9IlgtVUEtQ29tcGF0aWJsZSIgY29udGVudD0iSUU9ZWRnZSI+CiAgPHRpdGxlPkJlZW5kdTwvdGl0bGU+CiAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiI+CiAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImJvd2VyX2NvbXBvbmVudHMvaHRtbDUtYm9pbGVycGxhdGUvY3NzL25vcm1hbGl6ZS5jc3MiPgogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iYm93ZXJfY29tcG9uZW50cy9odG1sNS1ib2lsZXJwbGF0ZS9jc3MvbWFpbi5jc3MiPgogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iY3NzL2FwcC5jc3MiLz4KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzcy9jaGFydHMuY3NzIi8+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjEuMS9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiIC8+CiAgPHN0eWxlPgogICAgICBib2R5IHsKICAgICAgICAgIHBhZGRpbmctdG9wOiA1MHB4OwogICAgICB9CiAgPC9zdHlsZT4KCiAgICA8IS0tW2lmIGx0ZSBJRSA4XT4KICAgICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCduZy1pbmNsdWRlJyk7CiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmctcGx1cmFsaXplJyk7CiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmctdmlldycpOwoKICAgICAgICAvLyBPcHRpb25hbGx5IHRoZXNlIGZvciBDU1MKICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCduZzppbmNsdWRlJyk7CiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmc6cGx1cmFsaXplJyk7CiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmc6dmlldycpOwogICAgICA8L3NjcmlwdD4KICAgIDwhW2VuZGlmXS0tPgo8L2hlYWQ+Cjxib2R5IHJvbGU9ImRvY3VtZW50Ij4KICAgIDwhLS1baWYgbHQgSUUgN10+CiAgICA8cCBjbGFzcz0iYnJvd3NlaGFwcHkiPllvdSBhcmUgdXNpbmcgYW4gPHN0cm9uZz5vdXRkYXRlZDwvc3Ryb25nPiBicm93c2VyLiBQbGVhc2UgPGEgaHJlZj0iaHR0cDovL2Jyb3dzZWhhcHB5LmNvbS8iPnVwZ3JhZGUgeW91ciBicm93c2VyPC9hPiB0byBpbXByb3ZlIHlvdXIgZXhwZXJpZW5jZS48L3A+CiAgICA8IVtlbmRpZl0tLT4KCiAgICA8ZGl2IG5nLXZpZXc+PC9kaXY+CgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvaHRtbDUtYm9pbGVycGxhdGUvanMvdmVuZG9yL21vZGVybml6ci0yLjYuMi5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgc3JjPSIvL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjExLjEvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4xLjEvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iLy9jb2RlLmpxdWVyeS5jb20vdWkvMS4xMC4zL2pxdWVyeS11aS5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianNsaWIvZDMubWluLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJqc2xpYi9ub3RpZnkubWluLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyL2FuZ3VsYXIuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1yb3V0ZS9hbmd1bGFyLXJvdXRlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLWJvb3RzdHJhcC91aS1ib290c3RyYXAtdHBscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXVpLXNvcnRhYmxlL3NvcnRhYmxlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItbG9jYWwtc3RvcmFnZS9kaXN0L2FuZ3VsYXItbG9jYWwtc3RvcmFnZS5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYWNlLWJ1aWxkcy9zcmMtbWluLW5vY29uZmxpY3QvYWNlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci11aS1hY2UvdWktYWNlLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IGRhdGEtcmVxdWlyZT0ibG9kYXNoLmpzQDIuNC4xIiBkYXRhLXNlbXZlcj0iMi40LjEiIHNyYz0ianNsaWIvbG9kYXNoLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1qc29uLWh1bWFuL2Rpc3QvYW5ndWxhci1qc29uLWh1bWFuLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1qc29uLWh1bWFuL2Rpc3QvYW5ndWxhci1qc29uLWh1bWFuLm1pbi5jc3MiIC8+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXVpLXNlbGVjdC9kaXN0L3NlbGVjdC5taW4uanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItdWktc2VsZWN0L2Rpc3Qvc2VsZWN0Lm1pbi5jc3MiIC8+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImpzbGliL3NlbGVjdGl6ZS5ib290c3RyYXAzLmNzcyI+CgogICAgPHNjcmlwdCBzcmM9ImpzL3V0aWxzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jaGFydGhlbHBlci5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9zZXJ2aWNlcy9zZXJ2aWNlcy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvY29udHJvbGxlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2ZpbHRlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2RpcmVjdGl2ZXMvZGlyZWN0aXZlcy5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9ImpzL2NvbnRyb2xsZXJzL0xvZ2luQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvSW5kZXhDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy9UZXJtaW5hbEN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2NvbnRyb2xsZXJzL1VzZXJzQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvUm9sZXNDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy9MaXN0Q3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvTGlzdERldGFpbEN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2NvbnRyb2xsZXJzL0ZpbGVVcGxvYWRDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy9Gb3JtRGVzaWduQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvUGFnZURlc2lnbkN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2NvbnRyb2xsZXJzL0Zvcm1WaWV3Q3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvUGFnZVZpZXdDdHJsLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvQXBwU3R1ZGlvQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvSXRlbURlc2lnbkN0cmwuanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgc3JjPSJqcy9kaXJlY3RpdmVzL2ZpZWxkLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0ianMvc2VydmljZXMvaHR0cC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvc2VydmljZXMvY2FjaGVkbG9hZGVyLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9zZXJ2aWNlcy9zZXR0aW5ncy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvc2VydmljZXMvY29uc3RhbnRzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9zZXJ2aWNlcy91dGlscy5qcyI+PC9zY3JpcHQ+Cgo8L2JvZHk+CjwvaHRtbD4KCg==')
},
{
'name': '/app/login.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjwhLS0gVE9ETzogQ29weSBucyBhbmQgc2NyaXB0IGZyb20gaW5kZXguaHRtbCByZWY6IGh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2d1aWRlL2llLS0+CjxodG1sIG5nLWFwcD0iY29zbW9zVUkiPgo8aGVhZCBsYW5nPSJlbiI+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+TG9naW48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5ICByb2xlPSJkb2N1bWVudCIgbmctY29udHJvbGxlcj0iQWRtaW5NYWluQ3RybCI+CiAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+CiAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvIj5Db3Ntb3MgRnJhbWV3b3JrPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSI+CiAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPjxhIGhyZWY9Ii8iPkhvbWU8L2E+PC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+PCEtLS8ubmF2LWNvbGxhcHNlIC0tPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciB0aGVtZS1zaG93Y2FzZSIgcm9sZT0ibWFpbiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJqdW1ib3Ryb24iPgogICAgICAgICAgICA8aDMgIG5nLXNob3c9IiFsb2dnZWRJbigpIj5Mb2dpbjwvaDM+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1zbWFsbCBidG4tcHJpbWFyeSIgaHJlZj0iL2xvZ2luL2dvb2dsZS8iPkdvb2dsZTwvYT4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXNtYWxsIGJ0bi1wcmltYXJ5IiBocmVmPSIvbG9naW4vZmFjZWJvb2tncmFwaC8iPkZhY2Vib29rPC9hPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tc21hbGwgYnRuLXByaW1hcnkiIGhyZWY9Ii9sb2dpbi9naXRodWIvIj5HaXRodWI8L2E+CiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvbG9naW4vb3BlbmlkLyIgbWV0aG9kPSJnZXQiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5PcGVuaWQ8L2xhYmVsPjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJvcGVuaWQub3BfZW5kcG9pbnQiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSJMb2dpbiI+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxmb3JtIG5nLXNob3c9IiFsb2dnZWRJbigpIiByb2xlPSJmb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2xvZ2luLyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlciBuYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InVzZXJuYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSIvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UGFzc3dvcmQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJ1bnB3ZGxvZ2luIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJMb2dpbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgLz4KICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgPGRpdiBuZy1zaG93PSJsb2dnZWRJbigpIj5XZWxjb21lPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJzdGF0dXMiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTEuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSIvL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjEuMS9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4xLjEvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiAvPgoKICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXIvYW5ndWxhci5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXJvdXRlL2FuZ3VsYXItcm91dGUuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1ib290c3RyYXAvdWktYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC10cGxzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy91dGlscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9zZXJ2aWNlcy9zZXJ2aWNlcy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvY29udHJvbGxlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2ZpbHRlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2RpcmVjdGl2ZXMvZGlyZWN0aXZlcy5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9Ii8vcmF3Z2l0aHViLmNvbS9hbmd1bGFyLXVpL3VpLXNvcnRhYmxlL21hc3Rlci9zcmMvc29ydGFibGUuanMiPjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K')
},
{
'name': '/app/jslib/lodash.js', 'data': base64.b64decode('')
},
{
'name': '/app/jslib/d3.min.js', 'data': base64.b64decode('IWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHQpe3JldHVybiB0Pm4/LTE6bj50PzE6bj49dD8wOjAvMH1mdW5jdGlvbiB0KG4pe3JldHVybiBudWxsPT09bj8wLzA6K259ZnVuY3Rpb24gZShuKXtyZXR1cm4haXNOYU4obil9ZnVuY3Rpb24gcihuKXtyZXR1cm57bGVmdDpmdW5jdGlvbih0LGUscix1KXtmb3IoYXJndW1lbnRzLmxlbmd0aDwzJiYocj0wKSxhcmd1bWVudHMubGVuZ3RoPDQmJih1PXQubGVuZ3RoKTt1PnI7KXt2YXIgaT1yK3U+Pj4xO24odFtpXSxlKTwwP3I9aSsxOnU9aX1yZXR1cm4gcn0scmlnaHQ6ZnVuY3Rpb24odCxlLHIsdSl7Zm9yKGFyZ3VtZW50cy5sZW5ndGg8MyYmKHI9MCksYXJndW1lbnRzLmxlbmd0aDw0JiYodT10Lmxlbmd0aCk7dT5yOyl7dmFyIGk9cit1Pj4+MTtuKHRbaV0sZSk+MD91PWk6cj1pKzF9cmV0dXJuIHJ9fX1mdW5jdGlvbiB1KG4pe3JldHVybiBuLmxlbmd0aH1mdW5jdGlvbiBpKG4pe2Zvcih2YXIgdD0xO24qdCUxOyl0Kj0xMDtyZXR1cm4gdH1mdW5jdGlvbiBvKG4sdCl7Zm9yKHZhciBlIGluIHQpT2JqZWN0LmRlZmluZVByb3BlcnR5KG4ucHJvdG90eXBlLGUse3ZhbHVlOnRbZV0sZW51bWVyYWJsZTohMX0pfWZ1bmN0aW9uIGEoKXt0aGlzLl89T2JqZWN0LmNyZWF0ZShudWxsKX1mdW5jdGlvbiBjKG4pe3JldHVybihuKz0iIik9PT1sYXx8blswXT09PXNhP3NhK246bn1mdW5jdGlvbiBsKG4pe3JldHVybihuKz0iIilbMF09PT1zYT9uLnNsaWNlKDEpOm59ZnVuY3Rpb24gcyhuKXtyZXR1cm4gYyhuKWluIHRoaXMuX31mdW5jdGlvbiBmKG4pe3JldHVybihuPWMobikpaW4gdGhpcy5fJiZkZWxldGUgdGhpcy5fW25dfWZ1bmN0aW9uIGgoKXt2YXIgbj1bXTtmb3IodmFyIHQgaW4gdGhpcy5fKW4ucHVzaChsKHQpKTtyZXR1cm4gbn1mdW5jdGlvbiBnKCl7dmFyIG49MDtmb3IodmFyIHQgaW4gdGhpcy5fKSsrbjtyZXR1cm4gbn1mdW5jdGlvbiBwKCl7Zm9yKHZhciBuIGluIHRoaXMuXylyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiB2KCl7dGhpcy5fPU9iamVjdC5jcmVhdGUobnVsbCl9ZnVuY3Rpb24gZChuLHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHI9ZS5hcHBseSh0LGFyZ3VtZW50cyk7cmV0dXJuIHI9PT10P246cn19ZnVuY3Rpb24gbShuLHQpe2lmKHQgaW4gbilyZXR1cm4gdDt0PXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrdC5zbGljZSgxKTtmb3IodmFyIGU9MCxyPWZhLmxlbmd0aDtyPmU7KytlKXt2YXIgdT1mYVtlXSt0O2lmKHUgaW4gbilyZXR1cm4gdX19ZnVuY3Rpb24geSgpe31mdW5jdGlvbiB4KCl7fWZ1bmN0aW9uIE0obil7ZnVuY3Rpb24gdCgpe2Zvcih2YXIgdCxyPWUsdT0tMSxpPXIubGVuZ3RoOysrdTxpOykodD1yW3VdLm9uKSYmdC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuIG59dmFyIGU9W10scj1uZXcgYTtyZXR1cm4gdC5vbj1mdW5jdGlvbih0LHUpe3ZhciBpLG89ci5nZXQodCk7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8Mj9vJiZvLm9uOihvJiYoby5vbj1udWxsLGU9ZS5zbGljZSgwLGk9ZS5pbmRleE9mKG8pKS5jb25jYXQoZS5zbGljZShpKzEpKSxyLnJlbW92ZSh0KSksdSYmZS5wdXNoKHIuc2V0KHQse29uOnV9KSksbil9LHR9ZnVuY3Rpb24gXygpe0JvLmV2ZW50LnByZXZlbnREZWZhdWx0KCl9ZnVuY3Rpb24gYigpe2Zvcih2YXIgbix0PUJvLmV2ZW50O249dC5zb3VyY2VFdmVudDspdD1uO3JldHVybiB0fWZ1bmN0aW9uIHcobil7Zm9yKHZhciB0PW5ldyB4LGU9MCxyPWFyZ3VtZW50cy5sZW5ndGg7KytlPHI7KXRbYXJndW1lbnRzW2VdXT1NKHQpO3JldHVybiB0Lm9mPWZ1bmN0aW9uKGUscil7cmV0dXJuIGZ1bmN0aW9uKHUpe3RyeXt2YXIgaT11LnNvdXJjZUV2ZW50PUJvLmV2ZW50O3UudGFyZ2V0PW4sQm8uZXZlbnQ9dSx0W3UudHlwZV0uYXBwbHkoZSxyKX1maW5hbGx5e0JvLmV2ZW50PWl9fX0sdH1mdW5jdGlvbiBTKG4pe3JldHVybiBnYShuLHlhKSxufWZ1bmN0aW9uIGsobil7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIG4/bjpmdW5jdGlvbigpe3JldHVybiBwYShuLHRoaXMpfX1mdW5jdGlvbiBFKG4pe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBuP246ZnVuY3Rpb24oKXtyZXR1cm4gdmEobix0aGlzKX19ZnVuY3Rpb24gQShuLHQpe2Z1bmN0aW9uIGUoKXt0aGlzLnJlbW92ZUF0dHJpYnV0ZShuKX1mdW5jdGlvbiByKCl7dGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhuLnNwYWNlLG4ubG9jYWwpfWZ1bmN0aW9uIHUoKXt0aGlzLnNldEF0dHJpYnV0ZShuLHQpfWZ1bmN0aW9uIGkoKXt0aGlzLnNldEF0dHJpYnV0ZU5TKG4uc3BhY2Usbi5sb2NhbCx0KX1mdW5jdGlvbiBvKCl7dmFyIGU9dC5hcHBseSh0aGlzLGFyZ3VtZW50cyk7bnVsbD09ZT90aGlzLnJlbW92ZUF0dHJpYnV0ZShuKTp0aGlzLnNldEF0dHJpYnV0ZShuLGUpfWZ1bmN0aW9uIGEoKXt2YXIgZT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtudWxsPT1lP3RoaXMucmVtb3ZlQXR0cmlidXRlTlMobi5zcGFjZSxuLmxvY2FsKTp0aGlzLnNldEF0dHJpYnV0ZU5TKG4uc3BhY2Usbi5sb2NhbCxlKX1yZXR1cm4gbj1Cby5ucy5xdWFsaWZ5KG4pLG51bGw9PXQ/bi5sb2NhbD9yOmU6ImZ1bmN0aW9uIj09dHlwZW9mIHQ/bi5sb2NhbD9hOm86bi5sb2NhbD9pOnV9ZnVuY3Rpb24gQyhuKXtyZXR1cm4gbi50cmltKCkucmVwbGFjZSgvXHMrL2csIiAiKX1mdW5jdGlvbiBOKG4pe3JldHVybiBuZXcgUmVnRXhwKCIoPzpefFxccyspIitCby5yZXF1b3RlKG4pKyIoPzpcXHMrfCQpIiwiZyIpfWZ1bmN0aW9uIHoobil7cmV0dXJuKG4rIiIpLnRyaW0oKS5zcGxpdCgvXnxccysvKX1mdW5jdGlvbiBMKG4sdCl7ZnVuY3Rpb24gZSgpe2Zvcih2YXIgZT0tMTsrK2U8dTspbltlXSh0aGlzLHQpfWZ1bmN0aW9uIHIoKXtmb3IodmFyIGU9LTEscj10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTsrK2U8dTspbltlXSh0aGlzLHIpfW49eihuKS5tYXAoVCk7dmFyIHU9bi5sZW5ndGg7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIHQ/cjplfWZ1bmN0aW9uIFQobil7dmFyIHQ9TihuKTtyZXR1cm4gZnVuY3Rpb24oZSxyKXtpZih1PWUuY2xhc3NMaXN0KXJldHVybiByP3UuYWRkKG4pOnUucmVtb3ZlKG4pO3ZhciB1PWUuZ2V0QXR0cmlidXRlKCJjbGFzcyIpfHwiIjtyPyh0Lmxhc3RJbmRleD0wLHQudGVzdCh1KXx8ZS5zZXRBdHRyaWJ1dGUoImNsYXNzIixDKHUrIiAiK24pKSk6ZS5zZXRBdHRyaWJ1dGUoImNsYXNzIixDKHUucmVwbGFjZSh0LCIgIikpKX19ZnVuY3Rpb24gcShuLHQsZSl7ZnVuY3Rpb24gcigpe3RoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobil9ZnVuY3Rpb24gdSgpe3RoaXMuc3R5bGUuc2V0UHJvcGVydHkobix0LGUpfWZ1bmN0aW9uIGkoKXt2YXIgcj10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtudWxsPT1yP3RoaXMuc3R5bGUucmVtb3ZlUHJvcGVydHkobik6dGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuLHIsZSl9cmV0dXJuIG51bGw9PXQ/cjoiZnVuY3Rpb24iPT10eXBlb2YgdD9pOnV9ZnVuY3Rpb24gUihuLHQpe2Z1bmN0aW9uIGUoKXtkZWxldGUgdGhpc1tuXX1mdW5jdGlvbiByKCl7dGhpc1tuXT10fWZ1bmN0aW9uIHUoKXt2YXIgZT10LmFwcGx5KHRoaXMsYXJndW1lbnRzKTtudWxsPT1lP2RlbGV0ZSB0aGlzW25dOnRoaXNbbl09ZX1yZXR1cm4gbnVsbD09dD9lOiJmdW5jdGlvbiI9PXR5cGVvZiB0P3U6cn1mdW5jdGlvbiBEKG4pe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBuP246KG49Qm8ubnMucXVhbGlmeShuKSkubG9jYWw/ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuLnNwYWNlLG4ubG9jYWwpfTpmdW5jdGlvbigpe3JldHVybiB0aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHRoaXMubmFtZXNwYWNlVVJJLG4pfX1mdW5jdGlvbiBQKG4pe3JldHVybntfX2RhdGFfXzpufX1mdW5jdGlvbiBVKG4pe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBtYSh0aGlzLG4pfX1mdW5jdGlvbiBqKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RofHwodD1uKSxmdW5jdGlvbihuLGUpe3JldHVybiBuJiZlP3Qobi5fX2RhdGFfXyxlLl9fZGF0YV9fKTohbi0hZX19ZnVuY3Rpb24gRihuLHQpe2Zvcih2YXIgZT0wLHI9bi5sZW5ndGg7cj5lO2UrKylmb3IodmFyIHUsaT1uW2VdLG89MCxhPWkubGVuZ3RoO2E+bztvKyspKHU9aVtvXSkmJnQodSxvLGUpO3JldHVybiBufWZ1bmN0aW9uIEgobil7cmV0dXJuIGdhKG4sTWEpLG59ZnVuY3Rpb24gTyhuKXt2YXIgdCxlO3JldHVybiBmdW5jdGlvbihyLHUsaSl7dmFyIG8sYT1uW2ldLnVwZGF0ZSxjPWEubGVuZ3RoO2ZvcihpIT1lJiYoZT1pLHQ9MCksdT49dCYmKHQ9dSsxKTshKG89YVt0XSkmJisrdDxjOyk7cmV0dXJuIG99fWZ1bmN0aW9uIFkoKXt2YXIgbj10aGlzLl9fdHJhbnNpdGlvbl9fO24mJisrbi5hY3RpdmV9ZnVuY3Rpb24gSShuLHQsZSl7ZnVuY3Rpb24gcigpe3ZhciB0PXRoaXNbb107dCYmKHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihuLHQsdC4kKSxkZWxldGUgdGhpc1tvXSl9ZnVuY3Rpb24gdSgpe3ZhciB1PWModCxKbyhhcmd1bWVudHMpKTtyLmNhbGwodGhpcyksdGhpcy5hZGRFdmVudExpc3RlbmVyKG4sdGhpc1tvXT11LHUuJD1lKSx1Ll89dH1mdW5jdGlvbiBpKCl7dmFyIHQsZT1uZXcgUmVnRXhwKCJeX19vbihbXi5dKykiK0JvLnJlcXVvdGUobikrIiQiKTtmb3IodmFyIHIgaW4gdGhpcylpZih0PXIubWF0Y2goZSkpe3ZhciB1PXRoaXNbcl07dGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKHRbMV0sdSx1LiQpLGRlbGV0ZSB0aGlzW3JdfX12YXIgbz0iX19vbiIrbixhPW4uaW5kZXhPZigiLiIpLGM9WjthPjAmJihuPW4uc2xpY2UoMCxhKSk7dmFyIGw9YmEuZ2V0KG4pO3JldHVybiBsJiYobj1sLGM9ViksYT90P3U6cjp0P3k6aX1mdW5jdGlvbiBaKG4sdCl7cmV0dXJuIGZ1bmN0aW9uKGUpe3ZhciByPUJvLmV2ZW50O0JvLmV2ZW50PWUsdFswXT10aGlzLl9fZGF0YV9fO3RyeXtuLmFwcGx5KHRoaXMsdCl9ZmluYWxseXtCby5ldmVudD1yfX19ZnVuY3Rpb24gVihuLHQpe3ZhciBlPVoobix0KTtyZXR1cm4gZnVuY3Rpb24obil7dmFyIHQ9dGhpcyxyPW4ucmVsYXRlZFRhcmdldDtyJiYocj09PXR8fDgmci5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbih0KSl8fGUuY2FsbCh0LG4pfX1mdW5jdGlvbiBYKCl7dmFyIG49Ii5kcmFnc3VwcHJlc3MtIisgKytTYSx0PSJjbGljayIrbixlPUJvLnNlbGVjdChRbykub24oInRvdWNobW92ZSIrbixfKS5vbigiZHJhZ3N0YXJ0IituLF8pLm9uKCJzZWxlY3RzdGFydCIrbixfKTtpZih3YSl7dmFyIHI9S28uc3R5bGUsdT1yW3dhXTtyW3dhXT0ibm9uZSJ9cmV0dXJuIGZ1bmN0aW9uKGkpe2Z1bmN0aW9uIG8oKXtlLm9uKHQsbnVsbCl9ZS5vbihuLG51bGwpLHdhJiYoclt3YV09dSksaSYmKGUub24odCxmdW5jdGlvbigpe18oKSxvKCl9LCEwKSxzZXRUaW1lb3V0KG8sMCkpfX1mdW5jdGlvbiAkKG4sdCl7dC5jaGFuZ2VkVG91Y2hlcyYmKHQ9dC5jaGFuZ2VkVG91Y2hlc1swXSk7dmFyIGU9bi5vd25lclNWR0VsZW1lbnR8fG47aWYoZS5jcmVhdGVTVkdQb2ludCl7dmFyIHI9ZS5jcmVhdGVTVkdQb2ludCgpO2lmKDA+a2EmJihRby5zY3JvbGxYfHxRby5zY3JvbGxZKSl7ZT1Cby5zZWxlY3QoImJvZHkiKS5hcHBlbmQoInN2ZyIpLnN0eWxlKHtwb3NpdGlvbjoiYWJzb2x1dGUiLHRvcDowLGxlZnQ6MCxtYXJnaW46MCxwYWRkaW5nOjAsYm9yZGVyOiJub25lIn0sImltcG9ydGFudCIpO3ZhciB1PWVbMF1bMF0uZ2V0U2NyZWVuQ1RNKCk7a2E9ISh1LmZ8fHUuZSksZS5yZW1vdmUoKX1yZXR1cm4ga2E/KHIueD10LnBhZ2VYLHIueT10LnBhZ2VZKTooci54PXQuY2xpZW50WCxyLnk9dC5jbGllbnRZKSxyPXIubWF0cml4VHJhbnNmb3JtKG4uZ2V0U2NyZWVuQ1RNKCkuaW52ZXJzZSgpKSxbci54LHIueV19dmFyIGk9bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtyZXR1cm5bdC5jbGllbnRYLWkubGVmdC1uLmNsaWVudExlZnQsdC5jbGllbnRZLWkudG9wLW4uY2xpZW50VG9wXX1mdW5jdGlvbiBCKCl7cmV0dXJuIEJvLmV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLmlkZW50aWZpZXJ9ZnVuY3Rpb24gVygpe3JldHVybiBCby5ldmVudC50YXJnZXR9ZnVuY3Rpb24gSigpe3JldHVybiBRb31mdW5jdGlvbiBHKG4pe3JldHVybiBuPjA/MTowPm4/LTE6MH1mdW5jdGlvbiBLKG4sdCxlKXtyZXR1cm4odFswXS1uWzBdKSooZVsxXS1uWzFdKS0odFsxXS1uWzFdKSooZVswXS1uWzBdKX1mdW5jdGlvbiBRKG4pe3JldHVybiBuPjE/MDotMT5uP0VhOk1hdGguYWNvcyhuKX1mdW5jdGlvbiBudChuKXtyZXR1cm4gbj4xP0NhOi0xPm4/LUNhOk1hdGguYXNpbihuKX1mdW5jdGlvbiB0dChuKXtyZXR1cm4oKG49TWF0aC5leHAobikpLTEvbikvMn1mdW5jdGlvbiBldChuKXtyZXR1cm4oKG49TWF0aC5leHAobikpKzEvbikvMn1mdW5jdGlvbiBydChuKXtyZXR1cm4oKG49TWF0aC5leHAoMipuKSktMSkvKG4rMSl9ZnVuY3Rpb24gdXQobil7cmV0dXJuKG49TWF0aC5zaW4obi8yKSkqbn1mdW5jdGlvbiBpdCgpe31mdW5jdGlvbiBvdChuLHQsZSl7cmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBvdD8odGhpcy5oPStuLHRoaXMucz0rdCx2b2lkKHRoaXMubD0rZSkpOmFyZ3VtZW50cy5sZW5ndGg8Mj9uIGluc3RhbmNlb2Ygb3Q/bmV3IG90KG4uaCxuLnMsbi5sKTpNdCgiIituLF90LG90KTpuZXcgb3Qobix0LGUpfWZ1bmN0aW9uIGF0KG4sdCxlKXtmdW5jdGlvbiByKG4pe3JldHVybiBuPjM2MD9uLT0zNjA6MD5uJiYobis9MzYwKSw2MD5uP2krKG8taSkqbi82MDoxODA+bj9vOjI0MD5uP2krKG8taSkqKDI0MC1uKS82MDppfWZ1bmN0aW9uIHUobil7cmV0dXJuIE1hdGgucm91bmQoMjU1KnIobikpfXZhciBpLG87cmV0dXJuIG49aXNOYU4obik/MDoobiU9MzYwKTwwP24rMzYwOm4sdD1pc05hTih0KT8wOjA+dD8wOnQ+MT8xOnQsZT0wPmU/MDplPjE/MTplLG89LjU+PWU/ZSooMSt0KTplK3QtZSp0LGk9MiplLW8sbmV3IGR0KHUobisxMjApLHUobiksdShuLTEyMCkpfWZ1bmN0aW9uIGN0KG4sdCxlKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGN0Pyh0aGlzLmg9K24sdGhpcy5jPSt0LHZvaWQodGhpcy5sPStlKSk6YXJndW1lbnRzLmxlbmd0aDwyP24gaW5zdGFuY2VvZiBjdD9uZXcgY3Qobi5oLG4uYyxuLmwpOm4gaW5zdGFuY2VvZiBzdD9odChuLmwsbi5hLG4uYik6aHQoKG49YnQoKG49Qm8ucmdiKG4pKS5yLG4uZyxuLmIpKS5sLG4uYSxuLmIpOm5ldyBjdChuLHQsZSl9ZnVuY3Rpb24gbHQobix0LGUpe3JldHVybiBpc05hTihuKSYmKG49MCksaXNOYU4odCkmJih0PTApLG5ldyBzdChlLE1hdGguY29zKG4qPUxhKSp0LE1hdGguc2luKG4pKnQpfWZ1bmN0aW9uIHN0KG4sdCxlKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIHN0Pyh0aGlzLmw9K24sdGhpcy5hPSt0LHZvaWQodGhpcy5iPStlKSk6YXJndW1lbnRzLmxlbmd0aDwyP24gaW5zdGFuY2VvZiBzdD9uZXcgc3Qobi5sLG4uYSxuLmIpOm4gaW5zdGFuY2VvZiBjdD9sdChuLmgsbi5jLG4ubCk6YnQoKG49ZHQobikpLnIsbi5nLG4uYik6bmV3IHN0KG4sdCxlKX1mdW5jdGlvbiBmdChuLHQsZSl7dmFyIHI9KG4rMTYpLzExNix1PXIrdC81MDAsaT1yLWUvMjAwO3JldHVybiB1PWd0KHUpKllhLHI9Z3QocikqSWEsaT1ndChpKSpaYSxuZXcgZHQodnQoMy4yNDA0NTQyKnUtMS41MzcxMzg1KnItLjQ5ODUzMTQqaSksdnQoLS45NjkyNjYqdSsxLjg3NjAxMDgqcisuMDQxNTU2KmkpLHZ0KC4wNTU2NDM0KnUtLjIwNDAyNTkqcisxLjA1NzIyNTIqaSkpfWZ1bmN0aW9uIGh0KG4sdCxlKXtyZXR1cm4gbj4wP25ldyBjdChNYXRoLmF0YW4yKGUsdCkqVGEsTWF0aC5zcXJ0KHQqdCtlKmUpLG4pOm5ldyBjdCgwLzAsMC8wLG4pfWZ1bmN0aW9uIGd0KG4pe3JldHVybiBuPi4yMDY4OTMwMzQ/bipuKm46KG4tNC8yOSkvNy43ODcwMzd9ZnVuY3Rpb24gcHQobil7cmV0dXJuIG4+LjAwODg1Nj9NYXRoLnBvdyhuLDEvMyk6Ny43ODcwMzcqbis0LzI5fWZ1bmN0aW9uIHZ0KG4pe3JldHVybiBNYXRoLnJvdW5kKDI1NSooLjAwMzA0Pj1uPzEyLjkyKm46MS4wNTUqTWF0aC5wb3cobiwxLzIuNCktLjA1NSkpfWZ1bmN0aW9uIGR0KG4sdCxlKXtyZXR1cm4gdGhpcyBpbnN0YW5jZW9mIGR0Pyh0aGlzLnI9fn5uLHRoaXMuZz1+fnQsdm9pZCh0aGlzLmI9fn5lKSk6YXJndW1lbnRzLmxlbmd0aDwyP24gaW5zdGFuY2VvZiBkdD9uZXcgZHQobi5yLG4uZyxuLmIpOk10KCIiK24sZHQsYXQpOm5ldyBkdChuLHQsZSl9ZnVuY3Rpb24gbXQobil7cmV0dXJuIG5ldyBkdChuPj4xNiwyNTUmbj4+OCwyNTUmbil9ZnVuY3Rpb24geXQobil7cmV0dXJuIG10KG4pKyIifWZ1bmN0aW9uIHh0KG4pe3JldHVybiAxNj5uPyIwIitNYXRoLm1heCgwLG4pLnRvU3RyaW5nKDE2KTpNYXRoLm1pbigyNTUsbikudG9TdHJpbmcoMTYpfWZ1bmN0aW9uIE10KG4sdCxlKXt2YXIgcix1LGksbz0wLGE9MCxjPTA7aWYocj0vKFthLXpdKylcKCguKilcKS9pLmV4ZWMobikpc3dpdGNoKHU9clsyXS5zcGxpdCgiLCIpLHJbMV0pe2Nhc2UiaHNsIjpyZXR1cm4gZShwYXJzZUZsb2F0KHVbMF0pLHBhcnNlRmxvYXQodVsxXSkvMTAwLHBhcnNlRmxvYXQodVsyXSkvMTAwKTtjYXNlInJnYiI6cmV0dXJuIHQoU3QodVswXSksU3QodVsxXSksU3QodVsyXSkpfXJldHVybihpPSRhLmdldChuKSk/dChpLnIsaS5nLGkuYik6KG51bGw9PW58fCIjIiE9PW4uY2hhckF0KDApfHxpc05hTihpPXBhcnNlSW50KG4uc2xpY2UoMSksMTYpKXx8KDQ9PT1uLmxlbmd0aD8obz0oMzg0MCZpKT4+NCxvPW8+PjR8byxhPTI0MCZpLGE9YT4+NHxhLGM9MTUmaSxjPWM8PDR8Yyk6Nz09PW4ubGVuZ3RoJiYobz0oMTY3MTE2ODAmaSk+PjE2LGE9KDY1MjgwJmkpPj44LGM9MjU1JmkpKSx0KG8sYSxjKSl9ZnVuY3Rpb24gX3Qobix0LGUpe3ZhciByLHUsaT1NYXRoLm1pbihuLz0yNTUsdC89MjU1LGUvPTI1NSksbz1NYXRoLm1heChuLHQsZSksYT1vLWksYz0obytpKS8yO3JldHVybiBhPyh1PS41PmM/YS8obytpKTphLygyLW8taSkscj1uPT1vPyh0LWUpL2ErKGU+dD82OjApOnQ9PW8/KGUtbikvYSsyOihuLXQpL2ErNCxyKj02MCk6KHI9MC8wLHU9Yz4wJiYxPmM/MDpyKSxuZXcgb3Qocix1LGMpfWZ1bmN0aW9uIGJ0KG4sdCxlKXtuPXd0KG4pLHQ9d3QodCksZT13dChlKTt2YXIgcj1wdCgoLjQxMjQ1NjQqbisuMzU3NTc2MSp0Ky4xODA0Mzc1KmUpL1lhKSx1PXB0KCguMjEyNjcyOSpuKy43MTUxNTIyKnQrLjA3MjE3NSplKS9JYSksaT1wdCgoLjAxOTMzMzkqbisuMTE5MTkyKnQrLjk1MDMwNDEqZSkvWmEpO3JldHVybiBzdCgxMTYqdS0xNiw1MDAqKHItdSksMjAwKih1LWkpKX1mdW5jdGlvbiB3dChuKXtyZXR1cm4obi89MjU1KTw9LjA0MDQ1P24vMTIuOTI6TWF0aC5wb3coKG4rLjA1NSkvMS4wNTUsMi40KX1mdW5jdGlvbiBTdChuKXt2YXIgdD1wYXJzZUZsb2F0KG4pO3JldHVybiIlIj09PW4uY2hhckF0KG4ubGVuZ3RoLTEpP01hdGgucm91bmQoMi41NSp0KTp0fWZ1bmN0aW9uIGt0KG4pe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBuP246ZnVuY3Rpb24oKXtyZXR1cm4gbn19ZnVuY3Rpb24gRXQobil7cmV0dXJuIG59ZnVuY3Rpb24gQXQobil7cmV0dXJuIGZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gMj09PWFyZ3VtZW50cy5sZW5ndGgmJiJmdW5jdGlvbiI9PXR5cGVvZiBlJiYocj1lLGU9bnVsbCksQ3QodCxlLG4scil9fWZ1bmN0aW9uIEN0KG4sdCxlLHIpe2Z1bmN0aW9uIHUoKXt2YXIgbix0PWMuc3RhdHVzO2lmKCF0JiZ6dChjKXx8dD49MjAwJiYzMDA+dHx8MzA0PT09dCl7dHJ5e249ZS5jYWxsKGksYyl9Y2F0Y2gocil7cmV0dXJuIG8uZXJyb3IuY2FsbChpLHIpLHZvaWQgMH1vLmxvYWQuY2FsbChpLG4pfWVsc2Ugby5lcnJvci5jYWxsKGksYyl9dmFyIGk9e30sbz1Cby5kaXNwYXRjaCgiYmVmb3Jlc2VuZCIsInByb2dyZXNzIiwibG9hZCIsImVycm9yIiksYT17fSxjPW5ldyBYTUxIdHRwUmVxdWVzdCxsPW51bGw7cmV0dXJuIVFvLlhEb21haW5SZXF1ZXN0fHwid2l0aENyZWRlbnRpYWxzImluIGN8fCEvXihodHRwKHMpPzopP1wvXC8vLnRlc3Qobil8fChjPW5ldyBYRG9tYWluUmVxdWVzdCksIm9ubG9hZCJpbiBjP2Mub25sb2FkPWMub25lcnJvcj11OmMub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7Yy5yZWFkeVN0YXRlPjMmJnUoKX0sYy5vbnByb2dyZXNzPWZ1bmN0aW9uKG4pe3ZhciB0PUJvLmV2ZW50O0JvLmV2ZW50PW47dHJ5e28ucHJvZ3Jlc3MuY2FsbChpLGMpfWZpbmFsbHl7Qm8uZXZlbnQ9dH19LGkuaGVhZGVyPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG49KG4rIiIpLnRvTG93ZXJDYXNlKCksYXJndW1lbnRzLmxlbmd0aDwyP2Fbbl06KG51bGw9PXQ/ZGVsZXRlIGFbbl06YVtuXT10KyIiLGkpfSxpLm1pbWVUeXBlPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0PW51bGw9PW4/bnVsbDpuKyIiLGkpOnR9LGkucmVzcG9uc2VUeXBlPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhsPW4saSk6bH0saS5yZXNwb25zZT1mdW5jdGlvbihuKXtyZXR1cm4gZT1uLGl9LFsiZ2V0IiwicG9zdCJdLmZvckVhY2goZnVuY3Rpb24obil7aVtuXT1mdW5jdGlvbigpe3JldHVybiBpLnNlbmQuYXBwbHkoaSxbbl0uY29uY2F0KEpvKGFyZ3VtZW50cykpKX19KSxpLnNlbmQ9ZnVuY3Rpb24oZSxyLHUpe2lmKDI9PT1hcmd1bWVudHMubGVuZ3RoJiYiZnVuY3Rpb24iPT10eXBlb2YgciYmKHU9cixyPW51bGwpLGMub3BlbihlLG4sITApLG51bGw9PXR8fCJhY2NlcHQiaW4gYXx8KGEuYWNjZXB0PXQrIiwqLyoiKSxjLnNldFJlcXVlc3RIZWFkZXIpZm9yKHZhciBzIGluIGEpYy5zZXRSZXF1ZXN0SGVhZGVyKHMsYVtzXSk7cmV0dXJuIG51bGwhPXQmJmMub3ZlcnJpZGVNaW1lVHlwZSYmYy5vdmVycmlkZU1pbWVUeXBlKHQpLG51bGwhPWwmJihjLnJlc3BvbnNlVHlwZT1sKSxudWxsIT11JiZpLm9uKCJlcnJvciIsdSkub24oImxvYWQiLGZ1bmN0aW9uKG4pe3UobnVsbCxuKX0pLG8uYmVmb3Jlc2VuZC5jYWxsKGksYyksYy5zZW5kKG51bGw9PXI/bnVsbDpyKSxpfSxpLmFib3J0PWZ1bmN0aW9uKCl7cmV0dXJuIGMuYWJvcnQoKSxpfSxCby5yZWJpbmQoaSxvLCJvbiIpLG51bGw9PXI/aTppLmdldChOdChyKSl9ZnVuY3Rpb24gTnQobil7cmV0dXJuIDE9PT1uLmxlbmd0aD9mdW5jdGlvbih0LGUpe24obnVsbD09dD9lOm51bGwpfTpufWZ1bmN0aW9uIHp0KG4pe3ZhciB0PW4ucmVzcG9uc2VUeXBlO3JldHVybiB0JiYidGV4dCIhPT10P24ucmVzcG9uc2U6bi5yZXNwb25zZVRleHR9ZnVuY3Rpb24gTHQoKXt2YXIgbj1UdCgpLHQ9cXQoKS1uO3Q+MjQ/KGlzRmluaXRlKHQpJiYoY2xlYXJUaW1lb3V0KEdhKSxHYT1zZXRUaW1lb3V0KEx0LHQpKSxKYT0wKTooSmE9MSxRYShMdCkpfWZ1bmN0aW9uIFR0KCl7dmFyIG49RGF0ZS5ub3coKTtmb3IoS2E9QmE7S2E7KW4+PUthLnQmJihLYS5mPUthLmMobi1LYS50KSksS2E9S2EubjtyZXR1cm4gbn1mdW5jdGlvbiBxdCgpe2Zvcih2YXIgbix0PUJhLGU9MS8wO3Q7KXQuZj90PW4/bi5uPXQubjpCYT10Lm46KHQudDxlJiYoZT10LnQpLHQ9KG49dCkubik7cmV0dXJuIFdhPW4sZX1mdW5jdGlvbiBSdChuLHQpe3JldHVybiB0LShuP01hdGguY2VpbChNYXRoLmxvZyhuKS9NYXRoLkxOMTApOjEpfWZ1bmN0aW9uIER0KG4sdCl7dmFyIGU9TWF0aC5wb3coMTAsMypjYSg4LXQpKTtyZXR1cm57c2NhbGU6dD44P2Z1bmN0aW9uKG4pe3JldHVybiBuL2V9OmZ1bmN0aW9uKG4pe3JldHVybiBuKmV9LHN5bWJvbDpufX1mdW5jdGlvbiBQdChuKXt2YXIgdD1uLmRlY2ltYWwsZT1uLnRob3VzYW5kcyxyPW4uZ3JvdXBpbmcsdT1uLmN1cnJlbmN5LGk9ciYmZT9mdW5jdGlvbihuLHQpe2Zvcih2YXIgdT1uLmxlbmd0aCxpPVtdLG89MCxhPXJbMF0sYz0wO3U+MCYmYT4wJiYoYythKzE+dCYmKGE9TWF0aC5tYXgoMSx0LWMpKSxpLnB1c2gobi5zdWJzdHJpbmcodS09YSx1K2EpKSwhKChjKz1hKzEpPnQpKTspYT1yW289KG8rMSklci5sZW5ndGhdO3JldHVybiBpLnJldmVyc2UoKS5qb2luKGUpfTpFdDtyZXR1cm4gZnVuY3Rpb24obil7dmFyIGU9dGMuZXhlYyhuKSxyPWVbMV18fCIgIixvPWVbMl18fCI+IixhPWVbM118fCItIixjPWVbNF18fCIiLGw9ZVs1XSxzPStlWzZdLGY9ZVs3XSxoPWVbOF0sZz1lWzldLHA9MSx2PSIiLGQ9IiIsbT0hMSx5PSEwO3N3aXRjaChoJiYoaD0raC5zdWJzdHJpbmcoMSkpLChsfHwiMCI9PT1yJiYiPSI9PT1vKSYmKGw9cj0iMCIsbz0iPSIpLGcpe2Nhc2UibiI6Zj0hMCxnPSJnIjticmVhaztjYXNlIiUiOnA9MTAwLGQ9IiUiLGc9ImYiO2JyZWFrO2Nhc2UicCI6cD0xMDAsZD0iJSIsZz0iciI7YnJlYWs7Y2FzZSJiIjpjYXNlIm8iOmNhc2UieCI6Y2FzZSJYIjoiIyI9PT1jJiYodj0iMCIrZy50b0xvd2VyQ2FzZSgpKTtjYXNlImMiOnk9ITE7Y2FzZSJkIjptPSEwLGg9MDticmVhaztjYXNlInMiOnA9LTEsZz0iciJ9IiQiPT09YyYmKHY9dVswXSxkPXVbMV0pLCJyIiE9Z3x8aHx8KGc9ImciKSxudWxsIT1oJiYoImciPT1nP2g9TWF0aC5tYXgoMSxNYXRoLm1pbigyMSxoKSk6KCJlIj09Z3x8ImYiPT1nKSYmKGg9TWF0aC5tYXgoMCxNYXRoLm1pbigyMCxoKSkpKSxnPWVjLmdldChnKXx8VXQ7dmFyIHg9bCYmZjtyZXR1cm4gZnVuY3Rpb24obil7dmFyIGU9ZDtpZihtJiZuJTEpcmV0dXJuIiI7dmFyIHU9MD5ufHwwPT09biYmMD4xL24/KG49LW4sIi0iKToiLSI9PT1hPyIiOmE7aWYoMD5wKXt2YXIgYz1Cby5mb3JtYXRQcmVmaXgobixoKTtuPWMuc2NhbGUobiksZT1jLnN5bWJvbCtkfWVsc2Ugbio9cDtuPWcobixoKTt2YXIgTSxfLGI9bi5sYXN0SW5kZXhPZigiLiIpO2lmKDA+Yil7dmFyIHc9eT9uLmxhc3RJbmRleE9mKCJlIik6LTE7MD53PyhNPW4sXz0iIik6KE09bi5zdWJzdHJpbmcoMCx3KSxfPW4uc3Vic3RyaW5nKHcpKX1lbHNlIE09bi5zdWJzdHJpbmcoMCxiKSxfPXQrbi5zdWJzdHJpbmcoYisxKTshbCYmZiYmKE09aShNLDEvMCkpO3ZhciBTPXYubGVuZ3RoK00ubGVuZ3RoK18ubGVuZ3RoKyh4PzA6dS5sZW5ndGgpLGs9cz5TP25ldyBBcnJheShTPXMtUysxKS5qb2luKHIpOiIiO3JldHVybiB4JiYoTT1pKGsrTSxrLmxlbmd0aD9zLV8ubGVuZ3RoOjEvMCkpLHUrPXYsbj1NK18sKCI8Ij09PW8/dStuK2s6Ij4iPT09bz9rK3UrbjoiXiI9PT1vP2suc3Vic3RyaW5nKDAsUz4+PTEpK3UrbitrLnN1YnN0cmluZyhTKTp1Kyh4P246aytuKSkrZX19fWZ1bmN0aW9uIFV0KG4pe3JldHVybiBuKyIifWZ1bmN0aW9uIGp0KCl7dGhpcy5fPW5ldyBEYXRlKGFyZ3VtZW50cy5sZW5ndGg+MT9EYXRlLlVUQy5hcHBseSh0aGlzLGFyZ3VtZW50cyk6YXJndW1lbnRzWzBdKX1mdW5jdGlvbiBGdChuLHQsZSl7ZnVuY3Rpb24gcih0KXt2YXIgZT1uKHQpLHI9aShlLDEpO3JldHVybiByLXQ+dC1lP2U6cn1mdW5jdGlvbiB1KGUpe3JldHVybiB0KGU9bihuZXcgdWMoZS0xKSksMSksZX1mdW5jdGlvbiBpKG4sZSl7cmV0dXJuIHQobj1uZXcgdWMoK24pLGUpLG59ZnVuY3Rpb24gbyhuLHIsaSl7dmFyIG89dShuKSxhPVtdO2lmKGk+MSlmb3IoO3I+bzspZShvKSVpfHxhLnB1c2gobmV3IERhdGUoK28pKSx0KG8sMSk7ZWxzZSBmb3IoO3I+bzspYS5wdXNoKG5ldyBEYXRlKCtvKSksdChvLDEpO3JldHVybiBhfWZ1bmN0aW9uIGEobix0LGUpe3RyeXt1Yz1qdDt2YXIgcj1uZXcganQ7cmV0dXJuIHIuXz1uLG8ocix0LGUpfWZpbmFsbHl7dWM9RGF0ZX19bi5mbG9vcj1uLG4ucm91bmQ9cixuLmNlaWw9dSxuLm9mZnNldD1pLG4ucmFuZ2U9bzt2YXIgYz1uLnV0Yz1IdChuKTtyZXR1cm4gYy5mbG9vcj1jLGMucm91bmQ9SHQociksYy5jZWlsPUh0KHUpLGMub2Zmc2V0PUh0KGkpLGMucmFuZ2U9YSxufWZ1bmN0aW9uIEh0KG4pe3JldHVybiBmdW5jdGlvbih0LGUpe3RyeXt1Yz1qdDt2YXIgcj1uZXcganQ7cmV0dXJuIHIuXz10LG4ocixlKS5ffWZpbmFsbHl7dWM9RGF0ZX19fWZ1bmN0aW9uIE90KG4pe2Z1bmN0aW9uIHQobil7ZnVuY3Rpb24gdCh0KXtmb3IodmFyIGUsdSxpLG89W10sYT0tMSxjPTA7KythPHI7KTM3PT09bi5jaGFyQ29kZUF0KGEpJiYoby5wdXNoKG4uc2xpY2UoYyxhKSksbnVsbCE9KHU9b2NbZT1uLmNoYXJBdCgrK2EpXSkmJihlPW4uY2hhckF0KCsrYSkpLChpPUNbZV0pJiYoZT1pKHQsbnVsbD09dT8iZSI9PT1lPyIgIjoiMCI6dSkpLG8ucHVzaChlKSxjPWErMSk7cmV0dXJuIG8ucHVzaChuLnNsaWNlKGMsYSkpLG8uam9pbigiIil9dmFyIHI9bi5sZW5ndGg7cmV0dXJuIHQucGFyc2U9ZnVuY3Rpb24odCl7dmFyIHI9e3k6MTkwMCxtOjAsZDoxLEg6MCxNOjAsUzowLEw6MCxaOm51bGx9LHU9ZShyLG4sdCwwKTtpZih1IT10Lmxlbmd0aClyZXR1cm4gbnVsbDsicCJpbiByJiYoci5IPXIuSCUxMisxMipyLnApO3ZhciBpPW51bGwhPXIuWiYmdWMhPT1qdCxvPW5ldyhpP2p0OnVjKTtyZXR1cm4iaiJpbiByP28uc2V0RnVsbFllYXIoci55LDAsci5qKToidyJpbiByJiYoIlciaW4gcnx8IlUiaW4gcik/KG8uc2V0RnVsbFllYXIoci55LDAsMSksby5zZXRGdWxsWWVhcihyLnksMCwiVyJpbiByPyhyLncrNiklNys3KnIuVy0oby5nZXREYXkoKSs1KSU3OnIudys3KnIuVS0oby5nZXREYXkoKSs2KSU3KSk6by5zZXRGdWxsWWVhcihyLnksci5tLHIuZCksby5zZXRIb3VycyhyLkgrKDB8ci5aLzEwMCksci5NK3IuWiUxMDAsci5TLHIuTCksaT9vLl86b30sdC50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiBufSx0fWZ1bmN0aW9uIGUobix0LGUscil7Zm9yKHZhciB1LGksbyxhPTAsYz10Lmxlbmd0aCxsPWUubGVuZ3RoO2M+YTspe2lmKHI+PWwpcmV0dXJuLTE7aWYodT10LmNoYXJDb2RlQXQoYSsrKSwzNz09PXUpe2lmKG89dC5jaGFyQXQoYSsrKSxpPU5bbyBpbiBvYz90LmNoYXJBdChhKyspOm9dLCFpfHwocj1pKG4sZSxyKSk8MClyZXR1cm4tMX1lbHNlIGlmKHUhPWUuY2hhckNvZGVBdChyKyspKXJldHVybi0xfXJldHVybiByfWZ1bmN0aW9uIHIobix0LGUpe2IubGFzdEluZGV4PTA7dmFyIHI9Yi5leGVjKHQuc2xpY2UoZSkpO3JldHVybiByPyhuLnc9dy5nZXQoclswXS50b0xvd2VyQ2FzZSgpKSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiB1KG4sdCxlKXtNLmxhc3RJbmRleD0wO3ZhciByPU0uZXhlYyh0LnNsaWNlKGUpKTtyZXR1cm4gcj8obi53PV8uZ2V0KHJbMF0udG9Mb3dlckNhc2UoKSksZStyWzBdLmxlbmd0aCk6LTF9ZnVuY3Rpb24gaShuLHQsZSl7RS5sYXN0SW5kZXg9MDt2YXIgcj1FLmV4ZWModC5zbGljZShlKSk7cmV0dXJuIHI/KG4ubT1BLmdldChyWzBdLnRvTG93ZXJDYXNlKCkpLGUrclswXS5sZW5ndGgpOi0xfWZ1bmN0aW9uIG8obix0LGUpe1MubGFzdEluZGV4PTA7dmFyIHI9Uy5leGVjKHQuc2xpY2UoZSkpO3JldHVybiByPyhuLm09ay5nZXQoclswXS50b0xvd2VyQ2FzZSgpKSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiBhKG4sdCxyKXtyZXR1cm4gZShuLEMuYy50b1N0cmluZygpLHQscil9ZnVuY3Rpb24gYyhuLHQscil7cmV0dXJuIGUobixDLngudG9TdHJpbmcoKSx0LHIpfWZ1bmN0aW9uIGwobix0LHIpe3JldHVybiBlKG4sQy5YLnRvU3RyaW5nKCksdCxyKX1mdW5jdGlvbiBzKG4sdCxlKXt2YXIgcj14LmdldCh0LnNsaWNlKGUsZSs9MikudG9Mb3dlckNhc2UoKSk7cmV0dXJuIG51bGw9PXI/LTE6KG4ucD1yLGUpfXZhciBmPW4uZGF0ZVRpbWUsaD1uLmRhdGUsZz1uLnRpbWUscD1uLnBlcmlvZHMsdj1uLmRheXMsZD1uLnNob3J0RGF5cyxtPW4ubW9udGhzLHk9bi5zaG9ydE1vbnRoczt0LnV0Yz1mdW5jdGlvbihuKXtmdW5jdGlvbiBlKG4pe3RyeXt1Yz1qdDt2YXIgdD1uZXcgdWM7cmV0dXJuIHQuXz1uLHIodCl9ZmluYWxseXt1Yz1EYXRlfX12YXIgcj10KG4pO3JldHVybiBlLnBhcnNlPWZ1bmN0aW9uKG4pe3RyeXt1Yz1qdDt2YXIgdD1yLnBhcnNlKG4pO3JldHVybiB0JiZ0Ll99ZmluYWxseXt1Yz1EYXRlfX0sZS50b1N0cmluZz1yLnRvU3RyaW5nLGV9LHQubXVsdGk9dC51dGMubXVsdGk9YWU7dmFyIHg9Qm8ubWFwKCksTT1JdCh2KSxfPVp0KHYpLGI9SXQoZCksdz1adChkKSxTPUl0KG0pLGs9WnQobSksRT1JdCh5KSxBPVp0KHkpO3AuZm9yRWFjaChmdW5jdGlvbihuLHQpe3guc2V0KG4udG9Mb3dlckNhc2UoKSx0KX0pO3ZhciBDPXthOmZ1bmN0aW9uKG4pe3JldHVybiBkW24uZ2V0RGF5KCldfSxBOmZ1bmN0aW9uKG4pe3JldHVybiB2W24uZ2V0RGF5KCldfSxiOmZ1bmN0aW9uKG4pe3JldHVybiB5W24uZ2V0TW9udGgoKV19LEI6ZnVuY3Rpb24obil7cmV0dXJuIG1bbi5nZXRNb250aCgpXX0sYzp0KGYpLGQ6ZnVuY3Rpb24obix0KXtyZXR1cm4gWXQobi5nZXREYXRlKCksdCwyKX0sZTpmdW5jdGlvbihuLHQpe3JldHVybiBZdChuLmdldERhdGUoKSx0LDIpfSxIOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIFl0KG4uZ2V0SG91cnMoKSx0LDIpfSxJOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIFl0KG4uZ2V0SG91cnMoKSUxMnx8MTIsdCwyKX0sajpmdW5jdGlvbihuLHQpe3JldHVybiBZdCgxK3JjLmRheU9mWWVhcihuKSx0LDMpfSxMOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIFl0KG4uZ2V0TWlsbGlzZWNvbmRzKCksdCwzKX0sbTpmdW5jdGlvbihuLHQpe3JldHVybiBZdChuLmdldE1vbnRoKCkrMSx0LDIpfSxNOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIFl0KG4uZ2V0TWludXRlcygpLHQsMil9LHA6ZnVuY3Rpb24obil7cmV0dXJuIHBbKyhuLmdldEhvdXJzKCk+PTEyKV19LFM6ZnVuY3Rpb24obix0KXtyZXR1cm4gWXQobi5nZXRTZWNvbmRzKCksdCwyKX0sVTpmdW5jdGlvbihuLHQpe3JldHVybiBZdChyYy5zdW5kYXlPZlllYXIobiksdCwyKX0sdzpmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXREYXkoKX0sVzpmdW5jdGlvbihuLHQpe3JldHVybiBZdChyYy5tb25kYXlPZlllYXIobiksdCwyKX0seDp0KGgpLFg6dChnKSx5OmZ1bmN0aW9uKG4sdCl7cmV0dXJuIFl0KG4uZ2V0RnVsbFllYXIoKSUxMDAsdCwyKX0sWTpmdW5jdGlvbihuLHQpe3JldHVybiBZdChuLmdldEZ1bGxZZWFyKCklMWU0LHQsNCl9LFo6aWUsIiUiOmZ1bmN0aW9uKCl7cmV0dXJuIiUifX0sTj17YTpyLEE6dSxiOmksQjpvLGM6YSxkOlF0LGU6UXQsSDp0ZSxJOnRlLGo6bmUsTDp1ZSxtOkt0LE06ZWUscDpzLFM6cmUsVTpYdCx3OlZ0LFc6JHQseDpjLFg6bCx5Old0LFk6QnQsWjpKdCwiJSI6b2V9O3JldHVybiB0fWZ1bmN0aW9uIFl0KG4sdCxlKXt2YXIgcj0wPm4/Ii0iOiIiLHU9KHI/LW46bikrIiIsaT11Lmxlbmd0aDtyZXR1cm4gcisoZT5pP25ldyBBcnJheShlLWkrMSkuam9pbih0KSt1OnUpfWZ1bmN0aW9uIEl0KG4pe3JldHVybiBuZXcgUmVnRXhwKCJeKD86IituLm1hcChCby5yZXF1b3RlKS5qb2luKCJ8IikrIikiLCJpIil9ZnVuY3Rpb24gWnQobil7Zm9yKHZhciB0PW5ldyBhLGU9LTEscj1uLmxlbmd0aDsrK2U8cjspdC5zZXQobltlXS50b0xvd2VyQ2FzZSgpLGUpO3JldHVybiB0fWZ1bmN0aW9uIFZ0KG4sdCxlKXthYy5sYXN0SW5kZXg9MDt2YXIgcj1hYy5leGVjKHQuc2xpY2UoZSxlKzEpKTtyZXR1cm4gcj8obi53PStyWzBdLGUrclswXS5sZW5ndGgpOi0xfWZ1bmN0aW9uIFh0KG4sdCxlKXthYy5sYXN0SW5kZXg9MDt2YXIgcj1hYy5leGVjKHQuc2xpY2UoZSkpO3JldHVybiByPyhuLlU9K3JbMF0sZStyWzBdLmxlbmd0aCk6LTF9ZnVuY3Rpb24gJHQobix0LGUpe2FjLmxhc3RJbmRleD0wO3ZhciByPWFjLmV4ZWModC5zbGljZShlKSk7cmV0dXJuIHI/KG4uVz0rclswXSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiBCdChuLHQsZSl7YWMubGFzdEluZGV4PTA7dmFyIHI9YWMuZXhlYyh0LnNsaWNlKGUsZSs0KSk7cmV0dXJuIHI/KG4ueT0rclswXSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiBXdChuLHQsZSl7YWMubGFzdEluZGV4PTA7dmFyIHI9YWMuZXhlYyh0LnNsaWNlKGUsZSsyKSk7cmV0dXJuIHI/KG4ueT1HdCgrclswXSksZStyWzBdLmxlbmd0aCk6LTF9ZnVuY3Rpb24gSnQobix0LGUpe3JldHVybi9eWystXVxkezR9JC8udGVzdCh0PXQuc2xpY2UoZSxlKzUpKT8obi5aPS10LGUrNSk6LTF9ZnVuY3Rpb24gR3Qobil7cmV0dXJuIG4rKG4+Njg/MTkwMDoyZTMpfWZ1bmN0aW9uIEt0KG4sdCxlKXthYy5sYXN0SW5kZXg9MDt2YXIgcj1hYy5leGVjKHQuc2xpY2UoZSxlKzIpKTtyZXR1cm4gcj8obi5tPXJbMF0tMSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiBRdChuLHQsZSl7YWMubGFzdEluZGV4PTA7dmFyIHI9YWMuZXhlYyh0LnNsaWNlKGUsZSsyKSk7cmV0dXJuIHI/KG4uZD0rclswXSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiBuZShuLHQsZSl7YWMubGFzdEluZGV4PTA7dmFyIHI9YWMuZXhlYyh0LnNsaWNlKGUsZSszKSk7cmV0dXJuIHI/KG4uaj0rclswXSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiB0ZShuLHQsZSl7YWMubGFzdEluZGV4PTA7dmFyIHI9YWMuZXhlYyh0LnNsaWNlKGUsZSsyKSk7cmV0dXJuIHI/KG4uSD0rclswXSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiBlZShuLHQsZSl7YWMubGFzdEluZGV4PTA7dmFyIHI9YWMuZXhlYyh0LnNsaWNlKGUsZSsyKSk7cmV0dXJuIHI/KG4uTT0rclswXSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiByZShuLHQsZSl7YWMubGFzdEluZGV4PTA7dmFyIHI9YWMuZXhlYyh0LnNsaWNlKGUsZSsyKSk7cmV0dXJuIHI/KG4uUz0rclswXSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiB1ZShuLHQsZSl7YWMubGFzdEluZGV4PTA7dmFyIHI9YWMuZXhlYyh0LnNsaWNlKGUsZSszKSk7cmV0dXJuIHI/KG4uTD0rclswXSxlK3JbMF0ubGVuZ3RoKTotMX1mdW5jdGlvbiBpZShuKXt2YXIgdD1uLmdldFRpbWV6b25lT2Zmc2V0KCksZT10PjA/Ii0iOiIrIixyPTB8Y2EodCkvNjAsdT1jYSh0KSU2MDtyZXR1cm4gZStZdChyLCIwIiwyKStZdCh1LCIwIiwyKX1mdW5jdGlvbiBvZShuLHQsZSl7Y2MubGFzdEluZGV4PTA7dmFyIHI9Y2MuZXhlYyh0LnNsaWNlKGUsZSsxKSk7cmV0dXJuIHI/ZStyWzBdLmxlbmd0aDotMX1mdW5jdGlvbiBhZShuKXtmb3IodmFyIHQ9bi5sZW5ndGgsZT0tMTsrK2U8dDspbltlXVswXT10aGlzKG5bZV1bMF0pO3JldHVybiBmdW5jdGlvbih0KXtmb3IodmFyIGU9MCxyPW5bZV07IXJbMV0odCk7KXI9blsrK2VdO3JldHVybiByWzBdKHQpfX1mdW5jdGlvbiBjZSgpe31mdW5jdGlvbiBsZShuLHQsZSl7dmFyIHI9ZS5zPW4rdCx1PXItbixpPXItdTtlLnQ9bi1pKyh0LXUpfWZ1bmN0aW9uIHNlKG4sdCl7biYmaGMuaGFzT3duUHJvcGVydHkobi50eXBlKSYmaGNbbi50eXBlXShuLHQpfWZ1bmN0aW9uIGZlKG4sdCxlKXt2YXIgcix1PS0xLGk9bi5sZW5ndGgtZTtmb3IodC5saW5lU3RhcnQoKTsrK3U8aTspcj1uW3VdLHQucG9pbnQoclswXSxyWzFdLHJbMl0pO3QubGluZUVuZCgpfWZ1bmN0aW9uIGhlKG4sdCl7dmFyIGU9LTEscj1uLmxlbmd0aDtmb3IodC5wb2x5Z29uU3RhcnQoKTsrK2U8cjspZmUobltlXSx0LDEpO3QucG9seWdvbkVuZCgpfWZ1bmN0aW9uIGdlKCl7ZnVuY3Rpb24gbihuLHQpe24qPUxhLHQ9dCpMYS8yK0VhLzQ7dmFyIGU9bi1yLG89ZT49MD8xOi0xLGE9byplLGM9TWF0aC5jb3ModCksbD1NYXRoLnNpbih0KSxzPWkqbCxmPXUqYytzKk1hdGguY29zKGEpLGg9cypvKk1hdGguc2luKGEpO3BjLmFkZChNYXRoLmF0YW4yKGgsZikpLHI9bix1PWMsaT1sfXZhciB0LGUscix1LGk7dmMucG9pbnQ9ZnVuY3Rpb24obyxhKXt2Yy5wb2ludD1uLHI9KHQ9bykqTGEsdT1NYXRoLmNvcyhhPShlPWEpKkxhLzIrRWEvNCksaT1NYXRoLnNpbihhKX0sdmMubGluZUVuZD1mdW5jdGlvbigpe24odCxlKX19ZnVuY3Rpb24gcGUobil7dmFyIHQ9blswXSxlPW5bMV0scj1NYXRoLmNvcyhlKTtyZXR1cm5bcipNYXRoLmNvcyh0KSxyKk1hdGguc2luKHQpLE1hdGguc2luKGUpXX1mdW5jdGlvbiB2ZShuLHQpe3JldHVybiBuWzBdKnRbMF0rblsxXSp0WzFdK25bMl0qdFsyXX1mdW5jdGlvbiBkZShuLHQpe3JldHVybltuWzFdKnRbMl0tblsyXSp0WzFdLG5bMl0qdFswXS1uWzBdKnRbMl0sblswXSp0WzFdLW5bMV0qdFswXV19ZnVuY3Rpb24gbWUobix0KXtuWzBdKz10WzBdLG5bMV0rPXRbMV0sblsyXSs9dFsyXX1mdW5jdGlvbiB5ZShuLHQpe3JldHVybltuWzBdKnQsblsxXSp0LG5bMl0qdF19ZnVuY3Rpb24geGUobil7dmFyIHQ9TWF0aC5zcXJ0KG5bMF0qblswXStuWzFdKm5bMV0rblsyXSpuWzJdKTtuWzBdLz10LG5bMV0vPXQsblsyXS89dH1mdW5jdGlvbiBNZShuKXtyZXR1cm5bTWF0aC5hdGFuMihuWzFdLG5bMF0pLG50KG5bMl0pXX1mdW5jdGlvbiBfZShuLHQpe3JldHVybiBjYShuWzBdLXRbMF0pPE5hJiZjYShuWzFdLXRbMV0pPE5hfWZ1bmN0aW9uIGJlKG4sdCl7bio9TGE7dmFyIGU9TWF0aC5jb3ModCo9TGEpO3dlKGUqTWF0aC5jb3MobiksZSpNYXRoLnNpbihuKSxNYXRoLnNpbih0KSl9ZnVuY3Rpb24gd2Uobix0LGUpeysrZGMseWMrPShuLXljKS9kYyx4Yys9KHQteGMpL2RjLE1jKz0oZS1NYykvZGN9ZnVuY3Rpb24gU2UoKXtmdW5jdGlvbiBuKG4sdSl7bio9TGE7dmFyIGk9TWF0aC5jb3ModSo9TGEpLG89aSpNYXRoLmNvcyhuKSxhPWkqTWF0aC5zaW4obiksYz1NYXRoLnNpbih1KSxsPU1hdGguYXRhbjIoTWF0aC5zcXJ0KChsPWUqYy1yKmEpKmwrKGw9cipvLXQqYykqbCsobD10KmEtZSpvKSpsKSx0Km8rZSphK3IqYyk7bWMrPWwsX2MrPWwqKHQrKHQ9bykpLGJjKz1sKihlKyhlPWEpKSx3Yys9bCoocisocj1jKSksd2UodCxlLHIpfXZhciB0LGUscjtBYy5wb2ludD1mdW5jdGlvbih1LGkpe3UqPUxhO3ZhciBvPU1hdGguY29zKGkqPUxhKTt0PW8qTWF0aC5jb3ModSksZT1vKk1hdGguc2luKHUpLHI9TWF0aC5zaW4oaSksQWMucG9pbnQ9bix3ZSh0LGUscil9fWZ1bmN0aW9uIGtlKCl7QWMucG9pbnQ9YmV9ZnVuY3Rpb24gRWUoKXtmdW5jdGlvbiBuKG4sdCl7bio9TGE7dmFyIGU9TWF0aC5jb3ModCo9TGEpLG89ZSpNYXRoLmNvcyhuKSxhPWUqTWF0aC5zaW4obiksYz1NYXRoLnNpbih0KSxsPXUqYy1pKmEscz1pKm8tcipjLGY9ciphLXUqbyxoPU1hdGguc3FydChsKmwrcypzK2YqZiksZz1yKm8rdSphK2kqYyxwPWgmJi1RKGcpL2gsdj1NYXRoLmF0YW4yKGgsZyk7U2MrPXAqbCxrYys9cCpzLEVjKz1wKmYsbWMrPXYsX2MrPXYqKHIrKHI9bykpLGJjKz12Kih1Kyh1PWEpKSx3Yys9diooaSsoaT1jKSksd2Uocix1LGkpfXZhciB0LGUscix1LGk7QWMucG9pbnQ9ZnVuY3Rpb24obyxhKXt0PW8sZT1hLEFjLnBvaW50PW4sbyo9TGE7dmFyIGM9TWF0aC5jb3MoYSo9TGEpO3I9YypNYXRoLmNvcyhvKSx1PWMqTWF0aC5zaW4obyksaT1NYXRoLnNpbihhKSx3ZShyLHUsaSl9LEFjLmxpbmVFbmQ9ZnVuY3Rpb24oKXtuKHQsZSksQWMubGluZUVuZD1rZSxBYy5wb2ludD1iZX19ZnVuY3Rpb24gQWUoKXtyZXR1cm4hMH1mdW5jdGlvbiBDZShuLHQsZSxyLHUpe3ZhciBpPVtdLG89W107aWYobi5mb3JFYWNoKGZ1bmN0aW9uKG4pe2lmKCEoKHQ9bi5sZW5ndGgtMSk8PTApKXt2YXIgdCxlPW5bMF0scj1uW3RdO2lmKF9lKGUscikpe3UubGluZVN0YXJ0KCk7Zm9yKHZhciBhPTA7dD5hOysrYSl1LnBvaW50KChlPW5bYV0pWzBdLGVbMV0pO3JldHVybiB1LmxpbmVFbmQoKSx2b2lkIDB9dmFyIGM9bmV3IHplKGUsbixudWxsLCEwKSxsPW5ldyB6ZShlLG51bGwsYywhMSk7Yy5vPWwsaS5wdXNoKGMpLG8ucHVzaChsKSxjPW5ldyB6ZShyLG4sbnVsbCwhMSksbD1uZXcgemUocixudWxsLGMsITApLGMubz1sLGkucHVzaChjKSxvLnB1c2gobCl9fSksby5zb3J0KHQpLE5lKGkpLE5lKG8pLGkubGVuZ3RoKXtmb3IodmFyIGE9MCxjPWUsbD1vLmxlbmd0aDtsPmE7KythKW9bYV0uZT1jPSFjO2Zvcih2YXIgcyxmLGg9aVswXTs7KXtmb3IodmFyIGc9aCxwPSEwO2cudjspaWYoKGc9Zy5uKT09PWgpcmV0dXJuO3M9Zy56LHUubGluZVN0YXJ0KCk7ZG97aWYoZy52PWcuby52PSEwLGcuZSl7aWYocClmb3IodmFyIGE9MCxsPXMubGVuZ3RoO2w+YTsrK2EpdS5wb2ludCgoZj1zW2FdKVswXSxmWzFdKTtlbHNlIHIoZy54LGcubi54LDEsdSk7Zz1nLm59ZWxzZXtpZihwKXtzPWcucC56O2Zvcih2YXIgYT1zLmxlbmd0aC0xO2E+PTA7LS1hKXUucG9pbnQoKGY9c1thXSlbMF0sZlsxXSl9ZWxzZSByKGcueCxnLnAueCwtMSx1KTtnPWcucH1nPWcubyxzPWcueixwPSFwfXdoaWxlKCFnLnYpO3UubGluZUVuZCgpfX19ZnVuY3Rpb24gTmUobil7aWYodD1uLmxlbmd0aCl7Zm9yKHZhciB0LGUscj0wLHU9blswXTsrK3I8dDspdS5uPWU9bltyXSxlLnA9dSx1PWU7dS5uPWU9blswXSxlLnA9dX19ZnVuY3Rpb24gemUobix0LGUscil7dGhpcy54PW4sdGhpcy56PXQsdGhpcy5vPWUsdGhpcy5lPXIsdGhpcy52PSExLHRoaXMubj10aGlzLnA9bnVsbH1mdW5jdGlvbiBMZShuLHQsZSxyKXtyZXR1cm4gZnVuY3Rpb24odSxpKXtmdW5jdGlvbiBvKHQsZSl7dmFyIHI9dSh0LGUpO24odD1yWzBdLGU9clsxXSkmJmkucG9pbnQodCxlKX1mdW5jdGlvbiBhKG4sdCl7dmFyIGU9dShuLHQpO2QucG9pbnQoZVswXSxlWzFdKX1mdW5jdGlvbiBjKCl7eS5wb2ludD1hLGQubGluZVN0YXJ0KCl9ZnVuY3Rpb24gbCgpe3kucG9pbnQ9byxkLmxpbmVFbmQoKX1mdW5jdGlvbiBzKG4sdCl7di5wdXNoKFtuLHRdKTt2YXIgZT11KG4sdCk7TS5wb2ludChlWzBdLGVbMV0pfWZ1bmN0aW9uIGYoKXtNLmxpbmVTdGFydCgpLHY9W119ZnVuY3Rpb24gaCgpe3ModlswXVswXSx2WzBdWzFdKSxNLmxpbmVFbmQoKTt2YXIgbix0PU0uY2xlYW4oKSxlPXguYnVmZmVyKCkscj1lLmxlbmd0aDtpZih2LnBvcCgpLHAucHVzaCh2KSx2PW51bGwscilpZigxJnQpe249ZVswXTt2YXIgdSxyPW4ubGVuZ3RoLTEsbz0tMTtpZihyPjApe2ZvcihffHwoaS5wb2x5Z29uU3RhcnQoKSxfPSEwKSxpLmxpbmVTdGFydCgpOysrbzxyOylpLnBvaW50KCh1PW5bb10pWzBdLHVbMV0pO2kubGluZUVuZCgpfX1lbHNlIHI+MSYmMiZ0JiZlLnB1c2goZS5wb3AoKS5jb25jYXQoZS5zaGlmdCgpKSksZy5wdXNoKGUuZmlsdGVyKFRlKSl9dmFyIGcscCx2LGQ9dChpKSxtPXUuaW52ZXJ0KHJbMF0sclsxXSkseT17cG9pbnQ6byxsaW5lU3RhcnQ6YyxsaW5lRW5kOmwscG9seWdvblN0YXJ0OmZ1bmN0aW9uKCl7eS5wb2ludD1zLHkubGluZVN0YXJ0PWYseS5saW5lRW5kPWgsZz1bXSxwPVtdfSxwb2x5Z29uRW5kOmZ1bmN0aW9uKCl7eS5wb2ludD1vLHkubGluZVN0YXJ0PWMseS5saW5lRW5kPWwsZz1Cby5tZXJnZShnKTt2YXIgbj1qZShtLHApO2cubGVuZ3RoPyhffHwoaS5wb2x5Z29uU3RhcnQoKSxfPSEwKSxDZShnLFJlLG4sZSxpKSk6biYmKF98fChpLnBvbHlnb25TdGFydCgpLF89ITApLGkubGluZVN0YXJ0KCksZShudWxsLG51bGwsMSxpKSxpLmxpbmVFbmQoKSksXyYmKGkucG9seWdvbkVuZCgpLF89ITEpLGc9cD1udWxsfSxzcGhlcmU6ZnVuY3Rpb24oKXtpLnBvbHlnb25TdGFydCgpLGkubGluZVN0YXJ0KCksZShudWxsLG51bGwsMSxpKSxpLmxpbmVFbmQoKSxpLnBvbHlnb25FbmQoKX19LHg9cWUoKSxNPXQoeCksXz0hMTtyZXR1cm4geX19ZnVuY3Rpb24gVGUobil7cmV0dXJuIG4ubGVuZ3RoPjF9ZnVuY3Rpb24gcWUoKXt2YXIgbix0PVtdO3JldHVybntsaW5lU3RhcnQ6ZnVuY3Rpb24oKXt0LnB1c2gobj1bXSl9LHBvaW50OmZ1bmN0aW9uKHQsZSl7bi5wdXNoKFt0LGVdKX0sbGluZUVuZDp5LGJ1ZmZlcjpmdW5jdGlvbigpe3ZhciBlPXQ7cmV0dXJuIHQ9W10sbj1udWxsLGV9LHJlam9pbjpmdW5jdGlvbigpe3QubGVuZ3RoPjEmJnQucHVzaCh0LnBvcCgpLmNvbmNhdCh0LnNoaWZ0KCkpKX19fWZ1bmN0aW9uIFJlKG4sdCl7cmV0dXJuKChuPW4ueClbMF08MD9uWzFdLUNhLU5hOkNhLW5bMV0pLSgodD10LngpWzBdPDA/dFsxXS1DYS1OYTpDYS10WzFdKX1mdW5jdGlvbiBEZShuKXt2YXIgdCxlPTAvMCxyPTAvMCx1PTAvMDtyZXR1cm57bGluZVN0YXJ0OmZ1bmN0aW9uKCl7bi5saW5lU3RhcnQoKSx0PTF9LHBvaW50OmZ1bmN0aW9uKGksbyl7dmFyIGE9aT4wP0VhOi1FYSxjPWNhKGktZSk7Y2EoYy1FYSk8TmE/KG4ucG9pbnQoZSxyPShyK28pLzI+MD9DYTotQ2EpLG4ucG9pbnQodSxyKSxuLmxpbmVFbmQoKSxuLmxpbmVTdGFydCgpLG4ucG9pbnQoYSxyKSxuLnBvaW50KGksciksdD0wKTp1IT09YSYmYz49RWEmJihjYShlLXUpPE5hJiYoZS09dSpOYSksY2EoaS1hKTxOYSYmKGktPWEqTmEpLHI9UGUoZSxyLGksbyksbi5wb2ludCh1LHIpLG4ubGluZUVuZCgpLG4ubGluZVN0YXJ0KCksbi5wb2ludChhLHIpLHQ9MCksbi5wb2ludChlPWkscj1vKSx1PWF9LGxpbmVFbmQ6ZnVuY3Rpb24oKXtuLmxpbmVFbmQoKSxlPXI9MC8wfSxjbGVhbjpmdW5jdGlvbigpe3JldHVybiAyLXR9fX1mdW5jdGlvbiBQZShuLHQsZSxyKXt2YXIgdSxpLG89TWF0aC5zaW4obi1lKTtyZXR1cm4gY2Eobyk+TmE/TWF0aC5hdGFuKChNYXRoLnNpbih0KSooaT1NYXRoLmNvcyhyKSkqTWF0aC5zaW4oZSktTWF0aC5zaW4ocikqKHU9TWF0aC5jb3ModCkpKk1hdGguc2luKG4pKS8odSppKm8pKToodCtyKS8yfWZ1bmN0aW9uIFVlKG4sdCxlLHIpe3ZhciB1O2lmKG51bGw9PW4pdT1lKkNhLHIucG9pbnQoLUVhLHUpLHIucG9pbnQoMCx1KSxyLnBvaW50KEVhLHUpLHIucG9pbnQoRWEsMCksci5wb2ludChFYSwtdSksci5wb2ludCgwLC11KSxyLnBvaW50KC1FYSwtdSksci5wb2ludCgtRWEsMCksci5wb2ludCgtRWEsdSk7ZWxzZSBpZihjYShuWzBdLXRbMF0pPk5hKXt2YXIgaT1uWzBdPHRbMF0/RWE6LUVhO3U9ZSppLzIsci5wb2ludCgtaSx1KSxyLnBvaW50KDAsdSksci5wb2ludChpLHUpfWVsc2Ugci5wb2ludCh0WzBdLHRbMV0pfWZ1bmN0aW9uIGplKG4sdCl7dmFyIGU9blswXSxyPW5bMV0sdT1bTWF0aC5zaW4oZSksLU1hdGguY29zKGUpLDBdLGk9MCxvPTA7cGMucmVzZXQoKTtmb3IodmFyIGE9MCxjPXQubGVuZ3RoO2M+YTsrK2Epe3ZhciBsPXRbYV0scz1sLmxlbmd0aDtpZihzKWZvcih2YXIgZj1sWzBdLGg9ZlswXSxnPWZbMV0vMitFYS80LHA9TWF0aC5zaW4oZyksdj1NYXRoLmNvcyhnKSxkPTE7Oyl7ZD09PXMmJihkPTApLG49bFtkXTt2YXIgbT1uWzBdLHk9blsxXS8yK0VhLzQseD1NYXRoLnNpbih5KSxNPU1hdGguY29zKHkpLF89bS1oLGI9Xz49MD8xOi0xLHc9YipfLFM9dz5FYSxrPXAqeDtpZihwYy5hZGQoTWF0aC5hdGFuMihrKmIqTWF0aC5zaW4odyksdipNK2sqTWF0aC5jb3ModykpKSxpKz1TP18rYipBYTpfLFNeaD49ZV5tPj1lKXt2YXIgRT1kZShwZShmKSxwZShuKSk7eGUoRSk7dmFyIEE9ZGUodSxFKTt4ZShBKTt2YXIgQz0oU15fPj0wPy0xOjEpKm50KEFbMl0pOyhyPkN8fHI9PT1DJiYoRVswXXx8RVsxXSkpJiYobys9U15fPj0wPzE6LTEpfWlmKCFkKyspYnJlYWs7aD1tLHA9eCx2PU0sZj1ufX1yZXR1cm4oLU5hPml8fE5hPmkmJjA+cGMpXjEmb31mdW5jdGlvbiBGZShuKXtmdW5jdGlvbiB0KG4sdCl7cmV0dXJuIE1hdGguY29zKG4pKk1hdGguY29zKHQpPml9ZnVuY3Rpb24gZShuKXt2YXIgZSxpLGMsbCxzO3JldHVybntsaW5lU3RhcnQ6ZnVuY3Rpb24oKXtsPWM9ITEscz0xfSxwb2ludDpmdW5jdGlvbihmLGgpe3ZhciBnLHA9W2YsaF0sdj10KGYsaCksZD1vP3Y/MDp1KGYsaCk6dj91KGYrKDA+Zj9FYTotRWEpLGgpOjA7aWYoIWUmJihsPWM9dikmJm4ubGluZVN0YXJ0KCksdiE9PWMmJihnPXIoZSxwKSwoX2UoZSxnKXx8X2UocCxnKSkmJihwWzBdKz1OYSxwWzFdKz1OYSx2PXQocFswXSxwWzFdKSkpLHYhPT1jKXM9MCx2PyhuLmxpbmVTdGFydCgpLGc9cihwLGUpLG4ucG9pbnQoZ1swXSxnWzFdKSk6KGc9cihlLHApLG4ucG9pbnQoZ1swXSxnWzFdKSxuLmxpbmVFbmQoKSksZT1nO2Vsc2UgaWYoYSYmZSYmb152KXt2YXIgbTtkJml8fCEobT1yKHAsZSwhMCkpfHwocz0wLG8/KG4ubGluZVN0YXJ0KCksbi5wb2ludChtWzBdWzBdLG1bMF1bMV0pLG4ucG9pbnQobVsxXVswXSxtWzFdWzFdKSxuLmxpbmVFbmQoKSk6KG4ucG9pbnQobVsxXVswXSxtWzFdWzFdKSxuLmxpbmVFbmQoKSxuLmxpbmVTdGFydCgpLG4ucG9pbnQobVswXVswXSxtWzBdWzFdKSkpfSF2fHxlJiZfZShlLHApfHxuLnBvaW50KHBbMF0scFsxXSksZT1wLGM9dixpPWR9LGxpbmVFbmQ6ZnVuY3Rpb24oKXtjJiZuLmxpbmVFbmQoKSxlPW51bGx9LGNsZWFuOmZ1bmN0aW9uKCl7cmV0dXJuIHN8KGwmJmMpPDwxfX19ZnVuY3Rpb24gcihuLHQsZSl7dmFyIHI9cGUobiksdT1wZSh0KSxvPVsxLDAsMF0sYT1kZShyLHUpLGM9dmUoYSxhKSxsPWFbMF0scz1jLWwqbDtpZighcylyZXR1cm4hZSYmbjt2YXIgZj1pKmMvcyxoPS1pKmwvcyxnPWRlKG8sYSkscD15ZShvLGYpLHY9eWUoYSxoKTttZShwLHYpO3ZhciBkPWcsbT12ZShwLGQpLHk9dmUoZCxkKSx4PW0qbS15Kih2ZShwLHApLTEpO2lmKCEoMD54KSl7dmFyIE09TWF0aC5zcXJ0KHgpLF89eWUoZCwoLW0tTSkveSk7aWYobWUoXyxwKSxfPU1lKF8pLCFlKXJldHVybiBfO3ZhciBiLHc9blswXSxTPXRbMF0saz1uWzFdLEU9dFsxXTt3PlMmJihiPXcsdz1TLFM9Yik7dmFyIEE9Uy13LEM9Y2EoQS1FYSk8TmEsTj1DfHxOYT5BO2lmKCFDJiZrPkUmJihiPWssaz1FLEU9YiksTj9DP2srRT4wXl9bMV08KGNhKF9bMF0tdyk8TmE/azpFKTprPD1fWzFdJiZfWzFdPD1FOkE+RWFeKHc8PV9bMF0mJl9bMF08PVMpKXt2YXIgej15ZShkLCgtbStNKS95KTtyZXR1cm4gbWUoeixwKSxbXyxNZSh6KV19fX1mdW5jdGlvbiB1KHQsZSl7dmFyIHI9bz9uOkVhLW4sdT0wO3JldHVybi1yPnQ/dXw9MTp0PnImJih1fD0yKSwtcj5lP3V8PTQ6ZT5yJiYodXw9OCksdX12YXIgaT1NYXRoLmNvcyhuKSxvPWk+MCxhPWNhKGkpPk5hLGM9Z3Iobiw2KkxhKTtyZXR1cm4gTGUodCxlLGMsbz9bMCwtbl06Wy1FYSxuLUVhXSl9ZnVuY3Rpb24gSGUobix0LGUscil7cmV0dXJuIGZ1bmN0aW9uKHUpe3ZhciBpLG89dS5hLGE9dS5iLGM9by54LGw9by55LHM9YS54LGY9YS55LGg9MCxnPTEscD1zLWMsdj1mLWw7aWYoaT1uLWMscHx8IShpPjApKXtpZihpLz1wLDA+cCl7aWYoaD5pKXJldHVybjtnPmkmJihnPWkpfWVsc2UgaWYocD4wKXtpZihpPmcpcmV0dXJuO2k+aCYmKGg9aSl9aWYoaT1lLWMscHx8ISgwPmkpKXtpZihpLz1wLDA+cCl7aWYoaT5nKXJldHVybjtpPmgmJihoPWkpfWVsc2UgaWYocD4wKXtpZihoPmkpcmV0dXJuO2c+aSYmKGc9aSl9aWYoaT10LWwsdnx8IShpPjApKXtpZihpLz12LDA+dil7aWYoaD5pKXJldHVybjtnPmkmJihnPWkpfWVsc2UgaWYodj4wKXtpZihpPmcpcmV0dXJuO2k+aCYmKGg9aSl9aWYoaT1yLWwsdnx8ISgwPmkpKXtpZihpLz12LDA+dil7aWYoaT5nKXJldHVybjtpPmgmJihoPWkpfWVsc2UgaWYodj4wKXtpZihoPmkpcmV0dXJuO2c+aSYmKGc9aSl9cmV0dXJuIGg+MCYmKHUuYT17eDpjK2gqcCx5OmwraCp2fSksMT5nJiYodS5iPXt4OmMrZypwLHk6bCtnKnZ9KSx1fX19fX19ZnVuY3Rpb24gT2Uobix0LGUscil7ZnVuY3Rpb24gdShyLHUpe3JldHVybiBjYShyWzBdLW4pPE5hP3U+MD8wOjM6Y2EoclswXS1lKTxOYT91PjA/MjoxOmNhKHJbMV0tdCk8TmE/dT4wPzE6MDp1PjA/MzoyfWZ1bmN0aW9uIGkobix0KXtyZXR1cm4gbyhuLngsdC54KX1mdW5jdGlvbiBvKG4sdCl7dmFyIGU9dShuLDEpLHI9dSh0LDEpO3JldHVybiBlIT09cj9lLXI6MD09PWU/dFsxXS1uWzFdOjE9PT1lP25bMF0tdFswXToyPT09ZT9uWzFdLXRbMV06dFswXS1uWzBdfXJldHVybiBmdW5jdGlvbihhKXtmdW5jdGlvbiBjKG4pe2Zvcih2YXIgdD0wLGU9ZC5sZW5ndGgscj1uWzFdLHU9MDtlPnU7Kyt1KWZvcih2YXIgaSxvPTEsYT1kW3VdLGM9YS5sZW5ndGgsbD1hWzBdO2M+bzsrK28paT1hW29dLGxbMV08PXI/aVsxXT5yJiZLKGwsaSxuKT4wJiYrK3Q6aVsxXTw9ciYmSyhsLGksbik8MCYmLS10LGw9aTtyZXR1cm4gMCE9PXR9ZnVuY3Rpb24gbChpLGEsYyxsKXt2YXIgcz0wLGY9MDtpZihudWxsPT1pfHwocz11KGksYykpIT09KGY9dShhLGMpKXx8byhpLGEpPDBeYz4wKXtkbyBsLnBvaW50KDA9PT1zfHwzPT09cz9uOmUscz4xP3I6dCk7d2hpbGUoKHM9KHMrYys0KSU0KSE9PWYpfWVsc2UgbC5wb2ludChhWzBdLGFbMV0pfWZ1bmN0aW9uIHModSxpKXtyZXR1cm4gdT49biYmZT49dSYmaT49dCYmcj49aX1mdW5jdGlvbiBmKG4sdCl7cyhuLHQpJiZhLnBvaW50KG4sdCl9ZnVuY3Rpb24gaCgpe04ucG9pbnQ9cCxkJiZkLnB1c2gobT1bXSksUz0hMCx3PSExLF89Yj0wLzB9ZnVuY3Rpb24gZygpe3YmJihwKHkseCksTSYmdyYmQS5yZWpvaW4oKSx2LnB1c2goQS5idWZmZXIoKSkpLE4ucG9pbnQ9Zix3JiZhLmxpbmVFbmQoKX1mdW5jdGlvbiBwKG4sdCl7bj1NYXRoLm1heCgtTmMsTWF0aC5taW4oTmMsbikpLHQ9TWF0aC5tYXgoLU5jLE1hdGgubWluKE5jLHQpKTt2YXIgZT1zKG4sdCk7aWYoZCYmbS5wdXNoKFtuLHRdKSxTKXk9bix4PXQsTT1lLFM9ITEsZSYmKGEubGluZVN0YXJ0KCksYS5wb2ludChuLHQpKTtlbHNlIGlmKGUmJncpYS5wb2ludChuLHQpO2Vsc2V7dmFyIHI9e2E6e3g6Xyx5OmJ9LGI6e3g6bix5OnR9fTtDKHIpPyh3fHwoYS5saW5lU3RhcnQoKSxhLnBvaW50KHIuYS54LHIuYS55KSksYS5wb2ludChyLmIueCxyLmIueSksZXx8YS5saW5lRW5kKCksaz0hMSk6ZSYmKGEubGluZVN0YXJ0KCksYS5wb2ludChuLHQpLGs9ITEpfV89bixiPXQsdz1lfXZhciB2LGQsbSx5LHgsTSxfLGIsdyxTLGssRT1hLEE9cWUoKSxDPUhlKG4sdCxlLHIpLE49e3BvaW50OmYsbGluZVN0YXJ0OmgsbGluZUVuZDpnLHBvbHlnb25TdGFydDpmdW5jdGlvbigpe2E9QSx2PVtdLGQ9W10saz0hMH0scG9seWdvbkVuZDpmdW5jdGlvbigpe2E9RSx2PUJvLm1lcmdlKHYpO3ZhciB0PWMoW24scl0pLGU9ayYmdCx1PXYubGVuZ3RoOyhlfHx1KSYmKGEucG9seWdvblN0YXJ0KCksZSYmKGEubGluZVN0YXJ0KCksbChudWxsLG51bGwsMSxhKSxhLmxpbmVFbmQoKSksdSYmQ2UodixpLHQsbCxhKSxhLnBvbHlnb25FbmQoKSksdj1kPW09bnVsbH19O3JldHVybiBOfX1mdW5jdGlvbiBZZShuLHQpe2Z1bmN0aW9uIGUoZSxyKXtyZXR1cm4gZT1uKGUsciksdChlWzBdLGVbMV0pfXJldHVybiBuLmludmVydCYmdC5pbnZlcnQmJihlLmludmVydD1mdW5jdGlvbihlLHIpe3JldHVybiBlPXQuaW52ZXJ0KGUsciksZSYmbi5pbnZlcnQoZVswXSxlWzFdKX0pLGV9ZnVuY3Rpb24gSWUobil7dmFyIHQ9MCxlPUVhLzMscj1pcihuKSx1PXIodCxlKTtyZXR1cm4gdS5wYXJhbGxlbHM9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/cih0PW5bMF0qRWEvMTgwLGU9blsxXSpFYS8xODApOlsxODAqKHQvRWEpLDE4MCooZS9FYSldfSx1fWZ1bmN0aW9uIFplKG4sdCl7ZnVuY3Rpb24gZShuLHQpe3ZhciBlPU1hdGguc3FydChpLTIqdSpNYXRoLnNpbih0KSkvdTtyZXR1cm5bZSpNYXRoLnNpbihuKj11KSxvLWUqTWF0aC5jb3MobildfXZhciByPU1hdGguc2luKG4pLHU9KHIrTWF0aC5zaW4odCkpLzIsaT0xK3IqKDIqdS1yKSxvPU1hdGguc3FydChpKS91O3JldHVybiBlLmludmVydD1mdW5jdGlvbihuLHQpe3ZhciBlPW8tdDtyZXR1cm5bTWF0aC5hdGFuMihuLGUpL3UsbnQoKGktKG4qbitlKmUpKnUqdSkvKDIqdSkpXX0sZX1mdW5jdGlvbiBWZSgpe2Z1bmN0aW9uIG4obix0KXtMYys9dSpuLXIqdCxyPW4sdT10fXZhciB0LGUscix1O1BjLnBvaW50PWZ1bmN0aW9uKGksbyl7UGMucG9pbnQ9bix0PXI9aSxlPXU9b30sUGMubGluZUVuZD1mdW5jdGlvbigpe24odCxlKX19ZnVuY3Rpb24gWGUobix0KXtUYz5uJiYoVGM9biksbj5SYyYmKFJjPW4pLHFjPnQmJihxYz10KSx0PkRjJiYoRGM9dCl9ZnVuY3Rpb24gJGUoKXtmdW5jdGlvbiBuKG4sdCl7by5wdXNoKCJNIixuLCIsIix0LGkpfWZ1bmN0aW9uIHQobix0KXtvLnB1c2goIk0iLG4sIiwiLHQpLGEucG9pbnQ9ZX1mdW5jdGlvbiBlKG4sdCl7by5wdXNoKCJMIixuLCIsIix0KX1mdW5jdGlvbiByKCl7YS5wb2ludD1ufWZ1bmN0aW9uIHUoKXtvLnB1c2goIloiKX12YXIgaT1CZSg0LjUpLG89W10sYT17cG9pbnQ6bixsaW5lU3RhcnQ6ZnVuY3Rpb24oKXthLnBvaW50PXR9LGxpbmVFbmQ6cixwb2x5Z29uU3RhcnQ6ZnVuY3Rpb24oKXthLmxpbmVFbmQ9dX0scG9seWdvbkVuZDpmdW5jdGlvbigpe2EubGluZUVuZD1yLGEucG9pbnQ9bn0scG9pbnRSYWRpdXM6ZnVuY3Rpb24obil7cmV0dXJuIGk9QmUobiksYX0scmVzdWx0OmZ1bmN0aW9uKCl7aWYoby5sZW5ndGgpe3ZhciBuPW8uam9pbigiIik7cmV0dXJuIG89W10sbn19fTtyZXR1cm4gYX1mdW5jdGlvbiBCZShuKXtyZXR1cm4ibTAsIituKyJhIituKyIsIituKyIgMCAxLDEgMCwiKy0yKm4rImEiK24rIiwiK24rIiAwIDEsMSAwLCIrMipuKyJ6In1mdW5jdGlvbiBXZShuLHQpe3ljKz1uLHhjKz10LCsrTWN9ZnVuY3Rpb24gSmUoKXtmdW5jdGlvbiBuKG4scil7dmFyIHU9bi10LGk9ci1lLG89TWF0aC5zcXJ0KHUqdStpKmkpO19jKz1vKih0K24pLzIsYmMrPW8qKGUrcikvMix3Yys9byxXZSh0PW4sZT1yKX12YXIgdCxlO2pjLnBvaW50PWZ1bmN0aW9uKHIsdSl7amMucG9pbnQ9bixXZSh0PXIsZT11KX19ZnVuY3Rpb24gR2UoKXtqYy5wb2ludD1XZX1mdW5jdGlvbiBLZSgpe2Z1bmN0aW9uIG4obix0KXt2YXIgZT1uLXIsaT10LXUsbz1NYXRoLnNxcnQoZSplK2kqaSk7X2MrPW8qKHIrbikvMixiYys9byoodSt0KS8yLHdjKz1vLG89dSpuLXIqdCxTYys9byoocituKSxrYys9byoodSt0KSxFYys9MypvLFdlKHI9bix1PXQpfXZhciB0LGUscix1O2pjLnBvaW50PWZ1bmN0aW9uKGksbyl7amMucG9pbnQ9bixXZSh0PXI9aSxlPXU9byl9LGpjLmxpbmVFbmQ9ZnVuY3Rpb24oKXtuKHQsZSl9fWZ1bmN0aW9uIFFlKG4pe2Z1bmN0aW9uIHQodCxlKXtuLm1vdmVUbyh0LGUpLG4uYXJjKHQsZSxvLDAsQWEpfWZ1bmN0aW9uIGUodCxlKXtuLm1vdmVUbyh0LGUpLGEucG9pbnQ9cn1mdW5jdGlvbiByKHQsZSl7bi5saW5lVG8odCxlKX1mdW5jdGlvbiB1KCl7YS5wb2ludD10fWZ1bmN0aW9uIGkoKXtuLmNsb3NlUGF0aCgpfXZhciBvPTQuNSxhPXtwb2ludDp0LGxpbmVTdGFydDpmdW5jdGlvbigpe2EucG9pbnQ9ZX0sbGluZUVuZDp1LHBvbHlnb25TdGFydDpmdW5jdGlvbigpe2EubGluZUVuZD1pfSxwb2x5Z29uRW5kOmZ1bmN0aW9uKCl7YS5saW5lRW5kPXUsYS5wb2ludD10fSxwb2ludFJhZGl1czpmdW5jdGlvbihuKXtyZXR1cm4gbz1uLGF9LHJlc3VsdDp5fTtyZXR1cm4gYX1mdW5jdGlvbiBucihuKXtmdW5jdGlvbiB0KG4pe3JldHVybihhP3I6ZSkobil9ZnVuY3Rpb24gZSh0KXtyZXR1cm4gcnIodCxmdW5jdGlvbihlLHIpe2U9bihlLHIpLHQucG9pbnQoZVswXSxlWzFdKX0pfWZ1bmN0aW9uIHIodCl7ZnVuY3Rpb24gZShlLHIpe2U9bihlLHIpLHQucG9pbnQoZVswXSxlWzFdKX1mdW5jdGlvbiByKCl7eD0wLzAsUy5wb2ludD1pLHQubGluZVN0YXJ0KCl9ZnVuY3Rpb24gaShlLHIpe3ZhciBpPXBlKFtlLHJdKSxvPW4oZSxyKTt1KHgsTSx5LF8sYix3LHg9b1swXSxNPW9bMV0seT1lLF89aVswXSxiPWlbMV0sdz1pWzJdLGEsdCksdC5wb2ludCh4LE0pfWZ1bmN0aW9uIG8oKXtTLnBvaW50PWUsdC5saW5lRW5kKCl9ZnVuY3Rpb24gYygpe3IoKSxTLnBvaW50PWwsUy5saW5lRW5kPXN9ZnVuY3Rpb24gbChuLHQpe2koZj1uLGg9dCksZz14LHA9TSx2PV8sZD1iLG09dyxTLnBvaW50PWl9ZnVuY3Rpb24gcygpe3UoeCxNLHksXyxiLHcsZyxwLGYsdixkLG0sYSx0KSxTLmxpbmVFbmQ9byxvKCl9dmFyIGYsaCxnLHAsdixkLG0seSx4LE0sXyxiLHcsUz17cG9pbnQ6ZSxsaW5lU3RhcnQ6cixsaW5lRW5kOm8scG9seWdvblN0YXJ0OmZ1bmN0aW9uKCl7dC5wb2x5Z29uU3RhcnQoKSxTLmxpbmVTdGFydD1jfSxwb2x5Z29uRW5kOmZ1bmN0aW9uKCl7dC5wb2x5Z29uRW5kKCksUy5saW5lU3RhcnQ9cn19O3JldHVybiBTfWZ1bmN0aW9uIHUodCxlLHIsYSxjLGwscyxmLGgsZyxwLHYsZCxtKXt2YXIgeT1zLXQseD1mLWUsTT15KnkreCp4O2lmKE0+NCppJiZkLS0pe3ZhciBfPWErZyxiPWMrcCx3PWwrdixTPU1hdGguc3FydChfKl8rYipiK3cqdyksaz1NYXRoLmFzaW4ody89UyksRT1jYShjYSh3KS0xKTxOYXx8Y2Eoci1oKTxOYT8ocitoKS8yOk1hdGguYXRhbjIoYixfKSxBPW4oRSxrKSxDPUFbMF0sTj1BWzFdLHo9Qy10LEw9Ti1lLFQ9eCp6LXkqTDsKKFQqVC9NPml8fGNhKCh5KnoreCpMKS9NLS41KT4uM3x8bz5hKmcrYypwK2wqdikmJih1KHQsZSxyLGEsYyxsLEMsTixFLF8vPVMsYi89Uyx3LGQsbSksbS5wb2ludChDLE4pLHUoQyxOLEUsXyxiLHcscyxmLGgsZyxwLHYsZCxtKSl9fXZhciBpPS41LG89TWF0aC5jb3MoMzAqTGEpLGE9MTY7cmV0dXJuIHQucHJlY2lzaW9uPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhhPShpPW4qbik+MCYmMTYsdCk6TWF0aC5zcXJ0KGkpfSx0fWZ1bmN0aW9uIHRyKG4pe3ZhciB0PW5yKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4oW3QqVGEsZSpUYV0pfSk7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBvcih0KG4pKX19ZnVuY3Rpb24gZXIobil7dGhpcy5zdHJlYW09bn1mdW5jdGlvbiBycihuLHQpe3JldHVybntwb2ludDp0LHNwaGVyZTpmdW5jdGlvbigpe24uc3BoZXJlKCl9LGxpbmVTdGFydDpmdW5jdGlvbigpe24ubGluZVN0YXJ0KCl9LGxpbmVFbmQ6ZnVuY3Rpb24oKXtuLmxpbmVFbmQoKX0scG9seWdvblN0YXJ0OmZ1bmN0aW9uKCl7bi5wb2x5Z29uU3RhcnQoKX0scG9seWdvbkVuZDpmdW5jdGlvbigpe24ucG9seWdvbkVuZCgpfX19ZnVuY3Rpb24gdXIobil7cmV0dXJuIGlyKGZ1bmN0aW9uKCl7cmV0dXJuIG59KSgpfWZ1bmN0aW9uIGlyKG4pe2Z1bmN0aW9uIHQobil7cmV0dXJuIG49YShuWzBdKkxhLG5bMV0qTGEpLFtuWzBdKmgrYyxsLW5bMV0qaF19ZnVuY3Rpb24gZShuKXtyZXR1cm4gbj1hLmludmVydCgoblswXS1jKS9oLChsLW5bMV0pL2gpLG4mJltuWzBdKlRhLG5bMV0qVGFdfWZ1bmN0aW9uIHIoKXthPVllKG89bHIobSx5LHgpLGkpO3ZhciBuPWkodixkKTtyZXR1cm4gYz1nLW5bMF0qaCxsPXArblsxXSpoLHUoKX1mdW5jdGlvbiB1KCl7cmV0dXJuIHMmJihzLnZhbGlkPSExLHM9bnVsbCksdH12YXIgaSxvLGEsYyxsLHMsZj1ucihmdW5jdGlvbihuLHQpe3JldHVybiBuPWkobix0KSxbblswXSpoK2MsbC1uWzFdKmhdfSksaD0xNTAsZz00ODAscD0yNTAsdj0wLGQ9MCxtPTAseT0wLHg9MCxNPUNjLF89RXQsYj1udWxsLHc9bnVsbDtyZXR1cm4gdC5zdHJlYW09ZnVuY3Rpb24obil7cmV0dXJuIHMmJihzLnZhbGlkPSExKSxzPW9yKE0obyxmKF8obikpKSkscy52YWxpZD0hMCxzfSx0LmNsaXBBbmdsZT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oTT1udWxsPT1uPyhiPW4sQ2MpOkZlKChiPStuKSpMYSksdSgpKTpifSx0LmNsaXBFeHRlbnQ9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHc9bixfPW4/T2UoblswXVswXSxuWzBdWzFdLG5bMV1bMF0sblsxXVsxXSk6RXQsdSgpKTp3fSx0LnNjYWxlPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhoPStuLHIoKSk6aH0sdC50cmFuc2xhdGU9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGc9K25bMF0scD0rblsxXSxyKCkpOltnLHBdfSx0LmNlbnRlcj1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odj1uWzBdJTM2MCpMYSxkPW5bMV0lMzYwKkxhLHIoKSk6W3YqVGEsZCpUYV19LHQucm90YXRlPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhtPW5bMF0lMzYwKkxhLHk9blsxXSUzNjAqTGEseD1uLmxlbmd0aD4yP25bMl0lMzYwKkxhOjAscigpKTpbbSpUYSx5KlRhLHgqVGFdfSxCby5yZWJpbmQodCxmLCJwcmVjaXNpb24iKSxmdW5jdGlvbigpe3JldHVybiBpPW4uYXBwbHkodGhpcyxhcmd1bWVudHMpLHQuaW52ZXJ0PWkuaW52ZXJ0JiZlLHIoKX19ZnVuY3Rpb24gb3Iobil7cmV0dXJuIHJyKG4sZnVuY3Rpb24odCxlKXtuLnBvaW50KHQqTGEsZSpMYSl9KX1mdW5jdGlvbiBhcihuLHQpe3JldHVybltuLHRdfWZ1bmN0aW9uIGNyKG4sdCl7cmV0dXJuW24+RWE/bi1BYTotRWE+bj9uK0FhOm4sdF19ZnVuY3Rpb24gbHIobix0LGUpe3JldHVybiBuP3R8fGU/WWUoZnIobiksaHIodCxlKSk6ZnIobik6dHx8ZT9ocih0LGUpOmNyfWZ1bmN0aW9uIHNyKG4pe3JldHVybiBmdW5jdGlvbih0LGUpe3JldHVybiB0Kz1uLFt0PkVhP3QtQWE6LUVhPnQ/dCtBYTp0LGVdfX1mdW5jdGlvbiBmcihuKXt2YXIgdD1zcihuKTtyZXR1cm4gdC5pbnZlcnQ9c3IoLW4pLHR9ZnVuY3Rpb24gaHIobix0KXtmdW5jdGlvbiBlKG4sdCl7dmFyIGU9TWF0aC5jb3ModCksYT1NYXRoLmNvcyhuKSplLGM9TWF0aC5zaW4obikqZSxsPU1hdGguc2luKHQpLHM9bCpyK2EqdTtyZXR1cm5bTWF0aC5hdGFuMihjKmktcypvLGEqci1sKnUpLG50KHMqaStjKm8pXX12YXIgcj1NYXRoLmNvcyhuKSx1PU1hdGguc2luKG4pLGk9TWF0aC5jb3ModCksbz1NYXRoLnNpbih0KTtyZXR1cm4gZS5pbnZlcnQ9ZnVuY3Rpb24obix0KXt2YXIgZT1NYXRoLmNvcyh0KSxhPU1hdGguY29zKG4pKmUsYz1NYXRoLnNpbihuKSplLGw9TWF0aC5zaW4odCkscz1sKmktYypvO3JldHVybltNYXRoLmF0YW4yKGMqaStsKm8sYSpyK3MqdSksbnQocypyLWEqdSldfSxlfWZ1bmN0aW9uIGdyKG4sdCl7dmFyIGU9TWF0aC5jb3Mobikscj1NYXRoLnNpbihuKTtyZXR1cm4gZnVuY3Rpb24odSxpLG8sYSl7dmFyIGM9byp0O251bGwhPXU/KHU9cHIoZSx1KSxpPXByKGUsaSksKG8+MD9pPnU6dT5pKSYmKHUrPW8qQWEpKToodT1uK28qQWEsaT1uLS41KmMpO2Zvcih2YXIgbCxzPXU7bz4wP3M+aTppPnM7cy09YylhLnBvaW50KChsPU1lKFtlLC1yKk1hdGguY29zKHMpLC1yKk1hdGguc2luKHMpXSkpWzBdLGxbMV0pfX1mdW5jdGlvbiBwcihuLHQpe3ZhciBlPXBlKHQpO2VbMF0tPW4seGUoZSk7dmFyIHI9USgtZVsxXSk7cmV0dXJuKCgtZVsyXTwwPy1yOnIpKzIqTWF0aC5QSS1OYSklKDIqTWF0aC5QSSl9ZnVuY3Rpb24gdnIobix0LGUpe3ZhciByPUJvLnJhbmdlKG4sdC1OYSxlKS5jb25jYXQodCk7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiByLm1hcChmdW5jdGlvbih0KXtyZXR1cm5bbix0XX0pfX1mdW5jdGlvbiBkcihuLHQsZSl7dmFyIHI9Qm8ucmFuZ2Uobix0LU5hLGUpLmNvbmNhdCh0KTtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHIubWFwKGZ1bmN0aW9uKHQpe3JldHVyblt0LG5dfSl9fWZ1bmN0aW9uIG1yKG4pe3JldHVybiBuLnNvdXJjZX1mdW5jdGlvbiB5cihuKXtyZXR1cm4gbi50YXJnZXR9ZnVuY3Rpb24geHIobix0LGUscil7dmFyIHU9TWF0aC5jb3ModCksaT1NYXRoLnNpbih0KSxvPU1hdGguY29zKHIpLGE9TWF0aC5zaW4ociksYz11Kk1hdGguY29zKG4pLGw9dSpNYXRoLnNpbihuKSxzPW8qTWF0aC5jb3MoZSksZj1vKk1hdGguc2luKGUpLGg9MipNYXRoLmFzaW4oTWF0aC5zcXJ0KHV0KHItdCkrdSpvKnV0KGUtbikpKSxnPTEvTWF0aC5zaW4oaCkscD1oP2Z1bmN0aW9uKG4pe3ZhciB0PU1hdGguc2luKG4qPWgpKmcsZT1NYXRoLnNpbihoLW4pKmcscj1lKmMrdCpzLHU9ZSpsK3QqZixvPWUqaSt0KmE7cmV0dXJuW01hdGguYXRhbjIodSxyKSpUYSxNYXRoLmF0YW4yKG8sTWF0aC5zcXJ0KHIqcit1KnUpKSpUYV19OmZ1bmN0aW9uKCl7cmV0dXJuW24qVGEsdCpUYV19O3JldHVybiBwLmRpc3RhbmNlPWgscH1mdW5jdGlvbiBNcigpe2Z1bmN0aW9uIG4obix1KXt2YXIgaT1NYXRoLnNpbih1Kj1MYSksbz1NYXRoLmNvcyh1KSxhPWNhKChuKj1MYSktdCksYz1NYXRoLmNvcyhhKTtGYys9TWF0aC5hdGFuMihNYXRoLnNxcnQoKGE9bypNYXRoLnNpbihhKSkqYSsoYT1yKmktZSpvKmMpKmEpLGUqaStyKm8qYyksdD1uLGU9aSxyPW99dmFyIHQsZSxyO0hjLnBvaW50PWZ1bmN0aW9uKHUsaSl7dD11KkxhLGU9TWF0aC5zaW4oaSo9TGEpLHI9TWF0aC5jb3MoaSksSGMucG9pbnQ9bn0sSGMubGluZUVuZD1mdW5jdGlvbigpe0hjLnBvaW50PUhjLmxpbmVFbmQ9eX19ZnVuY3Rpb24gX3Iobix0KXtmdW5jdGlvbiBlKHQsZSl7dmFyIHI9TWF0aC5jb3ModCksdT1NYXRoLmNvcyhlKSxpPW4ocip1KTtyZXR1cm5baSp1Kk1hdGguc2luKHQpLGkqTWF0aC5zaW4oZSldfXJldHVybiBlLmludmVydD1mdW5jdGlvbihuLGUpe3ZhciByPU1hdGguc3FydChuKm4rZSplKSx1PXQociksaT1NYXRoLnNpbih1KSxvPU1hdGguY29zKHUpO3JldHVybltNYXRoLmF0YW4yKG4qaSxyKm8pLE1hdGguYXNpbihyJiZlKmkvcildfSxlfWZ1bmN0aW9uIGJyKG4sdCl7ZnVuY3Rpb24gZShuLHQpe28+MD8tQ2ErTmE+dCYmKHQ9LUNhK05hKTp0PkNhLU5hJiYodD1DYS1OYSk7dmFyIGU9by9NYXRoLnBvdyh1KHQpLGkpO3JldHVybltlKk1hdGguc2luKGkqbiksby1lKk1hdGguY29zKGkqbildfXZhciByPU1hdGguY29zKG4pLHU9ZnVuY3Rpb24obil7cmV0dXJuIE1hdGgudGFuKEVhLzQrbi8yKX0saT1uPT09dD9NYXRoLnNpbihuKTpNYXRoLmxvZyhyL01hdGguY29zKHQpKS9NYXRoLmxvZyh1KHQpL3UobikpLG89cipNYXRoLnBvdyh1KG4pLGkpL2k7cmV0dXJuIGk/KGUuaW52ZXJ0PWZ1bmN0aW9uKG4sdCl7dmFyIGU9by10LHI9RyhpKSpNYXRoLnNxcnQobipuK2UqZSk7cmV0dXJuW01hdGguYXRhbjIobixlKS9pLDIqTWF0aC5hdGFuKE1hdGgucG93KG8vciwxL2kpKS1DYV19LGUpOlNyfWZ1bmN0aW9uIHdyKG4sdCl7ZnVuY3Rpb24gZShuLHQpe3ZhciBlPWktdDtyZXR1cm5bZSpNYXRoLnNpbih1Km4pLGktZSpNYXRoLmNvcyh1Km4pXX12YXIgcj1NYXRoLmNvcyhuKSx1PW49PT10P01hdGguc2luKG4pOihyLU1hdGguY29zKHQpKS8odC1uKSxpPXIvdStuO3JldHVybiBjYSh1KTxOYT9hcjooZS5pbnZlcnQ9ZnVuY3Rpb24obix0KXt2YXIgZT1pLXQ7cmV0dXJuW01hdGguYXRhbjIobixlKS91LGktRyh1KSpNYXRoLnNxcnQobipuK2UqZSldfSxlKX1mdW5jdGlvbiBTcihuLHQpe3JldHVybltuLE1hdGgubG9nKE1hdGgudGFuKEVhLzQrdC8yKSldfWZ1bmN0aW9uIGtyKG4pe3ZhciB0LGU9dXIobikscj1lLnNjYWxlLHU9ZS50cmFuc2xhdGUsaT1lLmNsaXBFeHRlbnQ7cmV0dXJuIGUuc2NhbGU9ZnVuY3Rpb24oKXt2YXIgbj1yLmFwcGx5KGUsYXJndW1lbnRzKTtyZXR1cm4gbj09PWU/dD9lLmNsaXBFeHRlbnQobnVsbCk6ZTpufSxlLnRyYW5zbGF0ZT1mdW5jdGlvbigpe3ZhciBuPXUuYXBwbHkoZSxhcmd1bWVudHMpO3JldHVybiBuPT09ZT90P2UuY2xpcEV4dGVudChudWxsKTplOm59LGUuY2xpcEV4dGVudD1mdW5jdGlvbihuKXt2YXIgbz1pLmFwcGx5KGUsYXJndW1lbnRzKTtpZihvPT09ZSl7aWYodD1udWxsPT1uKXt2YXIgYT1FYSpyKCksYz11KCk7aShbW2NbMF0tYSxjWzFdLWFdLFtjWzBdK2EsY1sxXSthXV0pfX1lbHNlIHQmJihvPW51bGwpO3JldHVybiBvfSxlLmNsaXBFeHRlbnQobnVsbCl9ZnVuY3Rpb24gRXIobix0KXtyZXR1cm5bTWF0aC5sb2coTWF0aC50YW4oRWEvNCt0LzIpKSwtbl19ZnVuY3Rpb24gQXIobil7cmV0dXJuIG5bMF19ZnVuY3Rpb24gQ3Iobil7cmV0dXJuIG5bMV19ZnVuY3Rpb24gTnIobil7Zm9yKHZhciB0PW4ubGVuZ3RoLGU9WzAsMV0scj0yLHU9Mjt0PnU7dSsrKXtmb3IoO3I+MSYmSyhuW2Vbci0yXV0sbltlW3ItMV1dLG5bdV0pPD0wOyktLXI7ZVtyKytdPXV9cmV0dXJuIGUuc2xpY2UoMCxyKX1mdW5jdGlvbiB6cihuLHQpe3JldHVybiBuWzBdLXRbMF18fG5bMV0tdFsxXX1mdW5jdGlvbiBMcihuLHQsZSl7cmV0dXJuKGVbMF0tdFswXSkqKG5bMV0tdFsxXSk8KGVbMV0tdFsxXSkqKG5bMF0tdFswXSl9ZnVuY3Rpb24gVHIobix0LGUscil7dmFyIHU9blswXSxpPWVbMF0sbz10WzBdLXUsYT1yWzBdLWksYz1uWzFdLGw9ZVsxXSxzPXRbMV0tYyxmPXJbMV0tbCxoPShhKihjLWwpLWYqKHUtaSkpLyhmKm8tYSpzKTtyZXR1cm5bdStoKm8sYytoKnNdfWZ1bmN0aW9uIHFyKG4pe3ZhciB0PW5bMF0sZT1uW24ubGVuZ3RoLTFdO3JldHVybiEodFswXS1lWzBdfHx0WzFdLWVbMV0pfWZ1bmN0aW9uIFJyKCl7dHUodGhpcyksdGhpcy5lZGdlPXRoaXMuc2l0ZT10aGlzLmNpcmNsZT1udWxsfWZ1bmN0aW9uIERyKG4pe3ZhciB0PUtjLnBvcCgpfHxuZXcgUnI7cmV0dXJuIHQuc2l0ZT1uLHR9ZnVuY3Rpb24gUHIobil7WHIobiksV2MucmVtb3ZlKG4pLEtjLnB1c2gobiksdHUobil9ZnVuY3Rpb24gVXIobil7dmFyIHQ9bi5jaXJjbGUsZT10Lngscj10LmN5LHU9e3g6ZSx5OnJ9LGk9bi5QLG89bi5OLGE9W25dO1ByKG4pO2Zvcih2YXIgYz1pO2MuY2lyY2xlJiZjYShlLWMuY2lyY2xlLngpPE5hJiZjYShyLWMuY2lyY2xlLmN5KTxOYTspaT1jLlAsYS51bnNoaWZ0KGMpLFByKGMpLGM9aTthLnVuc2hpZnQoYyksWHIoYyk7Zm9yKHZhciBsPW87bC5jaXJjbGUmJmNhKGUtbC5jaXJjbGUueCk8TmEmJmNhKHItbC5jaXJjbGUuY3kpPE5hOylvPWwuTixhLnB1c2gobCksUHIobCksbD1vO2EucHVzaChsKSxYcihsKTt2YXIgcyxmPWEubGVuZ3RoO2ZvcihzPTE7Zj5zOysrcylsPWFbc10sYz1hW3MtMV0sS3IobC5lZGdlLGMuc2l0ZSxsLnNpdGUsdSk7Yz1hWzBdLGw9YVtmLTFdLGwuZWRnZT1KcihjLnNpdGUsbC5zaXRlLG51bGwsdSksVnIoYyksVnIobCl9ZnVuY3Rpb24ganIobil7Zm9yKHZhciB0LGUscix1LGk9bi54LG89bi55LGE9V2MuXzthOylpZihyPUZyKGEsbyktaSxyPk5hKWE9YS5MO2Vsc2V7aWYodT1pLUhyKGEsbyksISh1Pk5hKSl7cj4tTmE/KHQ9YS5QLGU9YSk6dT4tTmE/KHQ9YSxlPWEuTik6dD1lPWE7YnJlYWt9aWYoIWEuUil7dD1hO2JyZWFrfWE9YS5SfXZhciBjPURyKG4pO2lmKFdjLmluc2VydCh0LGMpLHR8fGUpe2lmKHQ9PT1lKXJldHVybiBYcih0KSxlPURyKHQuc2l0ZSksV2MuaW5zZXJ0KGMsZSksYy5lZGdlPWUuZWRnZT1Kcih0LnNpdGUsYy5zaXRlKSxWcih0KSxWcihlKSx2b2lkIDA7aWYoIWUpcmV0dXJuIGMuZWRnZT1Kcih0LnNpdGUsYy5zaXRlKSx2b2lkIDA7WHIodCksWHIoZSk7dmFyIGw9dC5zaXRlLHM9bC54LGY9bC55LGg9bi54LXMsZz1uLnktZixwPWUuc2l0ZSx2PXAueC1zLGQ9cC55LWYsbT0yKihoKmQtZyp2KSx5PWgqaCtnKmcseD12KnYrZCpkLE09e3g6KGQqeS1nKngpL20rcyx5OihoKngtdip5KS9tK2Z9O0tyKGUuZWRnZSxsLHAsTSksYy5lZGdlPUpyKGwsbixudWxsLE0pLGUuZWRnZT1KcihuLHAsbnVsbCxNKSxWcih0KSxWcihlKX19ZnVuY3Rpb24gRnIobix0KXt2YXIgZT1uLnNpdGUscj1lLngsdT1lLnksaT11LXQ7aWYoIWkpcmV0dXJuIHI7dmFyIG89bi5QO2lmKCFvKXJldHVybi0xLzA7ZT1vLnNpdGU7dmFyIGE9ZS54LGM9ZS55LGw9Yy10O2lmKCFsKXJldHVybiBhO3ZhciBzPWEtcixmPTEvaS0xL2wsaD1zL2w7cmV0dXJuIGY/KC1oK01hdGguc3FydChoKmgtMipmKihzKnMvKC0yKmwpLWMrbC8yK3UtaS8yKSkpL2YrcjoocithKS8yfWZ1bmN0aW9uIEhyKG4sdCl7dmFyIGU9bi5OO2lmKGUpcmV0dXJuIEZyKGUsdCk7dmFyIHI9bi5zaXRlO3JldHVybiByLnk9PT10P3IueDoxLzB9ZnVuY3Rpb24gT3Iobil7dGhpcy5zaXRlPW4sdGhpcy5lZGdlcz1bXX1mdW5jdGlvbiBZcihuKXtmb3IodmFyIHQsZSxyLHUsaSxvLGEsYyxsLHMsZj1uWzBdWzBdLGg9blsxXVswXSxnPW5bMF1bMV0scD1uWzFdWzFdLHY9QmMsZD12Lmxlbmd0aDtkLS07KWlmKGk9dltkXSxpJiZpLnByZXBhcmUoKSlmb3IoYT1pLmVkZ2VzLGM9YS5sZW5ndGgsbz0wO2M+bzspcz1hW29dLmVuZCgpLHI9cy54LHU9cy55LGw9YVsrK28lY10uc3RhcnQoKSx0PWwueCxlPWwueSwoY2Eoci10KT5OYXx8Y2EodS1lKT5OYSkmJihhLnNwbGljZShvLDAsbmV3IFFyKEdyKGkuc2l0ZSxzLGNhKHItZik8TmEmJnAtdT5OYT97eDpmLHk6Y2EodC1mKTxOYT9lOnB9OmNhKHUtcCk8TmEmJmgtcj5OYT97eDpjYShlLXApPE5hP3Q6aCx5OnB9OmNhKHItaCk8TmEmJnUtZz5OYT97eDpoLHk6Y2EodC1oKTxOYT9lOmd9OmNhKHUtZyk8TmEmJnItZj5OYT97eDpjYShlLWcpPE5hP3Q6Zix5Omd9Om51bGwpLGkuc2l0ZSxudWxsKSksKytjKX1mdW5jdGlvbiBJcihuLHQpe3JldHVybiB0LmFuZ2xlLW4uYW5nbGV9ZnVuY3Rpb24gWnIoKXt0dSh0aGlzKSx0aGlzLng9dGhpcy55PXRoaXMuYXJjPXRoaXMuc2l0ZT10aGlzLmN5PW51bGx9ZnVuY3Rpb24gVnIobil7dmFyIHQ9bi5QLGU9bi5OO2lmKHQmJmUpe3ZhciByPXQuc2l0ZSx1PW4uc2l0ZSxpPWUuc2l0ZTtpZihyIT09aSl7dmFyIG89dS54LGE9dS55LGM9ci54LW8sbD1yLnktYSxzPWkueC1vLGY9aS55LWEsaD0yKihjKmYtbCpzKTtpZighKGg+PS16YSkpe3ZhciBnPWMqYytsKmwscD1zKnMrZipmLHY9KGYqZy1sKnApL2gsZD0oYypwLXMqZykvaCxmPWQrYSxtPVFjLnBvcCgpfHxuZXcgWnI7bS5hcmM9bixtLnNpdGU9dSxtLng9ditvLG0ueT1mK01hdGguc3FydCh2KnYrZCpkKSxtLmN5PWYsbi5jaXJjbGU9bTtmb3IodmFyIHk9bnVsbCx4PUdjLl87eDspaWYobS55PHgueXx8bS55PT09eC55JiZtLng8PXgueCl7aWYoIXguTCl7eT14LlA7YnJlYWt9eD14Lkx9ZWxzZXtpZigheC5SKXt5PXg7YnJlYWt9eD14LlJ9R2MuaW5zZXJ0KHksbSkseXx8KEpjPW0pfX19fWZ1bmN0aW9uIFhyKG4pe3ZhciB0PW4uY2lyY2xlO3QmJih0LlB8fChKYz10Lk4pLEdjLnJlbW92ZSh0KSxRYy5wdXNoKHQpLHR1KHQpLG4uY2lyY2xlPW51bGwpfWZ1bmN0aW9uICRyKG4pe2Zvcih2YXIgdCxlPSRjLHI9SGUoblswXVswXSxuWzBdWzFdLG5bMV1bMF0sblsxXVsxXSksdT1lLmxlbmd0aDt1LS07KXQ9ZVt1XSwoIUJyKHQsbil8fCFyKHQpfHxjYSh0LmEueC10LmIueCk8TmEmJmNhKHQuYS55LXQuYi55KTxOYSkmJih0LmE9dC5iPW51bGwsZS5zcGxpY2UodSwxKSl9ZnVuY3Rpb24gQnIobix0KXt2YXIgZT1uLmI7aWYoZSlyZXR1cm4hMDt2YXIgcix1LGk9bi5hLG89dFswXVswXSxhPXRbMV1bMF0sYz10WzBdWzFdLGw9dFsxXVsxXSxzPW4ubCxmPW4ucixoPXMueCxnPXMueSxwPWYueCx2PWYueSxkPShoK3ApLzIsbT0oZyt2KS8yO2lmKHY9PT1nKXtpZihvPmR8fGQ+PWEpcmV0dXJuO2lmKGg+cCl7aWYoaSl7aWYoaS55Pj1sKXJldHVybn1lbHNlIGk9e3g6ZCx5OmN9O2U9e3g6ZCx5Omx9fWVsc2V7aWYoaSl7aWYoaS55PGMpcmV0dXJufWVsc2UgaT17eDpkLHk6bH07ZT17eDpkLHk6Y319fWVsc2UgaWYocj0oaC1wKS8odi1nKSx1PW0tcipkLC0xPnJ8fHI+MSlpZihoPnApe2lmKGkpe2lmKGkueT49bClyZXR1cm59ZWxzZSBpPXt4OihjLXUpL3IseTpjfTtlPXt4OihsLXUpL3IseTpsfX1lbHNle2lmKGkpe2lmKGkueTxjKXJldHVybn1lbHNlIGk9e3g6KGwtdSkvcix5Omx9O2U9e3g6KGMtdSkvcix5OmN9fWVsc2UgaWYodj5nKXtpZihpKXtpZihpLng+PWEpcmV0dXJufWVsc2UgaT17eDpvLHk6cipvK3V9O2U9e3g6YSx5OnIqYSt1fX1lbHNle2lmKGkpe2lmKGkueDxvKXJldHVybn1lbHNlIGk9e3g6YSx5OnIqYSt1fTtlPXt4Om8seTpyKm8rdX19cmV0dXJuIG4uYT1pLG4uYj1lLCEwfWZ1bmN0aW9uIFdyKG4sdCl7dGhpcy5sPW4sdGhpcy5yPXQsdGhpcy5hPXRoaXMuYj1udWxsfWZ1bmN0aW9uIEpyKG4sdCxlLHIpe3ZhciB1PW5ldyBXcihuLHQpO3JldHVybiAkYy5wdXNoKHUpLGUmJktyKHUsbix0LGUpLHImJktyKHUsdCxuLHIpLEJjW24uaV0uZWRnZXMucHVzaChuZXcgUXIodSxuLHQpKSxCY1t0LmldLmVkZ2VzLnB1c2gobmV3IFFyKHUsdCxuKSksdX1mdW5jdGlvbiBHcihuLHQsZSl7dmFyIHI9bmV3IFdyKG4sbnVsbCk7cmV0dXJuIHIuYT10LHIuYj1lLCRjLnB1c2gocikscn1mdW5jdGlvbiBLcihuLHQsZSxyKXtuLmF8fG4uYj9uLmw9PT1lP24uYj1yOm4uYT1yOihuLmE9cixuLmw9dCxuLnI9ZSl9ZnVuY3Rpb24gUXIobix0LGUpe3ZhciByPW4uYSx1PW4uYjt0aGlzLmVkZ2U9bix0aGlzLnNpdGU9dCx0aGlzLmFuZ2xlPWU/TWF0aC5hdGFuMihlLnktdC55LGUueC10LngpOm4ubD09PXQ/TWF0aC5hdGFuMih1Lngtci54LHIueS11LnkpOk1hdGguYXRhbjIoci54LXUueCx1Lnktci55KX1mdW5jdGlvbiBudSgpe3RoaXMuXz1udWxsfWZ1bmN0aW9uIHR1KG4pe24uVT1uLkM9bi5MPW4uUj1uLlA9bi5OPW51bGx9ZnVuY3Rpb24gZXUobix0KXt2YXIgZT10LHI9dC5SLHU9ZS5VO3U/dS5MPT09ZT91Lkw9cjp1LlI9cjpuLl89cixyLlU9dSxlLlU9cixlLlI9ci5MLGUuUiYmKGUuUi5VPWUpLHIuTD1lfWZ1bmN0aW9uIHJ1KG4sdCl7dmFyIGU9dCxyPXQuTCx1PWUuVTt1P3UuTD09PWU/dS5MPXI6dS5SPXI6bi5fPXIsci5VPXUsZS5VPXIsZS5MPXIuUixlLkwmJihlLkwuVT1lKSxyLlI9ZX1mdW5jdGlvbiB1dShuKXtmb3IoO24uTDspbj1uLkw7cmV0dXJuIG59ZnVuY3Rpb24gaXUobix0KXt2YXIgZSxyLHUsaT1uLnNvcnQob3UpLnBvcCgpO2ZvcigkYz1bXSxCYz1uZXcgQXJyYXkobi5sZW5ndGgpLFdjPW5ldyBudSxHYz1uZXcgbnU7OylpZih1PUpjLGkmJighdXx8aS55PHUueXx8aS55PT09dS55JiZpLng8dS54KSkoaS54IT09ZXx8aS55IT09cikmJihCY1tpLmldPW5ldyBPcihpKSxqcihpKSxlPWkueCxyPWkueSksaT1uLnBvcCgpO2Vsc2V7aWYoIXUpYnJlYWs7VXIodS5hcmMpfXQmJigkcih0KSxZcih0KSk7dmFyIG89e2NlbGxzOkJjLGVkZ2VzOiRjfTtyZXR1cm4gV2M9R2M9JGM9QmM9bnVsbCxvfWZ1bmN0aW9uIG91KG4sdCl7cmV0dXJuIHQueS1uLnl8fHQueC1uLnh9ZnVuY3Rpb24gYXUobix0LGUpe3JldHVybihuLngtZS54KSoodC55LW4ueSktKG4ueC10LngpKihlLnktbi55KX1mdW5jdGlvbiBjdShuKXtyZXR1cm4gbi54fWZ1bmN0aW9uIGx1KG4pe3JldHVybiBuLnl9ZnVuY3Rpb24gc3UoKXtyZXR1cm57bGVhZjohMCxub2RlczpbXSxwb2ludDpudWxsLHg6bnVsbCx5Om51bGx9fWZ1bmN0aW9uIGZ1KG4sdCxlLHIsdSxpKXtpZighbih0LGUscix1LGkpKXt2YXIgbz0uNSooZSt1KSxhPS41KihyK2kpLGM9dC5ub2RlcztjWzBdJiZmdShuLGNbMF0sZSxyLG8sYSksY1sxXSYmZnUobixjWzFdLG8scix1LGEpLGNbMl0mJmZ1KG4sY1syXSxlLGEsbyxpKSxjWzNdJiZmdShuLGNbM10sbyxhLHUsaSl9fWZ1bmN0aW9uIGh1KG4sdCl7bj1Cby5yZ2IobiksdD1Cby5yZ2IodCk7dmFyIGU9bi5yLHI9bi5nLHU9bi5iLGk9dC5yLWUsbz10LmctcixhPXQuYi11O3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4iIyIreHQoTWF0aC5yb3VuZChlK2kqbikpK3h0KE1hdGgucm91bmQocitvKm4pKSt4dChNYXRoLnJvdW5kKHUrYSpuKSl9fWZ1bmN0aW9uIGd1KG4sdCl7dmFyIGUscj17fSx1PXt9O2ZvcihlIGluIG4pZSBpbiB0P3JbZV09ZHUobltlXSx0W2VdKTp1W2VdPW5bZV07Zm9yKGUgaW4gdCllIGluIG58fCh1W2VdPXRbZV0pO3JldHVybiBmdW5jdGlvbihuKXtmb3IoZSBpbiByKXVbZV09cltlXShuKTtyZXR1cm4gdX19ZnVuY3Rpb24gcHUobix0KXtyZXR1cm4gbj0rbix0PSt0LGZ1bmN0aW9uKGUpe3JldHVybiBuKigxLWUpK3QqZX19ZnVuY3Rpb24gdnUobix0KXt2YXIgZSxyLHUsaT10bC5sYXN0SW5kZXg9ZWwubGFzdEluZGV4PTAsbz0tMSxhPVtdLGM9W107Zm9yKG4rPSIiLHQrPSIiOyhlPXRsLmV4ZWMobikpJiYocj1lbC5leGVjKHQpKTspKHU9ci5pbmRleCk+aSYmKHU9dC5zbGljZShpLHUpLGFbb10/YVtvXSs9dTphWysrb109dSksKGU9ZVswXSk9PT0ocj1yWzBdKT9hW29dP2Fbb10rPXI6YVsrK29dPXI6KGFbKytvXT1udWxsLGMucHVzaCh7aTpvLHg6cHUoZSxyKX0pKSxpPWVsLmxhc3RJbmRleDtyZXR1cm4gaTx0Lmxlbmd0aCYmKHU9dC5zbGljZShpKSxhW29dP2Fbb10rPXU6YVsrK29dPXUpLGEubGVuZ3RoPDI/Y1swXT8odD1jWzBdLngsZnVuY3Rpb24obil7cmV0dXJuIHQobikrIiJ9KTpmdW5jdGlvbigpe3JldHVybiB0fToodD1jLmxlbmd0aCxmdW5jdGlvbihuKXtmb3IodmFyIGUscj0wO3Q+cjsrK3IpYVsoZT1jW3JdKS5pXT1lLngobik7cmV0dXJuIGEuam9pbigiIil9KX1mdW5jdGlvbiBkdShuLHQpe2Zvcih2YXIgZSxyPUJvLmludGVycG9sYXRvcnMubGVuZ3RoOy0tcj49MCYmIShlPUJvLmludGVycG9sYXRvcnNbcl0obix0KSk7KTtyZXR1cm4gZX1mdW5jdGlvbiBtdShuLHQpe3ZhciBlLHI9W10sdT1bXSxpPW4ubGVuZ3RoLG89dC5sZW5ndGgsYT1NYXRoLm1pbihuLmxlbmd0aCx0Lmxlbmd0aCk7Zm9yKGU9MDthPmU7KytlKXIucHVzaChkdShuW2VdLHRbZV0pKTtmb3IoO2k+ZTsrK2UpdVtlXT1uW2VdO2Zvcig7bz5lOysrZSl1W2VdPXRbZV07cmV0dXJuIGZ1bmN0aW9uKG4pe2ZvcihlPTA7YT5lOysrZSl1W2VdPXJbZV0obik7cmV0dXJuIHV9fWZ1bmN0aW9uIHl1KG4pe3JldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gMD49dD8wOnQ+PTE/MTpuKHQpfX1mdW5jdGlvbiB4dShuKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIDEtbigxLXQpfX1mdW5jdGlvbiBNdShuKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuLjUqKC41PnQ/bigyKnQpOjItbigyLTIqdCkpfX1mdW5jdGlvbiBfdShuKXtyZXR1cm4gbipufWZ1bmN0aW9uIGJ1KG4pe3JldHVybiBuKm4qbn1mdW5jdGlvbiB3dShuKXtpZigwPj1uKXJldHVybiAwO2lmKG4+PTEpcmV0dXJuIDE7dmFyIHQ9bipuLGU9dCpuO3JldHVybiA0KiguNT5uP2U6Myoobi10KStlLS43NSl9ZnVuY3Rpb24gU3Uobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnBvdyh0LG4pfX1mdW5jdGlvbiBrdShuKXtyZXR1cm4gMS1NYXRoLmNvcyhuKkNhKX1mdW5jdGlvbiBFdShuKXtyZXR1cm4gTWF0aC5wb3coMiwxMCoobi0xKSl9ZnVuY3Rpb24gQXUobil7cmV0dXJuIDEtTWF0aC5zcXJ0KDEtbipuKX1mdW5jdGlvbiBDdShuLHQpe3ZhciBlO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDImJih0PS40NSksYXJndW1lbnRzLmxlbmd0aD9lPXQvQWEqTWF0aC5hc2luKDEvbik6KG49MSxlPXQvNCksZnVuY3Rpb24ocil7cmV0dXJuIDErbipNYXRoLnBvdygyLC0xMCpyKSpNYXRoLnNpbigoci1lKSpBYS90KX19ZnVuY3Rpb24gTnUobil7cmV0dXJuIG58fChuPTEuNzAxNTgpLGZ1bmN0aW9uKHQpe3JldHVybiB0KnQqKChuKzEpKnQtbil9fWZ1bmN0aW9uIHp1KG4pe3JldHVybiAxLzIuNzU+bj83LjU2MjUqbipuOjIvMi43NT5uPzcuNTYyNSoobi09MS41LzIuNzUpKm4rLjc1OjIuNS8yLjc1Pm4/Ny41NjI1KihuLT0yLjI1LzIuNzUpKm4rLjkzNzU6Ny41NjI1KihuLT0yLjYyNS8yLjc1KSpuKy45ODQzNzV9ZnVuY3Rpb24gTHUobix0KXtuPUJvLmhjbChuKSx0PUJvLmhjbCh0KTt2YXIgZT1uLmgscj1uLmMsdT1uLmwsaT10LmgtZSxvPXQuYy1yLGE9dC5sLXU7cmV0dXJuIGlzTmFOKG8pJiYobz0wLHI9aXNOYU4ocik/dC5jOnIpLGlzTmFOKGkpPyhpPTAsZT1pc05hTihlKT90Lmg6ZSk6aT4xODA/aS09MzYwOi0xODA+aSYmKGkrPTM2MCksZnVuY3Rpb24obil7cmV0dXJuIGx0KGUraSpuLHIrbypuLHUrYSpuKSsiIn19ZnVuY3Rpb24gVHUobix0KXtuPUJvLmhzbChuKSx0PUJvLmhzbCh0KTt2YXIgZT1uLmgscj1uLnMsdT1uLmwsaT10LmgtZSxvPXQucy1yLGE9dC5sLXU7cmV0dXJuIGlzTmFOKG8pJiYobz0wLHI9aXNOYU4ocik/dC5zOnIpLGlzTmFOKGkpPyhpPTAsZT1pc05hTihlKT90Lmg6ZSk6aT4xODA/aS09MzYwOi0xODA+aSYmKGkrPTM2MCksZnVuY3Rpb24obil7cmV0dXJuIGF0KGUraSpuLHIrbypuLHUrYSpuKSsiIn19ZnVuY3Rpb24gcXUobix0KXtuPUJvLmxhYihuKSx0PUJvLmxhYih0KTt2YXIgZT1uLmwscj1uLmEsdT1uLmIsaT10LmwtZSxvPXQuYS1yLGE9dC5iLXU7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBmdChlK2kqbixyK28qbix1K2EqbikrIiJ9fWZ1bmN0aW9uIFJ1KG4sdCl7cmV0dXJuIHQtPW4sZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGgucm91bmQobit0KmUpfX1mdW5jdGlvbiBEdShuKXt2YXIgdD1bbi5hLG4uYl0sZT1bbi5jLG4uZF0scj1VdSh0KSx1PVB1KHQsZSksaT1VdShqdShlLHQsLXUpKXx8MDt0WzBdKmVbMV08ZVswXSp0WzFdJiYodFswXSo9LTEsdFsxXSo9LTEscio9LTEsdSo9LTEpLHRoaXMucm90YXRlPShyP01hdGguYXRhbjIodFsxXSx0WzBdKTpNYXRoLmF0YW4yKC1lWzBdLGVbMV0pKSpUYSx0aGlzLnRyYW5zbGF0ZT1bbi5lLG4uZl0sdGhpcy5zY2FsZT1bcixpXSx0aGlzLnNrZXc9aT9NYXRoLmF0YW4yKHUsaSkqVGE6MH1mdW5jdGlvbiBQdShuLHQpe3JldHVybiBuWzBdKnRbMF0rblsxXSp0WzFdfWZ1bmN0aW9uIFV1KG4pe3ZhciB0PU1hdGguc3FydChQdShuLG4pKTtyZXR1cm4gdCYmKG5bMF0vPXQsblsxXS89dCksdH1mdW5jdGlvbiBqdShuLHQsZSl7cmV0dXJuIG5bMF0rPWUqdFswXSxuWzFdKz1lKnRbMV0sbn1mdW5jdGlvbiBGdShuLHQpe3ZhciBlLHI9W10sdT1bXSxpPUJvLnRyYW5zZm9ybShuKSxvPUJvLnRyYW5zZm9ybSh0KSxhPWkudHJhbnNsYXRlLGM9by50cmFuc2xhdGUsbD1pLnJvdGF0ZSxzPW8ucm90YXRlLGY9aS5za2V3LGg9by5za2V3LGc9aS5zY2FsZSxwPW8uc2NhbGU7cmV0dXJuIGFbMF0hPWNbMF18fGFbMV0hPWNbMV0/KHIucHVzaCgidHJhbnNsYXRlKCIsbnVsbCwiLCIsbnVsbCwiKSIpLHUucHVzaCh7aToxLHg6cHUoYVswXSxjWzBdKX0se2k6Myx4OnB1KGFbMV0sY1sxXSl9KSk6Y1swXXx8Y1sxXT9yLnB1c2goInRyYW5zbGF0ZSgiK2MrIikiKTpyLnB1c2goIiIpLGwhPXM/KGwtcz4xODA/cys9MzYwOnMtbD4xODAmJihsKz0zNjApLHUucHVzaCh7aTpyLnB1c2goci5wb3AoKSsicm90YXRlKCIsbnVsbCwiKSIpLTIseDpwdShsLHMpfSkpOnMmJnIucHVzaChyLnBvcCgpKyJyb3RhdGUoIitzKyIpIiksZiE9aD91LnB1c2goe2k6ci5wdXNoKHIucG9wKCkrInNrZXdYKCIsbnVsbCwiKSIpLTIseDpwdShmLGgpfSk6aCYmci5wdXNoKHIucG9wKCkrInNrZXdYKCIraCsiKSIpLGdbMF0hPXBbMF18fGdbMV0hPXBbMV0/KGU9ci5wdXNoKHIucG9wKCkrInNjYWxlKCIsbnVsbCwiLCIsbnVsbCwiKSIpLHUucHVzaCh7aTplLTQseDpwdShnWzBdLHBbMF0pfSx7aTplLTIseDpwdShnWzFdLHBbMV0pfSkpOigxIT1wWzBdfHwxIT1wWzFdKSYmci5wdXNoKHIucG9wKCkrInNjYWxlKCIrcCsiKSIpLGU9dS5sZW5ndGgsZnVuY3Rpb24obil7Zm9yKHZhciB0LGk9LTE7KytpPGU7KXJbKHQ9dVtpXSkuaV09dC54KG4pO3JldHVybiByLmpvaW4oIiIpfX1mdW5jdGlvbiBIdShuLHQpe3JldHVybiB0PSh0LT1uPStuKXx8MS90LGZ1bmN0aW9uKGUpe3JldHVybihlLW4pL3R9fWZ1bmN0aW9uIE91KG4sdCl7cmV0dXJuIHQ9KHQtPW49K24pfHwxL3QsZnVuY3Rpb24oZSl7cmV0dXJuIE1hdGgubWF4KDAsTWF0aC5taW4oMSwoZS1uKS90KSl9fWZ1bmN0aW9uIFl1KG4pe2Zvcih2YXIgdD1uLnNvdXJjZSxlPW4udGFyZ2V0LHI9WnUodCxlKSx1PVt0XTt0IT09cjspdD10LnBhcmVudCx1LnB1c2godCk7Zm9yKHZhciBpPXUubGVuZ3RoO2UhPT1yOyl1LnNwbGljZShpLDAsZSksZT1lLnBhcmVudDtyZXR1cm4gdX1mdW5jdGlvbiBJdShuKXtmb3IodmFyIHQ9W10sZT1uLnBhcmVudDtudWxsIT1lOyl0LnB1c2gobiksbj1lLGU9ZS5wYXJlbnQ7cmV0dXJuIHQucHVzaChuKSx0fWZ1bmN0aW9uIFp1KG4sdCl7aWYobj09PXQpcmV0dXJuIG47Zm9yKHZhciBlPUl1KG4pLHI9SXUodCksdT1lLnBvcCgpLGk9ci5wb3AoKSxvPW51bGw7dT09PWk7KW89dSx1PWUucG9wKCksaT1yLnBvcCgpO3JldHVybiBvfWZ1bmN0aW9uIFZ1KG4pe24uZml4ZWR8PTJ9ZnVuY3Rpb24gWHUobil7bi5maXhlZCY9LTd9ZnVuY3Rpb24gJHUobil7bi5maXhlZHw9NCxuLnB4PW4ueCxuLnB5PW4ueX1mdW5jdGlvbiBCdShuKXtuLmZpeGVkJj0tNX1mdW5jdGlvbiBXdShuLHQsZSl7dmFyIHI9MCx1PTA7aWYobi5jaGFyZ2U9MCwhbi5sZWFmKWZvcih2YXIgaSxvPW4ubm9kZXMsYT1vLmxlbmd0aCxjPS0xOysrYzxhOylpPW9bY10sbnVsbCE9aSYmKFd1KGksdCxlKSxuLmNoYXJnZSs9aS5jaGFyZ2Uscis9aS5jaGFyZ2UqaS5jeCx1Kz1pLmNoYXJnZSppLmN5KTtpZihuLnBvaW50KXtuLmxlYWZ8fChuLnBvaW50LngrPU1hdGgucmFuZG9tKCktLjUsbi5wb2ludC55Kz1NYXRoLnJhbmRvbSgpLS41KTt2YXIgbD10KmVbbi5wb2ludC5pbmRleF07bi5jaGFyZ2UrPW4ucG9pbnRDaGFyZ2U9bCxyKz1sKm4ucG9pbnQueCx1Kz1sKm4ucG9pbnQueX1uLmN4PXIvbi5jaGFyZ2Usbi5jeT11L24uY2hhcmdlfWZ1bmN0aW9uIEp1KG4sdCl7cmV0dXJuIEJvLnJlYmluZChuLHQsInNvcnQiLCJjaGlsZHJlbiIsInZhbHVlIiksbi5ub2Rlcz1uLG4ubGlua3M9ZWksbn1mdW5jdGlvbiBHdShuLHQpe2Zvcih2YXIgZT1bbl07bnVsbCE9KG49ZS5wb3AoKSk7KWlmKHQobiksKHU9bi5jaGlsZHJlbikmJihyPXUubGVuZ3RoKSlmb3IodmFyIHIsdTstLXI+PTA7KWUucHVzaCh1W3JdKX1mdW5jdGlvbiBLdShuLHQpe2Zvcih2YXIgZT1bbl0scj1bXTtudWxsIT0obj1lLnBvcCgpKTspaWYoci5wdXNoKG4pLChpPW4uY2hpbGRyZW4pJiYodT1pLmxlbmd0aCkpZm9yKHZhciB1LGksbz0tMTsrK288dTspZS5wdXNoKGlbb10pO2Zvcig7bnVsbCE9KG49ci5wb3AoKSk7KXQobil9ZnVuY3Rpb24gUXUobil7cmV0dXJuIG4uY2hpbGRyZW59ZnVuY3Rpb24gbmkobil7cmV0dXJuIG4udmFsdWV9ZnVuY3Rpb24gdGkobix0KXtyZXR1cm4gdC52YWx1ZS1uLnZhbHVlfWZ1bmN0aW9uIGVpKG4pe3JldHVybiBCby5tZXJnZShuLm1hcChmdW5jdGlvbihuKXtyZXR1cm4obi5jaGlsZHJlbnx8W10pLm1hcChmdW5jdGlvbih0KXtyZXR1cm57c291cmNlOm4sdGFyZ2V0OnR9fSl9KSl9ZnVuY3Rpb24gcmkobil7cmV0dXJuIG4ueH1mdW5jdGlvbiB1aShuKXtyZXR1cm4gbi55fWZ1bmN0aW9uIGlpKG4sdCxlKXtuLnkwPXQsbi55PWV9ZnVuY3Rpb24gb2kobil7cmV0dXJuIEJvLnJhbmdlKG4ubGVuZ3RoKX1mdW5jdGlvbiBhaShuKXtmb3IodmFyIHQ9LTEsZT1uWzBdLmxlbmd0aCxyPVtdOysrdDxlOylyW3RdPTA7cmV0dXJuIHJ9ZnVuY3Rpb24gY2kobil7Zm9yKHZhciB0LGU9MSxyPTAsdT1uWzBdWzFdLGk9bi5sZW5ndGg7aT5lOysrZSkodD1uW2VdWzFdKT51JiYocj1lLHU9dCk7cmV0dXJuIHJ9ZnVuY3Rpb24gbGkobil7cmV0dXJuIG4ucmVkdWNlKHNpLDApfWZ1bmN0aW9uIHNpKG4sdCl7cmV0dXJuIG4rdFsxXX1mdW5jdGlvbiBmaShuLHQpe3JldHVybiBoaShuLE1hdGguY2VpbChNYXRoLmxvZyh0Lmxlbmd0aCkvTWF0aC5MTjIrMSkpfWZ1bmN0aW9uIGhpKG4sdCl7Zm9yKHZhciBlPS0xLHI9K25bMF0sdT0oblsxXS1yKS90LGk9W107KytlPD10OylpW2VdPXUqZStyO3JldHVybiBpfWZ1bmN0aW9uIGdpKG4pe3JldHVybltCby5taW4obiksQm8ubWF4KG4pXX1mdW5jdGlvbiBwaShuLHQpe3JldHVybiBuLnZhbHVlLXQudmFsdWV9ZnVuY3Rpb24gdmkobix0KXt2YXIgZT1uLl9wYWNrX25leHQ7bi5fcGFja19uZXh0PXQsdC5fcGFja19wcmV2PW4sdC5fcGFja19uZXh0PWUsZS5fcGFja19wcmV2PXR9ZnVuY3Rpb24gZGkobix0KXtuLl9wYWNrX25leHQ9dCx0Ll9wYWNrX3ByZXY9bn1mdW5jdGlvbiBtaShuLHQpe3ZhciBlPXQueC1uLngscj10Lnktbi55LHU9bi5yK3QucjtyZXR1cm4uOTk5KnUqdT5lKmUrcipyfWZ1bmN0aW9uIHlpKG4pe2Z1bmN0aW9uIHQobil7cz1NYXRoLm1pbihuLngtbi5yLHMpLGY9TWF0aC5tYXgobi54K24ucixmKSxoPU1hdGgubWluKG4ueS1uLnIsaCksZz1NYXRoLm1heChuLnkrbi5yLGcpfWlmKChlPW4uY2hpbGRyZW4pJiYobD1lLmxlbmd0aCkpe3ZhciBlLHIsdSxpLG8sYSxjLGwscz0xLzAsZj0tMS8wLGg9MS8wLGc9LTEvMDtpZihlLmZvckVhY2goeGkpLHI9ZVswXSxyLng9LXIucixyLnk9MCx0KHIpLGw+MSYmKHU9ZVsxXSx1Lng9dS5yLHUueT0wLHQodSksbD4yKSlmb3IoaT1lWzJdLGJpKHIsdSxpKSx0KGkpLHZpKHIsaSksci5fcGFja19wcmV2PWksdmkoaSx1KSx1PXIuX3BhY2tfbmV4dCxvPTM7bD5vO28rKyl7Ymkocix1LGk9ZVtvXSk7dmFyIHA9MCx2PTEsZD0xO2ZvcihhPXUuX3BhY2tfbmV4dDthIT09dTthPWEuX3BhY2tfbmV4dCx2KyspaWYobWkoYSxpKSl7cD0xO2JyZWFrfWlmKDE9PXApZm9yKGM9ci5fcGFja19wcmV2O2MhPT1hLl9wYWNrX3ByZXYmJiFtaShjLGkpO2M9Yy5fcGFja19wcmV2LGQrKyk7cD8oZD52fHx2PT1kJiZ1LnI8ci5yP2RpKHIsdT1hKTpkaShyPWMsdSksby0tKToodmkocixpKSx1PWksdChpKSl9dmFyIG09KHMrZikvMix5PShoK2cpLzIseD0wO2ZvcihvPTA7bD5vO28rKylpPWVbb10saS54LT1tLGkueS09eSx4PU1hdGgubWF4KHgsaS5yK01hdGguc3FydChpLngqaS54K2kueSppLnkpKTtuLnI9eCxlLmZvckVhY2goTWkpfX1mdW5jdGlvbiB4aShuKXtuLl9wYWNrX25leHQ9bi5fcGFja19wcmV2PW59ZnVuY3Rpb24gTWkobil7ZGVsZXRlIG4uX3BhY2tfbmV4dCxkZWxldGUgbi5fcGFja19wcmV2fWZ1bmN0aW9uIF9pKG4sdCxlLHIpe3ZhciB1PW4uY2hpbGRyZW47aWYobi54PXQrPXIqbi54LG4ueT1lKz1yKm4ueSxuLnIqPXIsdSlmb3IodmFyIGk9LTEsbz11Lmxlbmd0aDsrK2k8bzspX2kodVtpXSx0LGUscil9ZnVuY3Rpb24gYmkobix0LGUpe3ZhciByPW4ucitlLnIsdT10Lngtbi54LGk9dC55LW4ueTtpZihyJiYodXx8aSkpe3ZhciBvPXQucitlLnIsYT11KnUraSppO28qPW8scio9cjt2YXIgYz0uNSsoci1vKS8oMiphKSxsPU1hdGguc3FydChNYXRoLm1heCgwLDIqbyoocithKS0oci09YSkqci1vKm8pKS8oMiphKTtlLng9bi54K2MqdStsKmksZS55PW4ueStjKmktbCp1fWVsc2UgZS54PW4ueCtyLGUueT1uLnl9ZnVuY3Rpb24gd2kobix0KXtyZXR1cm4gbi5wYXJlbnQ9PXQucGFyZW50PzE6Mn1mdW5jdGlvbiBTaShuKXt2YXIgdD1uLmNoaWxkcmVuO3JldHVybiB0Lmxlbmd0aD90WzBdOm4udH1mdW5jdGlvbiBraShuKXt2YXIgdCxlPW4uY2hpbGRyZW47cmV0dXJuKHQ9ZS5sZW5ndGgpP2VbdC0xXTpuLnR9ZnVuY3Rpb24gRWkobix0LGUpe3ZhciByPWUvKHQuaS1uLmkpO3QuYy09cix0LnMrPWUsbi5jKz1yLHQueis9ZSx0Lm0rPWV9ZnVuY3Rpb24gQWkobil7Zm9yKHZhciB0LGU9MCxyPTAsdT1uLmNoaWxkcmVuLGk9dS5sZW5ndGg7LS1pPj0wOyl0PXVbaV0sdC56Kz1lLHQubSs9ZSxlKz10LnMrKHIrPXQuYyl9ZnVuY3Rpb24gQ2kobix0LGUpe3JldHVybiBuLmEucGFyZW50PT09dC5wYXJlbnQ/bi5hOmV9ZnVuY3Rpb24gTmkobil7cmV0dXJuIDErQm8ubWF4KG4sZnVuY3Rpb24obil7cmV0dXJuIG4ueX0pfWZ1bmN0aW9uIHppKG4pe3JldHVybiBuLnJlZHVjZShmdW5jdGlvbihuLHQpe3JldHVybiBuK3QueH0sMCkvbi5sZW5ndGh9ZnVuY3Rpb24gTGkobil7dmFyIHQ9bi5jaGlsZHJlbjtyZXR1cm4gdCYmdC5sZW5ndGg/TGkodFswXSk6bn1mdW5jdGlvbiBUaShuKXt2YXIgdCxlPW4uY2hpbGRyZW47cmV0dXJuIGUmJih0PWUubGVuZ3RoKT9UaShlW3QtMV0pOm59ZnVuY3Rpb24gcWkobil7cmV0dXJue3g6bi54LHk6bi55LGR4Om4uZHgsZHk6bi5keX19ZnVuY3Rpb24gUmkobix0KXt2YXIgZT1uLngrdFszXSxyPW4ueSt0WzBdLHU9bi5keC10WzFdLXRbM10saT1uLmR5LXRbMF0tdFsyXTtyZXR1cm4gMD51JiYoZSs9dS8yLHU9MCksMD5pJiYocis9aS8yLGk9MCkse3g6ZSx5OnIsZHg6dSxkeTppfX1mdW5jdGlvbiBEaShuKXt2YXIgdD1uWzBdLGU9bltuLmxlbmd0aC0xXTtyZXR1cm4gZT50P1t0LGVdOltlLHRdfWZ1bmN0aW9uIFBpKG4pe3JldHVybiBuLnJhbmdlRXh0ZW50P24ucmFuZ2VFeHRlbnQoKTpEaShuLnJhbmdlKCkpfWZ1bmN0aW9uIFVpKG4sdCxlLHIpe3ZhciB1PWUoblswXSxuWzFdKSxpPXIodFswXSx0WzFdKTtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIGkodShuKSl9fWZ1bmN0aW9uIGppKG4sdCl7dmFyIGUscj0wLHU9bi5sZW5ndGgtMSxpPW5bcl0sbz1uW3VdO3JldHVybiBpPm8mJihlPXIscj11LHU9ZSxlPWksaT1vLG89ZSksbltyXT10LmZsb29yKGkpLG5bdV09dC5jZWlsKG8pLG59ZnVuY3Rpb24gRmkobil7cmV0dXJuIG4/e2Zsb29yOmZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLmZsb29yKHQvbikqbn0sY2VpbDpmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5jZWlsKHQvbikqbn19OmdsfWZ1bmN0aW9uIEhpKG4sdCxlLHIpe3ZhciB1PVtdLGk9W10sbz0wLGE9TWF0aC5taW4obi5sZW5ndGgsdC5sZW5ndGgpLTE7Zm9yKG5bYV08blswXSYmKG49bi5zbGljZSgpLnJldmVyc2UoKSx0PXQuc2xpY2UoKS5yZXZlcnNlKCkpOysrbzw9YTspdS5wdXNoKGUobltvLTFdLG5bb10pKSxpLnB1c2gocih0W28tMV0sdFtvXSkpO3JldHVybiBmdW5jdGlvbih0KXt2YXIgZT1Cby5iaXNlY3Qobix0LDEsYSktMTtyZXR1cm4gaVtlXSh1W2VdKHQpKX19ZnVuY3Rpb24gT2kobix0LGUscil7ZnVuY3Rpb24gdSgpe3ZhciB1PU1hdGgubWluKG4ubGVuZ3RoLHQubGVuZ3RoKT4yP0hpOlVpLGM9cj9PdTpIdTtyZXR1cm4gbz11KG4sdCxjLGUpLGE9dSh0LG4sYyxkdSksaX1mdW5jdGlvbiBpKG4pe3JldHVybiBvKG4pfXZhciBvLGE7cmV0dXJuIGkuaW52ZXJ0PWZ1bmN0aW9uKG4pe3JldHVybiBhKG4pfSxpLmRvbWFpbj1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obj10Lm1hcChOdW1iZXIpLHUoKSk6bn0saS5yYW5nZT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odD1uLHUoKSk6dH0saS5yYW5nZVJvdW5kPWZ1bmN0aW9uKG4pe3JldHVybiBpLnJhbmdlKG4pLmludGVycG9sYXRlKFJ1KX0saS5jbGFtcD1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8ocj1uLHUoKSk6cn0saS5pbnRlcnBvbGF0ZT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT1uLHUoKSk6ZX0saS50aWNrcz1mdW5jdGlvbih0KXtyZXR1cm4gVmkobix0KX0saS50aWNrRm9ybWF0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIFhpKG4sdCxlKX0saS5uaWNlPWZ1bmN0aW9uKHQpe3JldHVybiBJaShuLHQpLHUoKX0saS5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIE9pKG4sdCxlLHIpfSx1KCl9ZnVuY3Rpb24gWWkobix0KXtyZXR1cm4gQm8ucmViaW5kKG4sdCwicmFuZ2UiLCJyYW5nZVJvdW5kIiwiaW50ZXJwb2xhdGUiLCJjbGFtcCIpfWZ1bmN0aW9uIElpKG4sdCl7cmV0dXJuIGppKG4sRmkoWmkobix0KVsyXSkpfWZ1bmN0aW9uIFppKG4sdCl7bnVsbD09dCYmKHQ9MTApO3ZhciBlPURpKG4pLHI9ZVsxXS1lWzBdLHU9TWF0aC5wb3coMTAsTWF0aC5mbG9vcihNYXRoLmxvZyhyL3QpL01hdGguTE4xMCkpLGk9dC9yKnU7cmV0dXJuLjE1Pj1pP3UqPTEwOi4zNT49aT91Kj01Oi43NT49aSYmKHUqPTIpLGVbMF09TWF0aC5jZWlsKGVbMF0vdSkqdSxlWzFdPU1hdGguZmxvb3IoZVsxXS91KSp1Ky41KnUsZVsyXT11LGV9ZnVuY3Rpb24gVmkobix0KXtyZXR1cm4gQm8ucmFuZ2UuYXBwbHkoQm8sWmkobix0KSl9ZnVuY3Rpb24gWGkobix0LGUpe3ZhciByPVppKG4sdCk7aWYoZSl7dmFyIHU9dGMuZXhlYyhlKTtpZih1LnNoaWZ0KCksInMiPT09dVs4XSl7dmFyIGk9Qm8uZm9ybWF0UHJlZml4KE1hdGgubWF4KGNhKHJbMF0pLGNhKHJbMV0pKSk7cmV0dXJuIHVbN118fCh1WzddPSIuIiskaShpLnNjYWxlKHJbMl0pKSksdVs4XT0iZiIsZT1Cby5mb3JtYXQodS5qb2luKCIiKSksZnVuY3Rpb24obil7cmV0dXJuIGUoaS5zY2FsZShuKSkraS5zeW1ib2x9fXVbN118fCh1WzddPSIuIitCaSh1WzhdLHIpKSxlPXUuam9pbigiIil9ZWxzZSBlPSIsLiIrJGkoclsyXSkrImYiO3JldHVybiBCby5mb3JtYXQoZSl9ZnVuY3Rpb24gJGkobil7cmV0dXJuLU1hdGguZmxvb3IoTWF0aC5sb2cobikvTWF0aC5MTjEwKy4wMSl9ZnVuY3Rpb24gQmkobix0KXt2YXIgZT0kaSh0WzJdKTtyZXR1cm4gbiBpbiBwbD9NYXRoLmFicyhlLSRpKE1hdGgubWF4KGNhKHRbMF0pLGNhKHRbMV0pKSkpKyArKCJlIiE9PW4pOmUtMiooIiUiPT09bil9ZnVuY3Rpb24gV2kobix0LGUscil7ZnVuY3Rpb24gdShuKXtyZXR1cm4oZT9NYXRoLmxvZygwPm4/MDpuKTotTWF0aC5sb2cobj4wPzA6LW4pKS9NYXRoLmxvZyh0KX1mdW5jdGlvbiBpKG4pe3JldHVybiBlP01hdGgucG93KHQsbik6LU1hdGgucG93KHQsLW4pfWZ1bmN0aW9uIG8odCl7cmV0dXJuIG4odSh0KSl9cmV0dXJuIG8uaW52ZXJ0PWZ1bmN0aW9uKHQpe3JldHVybiBpKG4uaW52ZXJ0KHQpKX0sby5kb21haW49ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGU9dFswXT49MCxuLmRvbWFpbigocj10Lm1hcChOdW1iZXIpKS5tYXAodSkpLG8pOnJ9LG8uYmFzZT1mdW5jdGlvbihlKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odD0rZSxuLmRvbWFpbihyLm1hcCh1KSksbyk6dH0sby5uaWNlPWZ1bmN0aW9uKCl7dmFyIHQ9amkoci5tYXAodSksZT9NYXRoOmRsKTtyZXR1cm4gbi5kb21haW4odCkscj10Lm1hcChpKSxvfSxvLnRpY2tzPWZ1bmN0aW9uKCl7dmFyIG49RGkociksbz1bXSxhPW5bMF0sYz1uWzFdLGw9TWF0aC5mbG9vcih1KGEpKSxzPU1hdGguY2VpbCh1KGMpKSxmPXQlMT8yOnQ7aWYoaXNGaW5pdGUocy1sKSl7aWYoZSl7Zm9yKDtzPmw7bCsrKWZvcih2YXIgaD0xO2Y+aDtoKyspby5wdXNoKGkobCkqaCk7by5wdXNoKGkobCkpfWVsc2UgZm9yKG8ucHVzaChpKGwpKTtsKys8czspZm9yKHZhciBoPWYtMTtoPjA7aC0tKW8ucHVzaChpKGwpKmgpO2ZvcihsPTA7b1tsXTxhO2wrKyk7Zm9yKHM9by5sZW5ndGg7b1tzLTFdPmM7cy0tKTtvPW8uc2xpY2UobCxzKX1yZXR1cm4gb30sby50aWNrRm9ybWF0PWZ1bmN0aW9uKG4sdCl7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZsO2FyZ3VtZW50cy5sZW5ndGg8Mj90PXZsOiJmdW5jdGlvbiIhPXR5cGVvZiB0JiYodD1Cby5mb3JtYXQodCkpO3ZhciByLGE9TWF0aC5tYXgoLjEsbi9vLnRpY2tzKCkubGVuZ3RoKSxjPWU/KHI9MWUtMTIsTWF0aC5jZWlsKToocj0tMWUtMTIsTWF0aC5mbG9vcik7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBuL2koYyh1KG4pK3IpKTw9YT90KG4pOiIifX0sby5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIFdpKG4uY29weSgpLHQsZSxyKX0sWWkobyxuKX1mdW5jdGlvbiBKaShuLHQsZSl7ZnVuY3Rpb24gcih0KXtyZXR1cm4gbih1KHQpKX12YXIgdT1HaSh0KSxpPUdpKDEvdCk7cmV0dXJuIHIuaW52ZXJ0PWZ1bmN0aW9uKHQpe3JldHVybiBpKG4uaW52ZXJ0KHQpKX0sci5kb21haW49ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KG4uZG9tYWluKChlPXQubWFwKE51bWJlcikpLm1hcCh1KSkscik6ZX0sci50aWNrcz1mdW5jdGlvbihuKXtyZXR1cm4gVmkoZSxuKX0sci50aWNrRm9ybWF0PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIFhpKGUsbix0KX0sci5uaWNlPWZ1bmN0aW9uKG4pe3JldHVybiByLmRvbWFpbihJaShlLG4pKX0sci5leHBvbmVudD1mdW5jdGlvbihvKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odT1HaSh0PW8pLGk9R2koMS90KSxuLmRvbWFpbihlLm1hcCh1KSkscik6dH0sci5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIEppKG4uY29weSgpLHQsZSl9LFlpKHIsbil9ZnVuY3Rpb24gR2kobil7cmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiAwPnQ/LU1hdGgucG93KC10LG4pOk1hdGgucG93KHQsbil9fWZ1bmN0aW9uIEtpKG4sdCl7ZnVuY3Rpb24gZShlKXtyZXR1cm4gaVsoKHUuZ2V0KGUpfHwoInJhbmdlIj09PXQudD91LnNldChlLG4ucHVzaChlKSk6MC8wKSktMSklaS5sZW5ndGhdfWZ1bmN0aW9uIHIodCxlKXtyZXR1cm4gQm8ucmFuZ2Uobi5sZW5ndGgpLm1hcChmdW5jdGlvbihuKXtyZXR1cm4gdCtlKm59KX12YXIgdSxpLG87cmV0dXJuIGUuZG9tYWluPWZ1bmN0aW9uKHIpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiBuO249W10sdT1uZXcgYTtmb3IodmFyIGksbz0tMSxjPXIubGVuZ3RoOysrbzxjOyl1LmhhcyhpPXJbb10pfHx1LnNldChpLG4ucHVzaChpKSk7cmV0dXJuIGVbdC50XS5hcHBseShlLHQuYSl9LGUucmFuZ2U9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGk9bixvPTAsdD17dDoicmFuZ2UiLGE6YXJndW1lbnRzfSxlKTppfSxlLnJhbmdlUG9pbnRzPWZ1bmN0aW9uKHUsYSl7YXJndW1lbnRzLmxlbmd0aDwyJiYoYT0wKTt2YXIgYz11WzBdLGw9dVsxXSxzPShsLWMpLyhNYXRoLm1heCgxLG4ubGVuZ3RoLTEpK2EpO3JldHVybiBpPXIobi5sZW5ndGg8Mj8oYytsKS8yOmMrcyphLzIscyksbz0wLHQ9e3Q6InJhbmdlUG9pbnRzIixhOmFyZ3VtZW50c30sZX0sZS5yYW5nZUJhbmRzPWZ1bmN0aW9uKHUsYSxjKXthcmd1bWVudHMubGVuZ3RoPDImJihhPTApLGFyZ3VtZW50cy5sZW5ndGg8MyYmKGM9YSk7dmFyIGw9dVsxXTx1WzBdLHM9dVtsLTBdLGY9dVsxLWxdLGg9KGYtcykvKG4ubGVuZ3RoLWErMipjKTtyZXR1cm4gaT1yKHMraCpjLGgpLGwmJmkucmV2ZXJzZSgpLG89aCooMS1hKSx0PXt0OiJyYW5nZUJhbmRzIixhOmFyZ3VtZW50c30sZX0sZS5yYW5nZVJvdW5kQmFuZHM9ZnVuY3Rpb24odSxhLGMpe2FyZ3VtZW50cy5sZW5ndGg8MiYmKGE9MCksYXJndW1lbnRzLmxlbmd0aDwzJiYoYz1hKTt2YXIgbD11WzFdPHVbMF0scz11W2wtMF0sZj11WzEtbF0saD1NYXRoLmZsb29yKChmLXMpLyhuLmxlbmd0aC1hKzIqYykpLGc9Zi1zLShuLmxlbmd0aC1hKSpoO3JldHVybiBpPXIocytNYXRoLnJvdW5kKGcvMiksaCksbCYmaS5yZXZlcnNlKCksbz1NYXRoLnJvdW5kKGgqKDEtYSkpLHQ9e3Q6InJhbmdlUm91bmRCYW5kcyIsYTphcmd1bWVudHN9LGV9LGUucmFuZ2VCYW5kPWZ1bmN0aW9uKCl7cmV0dXJuIG99LGUucmFuZ2VFeHRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gRGkodC5hWzBdKX0sZS5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIEtpKG4sdCl9LGUuZG9tYWluKG4pfWZ1bmN0aW9uIFFpKHIsdSl7ZnVuY3Rpb24gaSgpe3ZhciBuPTAsdD11Lmxlbmd0aDtmb3IoYT1bXTsrK248dDspYVtuLTFdPUJvLnF1YW50aWxlKHIsbi90KTtyZXR1cm4gb31mdW5jdGlvbiBvKG4pe3JldHVybiBpc05hTihuPStuKT92b2lkIDA6dVtCby5iaXNlY3QoYSxuKV19dmFyIGE7cmV0dXJuIG8uZG9tYWluPWZ1bmN0aW9uKHUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPXUubWFwKHQpLmZpbHRlcihlKS5zb3J0KG4pLGkoKSk6cn0sby5yYW5nZT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odT1uLGkoKSk6dX0sby5xdWFudGlsZXM9ZnVuY3Rpb24oKXtyZXR1cm4gYX0sby5pbnZlcnRFeHRlbnQ9ZnVuY3Rpb24obil7cmV0dXJuIG49dS5pbmRleE9mKG4pLDA+bj9bMC8wLDAvMF06W24+MD9hW24tMV06clswXSxuPGEubGVuZ3RoP2Fbbl06cltyLmxlbmd0aC0xXV19LG8uY29weT1mdW5jdGlvbigpe3JldHVybiBRaShyLHUpfSxpKCl9ZnVuY3Rpb24gbm8obix0LGUpe2Z1bmN0aW9uIHIodCl7cmV0dXJuIGVbTWF0aC5tYXgoMCxNYXRoLm1pbihvLE1hdGguZmxvb3IoaSoodC1uKSkpKV19ZnVuY3Rpb24gdSgpe3JldHVybiBpPWUubGVuZ3RoLyh0LW4pLG89ZS5sZW5ndGgtMSxyfXZhciBpLG87cmV0dXJuIHIuZG9tYWluPWZ1bmN0aW9uKGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhuPStlWzBdLHQ9K2VbZS5sZW5ndGgtMV0sdSgpKTpbbix0XX0sci5yYW5nZT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT1uLHUoKSk6ZX0sci5pbnZlcnRFeHRlbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ9ZS5pbmRleE9mKHQpLHQ9MD50PzAvMDp0L2krbixbdCx0KzEvaV19LHIuY29weT1mdW5jdGlvbigpe3JldHVybiBubyhuLHQsZSl9LHUoKX1mdW5jdGlvbiB0byhuLHQpe2Z1bmN0aW9uIGUoZSl7cmV0dXJuIGU+PWU/dFtCby5iaXNlY3QobixlKV06dm9pZCAwfXJldHVybiBlLmRvbWFpbj1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obj10LGUpOm59LGUucmFuZ2U9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHQ9bixlKTp0fSxlLmludmVydEV4dGVudD1mdW5jdGlvbihlKXtyZXR1cm4gZT10LmluZGV4T2YoZSksW25bZS0xXSxuW2VdXX0sZS5jb3B5PWZ1bmN0aW9uKCl7cmV0dXJuIHRvKG4sdCl9LGV9ZnVuY3Rpb24gZW8obil7ZnVuY3Rpb24gdChuKXtyZXR1cm4rbn1yZXR1cm4gdC5pbnZlcnQ9dCx0LmRvbWFpbj10LnJhbmdlPWZ1bmN0aW9uKGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhuPWUubWFwKHQpLHQpOm59LHQudGlja3M9ZnVuY3Rpb24odCl7cmV0dXJuIFZpKG4sdCl9LHQudGlja0Zvcm1hdD1mdW5jdGlvbih0LGUpe3JldHVybiBYaShuLHQsZSl9LHQuY29weT1mdW5jdGlvbigpe3JldHVybiBlbyhuKX0sdH1mdW5jdGlvbiBybyhuKXtyZXR1cm4gbi5pbm5lclJhZGl1c31mdW5jdGlvbiB1byhuKXtyZXR1cm4gbi5vdXRlclJhZGl1c31mdW5jdGlvbiBpbyhuKXtyZXR1cm4gbi5zdGFydEFuZ2xlfWZ1bmN0aW9uIG9vKG4pe3JldHVybiBuLmVuZEFuZ2xlfWZ1bmN0aW9uIGFvKG4pe2Z1bmN0aW9uIHQodCl7ZnVuY3Rpb24gbygpe2wucHVzaCgiTSIsaShuKHMpLGEpKX1mb3IodmFyIGMsbD1bXSxzPVtdLGY9LTEsaD10Lmxlbmd0aCxnPWt0KGUpLHA9a3Qocik7KytmPGg7KXUuY2FsbCh0aGlzLGM9dFtmXSxmKT9zLnB1c2goWytnLmNhbGwodGhpcyxjLGYpLCtwLmNhbGwodGhpcyxjLGYpXSk6cy5sZW5ndGgmJihvKCkscz1bXSk7cmV0dXJuIHMubGVuZ3RoJiZvKCksbC5sZW5ndGg/bC5qb2luKCIiKTpudWxsfXZhciBlPUFyLHI9Q3IsdT1BZSxpPWNvLG89aS5rZXksYT0uNztyZXR1cm4gdC54PWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhlPW4sdCk6ZX0sdC55PWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPW4sdCk6cn0sdC5kZWZpbmVkPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh1PW4sdCk6dX0sdC5pbnRlcnBvbGF0ZT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obz0iZnVuY3Rpb24iPT10eXBlb2Ygbj9pPW46KGk9d2wuZ2V0KG4pfHxjbykua2V5LHQpOm99LHQudGVuc2lvbj1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oYT1uLHQpOmF9LHR9ZnVuY3Rpb24gY28obil7cmV0dXJuIG4uam9pbigiTCIpfWZ1bmN0aW9uIGxvKG4pe3JldHVybiBjbyhuKSsiWiJ9ZnVuY3Rpb24gc28obil7Zm9yKHZhciB0PTAsZT1uLmxlbmd0aCxyPW5bMF0sdT1bclswXSwiLCIsclsxXV07Kyt0PGU7KXUucHVzaCgiSCIsKHJbMF0rKHI9blt0XSlbMF0pLzIsIlYiLHJbMV0pO3JldHVybiBlPjEmJnUucHVzaCgiSCIsclswXSksdS5qb2luKCIiKX1mdW5jdGlvbiBmbyhuKXtmb3IodmFyIHQ9MCxlPW4ubGVuZ3RoLHI9blswXSx1PVtyWzBdLCIsIixyWzFdXTsrK3Q8ZTspdS5wdXNoKCJWIiwocj1uW3RdKVsxXSwiSCIsclswXSk7cmV0dXJuIHUuam9pbigiIil9ZnVuY3Rpb24gaG8obil7Zm9yKHZhciB0PTAsZT1uLmxlbmd0aCxyPW5bMF0sdT1bclswXSwiLCIsclsxXV07Kyt0PGU7KXUucHVzaCgiSCIsKHI9blt0XSlbMF0sIlYiLHJbMV0pO3JldHVybiB1LmpvaW4oIiIpfWZ1bmN0aW9uIGdvKG4sdCl7cmV0dXJuIG4ubGVuZ3RoPDQ/Y28obik6blsxXSttbyhuLnNsaWNlKDEsbi5sZW5ndGgtMSkseW8obix0KSl9ZnVuY3Rpb24gcG8obix0KXtyZXR1cm4gbi5sZW5ndGg8Mz9jbyhuKTpuWzBdK21vKChuLnB1c2goblswXSksbikseW8oW25bbi5sZW5ndGgtMl1dLmNvbmNhdChuLFtuWzFdXSksdCkpfWZ1bmN0aW9uIHZvKG4sdCl7cmV0dXJuIG4ubGVuZ3RoPDM/Y28obik6blswXSttbyhuLHlvKG4sdCkpfWZ1bmN0aW9uIG1vKG4sdCl7aWYodC5sZW5ndGg8MXx8bi5sZW5ndGghPXQubGVuZ3RoJiZuLmxlbmd0aCE9dC5sZW5ndGgrMilyZXR1cm4gY28obik7dmFyIGU9bi5sZW5ndGghPXQubGVuZ3RoLHI9IiIsdT1uWzBdLGk9blsxXSxvPXRbMF0sYT1vLGM9MTtpZihlJiYocis9IlEiKyhpWzBdLTIqb1swXS8zKSsiLCIrKGlbMV0tMipvWzFdLzMpKyIsIitpWzBdKyIsIitpWzFdLHU9blsxXSxjPTIpLHQubGVuZ3RoPjEpe2E9dFsxXSxpPW5bY10sYysrLHIrPSJDIisodVswXStvWzBdKSsiLCIrKHVbMV0rb1sxXSkrIiwiKyhpWzBdLWFbMF0pKyIsIisoaVsxXS1hWzFdKSsiLCIraVswXSsiLCIraVsxXTtmb3IodmFyIGw9MjtsPHQubGVuZ3RoO2wrKyxjKyspaT1uW2NdLGE9dFtsXSxyKz0iUyIrKGlbMF0tYVswXSkrIiwiKyhpWzFdLWFbMV0pKyIsIitpWzBdKyIsIitpWzFdfWlmKGUpe3ZhciBzPW5bY107cis9IlEiKyhpWzBdKzIqYVswXS8zKSsiLCIrKGlbMV0rMiphWzFdLzMpKyIsIitzWzBdKyIsIitzWzFdfXJldHVybiByfWZ1bmN0aW9uIHlvKG4sdCl7Zm9yKHZhciBlLHI9W10sdT0oMS10KS8yLGk9blswXSxvPW5bMV0sYT0xLGM9bi5sZW5ndGg7KythPGM7KWU9aSxpPW8sbz1uW2FdLHIucHVzaChbdSoob1swXS1lWzBdKSx1KihvWzFdLWVbMV0pXSk7cmV0dXJuIHJ9ZnVuY3Rpb24geG8obil7aWYobi5sZW5ndGg8MylyZXR1cm4gY28obik7dmFyIHQ9MSxlPW4ubGVuZ3RoLHI9blswXSx1PXJbMF0saT1yWzFdLG89W3UsdSx1LChyPW5bMV0pWzBdXSxhPVtpLGksaSxyWzFdXSxjPVt1LCIsIixpLCJMIix3byhFbCxvKSwiLCIsd28oRWwsYSldO2ZvcihuLnB1c2gobltlLTFdKTsrK3Q8PWU7KXI9blt0XSxvLnNoaWZ0KCksby5wdXNoKHJbMF0pLGEuc2hpZnQoKSxhLnB1c2goclsxXSksU28oYyxvLGEpO3JldHVybiBuLnBvcCgpLGMucHVzaCgiTCIsciksYy5qb2luKCIiKX1mdW5jdGlvbiBNbyhuKXtpZihuLmxlbmd0aDw0KXJldHVybiBjbyhuKTtmb3IodmFyIHQsZT1bXSxyPS0xLHU9bi5sZW5ndGgsaT1bMF0sbz1bMF07KytyPDM7KXQ9bltyXSxpLnB1c2godFswXSksby5wdXNoKHRbMV0pO2ZvcihlLnB1c2god28oRWwsaSkrIiwiK3dvKEVsLG8pKSwtLXI7KytyPHU7KXQ9bltyXSxpLnNoaWZ0KCksaS5wdXNoKHRbMF0pLG8uc2hpZnQoKSxvLnB1c2godFsxXSksU28oZSxpLG8pO3JldHVybiBlLmpvaW4oIiIpfWZ1bmN0aW9uIF9vKG4pe2Zvcih2YXIgdCxlLHI9LTEsdT1uLmxlbmd0aCxpPXUrNCxvPVtdLGE9W107KytyPDQ7KWU9bltyJXVdLG8ucHVzaChlWzBdKSxhLnB1c2goZVsxXSk7Zm9yKHQ9W3dvKEVsLG8pLCIsIix3byhFbCxhKV0sLS1yOysrcjxpOyllPW5bciV1XSxvLnNoaWZ0KCksby5wdXNoKGVbMF0pLGEuc2hpZnQoKSxhLnB1c2goZVsxXSksU28odCxvLGEpO3JldHVybiB0LmpvaW4oIiIpfWZ1bmN0aW9uIGJvKG4sdCl7dmFyIGU9bi5sZW5ndGgtMTtpZihlKWZvcih2YXIgcix1LGk9blswXVswXSxvPW5bMF1bMV0sYT1uW2VdWzBdLWksYz1uW2VdWzFdLW8sbD0tMTsrK2w8PWU7KXI9bltsXSx1PWwvZSxyWzBdPXQqclswXSsoMS10KSooaSt1KmEpLHJbMV09dCpyWzFdKygxLXQpKihvK3UqYyk7cmV0dXJuIHhvKG4pfWZ1bmN0aW9uIHdvKG4sdCl7cmV0dXJuIG5bMF0qdFswXStuWzFdKnRbMV0rblsyXSp0WzJdK25bM10qdFszXX1mdW5jdGlvbiBTbyhuLHQsZSl7bi5wdXNoKCJDIix3byhTbCx0KSwiLCIsd28oU2wsZSksIiwiLHdvKGtsLHQpLCIsIix3byhrbCxlKSwiLCIsd28oRWwsdCksIiwiLHdvKEVsLGUpKX1mdW5jdGlvbiBrbyhuLHQpe3JldHVybih0WzFdLW5bMV0pLyh0WzBdLW5bMF0pfWZ1bmN0aW9uIEVvKG4pe2Zvcih2YXIgdD0wLGU9bi5sZW5ndGgtMSxyPVtdLHU9blswXSxpPW5bMV0sbz1yWzBdPWtvKHUsaSk7Kyt0PGU7KXJbdF09KG8rKG89a28odT1pLGk9blt0KzFdKSkpLzI7cmV0dXJuIHJbdF09byxyfWZ1bmN0aW9uIEFvKG4pe2Zvcih2YXIgdCxlLHIsdSxpPVtdLG89RW8obiksYT0tMSxjPW4ubGVuZ3RoLTE7KythPGM7KXQ9a28oblthXSxuW2ErMV0pLGNhKHQpPE5hP29bYV09b1thKzFdPTA6KGU9b1thXS90LHI9b1thKzFdL3QsdT1lKmUrcipyLHU+OSYmKHU9Myp0L01hdGguc3FydCh1KSxvW2FdPXUqZSxvW2ErMV09dSpyKSk7Zm9yKGE9LTE7KythPD1jOyl1PShuW01hdGgubWluKGMsYSsxKV1bMF0tbltNYXRoLm1heCgwLGEtMSldWzBdKS8oNiooMStvW2FdKm9bYV0pKSxpLnB1c2goW3V8fDAsb1thXSp1fHwwXSk7cmV0dXJuIGl9ZnVuY3Rpb24gQ28obil7cmV0dXJuIG4ubGVuZ3RoPDM/Y28obik6blswXSttbyhuLEFvKG4pKX1mdW5jdGlvbiBObyhuKXtmb3IodmFyIHQsZSxyLHU9LTEsaT1uLmxlbmd0aDsrK3U8aTspdD1uW3VdLGU9dFswXSxyPXRbMV0rX2wsdFswXT1lKk1hdGguY29zKHIpLHRbMV09ZSpNYXRoLnNpbihyKTtyZXR1cm4gbn1mdW5jdGlvbiB6byhuKXtmdW5jdGlvbiB0KHQpe2Z1bmN0aW9uIGMoKXt2LnB1c2goIk0iLGEobihtKSxmKSxzLGwobihkLnJldmVyc2UoKSksZiksIloiKX1mb3IodmFyIGgsZyxwLHY9W10sZD1bXSxtPVtdLHk9LTEseD10Lmxlbmd0aCxNPWt0KGUpLF89a3QodSksYj1lPT09cj9mdW5jdGlvbigpe3JldHVybiBnfTprdChyKSx3PXU9PT1pP2Z1bmN0aW9uKCl7cmV0dXJuIHB9Omt0KGkpOysreTx4OylvLmNhbGwodGhpcyxoPXRbeV0seSk/KGQucHVzaChbZz0rTS5jYWxsKHRoaXMsaCx5KSxwPStfLmNhbGwodGhpcyxoLHkpXSksbS5wdXNoKFsrYi5jYWxsKHRoaXMsaCx5KSwrdy5jYWxsKHRoaXMsaCx5KV0pKTpkLmxlbmd0aCYmKGMoKSxkPVtdLG09W10pO3JldHVybiBkLmxlbmd0aCYmYygpLHYubGVuZ3RoP3Yuam9pbigiIik6bnVsbH12YXIgZT1BcixyPUFyLHU9MCxpPUNyLG89QWUsYT1jbyxjPWEua2V5LGw9YSxzPSJMIixmPS43O3JldHVybiB0Lng9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGU9cj1uLHQpOnJ9LHQueDA9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGU9bix0KTplfSx0LngxPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPW4sdCk6cn0sdC55PWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh1PWk9bix0KTppfSx0LnkwPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh1PW4sdCk6dX0sdC55MT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT1uLHQpOml9LHQuZGVmaW5lZD1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obz1uLHQpOm99LHQuaW50ZXJwb2xhdGU9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGM9ImZ1bmN0aW9uIj09dHlwZW9mIG4/YT1uOihhPXdsLmdldChuKXx8Y28pLmtleSxsPWEucmV2ZXJzZXx8YSxzPWEuY2xvc2VkPyJNIjoiTCIsdCk6Y30sdC50ZW5zaW9uPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhmPW4sdCk6Zn0sdH1mdW5jdGlvbiBMbyhuKXtyZXR1cm4gbi5yYWRpdXN9ZnVuY3Rpb24gVG8obil7cmV0dXJuW24ueCxuLnldfWZ1bmN0aW9uIHFvKG4pe3JldHVybiBmdW5jdGlvbigpe3ZhciB0PW4uYXBwbHkodGhpcyxhcmd1bWVudHMpLGU9dFswXSxyPXRbMV0rX2w7cmV0dXJuW2UqTWF0aC5jb3MociksZSpNYXRoLnNpbihyKV19fWZ1bmN0aW9uIFJvKCl7cmV0dXJuIDY0fWZ1bmN0aW9uIERvKCl7cmV0dXJuImNpcmNsZSJ9ZnVuY3Rpb24gUG8obil7dmFyIHQ9TWF0aC5zcXJ0KG4vRWEpO3JldHVybiJNMCwiK3QrIkEiK3QrIiwiK3QrIiAwIDEsMSAwLCIrLXQrIkEiK3QrIiwiK3QrIiAwIDEsMSAwLCIrdCsiWiJ9ZnVuY3Rpb24gVW8obix0KXtyZXR1cm4gZ2EobixUbCksbi5pZD10LG59ZnVuY3Rpb24gam8obix0LGUscil7dmFyIHU9bi5pZDtyZXR1cm4gRihuLCJmdW5jdGlvbiI9PXR5cGVvZiBlP2Z1bmN0aW9uKG4saSxvKXtuLl9fdHJhbnNpdGlvbl9fW3VdLnR3ZWVuLnNldCh0LHIoZS5jYWxsKG4sbi5fX2RhdGFfXyxpLG8pKSl9OihlPXIoZSksZnVuY3Rpb24obil7bi5fX3RyYW5zaXRpb25fX1t1XS50d2Vlbi5zZXQodCxlKX0pKX1mdW5jdGlvbiBGbyhuKXtyZXR1cm4gbnVsbD09biYmKG49IiIpLGZ1bmN0aW9uKCl7dGhpcy50ZXh0Q29udGVudD1ufX1mdW5jdGlvbiBIbyhuLHQsZSxyKXt2YXIgdT1uLl9fdHJhbnNpdGlvbl9ffHwobi5fX3RyYW5zaXRpb25fXz17YWN0aXZlOjAsY291bnQ6MH0pLGk9dVtlXTtpZighaSl7dmFyIG89ci50aW1lO2k9dVtlXT17dHdlZW46bmV3IGEsdGltZTpvLGVhc2U6ci5lYXNlLGRlbGF5OnIuZGVsYXksZHVyYXRpb246ci5kdXJhdGlvbn0sKyt1LmNvdW50LEJvLnRpbWVyKGZ1bmN0aW9uKHIpe2Z1bmN0aW9uIGEocil7cmV0dXJuIHUuYWN0aXZlPmU/bCgpOih1LmFjdGl2ZT1lLGkuZXZlbnQmJmkuZXZlbnQuc3RhcnQuY2FsbChuLHMsdCksaS50d2Vlbi5mb3JFYWNoKGZ1bmN0aW9uKGUscil7KHI9ci5jYWxsKG4scyx0KSkmJnYucHVzaChyKQp9KSxCby50aW1lcihmdW5jdGlvbigpe3JldHVybiBwLmM9YyhyfHwxKT9BZTpjLDF9LDAsbyksdm9pZCAwKX1mdW5jdGlvbiBjKHIpe2lmKHUuYWN0aXZlIT09ZSlyZXR1cm4gbCgpO2Zvcih2YXIgbz1yL2csYT1mKG8pLGM9di5sZW5ndGg7Yz4wOyl2Wy0tY10uY2FsbChuLGEpO3JldHVybiBvPj0xPyhpLmV2ZW50JiZpLmV2ZW50LmVuZC5jYWxsKG4scyx0KSxsKCkpOnZvaWQgMH1mdW5jdGlvbiBsKCl7cmV0dXJuLS11LmNvdW50P2RlbGV0ZSB1W2VdOmRlbGV0ZSBuLl9fdHJhbnNpdGlvbl9fLDF9dmFyIHM9bi5fX2RhdGFfXyxmPWkuZWFzZSxoPWkuZGVsYXksZz1pLmR1cmF0aW9uLHA9S2Esdj1bXTtyZXR1cm4gcC50PWgrbyxyPj1oP2Eoci1oKToocC5jPWEsdm9pZCAwKX0sMCxvKX19ZnVuY3Rpb24gT28obix0LGUpe24uYXR0cigidHJhbnNmb3JtIixmdW5jdGlvbihuKXt2YXIgcj10KG4pO3JldHVybiJ0cmFuc2xhdGUoIisoaXNGaW5pdGUocik/cjplKG4pKSsiLDApIn0pfWZ1bmN0aW9uIFlvKG4sdCxlKXtuLmF0dHIoInRyYW5zZm9ybSIsZnVuY3Rpb24obil7dmFyIHI9dChuKTtyZXR1cm4idHJhbnNsYXRlKDAsIisoaXNGaW5pdGUocik/cjplKG4pKSsiKSJ9KX1mdW5jdGlvbiBJbyhuKXtyZXR1cm4gbi50b0lTT1N0cmluZygpfWZ1bmN0aW9uIFpvKG4sdCxlKXtmdW5jdGlvbiByKHQpe3JldHVybiBuKHQpfWZ1bmN0aW9uIHUobixlKXt2YXIgcj1uWzFdLW5bMF0sdT1yL2UsaT1Cby5iaXNlY3QoT2wsdSk7cmV0dXJuIGk9PU9sLmxlbmd0aD9bdC55ZWFyLFppKG4ubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBuLzMxNTM2ZTZ9KSxlKVsyXV06aT90W3UvT2xbaS0xXTxPbFtpXS91P2ktMTppXTpbWmwsWmkobixlKVsyXV19cmV0dXJuIHIuaW52ZXJ0PWZ1bmN0aW9uKHQpe3JldHVybiBWbyhuLmludmVydCh0KSl9LHIuZG9tYWluPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhuLmRvbWFpbih0KSxyKTpuLmRvbWFpbigpLm1hcChWbyl9LHIubmljZT1mdW5jdGlvbihuLHQpe2Z1bmN0aW9uIGUoZSl7cmV0dXJuIWlzTmFOKGUpJiYhbi5yYW5nZShlLFZvKCtlKzEpLHQpLmxlbmd0aH12YXIgaT1yLmRvbWFpbigpLG89RGkoaSksYT1udWxsPT1uP3UobywxMCk6Im51bWJlciI9PXR5cGVvZiBuJiZ1KG8sbik7cmV0dXJuIGEmJihuPWFbMF0sdD1hWzFdKSxyLmRvbWFpbihqaShpLHQ+MT97Zmxvb3I6ZnVuY3Rpb24odCl7Zm9yKDtlKHQ9bi5mbG9vcih0KSk7KXQ9Vm8odC0xKTtyZXR1cm4gdH0sY2VpbDpmdW5jdGlvbih0KXtmb3IoO2UodD1uLmNlaWwodCkpOyl0PVZvKCt0KzEpO3JldHVybiB0fX06bikpfSxyLnRpY2tzPWZ1bmN0aW9uKG4sdCl7dmFyIGU9RGkoci5kb21haW4oKSksaT1udWxsPT1uP3UoZSwxMCk6Im51bWJlciI9PXR5cGVvZiBuP3UoZSxuKTohbi5yYW5nZSYmW3tyYW5nZTpufSx0XTtyZXR1cm4gaSYmKG49aVswXSx0PWlbMV0pLG4ucmFuZ2UoZVswXSxWbygrZVsxXSsxKSwxPnQ/MTp0KX0sci50aWNrRm9ybWF0PWZ1bmN0aW9uKCl7cmV0dXJuIGV9LHIuY29weT1mdW5jdGlvbigpe3JldHVybiBabyhuLmNvcHkoKSx0LGUpfSxZaShyLG4pfWZ1bmN0aW9uIFZvKG4pe3JldHVybiBuZXcgRGF0ZShuKX1mdW5jdGlvbiBYbyhuKXtyZXR1cm4gSlNPTi5wYXJzZShuLnJlc3BvbnNlVGV4dCl9ZnVuY3Rpb24gJG8obil7dmFyIHQ9R28uY3JlYXRlUmFuZ2UoKTtyZXR1cm4gdC5zZWxlY3ROb2RlKEdvLmJvZHkpLHQuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KG4ucmVzcG9uc2VUZXh0KX12YXIgQm89e3ZlcnNpb246IjMuNC4xMyJ9O0RhdGUubm93fHwoRGF0ZS5ub3c9ZnVuY3Rpb24oKXtyZXR1cm4rbmV3IERhdGV9KTt2YXIgV289W10uc2xpY2UsSm89ZnVuY3Rpb24obil7cmV0dXJuIFdvLmNhbGwobil9LEdvPWRvY3VtZW50LEtvPUdvLmRvY3VtZW50RWxlbWVudCxRbz13aW5kb3c7dHJ5e0pvKEtvLmNoaWxkTm9kZXMpWzBdLm5vZGVUeXBlfWNhdGNoKG5hKXtKbz1mdW5jdGlvbihuKXtmb3IodmFyIHQ9bi5sZW5ndGgsZT1uZXcgQXJyYXkodCk7dC0tOyllW3RdPW5bdF07cmV0dXJuIGV9fXRyeXtHby5jcmVhdGVFbGVtZW50KCJkaXYiKS5zdHlsZS5zZXRQcm9wZXJ0eSgib3BhY2l0eSIsMCwiIil9Y2F0Y2godGEpe3ZhciBlYT1Rby5FbGVtZW50LnByb3RvdHlwZSxyYT1lYS5zZXRBdHRyaWJ1dGUsdWE9ZWEuc2V0QXR0cmlidXRlTlMsaWE9UW8uQ1NTU3R5bGVEZWNsYXJhdGlvbi5wcm90b3R5cGUsb2E9aWEuc2V0UHJvcGVydHk7ZWEuc2V0QXR0cmlidXRlPWZ1bmN0aW9uKG4sdCl7cmEuY2FsbCh0aGlzLG4sdCsiIil9LGVhLnNldEF0dHJpYnV0ZU5TPWZ1bmN0aW9uKG4sdCxlKXt1YS5jYWxsKHRoaXMsbix0LGUrIiIpfSxpYS5zZXRQcm9wZXJ0eT1mdW5jdGlvbihuLHQsZSl7b2EuY2FsbCh0aGlzLG4sdCsiIixlKX19Qm8uYXNjZW5kaW5nPW4sQm8uZGVzY2VuZGluZz1mdW5jdGlvbihuLHQpe3JldHVybiBuPnQ/LTE6dD5uPzE6dD49bj8wOjAvMH0sQm8ubWluPWZ1bmN0aW9uKG4sdCl7dmFyIGUscix1PS0xLGk9bi5sZW5ndGg7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcig7Kyt1PGkmJiEobnVsbCE9KGU9blt1XSkmJmU+PWUpOyllPXZvaWQgMDtmb3IoOysrdTxpOyludWxsIT0ocj1uW3VdKSYmZT5yJiYoZT1yKX1lbHNle2Zvcig7Kyt1PGkmJiEobnVsbCE9KGU9dC5jYWxsKG4sblt1XSx1KSkmJmU+PWUpOyllPXZvaWQgMDtmb3IoOysrdTxpOyludWxsIT0ocj10LmNhbGwobixuW3VdLHUpKSYmZT5yJiYoZT1yKX1yZXR1cm4gZX0sQm8ubWF4PWZ1bmN0aW9uKG4sdCl7dmFyIGUscix1PS0xLGk9bi5sZW5ndGg7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpe2Zvcig7Kyt1PGkmJiEobnVsbCE9KGU9blt1XSkmJmU+PWUpOyllPXZvaWQgMDtmb3IoOysrdTxpOyludWxsIT0ocj1uW3VdKSYmcj5lJiYoZT1yKX1lbHNle2Zvcig7Kyt1PGkmJiEobnVsbCE9KGU9dC5jYWxsKG4sblt1XSx1KSkmJmU+PWUpOyllPXZvaWQgMDtmb3IoOysrdTxpOyludWxsIT0ocj10LmNhbGwobixuW3VdLHUpKSYmcj5lJiYoZT1yKX1yZXR1cm4gZX0sQm8uZXh0ZW50PWZ1bmN0aW9uKG4sdCl7dmFyIGUscix1LGk9LTEsbz1uLmxlbmd0aDtpZigxPT09YXJndW1lbnRzLmxlbmd0aCl7Zm9yKDsrK2k8byYmIShudWxsIT0oZT11PW5baV0pJiZlPj1lKTspZT11PXZvaWQgMDtmb3IoOysraTxvOyludWxsIT0ocj1uW2ldKSYmKGU+ciYmKGU9cikscj51JiYodT1yKSl9ZWxzZXtmb3IoOysraTxvJiYhKG51bGwhPShlPXU9dC5jYWxsKG4sbltpXSxpKSkmJmU+PWUpOyllPXZvaWQgMDtmb3IoOysraTxvOyludWxsIT0ocj10LmNhbGwobixuW2ldLGkpKSYmKGU+ciYmKGU9cikscj51JiYodT1yKSl9cmV0dXJuW2UsdV19LEJvLnN1bT1mdW5jdGlvbihuLHQpe3ZhciByLHU9MCxpPW4ubGVuZ3RoLG89LTE7aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKDsrK288aTspZShyPStuW29dKSYmKHUrPXIpO2Vsc2UgZm9yKDsrK288aTspZShyPSt0LmNhbGwobixuW29dLG8pKSYmKHUrPXIpO3JldHVybiB1fSxCby5tZWFuPWZ1bmN0aW9uKG4scil7dmFyIHUsaT0wLG89bi5sZW5ndGgsYT0tMSxjPW87aWYoMT09PWFyZ3VtZW50cy5sZW5ndGgpZm9yKDsrK2E8bzspZSh1PXQoblthXSkpP2krPXU6LS1jO2Vsc2UgZm9yKDsrK2E8bzspZSh1PXQoci5jYWxsKG4sblthXSxhKSkpP2krPXU6LS1jO3JldHVybiBjP2kvYzp2b2lkIDB9LEJvLnF1YW50aWxlPWZ1bmN0aW9uKG4sdCl7dmFyIGU9KG4ubGVuZ3RoLTEpKnQrMSxyPU1hdGguZmxvb3IoZSksdT0rbltyLTFdLGk9ZS1yO3JldHVybiBpP3UraSoobltyXS11KTp1fSxCby5tZWRpYW49ZnVuY3Rpb24ocix1KXt2YXIgaSxvPVtdLGE9ci5sZW5ndGgsYz0tMTtpZigxPT09YXJndW1lbnRzLmxlbmd0aClmb3IoOysrYzxhOyllKGk9dChyW2NdKSkmJm8ucHVzaChpKTtlbHNlIGZvcig7KytjPGE7KWUoaT10KHUuY2FsbChyLHJbY10sYykpKSYmby5wdXNoKGkpO3JldHVybiBvLmxlbmd0aD9Cby5xdWFudGlsZShvLnNvcnQobiksLjUpOnZvaWQgMH07dmFyIGFhPXIobik7Qm8uYmlzZWN0TGVmdD1hYS5sZWZ0LEJvLmJpc2VjdD1Cby5iaXNlY3RSaWdodD1hYS5yaWdodCxCby5iaXNlY3Rvcj1mdW5jdGlvbih0KXtyZXR1cm4gcigxPT09dC5sZW5ndGg/ZnVuY3Rpb24oZSxyKXtyZXR1cm4gbih0KGUpLHIpfTp0KX0sQm8uc2h1ZmZsZT1mdW5jdGlvbihuKXtmb3IodmFyIHQsZSxyPW4ubGVuZ3RoO3I7KWU9MHxNYXRoLnJhbmRvbSgpKnItLSx0PW5bcl0sbltyXT1uW2VdLG5bZV09dDtyZXR1cm4gbn0sQm8ucGVybXV0ZT1mdW5jdGlvbihuLHQpe2Zvcih2YXIgZT10Lmxlbmd0aCxyPW5ldyBBcnJheShlKTtlLS07KXJbZV09blt0W2VdXTtyZXR1cm4gcn0sQm8ucGFpcnM9ZnVuY3Rpb24obil7Zm9yKHZhciB0LGU9MCxyPW4ubGVuZ3RoLTEsdT1uWzBdLGk9bmV3IEFycmF5KDA+cj8wOnIpO3I+ZTspaVtlXT1bdD11LHU9blsrK2VdXTtyZXR1cm4gaX0sQm8uemlwPWZ1bmN0aW9uKCl7aWYoIShyPWFyZ3VtZW50cy5sZW5ndGgpKXJldHVybltdO2Zvcih2YXIgbj0tMSx0PUJvLm1pbihhcmd1bWVudHMsdSksZT1uZXcgQXJyYXkodCk7KytuPHQ7KWZvcih2YXIgcixpPS0xLG89ZVtuXT1uZXcgQXJyYXkocik7KytpPHI7KW9baV09YXJndW1lbnRzW2ldW25dO3JldHVybiBlfSxCby50cmFuc3Bvc2U9ZnVuY3Rpb24obil7cmV0dXJuIEJvLnppcC5hcHBseShCbyxuKX0sQm8ua2V5cz1mdW5jdGlvbihuKXt2YXIgdD1bXTtmb3IodmFyIGUgaW4gbil0LnB1c2goZSk7cmV0dXJuIHR9LEJvLnZhbHVlcz1mdW5jdGlvbihuKXt2YXIgdD1bXTtmb3IodmFyIGUgaW4gbil0LnB1c2gobltlXSk7cmV0dXJuIHR9LEJvLmVudHJpZXM9ZnVuY3Rpb24obil7dmFyIHQ9W107Zm9yKHZhciBlIGluIG4pdC5wdXNoKHtrZXk6ZSx2YWx1ZTpuW2VdfSk7cmV0dXJuIHR9LEJvLm1lcmdlPWZ1bmN0aW9uKG4pe2Zvcih2YXIgdCxlLHIsdT1uLmxlbmd0aCxpPS0xLG89MDsrK2k8dTspbys9bltpXS5sZW5ndGg7Zm9yKGU9bmV3IEFycmF5KG8pOy0tdT49MDspZm9yKHI9blt1XSx0PXIubGVuZ3RoOy0tdD49MDspZVstLW9dPXJbdF07cmV0dXJuIGV9O3ZhciBjYT1NYXRoLmFicztCby5yYW5nZT1mdW5jdGlvbihuLHQsZSl7aWYoYXJndW1lbnRzLmxlbmd0aDwzJiYoZT0xLGFyZ3VtZW50cy5sZW5ndGg8MiYmKHQ9bixuPTApKSwxLzA9PT0odC1uKS9lKXRocm93IG5ldyBFcnJvcigiaW5maW5pdGUgcmFuZ2UiKTt2YXIgcix1PVtdLG89aShjYShlKSksYT0tMTtpZihuKj1vLHQqPW8sZSo9bywwPmUpZm9yKDsocj1uK2UqKythKT50Oyl1LnB1c2goci9vKTtlbHNlIGZvcig7KHI9bitlKisrYSk8dDspdS5wdXNoKHIvbyk7cmV0dXJuIHV9LEJvLm1hcD1mdW5jdGlvbihuKXt2YXIgdD1uZXcgYTtpZihuIGluc3RhbmNlb2YgYSluLmZvckVhY2goZnVuY3Rpb24obixlKXt0LnNldChuLGUpfSk7ZWxzZSBmb3IodmFyIGUgaW4gbil0LnNldChlLG5bZV0pO3JldHVybiB0fTt2YXIgbGE9Il9fcHJvdG9fXyIsc2E9Ilx4MDAiO28oYSx7aGFzOnMsZ2V0OmZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLl9bYyhuKV19LHNldDpmdW5jdGlvbihuLHQpe3JldHVybiB0aGlzLl9bYyhuKV09dH0scmVtb3ZlOmYsa2V5czpoLHZhbHVlczpmdW5jdGlvbigpe3ZhciBuPVtdO2Zvcih2YXIgdCBpbiB0aGlzLl8pbi5wdXNoKHRoaXMuX1t0XSk7cmV0dXJuIG59LGVudHJpZXM6ZnVuY3Rpb24oKXt2YXIgbj1bXTtmb3IodmFyIHQgaW4gdGhpcy5fKW4ucHVzaCh7a2V5OmwodCksdmFsdWU6dGhpcy5fW3RdfSk7cmV0dXJuIG59LHNpemU6ZyxlbXB0eTpwLGZvckVhY2g6ZnVuY3Rpb24obil7Zm9yKHZhciB0IGluIHRoaXMuXyluLmNhbGwodGhpcyxsKHQpLHRoaXMuX1t0XSl9fSksQm8ubmVzdD1mdW5jdGlvbigpe2Z1bmN0aW9uIG4odCxvLGMpe2lmKGM+PWkubGVuZ3RoKXJldHVybiByP3IuY2FsbCh1LG8pOmU/by5zb3J0KGUpOm87Zm9yKHZhciBsLHMsZixoLGc9LTEscD1vLmxlbmd0aCx2PWlbYysrXSxkPW5ldyBhOysrZzxwOykoaD1kLmdldChsPXYocz1vW2ddKSkpP2gucHVzaChzKTpkLnNldChsLFtzXSk7cmV0dXJuIHQ/KHM9dCgpLGY9ZnVuY3Rpb24oZSxyKXtzLnNldChlLG4odCxyLGMpKX0pOihzPXt9LGY9ZnVuY3Rpb24oZSxyKXtzW2VdPW4odCxyLGMpfSksZC5mb3JFYWNoKGYpLHN9ZnVuY3Rpb24gdChuLGUpe2lmKGU+PWkubGVuZ3RoKXJldHVybiBuO3ZhciByPVtdLHU9b1tlKytdO3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24obix1KXtyLnB1c2goe2tleTpuLHZhbHVlczp0KHUsZSl9KX0pLHU/ci5zb3J0KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIHUobi5rZXksdC5rZXkpfSk6cn12YXIgZSxyLHU9e30saT1bXSxvPVtdO3JldHVybiB1Lm1hcD1mdW5jdGlvbih0LGUpe3JldHVybiBuKGUsdCwwKX0sdS5lbnRyaWVzPWZ1bmN0aW9uKGUpe3JldHVybiB0KG4oQm8ubWFwLGUsMCksMCl9LHUua2V5PWZ1bmN0aW9uKG4pe3JldHVybiBpLnB1c2gobiksdX0sdS5zb3J0S2V5cz1mdW5jdGlvbihuKXtyZXR1cm4gb1tpLmxlbmd0aC0xXT1uLHV9LHUuc29ydFZhbHVlcz1mdW5jdGlvbihuKXtyZXR1cm4gZT1uLHV9LHUucm9sbHVwPWZ1bmN0aW9uKG4pe3JldHVybiByPW4sdX0sdX0sQm8uc2V0PWZ1bmN0aW9uKG4pe3ZhciB0PW5ldyB2O2lmKG4pZm9yKHZhciBlPTAscj1uLmxlbmd0aDtyPmU7KytlKXQuYWRkKG5bZV0pO3JldHVybiB0fSxvKHYse2hhczpzLGFkZDpmdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5fW2Mobis9IiIpXT0hMCxufSxyZW1vdmU6Zix2YWx1ZXM6aCxzaXplOmcsZW1wdHk6cCxmb3JFYWNoOmZ1bmN0aW9uKG4pe2Zvcih2YXIgdCBpbiB0aGlzLl8pbi5jYWxsKHRoaXMsbCh0KSl9fSksQm8uYmVoYXZpb3I9e30sQm8ucmViaW5kPWZ1bmN0aW9uKG4sdCl7Zm9yKHZhciBlLHI9MSx1PWFyZ3VtZW50cy5sZW5ndGg7KytyPHU7KW5bZT1hcmd1bWVudHNbcl1dPWQobix0LHRbZV0pO3JldHVybiBufTt2YXIgZmE9WyJ3ZWJraXQiLCJtcyIsIm1veiIsIk1veiIsIm8iLCJPIl07Qm8uZGlzcGF0Y2g9ZnVuY3Rpb24oKXtmb3IodmFyIG49bmV3IHgsdD0tMSxlPWFyZ3VtZW50cy5sZW5ndGg7Kyt0PGU7KW5bYXJndW1lbnRzW3RdXT1NKG4pO3JldHVybiBufSx4LnByb3RvdHlwZS5vbj1mdW5jdGlvbihuLHQpe3ZhciBlPW4uaW5kZXhPZigiLiIpLHI9IiI7aWYoZT49MCYmKHI9bi5zbGljZShlKzEpLG49bi5zbGljZSgwLGUpKSxuKXJldHVybiBhcmd1bWVudHMubGVuZ3RoPDI/dGhpc1tuXS5vbihyKTp0aGlzW25dLm9uKHIsdCk7aWYoMj09PWFyZ3VtZW50cy5sZW5ndGgpe2lmKG51bGw9PXQpZm9yKG4gaW4gdGhpcyl0aGlzLmhhc093blByb3BlcnR5KG4pJiZ0aGlzW25dLm9uKHIsbnVsbCk7cmV0dXJuIHRoaXN9fSxCby5ldmVudD1udWxsLEJvLnJlcXVvdGU9ZnVuY3Rpb24obil7cmV0dXJuIG4ucmVwbGFjZShoYSwiXFwkJiIpfTt2YXIgaGE9L1tcXFxeXCRcKlwrXD9cfFxbXF1cKFwpXC5ce1x9XS9nLGdhPXt9Ll9fcHJvdG9fXz9mdW5jdGlvbihuLHQpe24uX19wcm90b19fPXR9OmZ1bmN0aW9uKG4sdCl7Zm9yKHZhciBlIGluIHQpbltlXT10W2VdfSxwYT1mdW5jdGlvbihuLHQpe3JldHVybiB0LnF1ZXJ5U2VsZWN0b3Iobil9LHZhPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIHQucXVlcnlTZWxlY3RvckFsbChuKX0sZGE9S28ubWF0Y2hlc3x8S29bbShLbywibWF0Y2hlc1NlbGVjdG9yIildLG1hPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIGRhLmNhbGwobix0KX07ImZ1bmN0aW9uIj09dHlwZW9mIFNpenpsZSYmKHBhPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIFNpenpsZShuLHQpWzBdfHxudWxsfSx2YT1TaXp6bGUsbWE9U2l6emxlLm1hdGNoZXNTZWxlY3RvciksQm8uc2VsZWN0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIF9hfTt2YXIgeWE9Qm8uc2VsZWN0aW9uLnByb3RvdHlwZT1bXTt5YS5zZWxlY3Q9ZnVuY3Rpb24obil7dmFyIHQsZSxyLHUsaT1bXTtuPWsobik7Zm9yKHZhciBvPS0xLGE9dGhpcy5sZW5ndGg7KytvPGE7KXtpLnB1c2godD1bXSksdC5wYXJlbnROb2RlPShyPXRoaXNbb10pLnBhcmVudE5vZGU7Zm9yKHZhciBjPS0xLGw9ci5sZW5ndGg7KytjPGw7KSh1PXJbY10pPyh0LnB1c2goZT1uLmNhbGwodSx1Ll9fZGF0YV9fLGMsbykpLGUmJiJfX2RhdGFfXyJpbiB1JiYoZS5fX2RhdGFfXz11Ll9fZGF0YV9fKSk6dC5wdXNoKG51bGwpfXJldHVybiBTKGkpfSx5YS5zZWxlY3RBbGw9ZnVuY3Rpb24obil7dmFyIHQsZSxyPVtdO249RShuKTtmb3IodmFyIHU9LTEsaT10aGlzLmxlbmd0aDsrK3U8aTspZm9yKHZhciBvPXRoaXNbdV0sYT0tMSxjPW8ubGVuZ3RoOysrYTxjOykoZT1vW2FdKSYmKHIucHVzaCh0PUpvKG4uY2FsbChlLGUuX19kYXRhX18sYSx1KSkpLHQucGFyZW50Tm9kZT1lKTtyZXR1cm4gUyhyKX07dmFyIHhhPXtzdmc6Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIix4aHRtbDoiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCIseGxpbms6Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiLHhtbDoiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlIix4bWxuczoiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy8ifTtCby5ucz17cHJlZml4OnhhLHF1YWxpZnk6ZnVuY3Rpb24obil7dmFyIHQ9bi5pbmRleE9mKCI6IiksZT1uO3JldHVybiB0Pj0wJiYoZT1uLnNsaWNlKDAsdCksbj1uLnNsaWNlKHQrMSkpLHhhLmhhc093blByb3BlcnR5KGUpP3tzcGFjZTp4YVtlXSxsb2NhbDpufTpufX0seWEuYXR0cj1mdW5jdGlvbihuLHQpe2lmKGFyZ3VtZW50cy5sZW5ndGg8Mil7aWYoInN0cmluZyI9PXR5cGVvZiBuKXt2YXIgZT10aGlzLm5vZGUoKTtyZXR1cm4gbj1Cby5ucy5xdWFsaWZ5KG4pLG4ubG9jYWw/ZS5nZXRBdHRyaWJ1dGVOUyhuLnNwYWNlLG4ubG9jYWwpOmUuZ2V0QXR0cmlidXRlKG4pfWZvcih0IGluIG4pdGhpcy5lYWNoKEEodCxuW3RdKSk7cmV0dXJuIHRoaXN9cmV0dXJuIHRoaXMuZWFjaChBKG4sdCkpfSx5YS5jbGFzc2VkPWZ1bmN0aW9uKG4sdCl7aWYoYXJndW1lbnRzLmxlbmd0aDwyKXtpZigic3RyaW5nIj09dHlwZW9mIG4pe3ZhciBlPXRoaXMubm9kZSgpLHI9KG49eihuKSkubGVuZ3RoLHU9LTE7aWYodD1lLmNsYXNzTGlzdCl7Zm9yKDsrK3U8cjspaWYoIXQuY29udGFpbnMoblt1XSkpcmV0dXJuITF9ZWxzZSBmb3IodD1lLmdldEF0dHJpYnV0ZSgiY2xhc3MiKTsrK3U8cjspaWYoIU4oblt1XSkudGVzdCh0KSlyZXR1cm4hMTtyZXR1cm4hMH1mb3IodCBpbiBuKXRoaXMuZWFjaChMKHQsblt0XSkpO3JldHVybiB0aGlzfXJldHVybiB0aGlzLmVhY2goTChuLHQpKX0seWEuc3R5bGU9ZnVuY3Rpb24obix0LGUpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg7aWYoMz5yKXtpZigic3RyaW5nIiE9dHlwZW9mIG4pezI+ciYmKHQ9IiIpO2ZvcihlIGluIG4pdGhpcy5lYWNoKHEoZSxuW2VdLHQpKTtyZXR1cm4gdGhpc31pZigyPnIpcmV0dXJuIFFvLmdldENvbXB1dGVkU3R5bGUodGhpcy5ub2RlKCksbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuKTtlPSIifXJldHVybiB0aGlzLmVhY2gocShuLHQsZSkpfSx5YS5wcm9wZXJ0eT1mdW5jdGlvbihuLHQpe2lmKGFyZ3VtZW50cy5sZW5ndGg8Mil7aWYoInN0cmluZyI9PXR5cGVvZiBuKXJldHVybiB0aGlzLm5vZGUoKVtuXTtmb3IodCBpbiBuKXRoaXMuZWFjaChSKHQsblt0XSkpO3JldHVybiB0aGlzfXJldHVybiB0aGlzLmVhY2goUihuLHQpKX0seWEudGV4dD1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD90aGlzLmVhY2goImZ1bmN0aW9uIj09dHlwZW9mIG4/ZnVuY3Rpb24oKXt2YXIgdD1uLmFwcGx5KHRoaXMsYXJndW1lbnRzKTt0aGlzLnRleHRDb250ZW50PW51bGw9PXQ/IiI6dH06bnVsbD09bj9mdW5jdGlvbigpe3RoaXMudGV4dENvbnRlbnQ9IiJ9OmZ1bmN0aW9uKCl7dGhpcy50ZXh0Q29udGVudD1ufSk6dGhpcy5ub2RlKCkudGV4dENvbnRlbnR9LHlhLmh0bWw9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/dGhpcy5lYWNoKCJmdW5jdGlvbiI9PXR5cGVvZiBuP2Z1bmN0aW9uKCl7dmFyIHQ9bi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7dGhpcy5pbm5lckhUTUw9bnVsbD09dD8iIjp0fTpudWxsPT1uP2Z1bmN0aW9uKCl7dGhpcy5pbm5lckhUTUw9IiJ9OmZ1bmN0aW9uKCl7dGhpcy5pbm5lckhUTUw9bn0pOnRoaXMubm9kZSgpLmlubmVySFRNTH0seWEuYXBwZW5kPWZ1bmN0aW9uKG4pe3JldHVybiBuPUQobiksdGhpcy5zZWxlY3QoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hcHBlbmRDaGlsZChuLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9KX0seWEuaW5zZXJ0PWZ1bmN0aW9uKG4sdCl7cmV0dXJuIG49RChuKSx0PWsodCksdGhpcy5zZWxlY3QoZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUobi5hcHBseSh0aGlzLGFyZ3VtZW50cyksdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fG51bGwpfSl9LHlhLnJlbW92ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgbj10aGlzLnBhcmVudE5vZGU7biYmbi5yZW1vdmVDaGlsZCh0aGlzKX0pfSx5YS5kYXRhPWZ1bmN0aW9uKG4sdCl7ZnVuY3Rpb24gZShuLGUpe3ZhciByLHUsaSxvPW4ubGVuZ3RoLGY9ZS5sZW5ndGgsaD1NYXRoLm1pbihvLGYpLGc9bmV3IEFycmF5KGYpLHA9bmV3IEFycmF5KGYpLHY9bmV3IEFycmF5KG8pO2lmKHQpe3ZhciBkLG09bmV3IGEseT1uZXcgQXJyYXkobyk7Zm9yKHI9LTE7KytyPG87KW0uaGFzKGQ9dC5jYWxsKHU9bltyXSx1Ll9fZGF0YV9fLHIpKT92W3JdPXU6bS5zZXQoZCx1KSx5W3JdPWQ7Zm9yKHI9LTE7KytyPGY7KSh1PW0uZ2V0KGQ9dC5jYWxsKGUsaT1lW3JdLHIpKSk/dSE9PSEwJiYoZ1tyXT11LHUuX19kYXRhX189aSk6cFtyXT1QKGkpLG0uc2V0KGQsITApO2ZvcihyPS0xOysrcjxvOyltLmdldCh5W3JdKSE9PSEwJiYodltyXT1uW3JdKX1lbHNle2ZvcihyPS0xOysrcjxoOyl1PW5bcl0saT1lW3JdLHU/KHUuX19kYXRhX189aSxnW3JdPXUpOnBbcl09UChpKTtmb3IoO2Y+cjsrK3IpcFtyXT1QKGVbcl0pO2Zvcig7bz5yOysrcil2W3JdPW5bcl19cC51cGRhdGU9ZyxwLnBhcmVudE5vZGU9Zy5wYXJlbnROb2RlPXYucGFyZW50Tm9kZT1uLnBhcmVudE5vZGUsYy5wdXNoKHApLGwucHVzaChnKSxzLnB1c2godil9dmFyIHIsdSxpPS0xLG89dGhpcy5sZW5ndGg7aWYoIWFyZ3VtZW50cy5sZW5ndGgpe2ZvcihuPW5ldyBBcnJheShvPShyPXRoaXNbMF0pLmxlbmd0aCk7KytpPG87KSh1PXJbaV0pJiYobltpXT11Ll9fZGF0YV9fKTtyZXR1cm4gbn12YXIgYz1IKFtdKSxsPVMoW10pLHM9UyhbXSk7aWYoImZ1bmN0aW9uIj09dHlwZW9mIG4pZm9yKDsrK2k8bzspZShyPXRoaXNbaV0sbi5jYWxsKHIsci5wYXJlbnROb2RlLl9fZGF0YV9fLGkpKTtlbHNlIGZvcig7KytpPG87KWUocj10aGlzW2ldLG4pO3JldHVybiBsLmVudGVyPWZ1bmN0aW9uKCl7cmV0dXJuIGN9LGwuZXhpdD1mdW5jdGlvbigpe3JldHVybiBzfSxsfSx5YS5kYXR1bT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD90aGlzLnByb3BlcnR5KCJfX2RhdGFfXyIsbik6dGhpcy5wcm9wZXJ0eSgiX19kYXRhX18iKX0seWEuZmlsdGVyPWZ1bmN0aW9uKG4pe3ZhciB0LGUscix1PVtdOyJmdW5jdGlvbiIhPXR5cGVvZiBuJiYobj1VKG4pKTtmb3IodmFyIGk9MCxvPXRoaXMubGVuZ3RoO28+aTtpKyspe3UucHVzaCh0PVtdKSx0LnBhcmVudE5vZGU9KGU9dGhpc1tpXSkucGFyZW50Tm9kZTtmb3IodmFyIGE9MCxjPWUubGVuZ3RoO2M+YTthKyspKHI9ZVthXSkmJm4uY2FsbChyLHIuX19kYXRhX18sYSxpKSYmdC5wdXNoKHIpfXJldHVybiBTKHUpfSx5YS5vcmRlcj1mdW5jdGlvbigpe2Zvcih2YXIgbj0tMSx0PXRoaXMubGVuZ3RoOysrbjx0Oylmb3IodmFyIGUscj10aGlzW25dLHU9ci5sZW5ndGgtMSxpPXJbdV07LS11Pj0wOykoZT1yW3VdKSYmKGkmJmkhPT1lLm5leHRTaWJsaW5nJiZpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGUsaSksaT1lKTtyZXR1cm4gdGhpc30seWEuc29ydD1mdW5jdGlvbihuKXtuPWouYXBwbHkodGhpcyxhcmd1bWVudHMpO2Zvcih2YXIgdD0tMSxlPXRoaXMubGVuZ3RoOysrdDxlOyl0aGlzW3RdLnNvcnQobik7cmV0dXJuIHRoaXMub3JkZXIoKX0seWEuZWFjaD1mdW5jdGlvbihuKXtyZXR1cm4gRih0aGlzLGZ1bmN0aW9uKHQsZSxyKXtuLmNhbGwodCx0Ll9fZGF0YV9fLGUscil9KX0seWEuY2FsbD1mdW5jdGlvbihuKXt2YXIgdD1Kbyhhcmd1bWVudHMpO3JldHVybiBuLmFwcGx5KHRbMF09dGhpcyx0KSx0aGlzfSx5YS5lbXB0eT1mdW5jdGlvbigpe3JldHVybiF0aGlzLm5vZGUoKX0seWEubm9kZT1mdW5jdGlvbigpe2Zvcih2YXIgbj0wLHQ9dGhpcy5sZW5ndGg7dD5uO24rKylmb3IodmFyIGU9dGhpc1tuXSxyPTAsdT1lLmxlbmd0aDt1PnI7cisrKXt2YXIgaT1lW3JdO2lmKGkpcmV0dXJuIGl9cmV0dXJuIG51bGx9LHlhLnNpemU9ZnVuY3Rpb24oKXt2YXIgbj0wO3JldHVybiBGKHRoaXMsZnVuY3Rpb24oKXsrK259KSxufTt2YXIgTWE9W107Qm8uc2VsZWN0aW9uLmVudGVyPUgsQm8uc2VsZWN0aW9uLmVudGVyLnByb3RvdHlwZT1NYSxNYS5hcHBlbmQ9eWEuYXBwZW5kLE1hLmVtcHR5PXlhLmVtcHR5LE1hLm5vZGU9eWEubm9kZSxNYS5jYWxsPXlhLmNhbGwsTWEuc2l6ZT15YS5zaXplLE1hLnNlbGVjdD1mdW5jdGlvbihuKXtmb3IodmFyIHQsZSxyLHUsaSxvPVtdLGE9LTEsYz10aGlzLmxlbmd0aDsrK2E8Yzspe3I9KHU9dGhpc1thXSkudXBkYXRlLG8ucHVzaCh0PVtdKSx0LnBhcmVudE5vZGU9dS5wYXJlbnROb2RlO2Zvcih2YXIgbD0tMSxzPXUubGVuZ3RoOysrbDxzOykoaT11W2xdKT8odC5wdXNoKHJbbF09ZT1uLmNhbGwodS5wYXJlbnROb2RlLGkuX19kYXRhX18sbCxhKSksZS5fX2RhdGFfXz1pLl9fZGF0YV9fKTp0LnB1c2gobnVsbCl9cmV0dXJuIFMobyl9LE1hLmluc2VydD1mdW5jdGlvbihuLHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDImJih0PU8odGhpcykpLHlhLmluc2VydC5jYWxsKHRoaXMsbix0KX0seWEudHJhbnNpdGlvbj1mdW5jdGlvbigpe2Zvcih2YXIgbix0LGU9Q2x8fCsrcWwscj1bXSx1PU5sfHx7dGltZTpEYXRlLm5vdygpLGVhc2U6d3UsZGVsYXk6MCxkdXJhdGlvbjoyNTB9LGk9LTEsbz10aGlzLmxlbmd0aDsrK2k8bzspe3IucHVzaChuPVtdKTtmb3IodmFyIGE9dGhpc1tpXSxjPS0xLGw9YS5sZW5ndGg7KytjPGw7KSh0PWFbY10pJiZIbyh0LGMsZSx1KSxuLnB1c2godCl9cmV0dXJuIFVvKHIsZSl9LHlhLmludGVycnVwdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVhY2goWSl9LEJvLnNlbGVjdD1mdW5jdGlvbihuKXt2YXIgdD1bInN0cmluZyI9PXR5cGVvZiBuP3BhKG4sR28pOm5dO3JldHVybiB0LnBhcmVudE5vZGU9S28sUyhbdF0pfSxCby5zZWxlY3RBbGw9ZnVuY3Rpb24obil7dmFyIHQ9Sm8oInN0cmluZyI9PXR5cGVvZiBuP3ZhKG4sR28pOm4pO3JldHVybiB0LnBhcmVudE5vZGU9S28sUyhbdF0pfTt2YXIgX2E9Qm8uc2VsZWN0KEtvKTt5YS5vbj1mdW5jdGlvbihuLHQsZSl7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDtpZigzPnIpe2lmKCJzdHJpbmciIT10eXBlb2Ygbil7Mj5yJiYodD0hMSk7Zm9yKGUgaW4gbil0aGlzLmVhY2goSShlLG5bZV0sdCkpO3JldHVybiB0aGlzfWlmKDI+cilyZXR1cm4ocj10aGlzLm5vZGUoKVsiX19vbiIrbl0pJiZyLl87ZT0hMX1yZXR1cm4gdGhpcy5lYWNoKEkobix0LGUpKX07dmFyIGJhPUJvLm1hcCh7bW91c2VlbnRlcjoibW91c2VvdmVyIixtb3VzZWxlYXZlOiJtb3VzZW91dCJ9KTtiYS5mb3JFYWNoKGZ1bmN0aW9uKG4peyJvbiIrbiBpbiBHbyYmYmEucmVtb3ZlKG4pfSk7dmFyIHdhPSJvbnNlbGVjdHN0YXJ0ImluIEdvP251bGw6bShLby5zdHlsZSwidXNlclNlbGVjdCIpLFNhPTA7Qm8ubW91c2U9ZnVuY3Rpb24obil7cmV0dXJuICQobixiKCkpfTt2YXIga2E9L1dlYktpdC8udGVzdChRby5uYXZpZ2F0b3IudXNlckFnZW50KT8tMTowO0JvLnRvdWNoPWZ1bmN0aW9uKG4sdCxlKXtpZihhcmd1bWVudHMubGVuZ3RoPDMmJihlPXQsdD1iKCkuY2hhbmdlZFRvdWNoZXMpLHQpZm9yKHZhciByLHU9MCxpPXQubGVuZ3RoO2k+dTsrK3UpaWYoKHI9dFt1XSkuaWRlbnRpZmllcj09PWUpcmV0dXJuICQobixyKX0sQm8uYmVoYXZpb3IuZHJhZz1mdW5jdGlvbigpe2Z1bmN0aW9uIG4oKXt0aGlzLm9uKCJtb3VzZWRvd24uZHJhZyIsdSkub24oInRvdWNoc3RhcnQuZHJhZyIsaSl9ZnVuY3Rpb24gdChuLHQsdSxpLG8pe3JldHVybiBmdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt2YXIgbixlLHI9dChoLHYpO3ImJihuPXJbMF0teFswXSxlPXJbMV0teFsxXSxwfD1ufGUseD1yLGcoe3R5cGU6ImRyYWciLHg6clswXStsWzBdLHk6clsxXStsWzFdLGR4Om4sZHk6ZX0pKX1mdW5jdGlvbiBjKCl7dChoLHYpJiYobS5vbihpK2QsbnVsbCkub24obytkLG51bGwpLHkocCYmQm8uZXZlbnQudGFyZ2V0PT09ZiksZyh7dHlwZToiZHJhZ2VuZCJ9KSl9dmFyIGwscz10aGlzLGY9Qm8uZXZlbnQudGFyZ2V0LGg9cy5wYXJlbnROb2RlLGc9ZS5vZihzLGFyZ3VtZW50cykscD0wLHY9bigpLGQ9Ii5kcmFnIisobnVsbD09dj8iIjoiLSIrdiksbT1Cby5zZWxlY3QodSgpKS5vbihpK2QsYSkub24obytkLGMpLHk9WCgpLHg9dChoLHYpO3I/KGw9ci5hcHBseShzLGFyZ3VtZW50cyksbD1bbC54LXhbMF0sbC55LXhbMV1dKTpsPVswLDBdLGcoe3R5cGU6ImRyYWdzdGFydCJ9KX19dmFyIGU9dyhuLCJkcmFnIiwiZHJhZ3N0YXJ0IiwiZHJhZ2VuZCIpLHI9bnVsbCx1PXQoeSxCby5tb3VzZSxKLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiksaT10KEIsQm8udG91Y2gsVywidG91Y2htb3ZlIiwidG91Y2hlbmQiKTtyZXR1cm4gbi5vcmlnaW49ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHI9dCxuKTpyfSxCby5yZWJpbmQobixlLCJvbiIpfSxCby50b3VjaGVzPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8MiYmKHQ9YigpLnRvdWNoZXMpLHQ/Sm8odCkubWFwKGZ1bmN0aW9uKHQpe3ZhciBlPSQobix0KTtyZXR1cm4gZS5pZGVudGlmaWVyPXQuaWRlbnRpZmllcixlfSk6W119O3ZhciBFYT1NYXRoLlBJLEFhPTIqRWEsQ2E9RWEvMixOYT0xZS02LHphPU5hKk5hLExhPUVhLzE4MCxUYT0xODAvRWEscWE9TWF0aC5TUVJUMixSYT0yLERhPTQ7Qm8uaW50ZXJwb2xhdGVab29tPWZ1bmN0aW9uKG4sdCl7ZnVuY3Rpb24gZShuKXt2YXIgdD1uKnk7aWYobSl7dmFyIGU9ZXQodiksbz1pLyhSYSpoKSooZSpydChxYSp0K3YpLXR0KHYpKTtyZXR1cm5bcitvKmwsdStvKnMsaSplL2V0KHFhKnQrdildfXJldHVybltyK24qbCx1K24qcyxpKk1hdGguZXhwKHFhKnQpXX12YXIgcj1uWzBdLHU9blsxXSxpPW5bMl0sbz10WzBdLGE9dFsxXSxjPXRbMl0sbD1vLXIscz1hLXUsZj1sKmwrcypzLGg9TWF0aC5zcXJ0KGYpLGc9KGMqYy1pKmkrRGEqZikvKDIqaSpSYSpoKSxwPShjKmMtaSppLURhKmYpLygyKmMqUmEqaCksdj1NYXRoLmxvZyhNYXRoLnNxcnQoZypnKzEpLWcpLGQ9TWF0aC5sb2coTWF0aC5zcXJ0KHAqcCsxKS1wKSxtPWQtdix5PShtfHxNYXRoLmxvZyhjL2kpKS9xYTtyZXR1cm4gZS5kdXJhdGlvbj0xZTMqeSxlfSxCby5iZWhhdmlvci56b29tPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuKXtuLm9uKEEsbCkub24oamErIi56b29tIixmKS5vbigiZGJsY2xpY2suem9vbSIsaCkub24oeixzKX1mdW5jdGlvbiB0KG4pe3JldHVyblsoblswXS1TLngpL1MuaywoblsxXS1TLnkpL1Mua119ZnVuY3Rpb24gZShuKXtyZXR1cm5bblswXSpTLmsrUy54LG5bMV0qUy5rK1MueV19ZnVuY3Rpb24gcihuKXtTLms9TWF0aC5tYXgoRVswXSxNYXRoLm1pbihFWzFdLG4pKX1mdW5jdGlvbiB1KG4sdCl7dD1lKHQpLFMueCs9blswXS10WzBdLFMueSs9blsxXS10WzFdfWZ1bmN0aW9uIGkoKXt4JiZ4LmRvbWFpbih5LnJhbmdlKCkubWFwKGZ1bmN0aW9uKG4pe3JldHVybihuLVMueCkvUy5rfSkubWFwKHkuaW52ZXJ0KSksYiYmYi5kb21haW4oTS5yYW5nZSgpLm1hcChmdW5jdGlvbihuKXtyZXR1cm4obi1TLnkpL1Mua30pLm1hcChNLmludmVydCkpfWZ1bmN0aW9uIG8obil7bih7dHlwZToiem9vbXN0YXJ0In0pfWZ1bmN0aW9uIGEobil7aSgpLG4oe3R5cGU6Inpvb20iLHNjYWxlOlMuayx0cmFuc2xhdGU6W1MueCxTLnldfSl9ZnVuY3Rpb24gYyhuKXtuKHt0eXBlOiJ6b29tZW5kIn0pfWZ1bmN0aW9uIGwoKXtmdW5jdGlvbiBuKCl7cz0xLHUoQm8ubW91c2UociksaCksYShsKX1mdW5jdGlvbiBlKCl7Zi5vbihDLG51bGwpLm9uKE4sbnVsbCksZyhzJiZCby5ldmVudC50YXJnZXQ9PT1pKSxjKGwpfXZhciByPXRoaXMsaT1Cby5ldmVudC50YXJnZXQsbD1MLm9mKHIsYXJndW1lbnRzKSxzPTAsZj1Cby5zZWxlY3QoUW8pLm9uKEMsbikub24oTixlKSxoPXQoQm8ubW91c2UocikpLGc9WCgpO1kuY2FsbChyKSxvKGwpfWZ1bmN0aW9uIHMoKXtmdW5jdGlvbiBuKCl7dmFyIG49Qm8udG91Y2hlcyhnKTtyZXR1cm4gaD1TLmssbi5mb3JFYWNoKGZ1bmN0aW9uKG4pe24uaWRlbnRpZmllciBpbiB2JiYodltuLmlkZW50aWZpZXJdPXQobikpfSksbn1mdW5jdGlvbiBlKCl7dmFyIHQ9Qm8uZXZlbnQudGFyZ2V0O0JvLnNlbGVjdCh0KS5vbih4LGkpLm9uKE0sZiksYi5wdXNoKHQpO2Zvcih2YXIgZT1Cby5ldmVudC5jaGFuZ2VkVG91Y2hlcyxvPTAsYz1lLmxlbmd0aDtjPm87KytvKXZbZVtvXS5pZGVudGlmaWVyXT1udWxsO3ZhciBsPW4oKSxzPURhdGUubm93KCk7aWYoMT09PWwubGVuZ3RoKXtpZig1MDA+cy1tKXt2YXIgaD1sWzBdLGc9dltoLmlkZW50aWZpZXJdO3IoMipTLmspLHUoaCxnKSxfKCksYShwKX1tPXN9ZWxzZSBpZihsLmxlbmd0aD4xKXt2YXIgaD1sWzBdLHk9bFsxXSx3PWhbMF0teVswXSxrPWhbMV0teVsxXTtkPXcqdytrKmt9fWZ1bmN0aW9uIGkoKXtmb3IodmFyIG4sdCxlLGksbz1Cby50b3VjaGVzKGcpLGM9MCxsPW8ubGVuZ3RoO2w+YzsrK2MsaT1udWxsKWlmKGU9b1tjXSxpPXZbZS5pZGVudGlmaWVyXSl7aWYodClicmVhaztuPWUsdD1pfWlmKGkpe3ZhciBzPShzPWVbMF0tblswXSkqcysocz1lWzFdLW5bMV0pKnMsZj1kJiZNYXRoLnNxcnQocy9kKTtuPVsoblswXStlWzBdKS8yLChuWzFdK2VbMV0pLzJdLHQ9Wyh0WzBdK2lbMF0pLzIsKHRbMV0raVsxXSkvMl0scihmKmgpfW09bnVsbCx1KG4sdCksYShwKX1mdW5jdGlvbiBmKCl7aWYoQm8uZXZlbnQudG91Y2hlcy5sZW5ndGgpe2Zvcih2YXIgdD1Cby5ldmVudC5jaGFuZ2VkVG91Y2hlcyxlPTAscj10Lmxlbmd0aDtyPmU7KytlKWRlbGV0ZSB2W3RbZV0uaWRlbnRpZmllcl07Zm9yKHZhciB1IGluIHYpcmV0dXJuIHZvaWQgbigpfUJvLnNlbGVjdEFsbChiKS5vbih5LG51bGwpLHcub24oQSxsKS5vbih6LHMpLGsoKSxjKHApfXZhciBoLGc9dGhpcyxwPUwub2YoZyxhcmd1bWVudHMpLHY9e30sZD0wLHk9Ii56b29tLSIrQm8uZXZlbnQuY2hhbmdlZFRvdWNoZXNbMF0uaWRlbnRpZmllcix4PSJ0b3VjaG1vdmUiK3ksTT0idG91Y2hlbmQiK3ksYj1bXSx3PUJvLnNlbGVjdChnKSxrPVgoKTtZLmNhbGwoZyksZSgpLG8ocCksdy5vbihBLG51bGwpLm9uKHosZSl9ZnVuY3Rpb24gZigpe3ZhciBuPUwub2YodGhpcyxhcmd1bWVudHMpO2Q/Y2xlYXJUaW1lb3V0KGQpOihnPXQocD12fHxCby5tb3VzZSh0aGlzKSksWS5jYWxsKHRoaXMpLG8obikpLGQ9c2V0VGltZW91dChmdW5jdGlvbigpe2Q9bnVsbCxjKG4pfSw1MCksXygpLHIoTWF0aC5wb3coMiwuMDAyKlBhKCkpKlMuayksdShwLGcpLGEobil9ZnVuY3Rpb24gaCgpe3ZhciBuPUwub2YodGhpcyxhcmd1bWVudHMpLGU9Qm8ubW91c2UodGhpcyksaT10KGUpLGw9TWF0aC5sb2coUy5rKS9NYXRoLkxOMjtvKG4pLHIoTWF0aC5wb3coMixCby5ldmVudC5zaGlmdEtleT9NYXRoLmNlaWwobCktMTpNYXRoLmZsb29yKGwpKzEpKSx1KGUsaSksYShuKSxjKG4pfXZhciBnLHAsdixkLG0seSx4LE0sYixTPXt4OjAseTowLGs6MX0saz1bOTYwLDUwMF0sRT1VYSxBPSJtb3VzZWRvd24uem9vbSIsQz0ibW91c2Vtb3ZlLnpvb20iLE49Im1vdXNldXAuem9vbSIsej0idG91Y2hzdGFydC56b29tIixMPXcobiwiem9vbXN0YXJ0Iiwiem9vbSIsInpvb21lbmQiKTtyZXR1cm4gbi5ldmVudD1mdW5jdGlvbihuKXtuLmVhY2goZnVuY3Rpb24oKXt2YXIgbj1MLm9mKHRoaXMsYXJndW1lbnRzKSx0PVM7Q2w/Qm8uc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5lYWNoKCJzdGFydC56b29tIixmdW5jdGlvbigpe1M9dGhpcy5fX2NoYXJ0X198fHt4OjAseTowLGs6MX0sbyhuKX0pLnR3ZWVuKCJ6b29tOnpvb20iLGZ1bmN0aW9uKCl7dmFyIGU9a1swXSxyPWtbMV0sdT1lLzIsaT1yLzIsbz1Cby5pbnRlcnBvbGF0ZVpvb20oWyh1LVMueCkvUy5rLChpLVMueSkvUy5rLGUvUy5rXSxbKHUtdC54KS90LmssKGktdC55KS90LmssZS90LmtdKTtyZXR1cm4gZnVuY3Rpb24odCl7dmFyIHI9byh0KSxjPWUvclsyXTt0aGlzLl9fY2hhcnRfXz1TPXt4OnUtclswXSpjLHk6aS1yWzFdKmMsazpjfSxhKG4pfX0pLmVhY2goImVuZC56b29tIixmdW5jdGlvbigpe2Mobil9KToodGhpcy5fX2NoYXJ0X189UyxvKG4pLGEobiksYyhuKSl9KX0sbi50cmFuc2xhdGU9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KFM9e3g6K3RbMF0seTordFsxXSxrOlMua30saSgpLG4pOltTLngsUy55XX0sbi5zY2FsZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oUz17eDpTLngseTpTLnksazordH0saSgpLG4pOlMua30sbi5zY2FsZUV4dGVudD1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oRT1udWxsPT10P1VhOlsrdFswXSwrdFsxXV0sbik6RX0sbi5jZW50ZXI9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHY9dCYmWyt0WzBdLCt0WzFdXSxuKTp2fSxuLnNpemU9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGs9dCYmWyt0WzBdLCt0WzFdXSxuKTprfSxuLng9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHg9dCx5PXQuY29weSgpLFM9e3g6MCx5OjAsazoxfSxuKTp4fSxuLnk9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGI9dCxNPXQuY29weSgpLFM9e3g6MCx5OjAsazoxfSxuKTpifSxCby5yZWJpbmQobixMLCJvbiIpfTt2YXIgUGEsVWE9WzAsMS8wXSxqYT0ib253aGVlbCJpbiBHbz8oUGE9ZnVuY3Rpb24oKXtyZXR1cm4tQm8uZXZlbnQuZGVsdGFZKihCby5ldmVudC5kZWx0YU1vZGU/MTIwOjEpfSwid2hlZWwiKToib25tb3VzZXdoZWVsImluIEdvPyhQYT1mdW5jdGlvbigpe3JldHVybiBCby5ldmVudC53aGVlbERlbHRhfSwibW91c2V3aGVlbCIpOihQYT1mdW5jdGlvbigpe3JldHVybi1Cby5ldmVudC5kZXRhaWx9LCJNb3pNb3VzZVBpeGVsU2Nyb2xsIik7Qm8uY29sb3I9aXQsaXQucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMucmdiKCkrIiJ9LEJvLmhzbD1vdDt2YXIgRmE9b3QucHJvdG90eXBlPW5ldyBpdDtGYS5icmlnaHRlcj1mdW5jdGlvbihuKXtyZXR1cm4gbj1NYXRoLnBvdyguNyxhcmd1bWVudHMubGVuZ3RoP246MSksbmV3IG90KHRoaXMuaCx0aGlzLnMsdGhpcy5sL24pfSxGYS5kYXJrZXI9ZnVuY3Rpb24obil7cmV0dXJuIG49TWF0aC5wb3coLjcsYXJndW1lbnRzLmxlbmd0aD9uOjEpLG5ldyBvdCh0aGlzLmgsdGhpcy5zLG4qdGhpcy5sKX0sRmEucmdiPWZ1bmN0aW9uKCl7cmV0dXJuIGF0KHRoaXMuaCx0aGlzLnMsdGhpcy5sKX0sQm8uaGNsPWN0O3ZhciBIYT1jdC5wcm90b3R5cGU9bmV3IGl0O0hhLmJyaWdodGVyPWZ1bmN0aW9uKG4pe3JldHVybiBuZXcgY3QodGhpcy5oLHRoaXMuYyxNYXRoLm1pbigxMDAsdGhpcy5sK09hKihhcmd1bWVudHMubGVuZ3RoP246MSkpKX0sSGEuZGFya2VyPWZ1bmN0aW9uKG4pe3JldHVybiBuZXcgY3QodGhpcy5oLHRoaXMuYyxNYXRoLm1heCgwLHRoaXMubC1PYSooYXJndW1lbnRzLmxlbmd0aD9uOjEpKSl9LEhhLnJnYj1mdW5jdGlvbigpe3JldHVybiBsdCh0aGlzLmgsdGhpcy5jLHRoaXMubCkucmdiKCl9LEJvLmxhYj1zdDt2YXIgT2E9MTgsWWE9Ljk1MDQ3LElhPTEsWmE9MS4wODg4MyxWYT1zdC5wcm90b3R5cGU9bmV3IGl0O1ZhLmJyaWdodGVyPWZ1bmN0aW9uKG4pe3JldHVybiBuZXcgc3QoTWF0aC5taW4oMTAwLHRoaXMubCtPYSooYXJndW1lbnRzLmxlbmd0aD9uOjEpKSx0aGlzLmEsdGhpcy5iKX0sVmEuZGFya2VyPWZ1bmN0aW9uKG4pe3JldHVybiBuZXcgc3QoTWF0aC5tYXgoMCx0aGlzLmwtT2EqKGFyZ3VtZW50cy5sZW5ndGg/bjoxKSksdGhpcy5hLHRoaXMuYil9LFZhLnJnYj1mdW5jdGlvbigpe3JldHVybiBmdCh0aGlzLmwsdGhpcy5hLHRoaXMuYil9LEJvLnJnYj1kdDt2YXIgWGE9ZHQucHJvdG90eXBlPW5ldyBpdDtYYS5icmlnaHRlcj1mdW5jdGlvbihuKXtuPU1hdGgucG93KC43LGFyZ3VtZW50cy5sZW5ndGg/bjoxKTt2YXIgdD10aGlzLnIsZT10aGlzLmcscj10aGlzLmIsdT0zMDtyZXR1cm4gdHx8ZXx8cj8odCYmdT50JiYodD11KSxlJiZ1PmUmJihlPXUpLHImJnU+ciYmKHI9dSksbmV3IGR0KE1hdGgubWluKDI1NSx0L24pLE1hdGgubWluKDI1NSxlL24pLE1hdGgubWluKDI1NSxyL24pKSk6bmV3IGR0KHUsdSx1KX0sWGEuZGFya2VyPWZ1bmN0aW9uKG4pe3JldHVybiBuPU1hdGgucG93KC43LGFyZ3VtZW50cy5sZW5ndGg/bjoxKSxuZXcgZHQobip0aGlzLnIsbip0aGlzLmcsbip0aGlzLmIpfSxYYS5oc2w9ZnVuY3Rpb24oKXtyZXR1cm4gX3QodGhpcy5yLHRoaXMuZyx0aGlzLmIpfSxYYS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVybiIjIit4dCh0aGlzLnIpK3h0KHRoaXMuZykreHQodGhpcy5iKX07dmFyICRhPUJvLm1hcCh7YWxpY2VibHVlOjE1NzkyMzgzLGFudGlxdWV3aGl0ZToxNjQ0NDM3NSxhcXVhOjY1NTM1LGFxdWFtYXJpbmU6ODM4ODU2NCxhenVyZToxNTc5NDE3NSxiZWlnZToxNjExOTI2MCxiaXNxdWU6MTY3NzAyNDQsYmxhY2s6MCxibGFuY2hlZGFsbW9uZDoxNjc3MjA0NSxibHVlOjI1NSxibHVldmlvbGV0OjkwNTUyMDIsYnJvd246MTA4MjQyMzQsYnVybHl3b29kOjE0NTk2MjMxLGNhZGV0Ymx1ZTo2MjY2NTI4LGNoYXJ0cmV1c2U6ODM4ODM1MixjaG9jb2xhdGU6MTM3ODk0NzAsY29yYWw6MTY3NDQyNzIsY29ybmZsb3dlcmJsdWU6NjU5MTk4MSxjb3Juc2lsazoxNjc3NTM4OCxjcmltc29uOjE0NDIzMTAwLGN5YW46NjU1MzUsZGFya2JsdWU6MTM5LGRhcmtjeWFuOjM1NzIzLGRhcmtnb2xkZW5yb2Q6MTIwOTI5MzksZGFya2dyYXk6MTExMTkwMTcsZGFya2dyZWVuOjI1NjAwLGRhcmtncmV5OjExMTE5MDE3LGRhcmtraGFraToxMjQzMzI1OSxkYXJrbWFnZW50YTo5MTA5NjQzLGRhcmtvbGl2ZWdyZWVuOjU1OTc5OTksZGFya29yYW5nZToxNjc0NzUyMCxkYXJrb3JjaGlkOjEwMDQwMDEyLGRhcmtyZWQ6OTEwOTUwNCxkYXJrc2FsbW9uOjE1MzA4NDEwLGRhcmtzZWFncmVlbjo5NDE5OTE5LGRhcmtzbGF0ZWJsdWU6NDczNDM0NyxkYXJrc2xhdGVncmF5OjMxMDA0OTUsZGFya3NsYXRlZ3JleTozMTAwNDk1LGRhcmt0dXJxdW9pc2U6NTI5NDUsZGFya3Zpb2xldDo5Njk5NTM5LGRlZXBwaW5rOjE2NzE2OTQ3LGRlZXBza3libHVlOjQ5MTUxLGRpbWdyYXk6NjkwODI2NSxkaW1ncmV5OjY5MDgyNjUsZG9kZ2VyYmx1ZToyMDAzMTk5LGZpcmVicmljazoxMTY3NDE0NixmbG9yYWx3aGl0ZToxNjc3NTkyMCxmb3Jlc3RncmVlbjoyMjYzODQyLGZ1Y2hzaWE6MTY3MTE5MzUsZ2FpbnNib3JvOjE0NDc0NDYwLGdob3N0d2hpdGU6MTYzMTY2NzEsZ29sZDoxNjc2NjcyMCxnb2xkZW5yb2Q6MTQzMjkxMjAsZ3JheTo4NDIxNTA0LGdyZWVuOjMyNzY4LGdyZWVueWVsbG93OjExNDAzMDU1LGdyZXk6ODQyMTUwNCxob25leWRldzoxNTc5NDE2MCxob3RwaW5rOjE2NzM4NzQwLGluZGlhbnJlZDoxMzQ1ODUyNCxpbmRpZ286NDkxNTMzMCxpdm9yeToxNjc3NzIwMCxraGFraToxNTc4NzY2MCxsYXZlbmRlcjoxNTEzMjQxMCxsYXZlbmRlcmJsdXNoOjE2NzczMzY1LGxhd25ncmVlbjo4MTkwOTc2LGxlbW9uY2hpZmZvbjoxNjc3NTg4NSxsaWdodGJsdWU6MTEzOTMyNTQsbGlnaHRjb3JhbDoxNTc2MTUzNixsaWdodGN5YW46MTQ3NDU1OTksbGlnaHRnb2xkZW5yb2R5ZWxsb3c6MTY0NDgyMTAsbGlnaHRncmF5OjEzODgyMzIzLGxpZ2h0Z3JlZW46OTQ5ODI1NixsaWdodGdyZXk6MTM4ODIzMjMsbGlnaHRwaW5rOjE2NzU4NDY1LGxpZ2h0c2FsbW9uOjE2NzUyNzYyLGxpZ2h0c2VhZ3JlZW46MjE0Mjg5MCxsaWdodHNreWJsdWU6ODkwMDM0NixsaWdodHNsYXRlZ3JheTo3ODMzNzUzLGxpZ2h0c2xhdGVncmV5Ojc4MzM3NTMsbGlnaHRzdGVlbGJsdWU6MTE1ODQ3MzQsbGlnaHR5ZWxsb3c6MTY3NzcxODQsbGltZTo2NTI4MCxsaW1lZ3JlZW46MzMyOTMzMCxsaW5lbjoxNjQ0NTY3MCxtYWdlbnRhOjE2NzExOTM1LG1hcm9vbjo4Mzg4NjA4LG1lZGl1bWFxdWFtYXJpbmU6NjczNzMyMixtZWRpdW1ibHVlOjIwNSxtZWRpdW1vcmNoaWQ6MTIyMTE2NjcsbWVkaXVtcHVycGxlOjk2NjI2ODMsbWVkaXVtc2VhZ3JlZW46Mzk3ODA5NyxtZWRpdW1zbGF0ZWJsdWU6ODA4Nzc5MCxtZWRpdW1zcHJpbmdncmVlbjo2NDE1NCxtZWRpdW10dXJxdW9pc2U6NDc3MjMwMCxtZWRpdW12aW9sZXRyZWQ6MTMwNDcxNzMsbWlkbmlnaHRibHVlOjE2NDQ5MTIsbWludGNyZWFtOjE2MTIxODUwLG1pc3R5cm9zZToxNjc3MDI3Myxtb2NjYXNpbjoxNjc3MDIyOSxuYXZham93aGl0ZToxNjc2ODY4NSxuYXZ5OjEyOCxvbGRsYWNlOjE2NjQzNTU4LG9saXZlOjg0MjEzNzYsb2xpdmVkcmFiOjcwNDg3Mzksb3JhbmdlOjE2NzUzOTIwLG9yYW5nZXJlZDoxNjcyOTM0NCxvcmNoaWQ6MTQzMTU3MzQscGFsZWdvbGRlbnJvZDoxNTY1NzEzMCxwYWxlZ3JlZW46MTAwMjU4ODAscGFsZXR1cnF1b2lzZToxMTUyOTk2NixwYWxldmlvbGV0cmVkOjE0MzgxMjAzLHBhcGF5YXdoaXA6MTY3NzMwNzcscGVhY2hwdWZmOjE2NzY3NjczLHBlcnU6MTM0Njg5OTEscGluazoxNjc2MTAzNSxwbHVtOjE0NTI0NjM3LHBvd2RlcmJsdWU6MTE1OTE5MTAscHVycGxlOjgzODg3MzYscmVkOjE2NzExNjgwLHJvc3licm93bjoxMjM1NzUxOSxyb3lhbGJsdWU6NDI4Njk0NSxzYWRkbGVicm93bjo5MTI3MTg3LHNhbG1vbjoxNjQxNjg4MixzYW5keWJyb3duOjE2MDMyODY0LHNlYWdyZWVuOjMwNTAzMjcsc2Vhc2hlbGw6MTY3NzQ2Mzgsc2llbm5hOjEwNTA2Nzk3LHNpbHZlcjoxMjYzMjI1Nixza3libHVlOjg5MDAzMzEsc2xhdGVibHVlOjY5NzAwNjEsc2xhdGVncmF5OjczNzI5NDQsc2xhdGVncmV5OjczNzI5NDQsc25vdzoxNjc3NTkzMCxzcHJpbmdncmVlbjo2NTQwNyxzdGVlbGJsdWU6NDYyMDk4MCx0YW46MTM4MDg3ODAsdGVhbDozMjg5Nix0aGlzdGxlOjE0MjA0ODg4LHRvbWF0bzoxNjczNzA5NSx0dXJxdW9pc2U6NDI1MTg1Nix2aW9sZXQ6MTU2MzEwODYsd2hlYXQ6MTYxMTMzMzEsd2hpdGU6MTY3NzcyMTUsd2hpdGVzbW9rZToxNjExOTI4NSx5ZWxsb3c6MTY3NzY5NjAseWVsbG93Z3JlZW46MTAxNDUwNzR9KTskYS5mb3JFYWNoKGZ1bmN0aW9uKG4sdCl7JGEuc2V0KG4sbXQodCkpfSksQm8uZnVuY3Rvcj1rdCxCby54aHI9QXQoRXQpLEJvLmRzdj1mdW5jdGlvbihuLHQpe2Z1bmN0aW9uIGUobixlLGkpe2FyZ3VtZW50cy5sZW5ndGg8MyYmKGk9ZSxlPW51bGwpO3ZhciBvPUN0KG4sdCxudWxsPT1lP3I6dShlKSxpKTtyZXR1cm4gby5yb3c9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/by5yZXNwb25zZShudWxsPT0oZT1uKT9yOnUobikpOmV9LG99ZnVuY3Rpb24gcihuKXtyZXR1cm4gZS5wYXJzZShuLnJlc3BvbnNlVGV4dCl9ZnVuY3Rpb24gdShuKXtyZXR1cm4gZnVuY3Rpb24odCl7cmV0dXJuIGUucGFyc2UodC5yZXNwb25zZVRleHQsbil9fWZ1bmN0aW9uIGkodCl7cmV0dXJuIHQubWFwKG8pLmpvaW4obil9ZnVuY3Rpb24gbyhuKXtyZXR1cm4gYS50ZXN0KG4pPyciJytuLnJlcGxhY2UoL1wiL2csJyIiJykrJyInOm59dmFyIGE9bmV3IFJlZ0V4cCgnWyInK24rIlxuXSIpLGM9bi5jaGFyQ29kZUF0KDApO3JldHVybiBlLnBhcnNlPWZ1bmN0aW9uKG4sdCl7dmFyIHI7cmV0dXJuIGUucGFyc2VSb3dzKG4sZnVuY3Rpb24obixlKXtpZihyKXJldHVybiByKG4sZS0xKTt2YXIgdT1uZXcgRnVuY3Rpb24oImQiLCJyZXR1cm4geyIrbi5tYXAoZnVuY3Rpb24obix0KXtyZXR1cm4gSlNPTi5zdHJpbmdpZnkobikrIjogZFsiK3QrIl0ifSkuam9pbigiLCIpKyJ9Iik7cj10P2Z1bmN0aW9uKG4sZSl7cmV0dXJuIHQodShuKSxlKX06dX0pfSxlLnBhcnNlUm93cz1mdW5jdGlvbihuLHQpe2Z1bmN0aW9uIGUoKXtpZihzPj1sKXJldHVybiBvO2lmKHUpcmV0dXJuIHU9ITEsaTt2YXIgdD1zO2lmKDM0PT09bi5jaGFyQ29kZUF0KHQpKXtmb3IodmFyIGU9dDtlKys8bDspaWYoMzQ9PT1uLmNoYXJDb2RlQXQoZSkpe2lmKDM0IT09bi5jaGFyQ29kZUF0KGUrMSkpYnJlYWs7KytlfXM9ZSsyO3ZhciByPW4uY2hhckNvZGVBdChlKzEpO3JldHVybiAxMz09PXI/KHU9ITAsMTA9PT1uLmNoYXJDb2RlQXQoZSsyKSYmKytzKToxMD09PXImJih1PSEwKSxuLnNsaWNlKHQrMSxlKS5yZXBsYWNlKC8iIi9nLCciJyl9Zm9yKDtsPnM7KXt2YXIgcj1uLmNoYXJDb2RlQXQocysrKSxhPTE7aWYoMTA9PT1yKXU9ITA7ZWxzZSBpZigxMz09PXIpdT0hMCwxMD09PW4uY2hhckNvZGVBdChzKSYmKCsrcywrK2EpO2Vsc2UgaWYociE9PWMpY29udGludWU7cmV0dXJuIG4uc2xpY2UodCxzLWEpfXJldHVybiBuLnNsaWNlKHQpfWZvcih2YXIgcix1LGk9e30sbz17fSxhPVtdLGw9bi5sZW5ndGgscz0wLGY9MDsocj1lKCkpIT09bzspe2Zvcih2YXIgaD1bXTtyIT09aSYmciE9PW87KWgucHVzaChyKSxyPWUoKTt0JiZudWxsPT0oaD10KGgsZisrKSl8fGEucHVzaChoKX1yZXR1cm4gYX0sZS5mb3JtYXQ9ZnVuY3Rpb24odCl7aWYoQXJyYXkuaXNBcnJheSh0WzBdKSlyZXR1cm4gZS5mb3JtYXRSb3dzKHQpO3ZhciByPW5ldyB2LHU9W107cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbihuKXtmb3IodmFyIHQgaW4gbilyLmhhcyh0KXx8dS5wdXNoKHIuYWRkKHQpKX0pLFt1Lm1hcChvKS5qb2luKG4pXS5jb25jYXQodC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHUubWFwKGZ1bmN0aW9uKG4pe3JldHVybiBvKHRbbl0pfSkuam9pbihuKX0pKS5qb2luKCJcbiIpfSxlLmZvcm1hdFJvd3M9ZnVuY3Rpb24obil7cmV0dXJuIG4ubWFwKGkpLmpvaW4oIlxuIil9LGV9LEJvLmNzdj1Cby5kc3YoIiwiLCJ0ZXh0L2NzdiIpLEJvLnRzdj1Cby5kc3YoIgkiLCJ0ZXh0L3RhYi1zZXBhcmF0ZWQtdmFsdWVzIik7dmFyIEJhLFdhLEphLEdhLEthLFFhPVFvW20oUW8sInJlcXVlc3RBbmltYXRpb25GcmFtZSIpXXx8ZnVuY3Rpb24obil7c2V0VGltZW91dChuLDE3KX07Qm8udGltZXI9ZnVuY3Rpb24obix0LGUpe3ZhciByPWFyZ3VtZW50cy5sZW5ndGg7Mj5yJiYodD0wKSwzPnImJihlPURhdGUubm93KCkpO3ZhciB1PWUrdCxpPXtjOm4sdDp1LGY6ITEsbjpudWxsfTtXYT9XYS5uPWk6QmE9aSxXYT1pLEphfHwoR2E9Y2xlYXJUaW1lb3V0KEdhKSxKYT0xLFFhKEx0KSl9LEJvLnRpbWVyLmZsdXNoPWZ1bmN0aW9uKCl7VHQoKSxxdCgpfSxCby5yb3VuZD1mdW5jdGlvbihuLHQpe3JldHVybiB0P01hdGgucm91bmQobioodD1NYXRoLnBvdygxMCx0KSkpL3Q6TWF0aC5yb3VuZChuKX07dmFyIG5jPVsieSIsInoiLCJhIiwiZiIsInAiLCJuIiwiXHhiNSIsIm0iLCIiLCJrIiwiTSIsIkciLCJUIiwiUCIsIkUiLCJaIiwiWSJdLm1hcChEdCk7Qm8uZm9ybWF0UHJlZml4PWZ1bmN0aW9uKG4sdCl7dmFyIGU9MDtyZXR1cm4gbiYmKDA+biYmKG4qPS0xKSx0JiYobj1Cby5yb3VuZChuLFJ0KG4sdCkpKSxlPTErTWF0aC5mbG9vcigxZS0xMitNYXRoLmxvZyhuKS9NYXRoLkxOMTApLGU9TWF0aC5tYXgoLTI0LE1hdGgubWluKDI0LDMqTWF0aC5mbG9vcigoZS0xKS8zKSkpKSxuY1s4K2UvM119O3ZhciB0Yz0vKD86KFtee10pPyhbPD49Xl0pKT8oWytcLSBdKT8oWyQjXSk/KDApPyhcZCspPygsKT8oXC4tP1xkKyk/KFthLXolXSk/L2ksZWM9Qm8ubWFwKHtiOmZ1bmN0aW9uKG4pe3JldHVybiBuLnRvU3RyaW5nKDIpfSxjOmZ1bmN0aW9uKG4pe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKG4pfSxvOmZ1bmN0aW9uKG4pe3JldHVybiBuLnRvU3RyaW5nKDgpfSx4OmZ1bmN0aW9uKG4pe3JldHVybiBuLnRvU3RyaW5nKDE2KX0sWDpmdW5jdGlvbihuKXtyZXR1cm4gbi50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX0sZzpmdW5jdGlvbihuLHQpe3JldHVybiBuLnRvUHJlY2lzaW9uKHQpfSxlOmZ1bmN0aW9uKG4sdCl7cmV0dXJuIG4udG9FeHBvbmVudGlhbCh0KX0sZjpmdW5jdGlvbihuLHQpe3JldHVybiBuLnRvRml4ZWQodCl9LHI6ZnVuY3Rpb24obix0KXtyZXR1cm4obj1Cby5yb3VuZChuLFJ0KG4sdCkpKS50b0ZpeGVkKE1hdGgubWF4KDAsTWF0aC5taW4oMjAsUnQobiooMSsxZS0xNSksdCkpKSl9fSkscmM9Qm8udGltZT17fSx1Yz1EYXRlO2p0LnByb3RvdHlwZT17Z2V0RGF0ZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl8uZ2V0VVRDRGF0ZSgpfSxnZXREYXk6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fLmdldFVUQ0RheSgpfSxnZXRGdWxsWWVhcjpmdW5jdGlvbigpe3JldHVybiB0aGlzLl8uZ2V0VVRDRnVsbFllYXIoKX0sZ2V0SG91cnM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fLmdldFVUQ0hvdXJzKCl9LGdldE1pbGxpc2Vjb25kczpmdW5jdGlvbigpe3JldHVybiB0aGlzLl8uZ2V0VVRDTWlsbGlzZWNvbmRzKCl9LGdldE1pbnV0ZXM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fLmdldFVUQ01pbnV0ZXMoKX0sZ2V0TW9udGg6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fLmdldFVUQ01vbnRoKCl9LGdldFNlY29uZHM6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fLmdldFVUQ1NlY29uZHMoKX0sZ2V0VGltZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLl8uZ2V0VGltZSgpfSxnZXRUaW1lem9uZU9mZnNldDpmdW5jdGlvbigpe3JldHVybiAwfSx2YWx1ZU9mOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuXy52YWx1ZU9mKCl9LHNldERhdGU6ZnVuY3Rpb24oKXtpYy5zZXRVVENEYXRlLmFwcGx5KHRoaXMuXyxhcmd1bWVudHMpfSxzZXREYXk6ZnVuY3Rpb24oKXtpYy5zZXRVVENEYXkuYXBwbHkodGhpcy5fLGFyZ3VtZW50cyl9LHNldEZ1bGxZZWFyOmZ1bmN0aW9uKCl7aWMuc2V0VVRDRnVsbFllYXIuYXBwbHkodGhpcy5fLGFyZ3VtZW50cyl9LHNldEhvdXJzOmZ1bmN0aW9uKCl7aWMuc2V0VVRDSG91cnMuYXBwbHkodGhpcy5fLGFyZ3VtZW50cyl9LHNldE1pbGxpc2Vjb25kczpmdW5jdGlvbigpe2ljLnNldFVUQ01pbGxpc2Vjb25kcy5hcHBseSh0aGlzLl8sYXJndW1lbnRzKX0sc2V0TWludXRlczpmdW5jdGlvbigpe2ljLnNldFVUQ01pbnV0ZXMuYXBwbHkodGhpcy5fLGFyZ3VtZW50cyl9LHNldE1vbnRoOmZ1bmN0aW9uKCl7aWMuc2V0VVRDTW9udGguYXBwbHkodGhpcy5fLGFyZ3VtZW50cyl9LHNldFNlY29uZHM6ZnVuY3Rpb24oKXtpYy5zZXRVVENTZWNvbmRzLmFwcGx5KHRoaXMuXyxhcmd1bWVudHMpfSxzZXRUaW1lOmZ1bmN0aW9uKCl7aWMuc2V0VGltZS5hcHBseSh0aGlzLl8sYXJndW1lbnRzKX19O3ZhciBpYz1EYXRlLnByb3RvdHlwZTtyYy55ZWFyPUZ0KGZ1bmN0aW9uKG4pe3JldHVybiBuPXJjLmRheShuKSxuLnNldE1vbnRoKDAsMSksbn0sZnVuY3Rpb24obix0KXtuLnNldEZ1bGxZZWFyKG4uZ2V0RnVsbFllYXIoKSt0KX0sZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0RnVsbFllYXIoKX0pLHJjLnllYXJzPXJjLnllYXIucmFuZ2UscmMueWVhcnMudXRjPXJjLnllYXIudXRjLnJhbmdlLHJjLmRheT1GdChmdW5jdGlvbihuKXt2YXIgdD1uZXcgdWMoMmUzLDApO3JldHVybiB0LnNldEZ1bGxZZWFyKG4uZ2V0RnVsbFllYXIoKSxuLmdldE1vbnRoKCksbi5nZXREYXRlKCkpLHR9LGZ1bmN0aW9uKG4sdCl7bi5zZXREYXRlKG4uZ2V0RGF0ZSgpK3QpfSxmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXREYXRlKCktMX0pLHJjLmRheXM9cmMuZGF5LnJhbmdlLHJjLmRheXMudXRjPXJjLmRheS51dGMucmFuZ2UscmMuZGF5T2ZZZWFyPWZ1bmN0aW9uKG4pe3ZhciB0PXJjLnllYXIobik7cmV0dXJuIE1hdGguZmxvb3IoKG4tdC02ZTQqKG4uZ2V0VGltZXpvbmVPZmZzZXQoKS10LmdldFRpbWV6b25lT2Zmc2V0KCkpKS84NjRlNSl9LFsic3VuZGF5IiwibW9uZGF5IiwidHVlc2RheSIsIndlZG5lc2RheSIsInRodXJzZGF5IiwiZnJpZGF5Iiwic2F0dXJkYXkiXS5mb3JFYWNoKGZ1bmN0aW9uKG4sdCl7dD03LXQ7dmFyIGU9cmNbbl09RnQoZnVuY3Rpb24obil7cmV0dXJuKG49cmMuZGF5KG4pKS5zZXREYXRlKG4uZ2V0RGF0ZSgpLShuLmdldERheSgpK3QpJTcpLG59LGZ1bmN0aW9uKG4sdCl7bi5zZXREYXRlKG4uZ2V0RGF0ZSgpKzcqTWF0aC5mbG9vcih0KSl9LGZ1bmN0aW9uKG4pe3ZhciBlPXJjLnllYXIobikuZ2V0RGF5KCk7cmV0dXJuIE1hdGguZmxvb3IoKHJjLmRheU9mWWVhcihuKSsoZSt0KSU3KS83KS0oZSE9PXQpfSk7cmNbbisicyJdPWUucmFuZ2UscmNbbisicyJdLnV0Yz1lLnV0Yy5yYW5nZSxyY1tuKyJPZlllYXIiXT1mdW5jdGlvbihuKXt2YXIgZT1yYy55ZWFyKG4pLmdldERheSgpO3JldHVybiBNYXRoLmZsb29yKChyYy5kYXlPZlllYXIobikrKGUrdCklNykvNyl9fSkscmMud2Vlaz1yYy5zdW5kYXkscmMud2Vla3M9cmMuc3VuZGF5LnJhbmdlLHJjLndlZWtzLnV0Yz1yYy5zdW5kYXkudXRjLnJhbmdlLHJjLndlZWtPZlllYXI9cmMuc3VuZGF5T2ZZZWFyO3ZhciBvYz17Ii0iOiIiLF86IiAiLDA6IjAifSxhYz0vXlxzKlxkKy8sY2M9L14lLztCby5sb2NhbGU9ZnVuY3Rpb24obil7cmV0dXJue251bWJlckZvcm1hdDpQdChuKSx0aW1lRm9ybWF0Ok90KG4pfX07dmFyIGxjPUJvLmxvY2FsZSh7ZGVjaW1hbDoiLiIsdGhvdXNhbmRzOiIsIixncm91cGluZzpbM10sY3VycmVuY3k6WyIkIiwiIl0sZGF0ZVRpbWU6IiVhICViICVlICVYICVZIixkYXRlOiIlbS8lZC8lWSIsdGltZToiJUg6JU06JVMiLHBlcmlvZHM6WyJBTSIsIlBNIl0sZGF5czpbIlN1bmRheSIsIk1vbmRheSIsIlR1ZXNkYXkiLCJXZWRuZXNkYXkiLCJUaHVyc2RheSIsIkZyaWRheSIsIlNhdHVyZGF5Il0sc2hvcnREYXlzOlsiU3VuIiwiTW9uIiwiVHVlIiwiV2VkIiwiVGh1IiwiRnJpIiwiU2F0Il0sbW9udGhzOlsiSmFudWFyeSIsIkZlYnJ1YXJ5IiwiTWFyY2giLCJBcHJpbCIsIk1heSIsIkp1bmUiLCJKdWx5IiwiQXVndXN0IiwiU2VwdGVtYmVyIiwiT2N0b2JlciIsIk5vdmVtYmVyIiwiRGVjZW1iZXIiXSxzaG9ydE1vbnRoczpbIkphbiIsIkZlYiIsIk1hciIsIkFwciIsIk1heSIsIkp1biIsIkp1bCIsIkF1ZyIsIlNlcCIsIk9jdCIsIk5vdiIsIkRlYyJdfSk7Qm8uZm9ybWF0PWxjLm51bWJlckZvcm1hdCxCby5nZW89e30sY2UucHJvdG90eXBlPXtzOjAsdDowLGFkZDpmdW5jdGlvbihuKXtsZShuLHRoaXMudCxzYyksbGUoc2Mucyx0aGlzLnMsdGhpcyksdGhpcy5zP3RoaXMudCs9c2MudDp0aGlzLnM9c2MudH0scmVzZXQ6ZnVuY3Rpb24oKXt0aGlzLnM9dGhpcy50PTB9LHZhbHVlT2Y6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zfX07dmFyIHNjPW5ldyBjZTtCby5nZW8uc3RyZWFtPWZ1bmN0aW9uKG4sdCl7biYmZmMuaGFzT3duUHJvcGVydHkobi50eXBlKT9mY1tuLnR5cGVdKG4sdCk6c2Uobix0KX07dmFyIGZjPXtGZWF0dXJlOmZ1bmN0aW9uKG4sdCl7c2Uobi5nZW9tZXRyeSx0KX0sRmVhdHVyZUNvbGxlY3Rpb246ZnVuY3Rpb24obix0KXtmb3IodmFyIGU9bi5mZWF0dXJlcyxyPS0xLHU9ZS5sZW5ndGg7KytyPHU7KXNlKGVbcl0uZ2VvbWV0cnksdCl9fSxoYz17U3BoZXJlOmZ1bmN0aW9uKG4sdCl7dC5zcGhlcmUoKX0sUG9pbnQ6ZnVuY3Rpb24obix0KXtuPW4uY29vcmRpbmF0ZXMsdC5wb2ludChuWzBdLG5bMV0sblsyXSl9LE11bHRpUG9pbnQ6ZnVuY3Rpb24obix0KXtmb3IodmFyIGU9bi5jb29yZGluYXRlcyxyPS0xLHU9ZS5sZW5ndGg7KytyPHU7KW49ZVtyXSx0LnBvaW50KG5bMF0sblsxXSxuWzJdKX0sTGluZVN0cmluZzpmdW5jdGlvbihuLHQpe2ZlKG4uY29vcmRpbmF0ZXMsdCwwKX0sTXVsdGlMaW5lU3RyaW5nOmZ1bmN0aW9uKG4sdCl7Zm9yKHZhciBlPW4uY29vcmRpbmF0ZXMscj0tMSx1PWUubGVuZ3RoOysrcjx1OylmZShlW3JdLHQsMCl9LFBvbHlnb246ZnVuY3Rpb24obix0KXtoZShuLmNvb3JkaW5hdGVzLHQpfSxNdWx0aVBvbHlnb246ZnVuY3Rpb24obix0KXtmb3IodmFyIGU9bi5jb29yZGluYXRlcyxyPS0xLHU9ZS5sZW5ndGg7KytyPHU7KWhlKGVbcl0sdCl9LEdlb21ldHJ5Q29sbGVjdGlvbjpmdW5jdGlvbihuLHQpe2Zvcih2YXIgZT1uLmdlb21ldHJpZXMscj0tMSx1PWUubGVuZ3RoOysrcjx1OylzZShlW3JdLHQpfX07Qm8uZ2VvLmFyZWE9ZnVuY3Rpb24obil7cmV0dXJuIGdjPTAsQm8uZ2VvLnN0cmVhbShuLHZjKSxnY307dmFyIGdjLHBjPW5ldyBjZSx2Yz17c3BoZXJlOmZ1bmN0aW9uKCl7Z2MrPTQqRWF9LHBvaW50OnksbGluZVN0YXJ0OnksbGluZUVuZDp5LHBvbHlnb25TdGFydDpmdW5jdGlvbigpe3BjLnJlc2V0KCksdmMubGluZVN0YXJ0PWdlfSxwb2x5Z29uRW5kOmZ1bmN0aW9uKCl7dmFyIG49MipwYztnYys9MD5uPzQqRWErbjpuLHZjLmxpbmVTdGFydD12Yy5saW5lRW5kPXZjLnBvaW50PXl9fTtCby5nZW8uYm91bmRzPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHQpe3gucHVzaChNPVtzPW4saD1uXSksZj50JiYoZj10KSx0PmcmJihnPXQpfWZ1bmN0aW9uIHQodCxlKXt2YXIgcj1wZShbdCpMYSxlKkxhXSk7aWYobSl7dmFyIHU9ZGUobSxyKSxpPVt1WzFdLC11WzBdLDBdLG89ZGUoaSx1KTt4ZShvKSxvPU1lKG8pO3ZhciBjPXQtcCxsPWM+MD8xOi0xLHY9b1swXSpUYSpsLGQ9Y2EoYyk+MTgwO2lmKGReKHY+bCpwJiZsKnQ+dikpe3ZhciB5PW9bMV0qVGE7eT5nJiYoZz15KX1lbHNlIGlmKHY9KHYrMzYwKSUzNjAtMTgwLGReKHY+bCpwJiZsKnQ+dikpe3ZhciB5PS1vWzFdKlRhO2Y+eSYmKGY9eSl9ZWxzZSBmPmUmJihmPWUpLGU+ZyYmKGc9ZSk7ZD9wPnQ/YShzLHQpPmEocyxoKSYmKGg9dCk6YSh0LGgpPmEocyxoKSYmKHM9dCk6aD49cz8ocz50JiYocz10KSx0PmgmJihoPXQpKTp0PnA/YShzLHQpPmEocyxoKSYmKGg9dCk6YSh0LGgpPmEocyxoKSYmKHM9dCl9ZWxzZSBuKHQsZSk7bT1yLHA9dH1mdW5jdGlvbiBlKCl7Xy5wb2ludD10fWZ1bmN0aW9uIHIoKXtNWzBdPXMsTVsxXT1oLF8ucG9pbnQ9bixtPW51bGx9ZnVuY3Rpb24gdShuLGUpe2lmKG0pe3ZhciByPW4tcDt5Kz1jYShyKT4xODA/cisocj4wPzM2MDotMzYwKTpyfWVsc2Ugdj1uLGQ9ZTt2Yy5wb2ludChuLGUpLHQobixlKX1mdW5jdGlvbiBpKCl7dmMubGluZVN0YXJ0KCl9ZnVuY3Rpb24gbygpe3UodixkKSx2Yy5saW5lRW5kKCksY2EoeSk+TmEmJihzPS0oaD0xODApKSxNWzBdPXMsTVsxXT1oLG09bnVsbH1mdW5jdGlvbiBhKG4sdCl7cmV0dXJuKHQtPW4pPDA/dCszNjA6dH1mdW5jdGlvbiBjKG4sdCl7cmV0dXJuIG5bMF0tdFswXX1mdW5jdGlvbiBsKG4sdCl7cmV0dXJuIHRbMF08PXRbMV0/dFswXTw9biYmbjw9dFsxXTpuPHRbMF18fHRbMV08bn12YXIgcyxmLGgsZyxwLHYsZCxtLHkseCxNLF89e3BvaW50Om4sbGluZVN0YXJ0OmUsbGluZUVuZDpyLHBvbHlnb25TdGFydDpmdW5jdGlvbigpe18ucG9pbnQ9dSxfLmxpbmVTdGFydD1pLF8ubGluZUVuZD1vLHk9MCx2Yy5wb2x5Z29uU3RhcnQoKX0scG9seWdvbkVuZDpmdW5jdGlvbigpe3ZjLnBvbHlnb25FbmQoKSxfLnBvaW50PW4sXy5saW5lU3RhcnQ9ZSxfLmxpbmVFbmQ9ciwwPnBjPyhzPS0oaD0xODApLGY9LShnPTkwKSk6eT5OYT9nPTkwOi1OYT55JiYoZj0tOTApLE1bMF09cyxNWzFdPWh9fTtyZXR1cm4gZnVuY3Rpb24obil7Zz1oPS0ocz1mPTEvMCkseD1bXSxCby5nZW8uc3RyZWFtKG4sXyk7CnZhciB0PXgubGVuZ3RoO2lmKHQpe3guc29ydChjKTtmb3IodmFyIGUscj0xLHU9eFswXSxpPVt1XTt0PnI7KytyKWU9eFtyXSxsKGVbMF0sdSl8fGwoZVsxXSx1KT8oYSh1WzBdLGVbMV0pPmEodVswXSx1WzFdKSYmKHVbMV09ZVsxXSksYShlWzBdLHVbMV0pPmEodVswXSx1WzFdKSYmKHVbMF09ZVswXSkpOmkucHVzaCh1PWUpO2Zvcih2YXIgbyxlLHA9LTEvMCx0PWkubGVuZ3RoLTEscj0wLHU9aVt0XTt0Pj1yO3U9ZSwrK3IpZT1pW3JdLChvPWEodVsxXSxlWzBdKSk+cCYmKHA9byxzPWVbMF0saD11WzFdKX1yZXR1cm4geD1NPW51bGwsMS8wPT09c3x8MS8wPT09Zj9bWzAvMCwwLzBdLFswLzAsMC8wXV06W1tzLGZdLFtoLGddXX19KCksQm8uZ2VvLmNlbnRyb2lkPWZ1bmN0aW9uKG4pe2RjPW1jPXljPXhjPU1jPV9jPWJjPXdjPVNjPWtjPUVjPTAsQm8uZ2VvLnN0cmVhbShuLEFjKTt2YXIgdD1TYyxlPWtjLHI9RWMsdT10KnQrZSplK3IqcjtyZXR1cm4gemE+dSYmKHQ9X2MsZT1iYyxyPXdjLE5hPm1jJiYodD15YyxlPXhjLHI9TWMpLHU9dCp0K2UqZStyKnIsemE+dSk/WzAvMCwwLzBdOltNYXRoLmF0YW4yKGUsdCkqVGEsbnQoci9NYXRoLnNxcnQodSkpKlRhXX07dmFyIGRjLG1jLHljLHhjLE1jLF9jLGJjLHdjLFNjLGtjLEVjLEFjPXtzcGhlcmU6eSxwb2ludDpiZSxsaW5lU3RhcnQ6U2UsbGluZUVuZDprZSxwb2x5Z29uU3RhcnQ6ZnVuY3Rpb24oKXtBYy5saW5lU3RhcnQ9RWV9LHBvbHlnb25FbmQ6ZnVuY3Rpb24oKXtBYy5saW5lU3RhcnQ9U2V9fSxDYz1MZShBZSxEZSxVZSxbLUVhLC1FYS8yXSksTmM9MWU5O0JvLmdlby5jbGlwRXh0ZW50PWZ1bmN0aW9uKCl7dmFyIG4sdCxlLHIsdSxpLG89e3N0cmVhbTpmdW5jdGlvbihuKXtyZXR1cm4gdSYmKHUudmFsaWQ9ITEpLHU9aShuKSx1LnZhbGlkPSEwLHV9LGV4dGVudDpmdW5jdGlvbihhKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT1PZShuPSthWzBdWzBdLHQ9K2FbMF1bMV0sZT0rYVsxXVswXSxyPSthWzFdWzFdKSx1JiYodS52YWxpZD0hMSx1PW51bGwpLG8pOltbbix0XSxbZSxyXV19fTtyZXR1cm4gby5leHRlbnQoW1swLDBdLFs5NjAsNTAwXV0pfSwoQm8uZ2VvLmNvbmljRXF1YWxBcmVhPWZ1bmN0aW9uKCl7cmV0dXJuIEllKFplKX0pLnJhdz1aZSxCby5nZW8uYWxiZXJzPWZ1bmN0aW9uKCl7cmV0dXJuIEJvLmdlby5jb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbOTYsMF0pLmNlbnRlcihbLS42LDM4LjddKS5wYXJhbGxlbHMoWzI5LjUsNDUuNV0pLnNjYWxlKDEwNzApfSxCby5nZW8uYWxiZXJzVXNhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuKXt2YXIgaT1uWzBdLG89blsxXTtyZXR1cm4gdD1udWxsLGUoaSxvKSx0fHwocihpLG8pLHQpfHx1KGksbyksdH12YXIgdCxlLHIsdSxpPUJvLmdlby5hbGJlcnMoKSxvPUJvLmdlby5jb25pY0VxdWFsQXJlYSgpLnJvdGF0ZShbMTU0LDBdKS5jZW50ZXIoWy0yLDU4LjVdKS5wYXJhbGxlbHMoWzU1LDY1XSksYT1Cby5nZW8uY29uaWNFcXVhbEFyZWEoKS5yb3RhdGUoWzE1NywwXSkuY2VudGVyKFstMywxOS45XSkucGFyYWxsZWxzKFs4LDE4XSksYz17cG9pbnQ6ZnVuY3Rpb24obixlKXt0PVtuLGVdfX07cmV0dXJuIG4uaW52ZXJ0PWZ1bmN0aW9uKG4pe3ZhciB0PWkuc2NhbGUoKSxlPWkudHJhbnNsYXRlKCkscj0oblswXS1lWzBdKS90LHU9KG5bMV0tZVsxXSkvdDtyZXR1cm4odT49LjEyJiYuMjM0PnUmJnI+PS0uNDI1JiYtLjIxND5yP286dT49LjE2NiYmLjIzND51JiZyPj0tLjIxNCYmLS4xMTU+cj9hOmkpLmludmVydChuKX0sbi5zdHJlYW09ZnVuY3Rpb24obil7dmFyIHQ9aS5zdHJlYW0obiksZT1vLnN0cmVhbShuKSxyPWEuc3RyZWFtKG4pO3JldHVybntwb2ludDpmdW5jdGlvbihuLHUpe3QucG9pbnQobix1KSxlLnBvaW50KG4sdSksci5wb2ludChuLHUpfSxzcGhlcmU6ZnVuY3Rpb24oKXt0LnNwaGVyZSgpLGUuc3BoZXJlKCksci5zcGhlcmUoKX0sbGluZVN0YXJ0OmZ1bmN0aW9uKCl7dC5saW5lU3RhcnQoKSxlLmxpbmVTdGFydCgpLHIubGluZVN0YXJ0KCl9LGxpbmVFbmQ6ZnVuY3Rpb24oKXt0LmxpbmVFbmQoKSxlLmxpbmVFbmQoKSxyLmxpbmVFbmQoKX0scG9seWdvblN0YXJ0OmZ1bmN0aW9uKCl7dC5wb2x5Z29uU3RhcnQoKSxlLnBvbHlnb25TdGFydCgpLHIucG9seWdvblN0YXJ0KCl9LHBvbHlnb25FbmQ6ZnVuY3Rpb24oKXt0LnBvbHlnb25FbmQoKSxlLnBvbHlnb25FbmQoKSxyLnBvbHlnb25FbmQoKX19fSxuLnByZWNpc2lvbj1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaS5wcmVjaXNpb24odCksby5wcmVjaXNpb24odCksYS5wcmVjaXNpb24odCksbik6aS5wcmVjaXNpb24oKX0sbi5zY2FsZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaS5zY2FsZSh0KSxvLnNjYWxlKC4zNSp0KSxhLnNjYWxlKHQpLG4udHJhbnNsYXRlKGkudHJhbnNsYXRlKCkpKTppLnNjYWxlKCl9LG4udHJhbnNsYXRlPWZ1bmN0aW9uKHQpe2lmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiBpLnRyYW5zbGF0ZSgpO3ZhciBsPWkuc2NhbGUoKSxzPSt0WzBdLGY9K3RbMV07cmV0dXJuIGU9aS50cmFuc2xhdGUodCkuY2xpcEV4dGVudChbW3MtLjQ1NSpsLGYtLjIzOCpsXSxbcysuNDU1KmwsZisuMjM4KmxdXSkuc3RyZWFtKGMpLnBvaW50LHI9by50cmFuc2xhdGUoW3MtLjMwNypsLGYrLjIwMSpsXSkuY2xpcEV4dGVudChbW3MtLjQyNSpsK05hLGYrLjEyKmwrTmFdLFtzLS4yMTQqbC1OYSxmKy4yMzQqbC1OYV1dKS5zdHJlYW0oYykucG9pbnQsdT1hLnRyYW5zbGF0ZShbcy0uMjA1KmwsZisuMjEyKmxdKS5jbGlwRXh0ZW50KFtbcy0uMjE0KmwrTmEsZisuMTY2KmwrTmFdLFtzLS4xMTUqbC1OYSxmKy4yMzQqbC1OYV1dKS5zdHJlYW0oYykucG9pbnQsbn0sbi5zY2FsZSgxMDcwKX07dmFyIHpjLExjLFRjLHFjLFJjLERjLFBjPXtwb2ludDp5LGxpbmVTdGFydDp5LGxpbmVFbmQ6eSxwb2x5Z29uU3RhcnQ6ZnVuY3Rpb24oKXtMYz0wLFBjLmxpbmVTdGFydD1WZX0scG9seWdvbkVuZDpmdW5jdGlvbigpe1BjLmxpbmVTdGFydD1QYy5saW5lRW5kPVBjLnBvaW50PXksemMrPWNhKExjLzIpfX0sVWM9e3BvaW50OlhlLGxpbmVTdGFydDp5LGxpbmVFbmQ6eSxwb2x5Z29uU3RhcnQ6eSxwb2x5Z29uRW5kOnl9LGpjPXtwb2ludDpXZSxsaW5lU3RhcnQ6SmUsbGluZUVuZDpHZSxwb2x5Z29uU3RhcnQ6ZnVuY3Rpb24oKXtqYy5saW5lU3RhcnQ9S2V9LHBvbHlnb25FbmQ6ZnVuY3Rpb24oKXtqYy5wb2ludD1XZSxqYy5saW5lU3RhcnQ9SmUsamMubGluZUVuZD1HZX19O0JvLmdlby5wYXRoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuKXtyZXR1cm4gbiYmKCJmdW5jdGlvbiI9PXR5cGVvZiBhJiZpLnBvaW50UmFkaXVzKCthLmFwcGx5KHRoaXMsYXJndW1lbnRzKSksbyYmby52YWxpZHx8KG89dShpKSksQm8uZ2VvLnN0cmVhbShuLG8pKSxpLnJlc3VsdCgpfWZ1bmN0aW9uIHQoKXtyZXR1cm4gbz1udWxsLG59dmFyIGUscix1LGksbyxhPTQuNTtyZXR1cm4gbi5hcmVhPWZ1bmN0aW9uKG4pe3JldHVybiB6Yz0wLEJvLmdlby5zdHJlYW0obix1KFBjKSksemN9LG4uY2VudHJvaWQ9ZnVuY3Rpb24obil7cmV0dXJuIHljPXhjPU1jPV9jPWJjPXdjPVNjPWtjPUVjPTAsQm8uZ2VvLnN0cmVhbShuLHUoamMpKSxFYz9bU2MvRWMsa2MvRWNdOndjP1tfYy93YyxiYy93Y106TWM/W3ljL01jLHhjL01jXTpbMC8wLDAvMF19LG4uYm91bmRzPWZ1bmN0aW9uKG4pe3JldHVybiBSYz1EYz0tKFRjPXFjPTEvMCksQm8uZ2VvLnN0cmVhbShuLHUoVWMpKSxbW1RjLHFjXSxbUmMsRGNdXX0sbi5wcm9qZWN0aW9uPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh1PShlPW4pP24uc3RyZWFtfHx0cihuKTpFdCx0KCkpOmV9LG4uY29udGV4dD1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT1udWxsPT0ocj1uKT9uZXcgJGU6bmV3IFFlKG4pLCJmdW5jdGlvbiIhPXR5cGVvZiBhJiZpLnBvaW50UmFkaXVzKGEpLHQoKSk6cn0sbi5wb2ludFJhZGl1cz1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oYT0iZnVuY3Rpb24iPT10eXBlb2YgdD90OihpLnBvaW50UmFkaXVzKCt0KSwrdCksbik6YX0sbi5wcm9qZWN0aW9uKEJvLmdlby5hbGJlcnNVc2EoKSkuY29udGV4dChudWxsKX0sQm8uZ2VvLnRyYW5zZm9ybT1mdW5jdGlvbihuKXtyZXR1cm57c3RyZWFtOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBlcih0KTtmb3IodmFyIHIgaW4gbillW3JdPW5bcl07cmV0dXJuIGV9fX0sZXIucHJvdG90eXBlPXtwb2ludDpmdW5jdGlvbihuLHQpe3RoaXMuc3RyZWFtLnBvaW50KG4sdCl9LHNwaGVyZTpmdW5jdGlvbigpe3RoaXMuc3RyZWFtLnNwaGVyZSgpfSxsaW5lU3RhcnQ6ZnVuY3Rpb24oKXt0aGlzLnN0cmVhbS5saW5lU3RhcnQoKX0sbGluZUVuZDpmdW5jdGlvbigpe3RoaXMuc3RyZWFtLmxpbmVFbmQoKX0scG9seWdvblN0YXJ0OmZ1bmN0aW9uKCl7dGhpcy5zdHJlYW0ucG9seWdvblN0YXJ0KCl9LHBvbHlnb25FbmQ6ZnVuY3Rpb24oKXt0aGlzLnN0cmVhbS5wb2x5Z29uRW5kKCl9fSxCby5nZW8ucHJvamVjdGlvbj11cixCby5nZW8ucHJvamVjdGlvbk11dGF0b3I9aXIsKEJvLmdlby5lcXVpcmVjdGFuZ3VsYXI9ZnVuY3Rpb24oKXtyZXR1cm4gdXIoYXIpfSkucmF3PWFyLmludmVydD1hcixCby5nZW8ucm90YXRpb249ZnVuY3Rpb24obil7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gdD1uKHRbMF0qTGEsdFsxXSpMYSksdFswXSo9VGEsdFsxXSo9VGEsdH1yZXR1cm4gbj1scihuWzBdJTM2MCpMYSxuWzFdKkxhLG4ubGVuZ3RoPjI/blsyXSpMYTowKSx0LmludmVydD1mdW5jdGlvbih0KXtyZXR1cm4gdD1uLmludmVydCh0WzBdKkxhLHRbMV0qTGEpLHRbMF0qPVRhLHRbMV0qPVRhLHR9LHR9LGNyLmludmVydD1hcixCby5nZW8uY2lyY2xlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbigpe3ZhciBuPSJmdW5jdGlvbiI9PXR5cGVvZiByP3IuYXBwbHkodGhpcyxhcmd1bWVudHMpOnIsdD1scigtblswXSpMYSwtblsxXSpMYSwwKS5pbnZlcnQsdT1bXTtyZXR1cm4gZShudWxsLG51bGwsMSx7cG9pbnQ6ZnVuY3Rpb24obixlKXt1LnB1c2gobj10KG4sZSkpLG5bMF0qPVRhLG5bMV0qPVRhfX0pLHt0eXBlOiJQb2x5Z29uIixjb29yZGluYXRlczpbdV19fXZhciB0LGUscj1bMCwwXSx1PTY7cmV0dXJuIG4ub3JpZ2luPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPXQsbik6cn0sbi5hbmdsZT1mdW5jdGlvbihyKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT1ncigodD0rcikqTGEsdSpMYSksbik6dH0sbi5wcmVjaXNpb249ZnVuY3Rpb24ocil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGU9Z3IodCpMYSwodT0rcikqTGEpLG4pOnV9LG4uYW5nbGUoOTApfSxCby5nZW8uZGlzdGFuY2U9ZnVuY3Rpb24obix0KXt2YXIgZSxyPSh0WzBdLW5bMF0pKkxhLHU9blsxXSpMYSxpPXRbMV0qTGEsbz1NYXRoLnNpbihyKSxhPU1hdGguY29zKHIpLGM9TWF0aC5zaW4odSksbD1NYXRoLmNvcyh1KSxzPU1hdGguc2luKGkpLGY9TWF0aC5jb3MoaSk7cmV0dXJuIE1hdGguYXRhbjIoTWF0aC5zcXJ0KChlPWYqbykqZSsoZT1sKnMtYypmKmEpKmUpLGMqcytsKmYqYSl9LEJvLmdlby5ncmF0aWN1bGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7cmV0dXJue3R5cGU6Ik11bHRpTGluZVN0cmluZyIsY29vcmRpbmF0ZXM6dCgpfX1mdW5jdGlvbiB0KCl7cmV0dXJuIEJvLnJhbmdlKE1hdGguY2VpbChpL2QpKmQsdSxkKS5tYXAoaCkuY29uY2F0KEJvLnJhbmdlKE1hdGguY2VpbChsL20pKm0sYyxtKS5tYXAoZykpLmNvbmNhdChCby5yYW5nZShNYXRoLmNlaWwoci9wKSpwLGUscCkuZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiBjYShuJWQpPk5hfSkubWFwKHMpKS5jb25jYXQoQm8ucmFuZ2UoTWF0aC5jZWlsKGEvdikqdixvLHYpLmZpbHRlcihmdW5jdGlvbihuKXtyZXR1cm4gY2EobiVtKT5OYX0pLm1hcChmKSl9dmFyIGUscix1LGksbyxhLGMsbCxzLGYsaCxnLHA9MTAsdj1wLGQ9OTAsbT0zNjAseT0yLjU7cmV0dXJuIG4ubGluZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdCgpLm1hcChmdW5jdGlvbihuKXtyZXR1cm57dHlwZToiTGluZVN0cmluZyIsY29vcmRpbmF0ZXM6bn19KX0sbi5vdXRsaW5lPWZ1bmN0aW9uKCl7cmV0dXJue3R5cGU6IlBvbHlnb24iLGNvb3JkaW5hdGVzOltoKGkpLmNvbmNhdChnKGMpLnNsaWNlKDEpLGgodSkucmV2ZXJzZSgpLnNsaWNlKDEpLGcobCkucmV2ZXJzZSgpLnNsaWNlKDEpKV19fSxuLmV4dGVudD1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD9uLm1ham9yRXh0ZW50KHQpLm1pbm9yRXh0ZW50KHQpOm4ubWlub3JFeHRlbnQoKX0sbi5tYWpvckV4dGVudD1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT0rdFswXVswXSx1PSt0WzFdWzBdLGw9K3RbMF1bMV0sYz0rdFsxXVsxXSxpPnUmJih0PWksaT11LHU9dCksbD5jJiYodD1sLGw9YyxjPXQpLG4ucHJlY2lzaW9uKHkpKTpbW2ksbF0sW3UsY11dfSxuLm1pbm9yRXh0ZW50PWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPSt0WzBdWzBdLGU9K3RbMV1bMF0sYT0rdFswXVsxXSxvPSt0WzFdWzFdLHI+ZSYmKHQ9cixyPWUsZT10KSxhPm8mJih0PWEsYT1vLG89dCksbi5wcmVjaXNpb24oeSkpOltbcixhXSxbZSxvXV19LG4uc3RlcD1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD9uLm1ham9yU3RlcCh0KS5taW5vclN0ZXAodCk6bi5taW5vclN0ZXAoKX0sbi5tYWpvclN0ZXA9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGQ9K3RbMF0sbT0rdFsxXSxuKTpbZCxtXX0sbi5taW5vclN0ZXA9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHA9K3RbMF0sdj0rdFsxXSxuKTpbcCx2XX0sbi5wcmVjaXNpb249ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHk9K3Qscz12cihhLG8sOTApLGY9ZHIocixlLHkpLGg9dnIobCxjLDkwKSxnPWRyKGksdSx5KSxuKTp5fSxuLm1ham9yRXh0ZW50KFtbLTE4MCwtOTArTmFdLFsxODAsOTAtTmFdXSkubWlub3JFeHRlbnQoW1stMTgwLC04MC1OYV0sWzE4MCw4MCtOYV1dKX0sQm8uZ2VvLmdyZWF0QXJjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbigpe3JldHVybnt0eXBlOiJMaW5lU3RyaW5nIixjb29yZGluYXRlczpbdHx8ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksZXx8dS5hcHBseSh0aGlzLGFyZ3VtZW50cyldfX12YXIgdCxlLHI9bXIsdT15cjtyZXR1cm4gbi5kaXN0YW5jZT1mdW5jdGlvbigpe3JldHVybiBCby5nZW8uZGlzdGFuY2UodHx8ci5hcHBseSh0aGlzLGFyZ3VtZW50cyksZXx8dS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxuLnNvdXJjZT1mdW5jdGlvbihlKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8ocj1lLHQ9ImZ1bmN0aW9uIj09dHlwZW9mIGU/bnVsbDplLG4pOnJ9LG4udGFyZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh1PXQsZT0iZnVuY3Rpb24iPT10eXBlb2YgdD9udWxsOnQsbik6dX0sbi5wcmVjaXNpb249ZnVuY3Rpb24oKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD9uOjB9LG59LEJvLmdlby5pbnRlcnBvbGF0ZT1mdW5jdGlvbihuLHQpe3JldHVybiB4cihuWzBdKkxhLG5bMV0qTGEsdFswXSpMYSx0WzFdKkxhKX0sQm8uZ2VvLmxlbmd0aD1mdW5jdGlvbihuKXtyZXR1cm4gRmM9MCxCby5nZW8uc3RyZWFtKG4sSGMpLEZjfTt2YXIgRmMsSGM9e3NwaGVyZTp5LHBvaW50OnksbGluZVN0YXJ0Ok1yLGxpbmVFbmQ6eSxwb2x5Z29uU3RhcnQ6eSxwb2x5Z29uRW5kOnl9LE9jPV9yKGZ1bmN0aW9uKG4pe3JldHVybiBNYXRoLnNxcnQoMi8oMStuKSl9LGZ1bmN0aW9uKG4pe3JldHVybiAyKk1hdGguYXNpbihuLzIpfSk7KEJvLmdlby5hemltdXRoYWxFcXVhbEFyZWE9ZnVuY3Rpb24oKXtyZXR1cm4gdXIoT2MpfSkucmF3PU9jO3ZhciBZYz1fcihmdW5jdGlvbihuKXt2YXIgdD1NYXRoLmFjb3Mobik7cmV0dXJuIHQmJnQvTWF0aC5zaW4odCl9LEV0KTsoQm8uZ2VvLmF6aW11dGhhbEVxdWlkaXN0YW50PWZ1bmN0aW9uKCl7cmV0dXJuIHVyKFljKX0pLnJhdz1ZYywoQm8uZ2VvLmNvbmljQ29uZm9ybWFsPWZ1bmN0aW9uKCl7cmV0dXJuIEllKGJyKX0pLnJhdz1iciwoQm8uZ2VvLmNvbmljRXF1aWRpc3RhbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gSWUod3IpfSkucmF3PXdyO3ZhciBJYz1fcihmdW5jdGlvbihuKXtyZXR1cm4gMS9ufSxNYXRoLmF0YW4pOyhCby5nZW8uZ25vbW9uaWM9ZnVuY3Rpb24oKXtyZXR1cm4gdXIoSWMpfSkucmF3PUljLFNyLmludmVydD1mdW5jdGlvbihuLHQpe3JldHVybltuLDIqTWF0aC5hdGFuKE1hdGguZXhwKHQpKS1DYV19LChCby5nZW8ubWVyY2F0b3I9ZnVuY3Rpb24oKXtyZXR1cm4ga3IoU3IpfSkucmF3PVNyO3ZhciBaYz1fcihmdW5jdGlvbigpe3JldHVybiAxfSxNYXRoLmFzaW4pOyhCby5nZW8ub3J0aG9ncmFwaGljPWZ1bmN0aW9uKCl7cmV0dXJuIHVyKFpjKX0pLnJhdz1aYzt2YXIgVmM9X3IoZnVuY3Rpb24obil7cmV0dXJuIDEvKDErbil9LGZ1bmN0aW9uKG4pe3JldHVybiAyKk1hdGguYXRhbihuKX0pOyhCby5nZW8uc3RlcmVvZ3JhcGhpYz1mdW5jdGlvbigpe3JldHVybiB1cihWYyl9KS5yYXc9VmMsRXIuaW52ZXJ0PWZ1bmN0aW9uKG4sdCl7cmV0dXJuWy10LDIqTWF0aC5hdGFuKE1hdGguZXhwKG4pKS1DYV19LChCby5nZW8udHJhbnN2ZXJzZU1lcmNhdG9yPWZ1bmN0aW9uKCl7dmFyIG49a3IoRXIpLHQ9bi5jZW50ZXIsZT1uLnJvdGF0ZTtyZXR1cm4gbi5jZW50ZXI9ZnVuY3Rpb24obil7cmV0dXJuIG4/dChbLW5bMV0sblswXV0pOihuPXQoKSxbblsxXSwtblswXV0pfSxuLnJvdGF0ZT1mdW5jdGlvbihuKXtyZXR1cm4gbj9lKFtuWzBdLG5bMV0sbi5sZW5ndGg+Mj9uWzJdKzkwOjkwXSk6KG49ZSgpLFtuWzBdLG5bMV0sblsyXS05MF0pfSxlKFswLDAsOTBdKX0pLnJhdz1FcixCby5nZW9tPXt9LEJvLmdlb20uaHVsbD1mdW5jdGlvbihuKXtmdW5jdGlvbiB0KG4pe2lmKG4ubGVuZ3RoPDMpcmV0dXJuW107dmFyIHQsdT1rdChlKSxpPWt0KHIpLG89bi5sZW5ndGgsYT1bXSxjPVtdO2Zvcih0PTA7bz50O3QrKylhLnB1c2goWyt1LmNhbGwodGhpcyxuW3RdLHQpLCtpLmNhbGwodGhpcyxuW3RdLHQpLHRdKTtmb3IoYS5zb3J0KHpyKSx0PTA7bz50O3QrKyljLnB1c2goW2FbdF1bMF0sLWFbdF1bMV1dKTt2YXIgbD1OcihhKSxzPU5yKGMpLGY9c1swXT09PWxbMF0saD1zW3MubGVuZ3RoLTFdPT09bFtsLmxlbmd0aC0xXSxnPVtdO2Zvcih0PWwubGVuZ3RoLTE7dD49MDstLXQpZy5wdXNoKG5bYVtsW3RdXVsyXV0pO2Zvcih0PStmO3Q8cy5sZW5ndGgtaDsrK3QpZy5wdXNoKG5bYVtzW3RdXVsyXV0pO3JldHVybiBnfXZhciBlPUFyLHI9Q3I7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/dChuKToodC54PWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhlPW4sdCk6ZX0sdC55PWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPW4sdCk6cn0sdCl9LEJvLmdlb20ucG9seWdvbj1mdW5jdGlvbihuKXtyZXR1cm4gZ2EobixYYyksbn07dmFyIFhjPUJvLmdlb20ucG9seWdvbi5wcm90b3R5cGU9W107WGMuYXJlYT1mdW5jdGlvbigpe2Zvcih2YXIgbix0PS0xLGU9dGhpcy5sZW5ndGgscj10aGlzW2UtMV0sdT0wOysrdDxlOyluPXIscj10aGlzW3RdLHUrPW5bMV0qclswXS1uWzBdKnJbMV07cmV0dXJuLjUqdX0sWGMuY2VudHJvaWQ9ZnVuY3Rpb24obil7dmFyIHQsZSxyPS0xLHU9dGhpcy5sZW5ndGgsaT0wLG89MCxhPXRoaXNbdS0xXTtmb3IoYXJndW1lbnRzLmxlbmd0aHx8KG49LTEvKDYqdGhpcy5hcmVhKCkpKTsrK3I8dTspdD1hLGE9dGhpc1tyXSxlPXRbMF0qYVsxXS1hWzBdKnRbMV0saSs9KHRbMF0rYVswXSkqZSxvKz0odFsxXSthWzFdKSplO3JldHVybltpKm4sbypuXX0sWGMuY2xpcD1mdW5jdGlvbihuKXtmb3IodmFyIHQsZSxyLHUsaSxvLGE9cXIobiksYz0tMSxsPXRoaXMubGVuZ3RoLXFyKHRoaXMpLHM9dGhpc1tsLTFdOysrYzxsOyl7Zm9yKHQ9bi5zbGljZSgpLG4ubGVuZ3RoPTAsdT10aGlzW2NdLGk9dFsocj10Lmxlbmd0aC1hKS0xXSxlPS0xOysrZTxyOylvPXRbZV0sTHIobyxzLHUpPyhMcihpLHMsdSl8fG4ucHVzaChUcihpLG8scyx1KSksbi5wdXNoKG8pKTpMcihpLHMsdSkmJm4ucHVzaChUcihpLG8scyx1KSksaT1vO2EmJm4ucHVzaChuWzBdKSxzPXV9cmV0dXJuIG59O3ZhciAkYyxCYyxXYyxKYyxHYyxLYz1bXSxRYz1bXTtPci5wcm90b3R5cGUucHJlcGFyZT1mdW5jdGlvbigpe2Zvcih2YXIgbix0PXRoaXMuZWRnZXMsZT10Lmxlbmd0aDtlLS07KW49dFtlXS5lZGdlLG4uYiYmbi5hfHx0LnNwbGljZShlLDEpO3JldHVybiB0LnNvcnQoSXIpLHQubGVuZ3RofSxRci5wcm90b3R5cGU9e3N0YXJ0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWRnZS5sPT09dGhpcy5zaXRlP3RoaXMuZWRnZS5hOnRoaXMuZWRnZS5ifSxlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lZGdlLmw9PT10aGlzLnNpdGU/dGhpcy5lZGdlLmI6dGhpcy5lZGdlLmF9fSxudS5wcm90b3R5cGU9e2luc2VydDpmdW5jdGlvbihuLHQpe3ZhciBlLHIsdTtpZihuKXtpZih0LlA9bix0Lk49bi5OLG4uTiYmKG4uTi5QPXQpLG4uTj10LG4uUil7Zm9yKG49bi5SO24uTDspbj1uLkw7bi5MPXR9ZWxzZSBuLlI9dDtlPW59ZWxzZSB0aGlzLl8/KG49dXUodGhpcy5fKSx0LlA9bnVsbCx0Lk49bixuLlA9bi5MPXQsZT1uKToodC5QPXQuTj1udWxsLHRoaXMuXz10LGU9bnVsbCk7Zm9yKHQuTD10LlI9bnVsbCx0LlU9ZSx0LkM9ITAsbj10O2UmJmUuQzspcj1lLlUsZT09PXIuTD8odT1yLlIsdSYmdS5DPyhlLkM9dS5DPSExLHIuQz0hMCxuPXIpOihuPT09ZS5SJiYoZXUodGhpcyxlKSxuPWUsZT1uLlUpLGUuQz0hMSxyLkM9ITAscnUodGhpcyxyKSkpOih1PXIuTCx1JiZ1LkM/KGUuQz11LkM9ITEsci5DPSEwLG49cik6KG49PT1lLkwmJihydSh0aGlzLGUpLG49ZSxlPW4uVSksZS5DPSExLHIuQz0hMCxldSh0aGlzLHIpKSksZT1uLlU7dGhpcy5fLkM9ITF9LHJlbW92ZTpmdW5jdGlvbihuKXtuLk4mJihuLk4uUD1uLlApLG4uUCYmKG4uUC5OPW4uTiksbi5OPW4uUD1udWxsO3ZhciB0LGUscix1PW4uVSxpPW4uTCxvPW4uUjtpZihlPWk/bz91dShvKTppOm8sdT91Lkw9PT1uP3UuTD1lOnUuUj1lOnRoaXMuXz1lLGkmJm8/KHI9ZS5DLGUuQz1uLkMsZS5MPWksaS5VPWUsZSE9PW8/KHU9ZS5VLGUuVT1uLlUsbj1lLlIsdS5MPW4sZS5SPW8sby5VPWUpOihlLlU9dSx1PWUsbj1lLlIpKToocj1uLkMsbj1lKSxuJiYobi5VPXUpLCFyKXtpZihuJiZuLkMpcmV0dXJuIG4uQz0hMSx2b2lkIDA7ZG97aWYobj09PXRoaXMuXylicmVhaztpZihuPT09dS5MKXtpZih0PXUuUix0LkMmJih0LkM9ITEsdS5DPSEwLGV1KHRoaXMsdSksdD11LlIpLHQuTCYmdC5MLkN8fHQuUiYmdC5SLkMpe3QuUiYmdC5SLkN8fCh0LkwuQz0hMSx0LkM9ITAscnUodGhpcyx0KSx0PXUuUiksdC5DPXUuQyx1LkM9dC5SLkM9ITEsZXUodGhpcyx1KSxuPXRoaXMuXzticmVha319ZWxzZSBpZih0PXUuTCx0LkMmJih0LkM9ITEsdS5DPSEwLHJ1KHRoaXMsdSksdD11LkwpLHQuTCYmdC5MLkN8fHQuUiYmdC5SLkMpe3QuTCYmdC5MLkN8fCh0LlIuQz0hMSx0LkM9ITAsZXUodGhpcyx0KSx0PXUuTCksdC5DPXUuQyx1LkM9dC5MLkM9ITEscnUodGhpcyx1KSxuPXRoaXMuXzticmVha310LkM9ITAsbj11LHU9dS5VfXdoaWxlKCFuLkMpO24mJihuLkM9ITEpfX19LEJvLmdlb20udm9yb25vaT1mdW5jdGlvbihuKXtmdW5jdGlvbiB0KG4pe3ZhciB0PW5ldyBBcnJheShuLmxlbmd0aCkscj1hWzBdWzBdLHU9YVswXVsxXSxpPWFbMV1bMF0sbz1hWzFdWzFdO3JldHVybiBpdShlKG4pLGEpLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oZSxhKXt2YXIgYz1lLmVkZ2VzLGw9ZS5zaXRlLHM9dFthXT1jLmxlbmd0aD9jLm1hcChmdW5jdGlvbihuKXt2YXIgdD1uLnN0YXJ0KCk7cmV0dXJuW3QueCx0LnldfSk6bC54Pj1yJiZsLng8PWkmJmwueT49dSYmbC55PD1vP1tbcixvXSxbaSxvXSxbaSx1XSxbcix1XV06W107cy5wb2ludD1uW2FdfSksdH1mdW5jdGlvbiBlKG4pe3JldHVybiBuLm1hcChmdW5jdGlvbihuLHQpe3JldHVybnt4Ok1hdGgucm91bmQoaShuLHQpL05hKSpOYSx5Ok1hdGgucm91bmQobyhuLHQpL05hKSpOYSxpOnR9fSl9dmFyIHI9QXIsdT1DcixpPXIsbz11LGE9bmw7cmV0dXJuIG4/dChuKToodC5saW5rcz1mdW5jdGlvbihuKXtyZXR1cm4gaXUoZShuKSkuZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKG4pe3JldHVybiBuLmwmJm4ucn0pLm1hcChmdW5jdGlvbih0KXtyZXR1cm57c291cmNlOm5bdC5sLmldLHRhcmdldDpuW3Quci5pXX19KX0sdC50cmlhbmdsZXM9ZnVuY3Rpb24obil7dmFyIHQ9W107cmV0dXJuIGl1KGUobikpLmNlbGxzLmZvckVhY2goZnVuY3Rpb24oZSxyKXtmb3IodmFyIHUsaSxvPWUuc2l0ZSxhPWUuZWRnZXMuc29ydChJciksYz0tMSxsPWEubGVuZ3RoLHM9YVtsLTFdLmVkZ2UsZj1zLmw9PT1vP3MucjpzLmw7KytjPGw7KXU9cyxpPWYscz1hW2NdLmVkZ2UsZj1zLmw9PT1vP3MucjpzLmwscjxpLmkmJnI8Zi5pJiZhdShvLGksZik8MCYmdC5wdXNoKFtuW3JdLG5baS5pXSxuW2YuaV1dKX0pLHR9LHQueD1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT1rdChyPW4pLHQpOnJ9LHQueT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obz1rdCh1PW4pLHQpOnV9LHQuY2xpcEV4dGVudD1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oYT1udWxsPT1uP25sOm4sdCk6YT09PW5sP251bGw6YX0sdC5zaXplPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP3QuY2xpcEV4dGVudChuJiZbWzAsMF0sbl0pOmE9PT1ubD9udWxsOmEmJmFbMV19LHQpfTt2YXIgbmw9W1stMWU2LC0xZTZdLFsxZTYsMWU2XV07Qm8uZ2VvbS5kZWxhdW5heT1mdW5jdGlvbihuKXtyZXR1cm4gQm8uZ2VvbS52b3Jvbm9pKCkudHJpYW5nbGVzKG4pfSxCby5nZW9tLnF1YWR0cmVlPWZ1bmN0aW9uKG4sdCxlLHIsdSl7ZnVuY3Rpb24gaShuKXtmdW5jdGlvbiBpKG4sdCxlLHIsdSxpLG8sYSl7aWYoIWlzTmFOKGUpJiYhaXNOYU4ocikpaWYobi5sZWFmKXt2YXIgYz1uLngscz1uLnk7aWYobnVsbCE9YylpZihjYShjLWUpK2NhKHMtcik8LjAxKWwobix0LGUscix1LGksbyxhKTtlbHNle3ZhciBmPW4ucG9pbnQ7bi54PW4ueT1uLnBvaW50PW51bGwsbChuLGYsYyxzLHUsaSxvLGEpLGwobix0LGUscix1LGksbyxhKX1lbHNlIG4ueD1lLG4ueT1yLG4ucG9pbnQ9dH1lbHNlIGwobix0LGUscix1LGksbyxhKX1mdW5jdGlvbiBsKG4sdCxlLHIsdSxvLGEsYyl7dmFyIGw9LjUqKHUrYSkscz0uNSoobytjKSxmPWU+PWwsaD1yPj1zLGc9KGg8PDEpK2Y7bi5sZWFmPSExLG49bi5ub2Rlc1tnXXx8KG4ubm9kZXNbZ109c3UoKSksZj91PWw6YT1sLGg/bz1zOmM9cyxpKG4sdCxlLHIsdSxvLGEsYyl9dmFyIHMsZixoLGcscCx2LGQsbSx5LHg9a3QoYSksTT1rdChjKTtpZihudWxsIT10KXY9dCxkPWUsbT1yLHk9dTtlbHNlIGlmKG09eT0tKHY9ZD0xLzApLGY9W10saD1bXSxwPW4ubGVuZ3RoLG8pZm9yKGc9MDtwPmc7KytnKXM9bltnXSxzLng8diYmKHY9cy54KSxzLnk8ZCYmKGQ9cy55KSxzLng+bSYmKG09cy54KSxzLnk+eSYmKHk9cy55KSxmLnB1c2gocy54KSxoLnB1c2gocy55KTtlbHNlIGZvcihnPTA7cD5nOysrZyl7dmFyIF89K3gocz1uW2ddLGcpLGI9K00ocyxnKTt2Pl8mJih2PV8pLGQ+YiYmKGQ9YiksXz5tJiYobT1fKSxiPnkmJih5PWIpLGYucHVzaChfKSxoLnB1c2goYil9dmFyIHc9bS12LFM9eS1kO3c+Uz95PWQrdzptPXYrUzt2YXIgaz1zdSgpO2lmKGsuYWRkPWZ1bmN0aW9uKG4pe2koayxuLCt4KG4sKytnKSwrTShuLGcpLHYsZCxtLHkpfSxrLnZpc2l0PWZ1bmN0aW9uKG4pe2Z1KG4sayx2LGQsbSx5KX0sZz0tMSxudWxsPT10KXtmb3IoOysrZzxwOylpKGssbltnXSxmW2ddLGhbZ10sdixkLG0seSk7LS1nfWVsc2Ugbi5mb3JFYWNoKGsuYWRkKTtyZXR1cm4gZj1oPW49cz1udWxsLGt9dmFyIG8sYT1BcixjPUNyO3JldHVybihvPWFyZ3VtZW50cy5sZW5ndGgpPyhhPWN1LGM9bHUsMz09PW8mJih1PWUscj10LGU9dD0wKSxpKG4pKTooaS54PWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhhPW4saSk6YX0saS55PWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhjPW4saSk6Y30saS5leHRlbnQ9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KG51bGw9PW4/dD1lPXI9dT1udWxsOih0PStuWzBdWzBdLGU9K25bMF1bMV0scj0rblsxXVswXSx1PStuWzFdWzFdKSxpKTpudWxsPT10P251bGw6W1t0LGVdLFtyLHVdXX0saS5zaXplPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhudWxsPT1uP3Q9ZT1yPXU9bnVsbDoodD1lPTAscj0rblswXSx1PStuWzFdKSxpKTpudWxsPT10P251bGw6W3ItdCx1LWVdfSxpKX0sQm8uaW50ZXJwb2xhdGVSZ2I9aHUsQm8uaW50ZXJwb2xhdGVPYmplY3Q9Z3UsQm8uaW50ZXJwb2xhdGVOdW1iZXI9cHUsQm8uaW50ZXJwb2xhdGVTdHJpbmc9dnU7dmFyIHRsPS9bLStdPyg/OlxkK1wuP1xkKnxcLj9cZCspKD86W2VFXVstK10/XGQrKT8vZyxlbD1uZXcgUmVnRXhwKHRsLnNvdXJjZSwiZyIpO0JvLmludGVycG9sYXRlPWR1LEJvLmludGVycG9sYXRvcnM9W2Z1bmN0aW9uKG4sdCl7dmFyIGU9dHlwZW9mIHQ7cmV0dXJuKCJzdHJpbmciPT09ZT8kYS5oYXModCl8fC9eKCN8cmdiXCh8aHNsXCgpLy50ZXN0KHQpP2h1OnZ1OnQgaW5zdGFuY2VvZiBpdD9odTpBcnJheS5pc0FycmF5KHQpP211OiJvYmplY3QiPT09ZSYmaXNOYU4odCk/Z3U6cHUpKG4sdCl9XSxCby5pbnRlcnBvbGF0ZUFycmF5PW11O3ZhciBybD1mdW5jdGlvbigpe3JldHVybiBFdH0sdWw9Qm8ubWFwKHtsaW5lYXI6cmwscG9seTpTdSxxdWFkOmZ1bmN0aW9uKCl7cmV0dXJuIF91fSxjdWJpYzpmdW5jdGlvbigpe3JldHVybiBidX0sc2luOmZ1bmN0aW9uKCl7cmV0dXJuIGt1fSxleHA6ZnVuY3Rpb24oKXtyZXR1cm4gRXV9LGNpcmNsZTpmdW5jdGlvbigpe3JldHVybiBBdX0sZWxhc3RpYzpDdSxiYWNrOk51LGJvdW5jZTpmdW5jdGlvbigpe3JldHVybiB6dX19KSxpbD1Cby5tYXAoeyJpbiI6RXQsb3V0Onh1LCJpbi1vdXQiOk11LCJvdXQtaW4iOmZ1bmN0aW9uKG4pe3JldHVybiBNdSh4dShuKSl9fSk7Qm8uZWFzZT1mdW5jdGlvbihuKXt2YXIgdD1uLmluZGV4T2YoIi0iKSxlPXQ+PTA/bi5zbGljZSgwLHQpOm4scj10Pj0wP24uc2xpY2UodCsxKToiaW4iO3JldHVybiBlPXVsLmdldChlKXx8cmwscj1pbC5nZXQocil8fEV0LHl1KHIoZS5hcHBseShudWxsLFdvLmNhbGwoYXJndW1lbnRzLDEpKSkpfSxCby5pbnRlcnBvbGF0ZUhjbD1MdSxCby5pbnRlcnBvbGF0ZUhzbD1UdSxCby5pbnRlcnBvbGF0ZUxhYj1xdSxCby5pbnRlcnBvbGF0ZVJvdW5kPVJ1LEJvLnRyYW5zZm9ybT1mdW5jdGlvbihuKXt2YXIgdD1Hby5jcmVhdGVFbGVtZW50TlMoQm8ubnMucHJlZml4LnN2ZywiZyIpO3JldHVybihCby50cmFuc2Zvcm09ZnVuY3Rpb24obil7aWYobnVsbCE9bil7dC5zZXRBdHRyaWJ1dGUoInRyYW5zZm9ybSIsbik7dmFyIGU9dC50cmFuc2Zvcm0uYmFzZVZhbC5jb25zb2xpZGF0ZSgpfXJldHVybiBuZXcgRHUoZT9lLm1hdHJpeDpvbCl9KShuKX0sRHUucHJvdG90eXBlLnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuInRyYW5zbGF0ZSgiK3RoaXMudHJhbnNsYXRlKyIpcm90YXRlKCIrdGhpcy5yb3RhdGUrIilza2V3WCgiK3RoaXMuc2tldysiKXNjYWxlKCIrdGhpcy5zY2FsZSsiKSJ9O3ZhciBvbD17YToxLGI6MCxjOjAsZDoxLGU6MCxmOjB9O0JvLmludGVycG9sYXRlVHJhbnNmb3JtPUZ1LEJvLmxheW91dD17fSxCby5sYXlvdXQuYnVuZGxlPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKG4pe2Zvcih2YXIgdD1bXSxlPS0xLHI9bi5sZW5ndGg7KytlPHI7KXQucHVzaChZdShuW2VdKSk7cmV0dXJuIHR9fSxCby5sYXlvdXQuY2hvcmQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKCl7dmFyIG4sbCxmLGgsZyxwPXt9LHY9W10sZD1Cby5yYW5nZShpKSxtPVtdO2ZvcihlPVtdLHI9W10sbj0wLGg9LTE7KytoPGk7KXtmb3IobD0wLGc9LTE7KytnPGk7KWwrPXVbaF1bZ107di5wdXNoKGwpLG0ucHVzaChCby5yYW5nZShpKSksbis9bH1mb3IobyYmZC5zb3J0KGZ1bmN0aW9uKG4sdCl7cmV0dXJuIG8odltuXSx2W3RdKX0pLGEmJm0uZm9yRWFjaChmdW5jdGlvbihuLHQpe24uc29ydChmdW5jdGlvbihuLGUpe3JldHVybiBhKHVbdF1bbl0sdVt0XVtlXSl9KX0pLG49KEFhLXMqaSkvbixsPTAsaD0tMTsrK2g8aTspe2ZvcihmPWwsZz0tMTsrK2c8aTspe3ZhciB5PWRbaF0seD1tW3ldW2ddLE09dVt5XVt4XSxfPWwsYj1sKz1NKm47cFt5KyItIit4XT17aW5kZXg6eSxzdWJpbmRleDp4LHN0YXJ0QW5nbGU6XyxlbmRBbmdsZTpiLHZhbHVlOk19fXJbeV09e2luZGV4Onksc3RhcnRBbmdsZTpmLGVuZEFuZ2xlOmwsdmFsdWU6KGwtZikvbn0sbCs9c31mb3IoaD0tMTsrK2g8aTspZm9yKGc9aC0xOysrZzxpOyl7dmFyIHc9cFtoKyItIitnXSxTPXBbZysiLSIraF07KHcudmFsdWV8fFMudmFsdWUpJiZlLnB1c2gody52YWx1ZTxTLnZhbHVlP3tzb3VyY2U6Uyx0YXJnZXQ6d306e3NvdXJjZTp3LHRhcmdldDpTfSl9YyYmdCgpfWZ1bmN0aW9uIHQoKXtlLnNvcnQoZnVuY3Rpb24obix0KXtyZXR1cm4gYygobi5zb3VyY2UudmFsdWUrbi50YXJnZXQudmFsdWUpLzIsKHQuc291cmNlLnZhbHVlK3QudGFyZ2V0LnZhbHVlKS8yKX0pfXZhciBlLHIsdSxpLG8sYSxjLGw9e30scz0wO3JldHVybiBsLm1hdHJpeD1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT0odT1uKSYmdS5sZW5ndGgsZT1yPW51bGwsbCk6dX0sbC5wYWRkaW5nPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhzPW4sZT1yPW51bGwsbCk6c30sbC5zb3J0R3JvdXBzPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhvPW4sZT1yPW51bGwsbCk6b30sbC5zb3J0U3ViZ3JvdXBzPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhhPW4sZT1udWxsLGwpOmF9LGwuc29ydENob3Jkcz1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oYz1uLGUmJnQoKSxsKTpjfSxsLmNob3Jkcz1mdW5jdGlvbigpe3JldHVybiBlfHxuKCksZX0sbC5ncm91cHM9ZnVuY3Rpb24oKXtyZXR1cm4gcnx8bigpLHJ9LGx9LEJvLmxheW91dC5mb3JjZT1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obil7cmV0dXJuIGZ1bmN0aW9uKHQsZSxyLHUpe2lmKHQucG9pbnQhPT1uKXt2YXIgaT10LmN4LW4ueCxvPXQuY3ktbi55LGE9dS1lLGM9aSppK28qbztpZihjPmEqYS9kKXtpZihwPmMpe3ZhciBsPXQuY2hhcmdlL2M7bi5weC09aSpsLG4ucHktPW8qbH1yZXR1cm4hMH1pZih0LnBvaW50JiZjJiZwPmMpe3ZhciBsPXQucG9pbnRDaGFyZ2UvYztuLnB4LT1pKmwsbi5weS09bypsfX1yZXR1cm4hdC5jaGFyZ2V9fWZ1bmN0aW9uIHQobil7bi5weD1Cby5ldmVudC54LG4ucHk9Qm8uZXZlbnQueSxhLnJlc3VtZSgpfXZhciBlLHIsdSxpLG8sYT17fSxjPUJvLmRpc3BhdGNoKCJzdGFydCIsInRpY2siLCJlbmQiKSxsPVsxLDFdLHM9LjksZj1hbCxoPWNsLGc9LTMwLHA9bGwsdj0uMSxkPS42NCxtPVtdLHk9W107cmV0dXJuIGEudGljaz1mdW5jdGlvbigpe2lmKChyKj0uOTkpPC4wMDUpcmV0dXJuIGMuZW5kKHt0eXBlOiJlbmQiLGFscGhhOnI9MH0pLCEwO3ZhciB0LGUsYSxmLGgscCxkLHgsTSxfPW0ubGVuZ3RoLGI9eS5sZW5ndGg7Zm9yKGU9MDtiPmU7KytlKWE9eVtlXSxmPWEuc291cmNlLGg9YS50YXJnZXQseD1oLngtZi54LE09aC55LWYueSwocD14KngrTSpNKSYmKHA9cippW2VdKigocD1NYXRoLnNxcnQocCkpLXVbZV0pL3AseCo9cCxNKj1wLGgueC09eCooZD1mLndlaWdodC8oaC53ZWlnaHQrZi53ZWlnaHQpKSxoLnktPU0qZCxmLngrPXgqKGQ9MS1kKSxmLnkrPU0qZCk7aWYoKGQ9cip2KSYmKHg9bFswXS8yLE09bFsxXS8yLGU9LTEsZCkpZm9yKDsrK2U8XzspYT1tW2VdLGEueCs9KHgtYS54KSpkLGEueSs9KE0tYS55KSpkO2lmKGcpZm9yKFd1KHQ9Qm8uZ2VvbS5xdWFkdHJlZShtKSxyLG8pLGU9LTE7KytlPF87KShhPW1bZV0pLmZpeGVkfHx0LnZpc2l0KG4oYSkpO2ZvcihlPS0xOysrZTxfOylhPW1bZV0sYS5maXhlZD8oYS54PWEucHgsYS55PWEucHkpOihhLngtPShhLnB4LShhLnB4PWEueCkpKnMsYS55LT0oYS5weS0oYS5weT1hLnkpKSpzKTtjLnRpY2soe3R5cGU6InRpY2siLGFscGhhOnJ9KX0sYS5ub2Rlcz1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obT1uLGEpOm19LGEubGlua3M9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHk9bixhKTp5fSxhLnNpemU9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGw9bixhKTpsfSxhLmxpbmtEaXN0YW5jZT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZj0iZnVuY3Rpb24iPT10eXBlb2Ygbj9uOituLGEpOmZ9LGEuZGlzdGFuY2U9YS5saW5rRGlzdGFuY2UsYS5saW5rU3RyZW5ndGg9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGg9ImZ1bmN0aW9uIj09dHlwZW9mIG4/bjorbixhKTpofSxhLmZyaWN0aW9uPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhzPStuLGEpOnN9LGEuY2hhcmdlPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhnPSJmdW5jdGlvbiI9PXR5cGVvZiBuP246K24sYSk6Z30sYS5jaGFyZ2VEaXN0YW5jZT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8ocD1uKm4sYSk6TWF0aC5zcXJ0KHApfSxhLmdyYXZpdHk9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHY9K24sYSk6dn0sYS50aGV0YT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZD1uKm4sYSk6TWF0aC5zcXJ0KGQpfSxhLmFscGhhPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhuPStuLHI/cj1uPjA/bjowOm4+MCYmKGMuc3RhcnQoe3R5cGU6InN0YXJ0IixhbHBoYTpyPW59KSxCby50aW1lcihhLnRpY2spKSxhKTpyfSxhLnN0YXJ0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLHIpe2lmKCFlKXtmb3IoZT1uZXcgQXJyYXkoYyksYT0wO2M+YTsrK2EpZVthXT1bXTtmb3IoYT0wO2w+YTsrK2Epe3ZhciB1PXlbYV07ZVt1LnNvdXJjZS5pbmRleF0ucHVzaCh1LnRhcmdldCksZVt1LnRhcmdldC5pbmRleF0ucHVzaCh1LnNvdXJjZSl9fWZvcih2YXIgaSxvPWVbdF0sYT0tMSxsPW8ubGVuZ3RoOysrYTxsOylpZighaXNOYU4oaT1vW2FdW25dKSlyZXR1cm4gaTtyZXR1cm4gTWF0aC5yYW5kb20oKSpyfXZhciB0LGUscixjPW0ubGVuZ3RoLHM9eS5sZW5ndGgscD1sWzBdLHY9bFsxXTtmb3IodD0wO2M+dDsrK3QpKHI9bVt0XSkuaW5kZXg9dCxyLndlaWdodD0wO2Zvcih0PTA7cz50OysrdClyPXlbdF0sIm51bWJlciI9PXR5cGVvZiByLnNvdXJjZSYmKHIuc291cmNlPW1bci5zb3VyY2VdKSwibnVtYmVyIj09dHlwZW9mIHIudGFyZ2V0JiYoci50YXJnZXQ9bVtyLnRhcmdldF0pLCsrci5zb3VyY2Uud2VpZ2h0LCsrci50YXJnZXQud2VpZ2h0O2Zvcih0PTA7Yz50OysrdClyPW1bdF0saXNOYU4oci54KSYmKHIueD1uKCJ4IixwKSksaXNOYU4oci55KSYmKHIueT1uKCJ5Iix2KSksaXNOYU4oci5weCkmJihyLnB4PXIueCksaXNOYU4oci5weSkmJihyLnB5PXIueSk7aWYodT1bXSwiZnVuY3Rpb24iPT10eXBlb2YgZilmb3IodD0wO3M+dDsrK3QpdVt0XT0rZi5jYWxsKHRoaXMseVt0XSx0KTtlbHNlIGZvcih0PTA7cz50OysrdCl1W3RdPWY7aWYoaT1bXSwiZnVuY3Rpb24iPT10eXBlb2YgaClmb3IodD0wO3M+dDsrK3QpaVt0XT0raC5jYWxsKHRoaXMseVt0XSx0KTtlbHNlIGZvcih0PTA7cz50OysrdClpW3RdPWg7aWYobz1bXSwiZnVuY3Rpb24iPT10eXBlb2YgZylmb3IodD0wO2M+dDsrK3Qpb1t0XT0rZy5jYWxsKHRoaXMsbVt0XSx0KTtlbHNlIGZvcih0PTA7Yz50OysrdClvW3RdPWc7cmV0dXJuIGEucmVzdW1lKCl9LGEucmVzdW1lPWZ1bmN0aW9uKCl7cmV0dXJuIGEuYWxwaGEoLjEpfSxhLnN0b3A9ZnVuY3Rpb24oKXtyZXR1cm4gYS5hbHBoYSgwKX0sYS5kcmFnPWZ1bmN0aW9uKCl7cmV0dXJuIGV8fChlPUJvLmJlaGF2aW9yLmRyYWcoKS5vcmlnaW4oRXQpLm9uKCJkcmFnc3RhcnQuZm9yY2UiLFZ1KS5vbigiZHJhZy5mb3JjZSIsdCkub24oImRyYWdlbmQuZm9yY2UiLFh1KSksYXJndW1lbnRzLmxlbmd0aD8odGhpcy5vbigibW91c2VvdmVyLmZvcmNlIiwkdSkub24oIm1vdXNlb3V0LmZvcmNlIixCdSkuY2FsbChlKSx2b2lkIDApOmV9LEJvLnJlYmluZChhLGMsIm9uIil9O3ZhciBhbD0yMCxjbD0xLGxsPTEvMDtCby5sYXlvdXQuaGllcmFyY2h5PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbih1KXt2YXIgaSxvPVt1XSxhPVtdO2Zvcih1LmRlcHRoPTA7bnVsbCE9KGk9by5wb3AoKSk7KWlmKGEucHVzaChpKSwobD1lLmNhbGwobixpLGkuZGVwdGgpKSYmKGM9bC5sZW5ndGgpKXtmb3IodmFyIGMsbCxzOy0tYz49MDspby5wdXNoKHM9bFtjXSkscy5wYXJlbnQ9aSxzLmRlcHRoPWkuZGVwdGgrMTtyJiYoaS52YWx1ZT0wKSxpLmNoaWxkcmVuPWx9ZWxzZSByJiYoaS52YWx1ZT0rci5jYWxsKG4saSxpLmRlcHRoKXx8MCksZGVsZXRlIGkuY2hpbGRyZW47cmV0dXJuIEt1KHUsZnVuY3Rpb24obil7dmFyIGUsdTt0JiYoZT1uLmNoaWxkcmVuKSYmZS5zb3J0KHQpLHImJih1PW4ucGFyZW50KSYmKHUudmFsdWUrPW4udmFsdWUpfSksYX12YXIgdD10aSxlPVF1LHI9bmk7cmV0dXJuIG4uc29ydD1mdW5jdGlvbihlKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odD1lLG4pOnR9LG4uY2hpbGRyZW49ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGU9dCxuKTplfSxuLnZhbHVlPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPXQsbik6cn0sbi5yZXZhbHVlPWZ1bmN0aW9uKHQpe3JldHVybiByJiYoR3UodCxmdW5jdGlvbihuKXtuLmNoaWxkcmVuJiYobi52YWx1ZT0wKX0pLEt1KHQsZnVuY3Rpb24odCl7dmFyIGU7dC5jaGlsZHJlbnx8KHQudmFsdWU9K3IuY2FsbChuLHQsdC5kZXB0aCl8fDApLChlPXQucGFyZW50KSYmKGUudmFsdWUrPXQudmFsdWUpfSkpLHR9LG59LEJvLmxheW91dC5wYXJ0aXRpb249ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKHQsZSxyLHUpe3ZhciBpPXQuY2hpbGRyZW47aWYodC54PWUsdC55PXQuZGVwdGgqdSx0LmR4PXIsdC5keT11LGkmJihvPWkubGVuZ3RoKSl7dmFyIG8sYSxjLGw9LTE7Zm9yKHI9dC52YWx1ZT9yL3QudmFsdWU6MDsrK2w8bzspbihhPWlbbF0sZSxjPWEudmFsdWUqcix1KSxlKz1jfX1mdW5jdGlvbiB0KG4pe3ZhciBlPW4uY2hpbGRyZW4scj0wO2lmKGUmJih1PWUubGVuZ3RoKSlmb3IodmFyIHUsaT0tMTsrK2k8dTspcj1NYXRoLm1heChyLHQoZVtpXSkpO3JldHVybiAxK3J9ZnVuY3Rpb24gZShlLGkpe3ZhciBvPXIuY2FsbCh0aGlzLGUsaSk7cmV0dXJuIG4ob1swXSwwLHVbMF0sdVsxXS90KG9bMF0pKSxvfXZhciByPUJvLmxheW91dC5oaWVyYXJjaHkoKSx1PVsxLDFdO3JldHVybiBlLnNpemU9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHU9bixlKTp1fSxKdShlLHIpfSxCby5sYXlvdXQucGllPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihpKXt2YXIgbz1pLm1hcChmdW5jdGlvbihlLHIpe3JldHVybit0LmNhbGwobixlLHIpfSksYT0rKCJmdW5jdGlvbiI9PXR5cGVvZiByP3IuYXBwbHkodGhpcyxhcmd1bWVudHMpOnIpLGM9KCgiZnVuY3Rpb24iPT10eXBlb2YgdT91LmFwcGx5KHRoaXMsYXJndW1lbnRzKTp1KS1hKS9Cby5zdW0obyksbD1Cby5yYW5nZShpLmxlbmd0aCk7bnVsbCE9ZSYmbC5zb3J0KGU9PT1zbD9mdW5jdGlvbihuLHQpe3JldHVybiBvW3RdLW9bbl19OmZ1bmN0aW9uKG4sdCl7cmV0dXJuIGUoaVtuXSxpW3RdKX0pO3ZhciBzPVtdO3JldHVybiBsLmZvckVhY2goZnVuY3Rpb24obil7dmFyIHQ7c1tuXT17ZGF0YTppW25dLHZhbHVlOnQ9b1tuXSxzdGFydEFuZ2xlOmEsZW5kQW5nbGU6YSs9dCpjfX0pLHN9dmFyIHQ9TnVtYmVyLGU9c2wscj0wLHU9QWE7cmV0dXJuIG4udmFsdWU9ZnVuY3Rpb24oZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHQ9ZSxuKTp0fSxuLnNvcnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGU9dCxuKTplfSxuLnN0YXJ0QW5nbGU9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHI9dCxuKTpyfSxuLmVuZEFuZ2xlPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh1PXQsbik6dX0sbn07dmFyIHNsPXt9O0JvLmxheW91dC5zdGFjaz1mdW5jdGlvbigpe2Z1bmN0aW9uIG4oYSxjKXtpZighKGg9YS5sZW5ndGgpKXJldHVybiBhO3ZhciBsPWEubWFwKGZ1bmN0aW9uKGUscil7cmV0dXJuIHQuY2FsbChuLGUscil9KSxzPWwubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm1hcChmdW5jdGlvbih0LGUpe3JldHVybltpLmNhbGwobix0LGUpLG8uY2FsbChuLHQsZSldfSl9KSxmPWUuY2FsbChuLHMsYyk7bD1Cby5wZXJtdXRlKGwsZikscz1Cby5wZXJtdXRlKHMsZik7dmFyIGgsZyxwLHYsZD1yLmNhbGwobixzLGMpLG09bFswXS5sZW5ndGg7Zm9yKHA9MDttPnA7KytwKWZvcih1LmNhbGwobixsWzBdW3BdLHY9ZFtwXSxzWzBdW3BdWzFdKSxnPTE7aD5nOysrZyl1LmNhbGwobixsW2ddW3BdLHYrPXNbZy0xXVtwXVsxXSxzW2ddW3BdWzFdKTtyZXR1cm4gYX12YXIgdD1FdCxlPW9pLHI9YWksdT1paSxpPXJpLG89dWk7cmV0dXJuIG4udmFsdWVzPWZ1bmN0aW9uKGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0PWUsbik6dH0sbi5vcmRlcj1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT0iZnVuY3Rpb24iPT10eXBlb2YgdD90OmZsLmdldCh0KXx8b2ksbik6ZX0sbi5vZmZzZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHI9ImZ1bmN0aW9uIj09dHlwZW9mIHQ/dDpobC5nZXQodCl8fGFpLG4pOnJ9LG4ueD1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaT10LG4pOml9LG4ueT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obz10LG4pOm99LG4ub3V0PWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh1PXQsbik6dX0sbn07dmFyIGZsPUJvLm1hcCh7Imluc2lkZS1vdXQiOmZ1bmN0aW9uKG4pe3ZhciB0LGUscj1uLmxlbmd0aCx1PW4ubWFwKGNpKSxpPW4ubWFwKGxpKSxvPUJvLnJhbmdlKHIpLnNvcnQoZnVuY3Rpb24obix0KXtyZXR1cm4gdVtuXS11W3RdfSksYT0wLGM9MCxsPVtdLHM9W107Zm9yKHQ9MDtyPnQ7Kyt0KWU9b1t0XSxjPmE/KGErPWlbZV0sbC5wdXNoKGUpKTooYys9aVtlXSxzLnB1c2goZSkpO3JldHVybiBzLnJldmVyc2UoKS5jb25jYXQobCl9LHJldmVyc2U6ZnVuY3Rpb24obil7cmV0dXJuIEJvLnJhbmdlKG4ubGVuZ3RoKS5yZXZlcnNlKCl9LCJkZWZhdWx0IjpvaX0pLGhsPUJvLm1hcCh7c2lsaG91ZXR0ZTpmdW5jdGlvbihuKXt2YXIgdCxlLHIsdT1uLmxlbmd0aCxpPW5bMF0ubGVuZ3RoLG89W10sYT0wLGM9W107Zm9yKGU9MDtpPmU7KytlKXtmb3IodD0wLHI9MDt1PnQ7dCsrKXIrPW5bdF1bZV1bMV07cj5hJiYoYT1yKSxvLnB1c2gocil9Zm9yKGU9MDtpPmU7KytlKWNbZV09KGEtb1tlXSkvMjtyZXR1cm4gY30sd2lnZ2xlOmZ1bmN0aW9uKG4pe3ZhciB0LGUscix1LGksbyxhLGMsbCxzPW4ubGVuZ3RoLGY9blswXSxoPWYubGVuZ3RoLGc9W107Zm9yKGdbMF09Yz1sPTAsZT0xO2g+ZTsrK2Upe2Zvcih0PTAsdT0wO3M+dDsrK3QpdSs9blt0XVtlXVsxXTtmb3IodD0wLGk9MCxhPWZbZV1bMF0tZltlLTFdWzBdO3M+dDsrK3Qpe2ZvcihyPTAsbz0oblt0XVtlXVsxXS1uW3RdW2UtMV1bMV0pLygyKmEpO3Q+cjsrK3Ipbys9KG5bcl1bZV1bMV0tbltyXVtlLTFdWzFdKS9hO2krPW8qblt0XVtlXVsxXX1nW2VdPWMtPXU/aS91KmE6MCxsPmMmJihsPWMpfWZvcihlPTA7aD5lOysrZSlnW2VdLT1sO3JldHVybiBnfSxleHBhbmQ6ZnVuY3Rpb24obil7dmFyIHQsZSxyLHU9bi5sZW5ndGgsaT1uWzBdLmxlbmd0aCxvPTEvdSxhPVtdO2ZvcihlPTA7aT5lOysrZSl7Zm9yKHQ9MCxyPTA7dT50O3QrKylyKz1uW3RdW2VdWzFdO2lmKHIpZm9yKHQ9MDt1PnQ7dCsrKW5bdF1bZV1bMV0vPXI7ZWxzZSBmb3IodD0wO3U+dDt0Kyspblt0XVtlXVsxXT1vfWZvcihlPTA7aT5lOysrZSlhW2VdPTA7cmV0dXJuIGF9LHplcm86YWl9KTtCby5sYXlvdXQuaGlzdG9ncmFtPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLGkpe2Zvcih2YXIgbyxhLGM9W10sbD1uLm1hcChlLHRoaXMpLHM9ci5jYWxsKHRoaXMsbCxpKSxmPXUuY2FsbCh0aGlzLHMsbCxpKSxpPS0xLGg9bC5sZW5ndGgsZz1mLmxlbmd0aC0xLHA9dD8xOjEvaDsrK2k8Zzspbz1jW2ldPVtdLG8uZHg9ZltpKzFdLShvLng9ZltpXSksby55PTA7aWYoZz4wKWZvcihpPS0xOysraTxoOylhPWxbaV0sYT49c1swXSYmYTw9c1sxXSYmKG89Y1tCby5iaXNlY3QoZixhLDEsZyktMV0sby55Kz1wLG8ucHVzaChuW2ldKSk7cmV0dXJuIGN9dmFyIHQ9ITAsZT1OdW1iZXIscj1naSx1PWZpO3JldHVybiBuLnZhbHVlPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhlPXQsbik6ZX0sbi5yYW5nZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8ocj1rdCh0KSxuKTpyfSxuLmJpbnM9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHU9Im51bWJlciI9PXR5cGVvZiB0P2Z1bmN0aW9uKG4pe3JldHVybiBoaShuLHQpfTprdCh0KSxuKTp1fSxuLmZyZXF1ZW5jeT1mdW5jdGlvbihlKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odD0hIWUsbik6dH0sbn0sQm8ubGF5b3V0LnBhY2s9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4saSl7dmFyIG89ZS5jYWxsKHRoaXMsbixpKSxhPW9bMF0sYz11WzBdLGw9dVsxXSxzPW51bGw9PXQ/TWF0aC5zcXJ0OiJmdW5jdGlvbiI9PXR5cGVvZiB0P3Q6ZnVuY3Rpb24oKXtyZXR1cm4gdH07aWYoYS54PWEueT0wLEt1KGEsZnVuY3Rpb24obil7bi5yPStzKG4udmFsdWUpfSksS3UoYSx5aSkscil7dmFyIGY9cioodD8xOk1hdGgubWF4KDIqYS5yL2MsMiphLnIvbCkpLzI7S3UoYSxmdW5jdGlvbihuKXtuLnIrPWZ9KSxLdShhLHlpKSxLdShhLGZ1bmN0aW9uKG4pe24uci09Zn0pfXJldHVybiBfaShhLGMvMixsLzIsdD8xOjEvTWF0aC5tYXgoMiphLnIvYywyKmEuci9sKSksb312YXIgdCxlPUJvLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KHBpKSxyPTAsdT1bMSwxXTtyZXR1cm4gbi5zaXplPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh1PXQsbik6dX0sbi5yYWRpdXM9ZnVuY3Rpb24oZSl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHQ9bnVsbD09ZXx8ImZ1bmN0aW9uIj09dHlwZW9mIGU/ZTorZSxuKTp0fSxuLnBhZGRpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHI9K3Qsbik6cn0sSnUobixlKX0sQm8ubGF5b3V0LnRyZWU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4sdSl7dmFyIHM9by5jYWxsKHRoaXMsbix1KSxmPXNbMF0saD10KGYpO2lmKEt1KGgsZSksaC5wYXJlbnQubT0taC56LEd1KGgsciksbClHdShmLGkpO2Vsc2V7dmFyIGc9ZixwPWYsdj1mO0d1KGYsZnVuY3Rpb24obil7bi54PGcueCYmKGc9biksbi54PnAueCYmKHA9biksbi5kZXB0aD52LmRlcHRoJiYodj1uKX0pO3ZhciBkPWEoZyxwKS8yLWcueCxtPWNbMF0vKHAueCthKHAsZykvMitkKSx5PWNbMV0vKHYuZGVwdGh8fDEpO0d1KGYsZnVuY3Rpb24obil7bi54PShuLngrZCkqbSxuLnk9bi5kZXB0aCp5fSl9cmV0dXJuIHN9ZnVuY3Rpb24gdChuKXtmb3IodmFyIHQsZT17QTpudWxsLGNoaWxkcmVuOltuXX0scj1bZV07bnVsbCE9KHQ9ci5wb3AoKSk7KWZvcih2YXIgdSxpPXQuY2hpbGRyZW4sbz0wLGE9aS5sZW5ndGg7YT5vOysrbylyLnB1c2goKGlbb109dT17XzppW29dLHBhcmVudDp0LGNoaWxkcmVuOih1PWlbb10uY2hpbGRyZW4pJiZ1LnNsaWNlKCl8fFtdLEE6bnVsbCxhOm51bGwsejowLG06MCxjOjAsczowLHQ6bnVsbCxpOm99KS5hPXUpO3JldHVybiBlLmNoaWxkcmVuWzBdfWZ1bmN0aW9uIGUobil7dmFyIHQ9bi5jaGlsZHJlbixlPW4ucGFyZW50LmNoaWxkcmVuLHI9bi5pP2Vbbi5pLTFdOm51bGw7aWYodC5sZW5ndGgpe0FpKG4pO3ZhciBpPSh0WzBdLnordFt0Lmxlbmd0aC0xXS56KS8yO3I/KG4uej1yLnorYShuLl8sci5fKSxuLm09bi56LWkpOm4uej1pfWVsc2UgciYmKG4uej1yLnorYShuLl8sci5fKSk7bi5wYXJlbnQuQT11KG4scixuLnBhcmVudC5BfHxlWzBdKX1mdW5jdGlvbiByKG4pe24uXy54PW4ueituLnBhcmVudC5tLG4ubSs9bi5wYXJlbnQubX1mdW5jdGlvbiB1KG4sdCxlKXtpZih0KXtmb3IodmFyIHIsdT1uLGk9bixvPXQsYz11LnBhcmVudC5jaGlsZHJlblswXSxsPXUubSxzPWkubSxmPW8ubSxoPWMubTtvPWtpKG8pLHU9U2kodSksbyYmdTspYz1TaShjKSxpPWtpKGkpLGkuYT1uLHI9by56K2YtdS56LWwrYShvLl8sdS5fKSxyPjAmJihFaShDaShvLG4sZSksbixyKSxsKz1yLHMrPXIpLGYrPW8ubSxsKz11Lm0saCs9Yy5tLHMrPWkubTtvJiYha2koaSkmJihpLnQ9byxpLm0rPWYtcyksdSYmIVNpKGMpJiYoYy50PXUsYy5tKz1sLWgsZT1uKX1yZXR1cm4gZX1mdW5jdGlvbiBpKG4pe24ueCo9Y1swXSxuLnk9bi5kZXB0aCpjWzFdfXZhciBvPUJvLmxheW91dC5oaWVyYXJjaHkoKS5zb3J0KG51bGwpLnZhbHVlKG51bGwpLGE9d2ksYz1bMSwxXSxsPW51bGw7cmV0dXJuIG4uc2VwYXJhdGlvbj1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oYT10LG4pOmF9LG4uc2l6ZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8obD1udWxsPT0oYz10KT9pOm51bGwsbik6bD9udWxsOmN9LG4ubm9kZVNpemU9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGw9bnVsbD09KGM9dCk/bnVsbDppLG4pOmw/YzpudWxsfSxKdShuLG8pfSxCby5sYXlvdXQuY2x1c3Rlcj1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obixpKXt2YXIgbyxhPXQuY2FsbCh0aGlzLG4saSksYz1hWzBdLGw9MDtLdShjLGZ1bmN0aW9uKG4pe3ZhciB0PW4uY2hpbGRyZW47dCYmdC5sZW5ndGg/KG4ueD16aSh0KSxuLnk9TmkodCkpOihuLng9bz9sKz1lKG4sbyk6MCxuLnk9MCxvPW4pfSk7dmFyIHM9TGkoYyksZj1UaShjKSxoPXMueC1lKHMsZikvMixnPWYueCtlKGYscykvMjtyZXR1cm4gS3UoYyx1P2Z1bmN0aW9uKG4pe24ueD0obi54LWMueCkqclswXSxuLnk9KGMueS1uLnkpKnJbMV19OmZ1bmN0aW9uKG4pe24ueD0obi54LWgpLyhnLWgpKnJbMF0sbi55PSgxLShjLnk/bi55L2MueToxKSkqclsxXX0pLGF9dmFyIHQ9Qm8ubGF5b3V0LmhpZXJhcmNoeSgpLnNvcnQobnVsbCkudmFsdWUobnVsbCksZT13aSxyPVsxLDFdLHU9ITE7cmV0dXJuIG4uc2VwYXJhdGlvbj1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT10LG4pOmV9LG4uc2l6ZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odT1udWxsPT0ocj10KSxuKTp1P251bGw6cn0sbi5ub2RlU2l6ZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odT1udWxsIT0ocj10KSxuKTp1P3I6bnVsbH0sSnUobix0KX0sQm8ubGF5b3V0LnRyZWVtYXA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4sdCl7Zm9yKHZhciBlLHIsdT0tMSxpPW4ubGVuZ3RoOysrdTxpOylyPShlPW5bdV0pLnZhbHVlKigwPnQ/MDp0KSxlLmFyZWE9aXNOYU4ocil8fDA+PXI/MDpyfWZ1bmN0aW9uIHQoZSl7dmFyIGk9ZS5jaGlsZHJlbjtpZihpJiZpLmxlbmd0aCl7dmFyIG8sYSxjLGw9ZihlKSxzPVtdLGg9aS5zbGljZSgpLHA9MS8wLHY9InNsaWNlIj09PWc/bC5keDoiZGljZSI9PT1nP2wuZHk6InNsaWNlLWRpY2UiPT09Zz8xJmUuZGVwdGg/bC5keTpsLmR4Ok1hdGgubWluKGwuZHgsbC5keSk7Zm9yKG4oaCxsLmR4KmwuZHkvZS52YWx1ZSkscy5hcmVhPTA7KGM9aC5sZW5ndGgpPjA7KXMucHVzaChvPWhbYy0xXSkscy5hcmVhKz1vLmFyZWEsInNxdWFyaWZ5IiE9PWd8fChhPXIocyx2KSk8PXA/KGgucG9wKCkscD1hKToocy5hcmVhLT1zLnBvcCgpLmFyZWEsdShzLHYsbCwhMSksdj1NYXRoLm1pbihsLmR4LGwuZHkpLHMubGVuZ3RoPXMuYXJlYT0wLHA9MS8wKTtzLmxlbmd0aCYmKHUocyx2LGwsITApLHMubGVuZ3RoPXMuYXJlYT0wKSxpLmZvckVhY2godCl9fWZ1bmN0aW9uIGUodCl7dmFyIHI9dC5jaGlsZHJlbjtpZihyJiZyLmxlbmd0aCl7dmFyIGksbz1mKHQpLGE9ci5zbGljZSgpLGM9W107Zm9yKG4oYSxvLmR4Km8uZHkvdC52YWx1ZSksYy5hcmVhPTA7aT1hLnBvcCgpOyljLnB1c2goaSksYy5hcmVhKz1pLmFyZWEsbnVsbCE9aS56JiYodShjLGkuej9vLmR4Om8uZHksbywhYS5sZW5ndGgpLGMubGVuZ3RoPWMuYXJlYT0wKTtyLmZvckVhY2goZSl9fWZ1bmN0aW9uIHIobix0KXtmb3IodmFyIGUscj1uLmFyZWEsdT0wLGk9MS8wLG89LTEsYT1uLmxlbmd0aDsrK288YTspKGU9bltvXS5hcmVhKSYmKGk+ZSYmKGk9ZSksZT51JiYodT1lKSk7cmV0dXJuIHIqPXIsdCo9dCxyP01hdGgubWF4KHQqdSpwL3Isci8odCppKnApKToxLzB9ZnVuY3Rpb24gdShuLHQsZSxyKXt2YXIgdSxpPS0xLG89bi5sZW5ndGgsYT1lLngsbD1lLnkscz10P2Mobi5hcmVhL3QpOjA7aWYodD09ZS5keCl7Zm9yKChyfHxzPmUuZHkpJiYocz1lLmR5KTsrK2k8bzspdT1uW2ldLHUueD1hLHUueT1sLHUuZHk9cyxhKz11LmR4PU1hdGgubWluKGUueCtlLmR4LWEscz9jKHUuYXJlYS9zKTowKTt1Lno9ITAsdS5keCs9ZS54K2UuZHgtYSxlLnkrPXMsZS5keS09c31lbHNle2Zvcigocnx8cz5lLmR4KSYmKHM9ZS5keCk7KytpPG87KXU9bltpXSx1Lng9YSx1Lnk9bCx1LmR4PXMsbCs9dS5keT1NYXRoLm1pbihlLnkrZS5keS1sLHM/Yyh1LmFyZWEvcyk6MCk7dS56PSExLHUuZHkrPWUueStlLmR5LWwsZS54Kz1zLGUuZHgtPXN9fWZ1bmN0aW9uIGkocil7dmFyIHU9b3x8YShyKSxpPXVbMF07cmV0dXJuIGkueD0wLGkueT0wLGkuZHg9bFswXSxpLmR5PWxbMV0sbyYmYS5yZXZhbHVlKGkpLG4oW2ldLGkuZHgqaS5keS9pLnZhbHVlKSwobz9lOnQpKGkpLGgmJihvPXUpLHV9dmFyIG8sYT1Cby5sYXlvdXQuaGllcmFyY2h5KCksYz1NYXRoLnJvdW5kLGw9WzEsMV0scz1udWxsLGY9cWksaD0hMSxnPSJzcXVhcmlmeSIscD0uNSooMStNYXRoLnNxcnQoNSkpO3JldHVybiBpLnNpemU9ZnVuY3Rpb24obil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGw9bixpKTpsfSxpLnBhZGRpbmc9ZnVuY3Rpb24obil7ZnVuY3Rpb24gdCh0KXt2YXIgZT1uLmNhbGwoaSx0LHQuZGVwdGgpO3JldHVybiBudWxsPT1lP3FpKHQpOlJpKHQsIm51bWJlciI9PXR5cGVvZiBlP1tlLGUsZSxlXTplKX1mdW5jdGlvbiBlKHQpe3JldHVybiBSaSh0LG4pfWlmKCFhcmd1bWVudHMubGVuZ3RoKXJldHVybiBzO3ZhciByO3JldHVybiBmPW51bGw9PShzPW4pP3FpOiJmdW5jdGlvbiI9PShyPXR5cGVvZiBuKT90OiJudW1iZXIiPT09cj8obj1bbixuLG4sbl0sZSk6ZSxpfSxpLnJvdW5kPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhjPW4/TWF0aC5yb3VuZDpOdW1iZXIsaSk6YyE9TnVtYmVyfSxpLnN0aWNreT1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oaD1uLG89bnVsbCxpKTpofSxpLnJhdGlvPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhwPW4saSk6cH0saS5tb2RlPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhnPW4rIiIsaSk6Z30sSnUoaSxhKX0sQm8ucmFuZG9tPXtub3JtYWw6ZnVuY3Rpb24obix0KXt2YXIgZT1hcmd1bWVudHMubGVuZ3RoO3JldHVybiAyPmUmJih0PTEpLDE+ZSYmKG49MCksZnVuY3Rpb24oKXt2YXIgZSxyLHU7ZG8gZT0yKk1hdGgucmFuZG9tKCktMSxyPTIqTWF0aC5yYW5kb20oKS0xLHU9ZSplK3Iqcjt3aGlsZSghdXx8dT4xKTtyZXR1cm4gbit0KmUqTWF0aC5zcXJ0KC0yKk1hdGgubG9nKHUpL3UpfX0sbG9nTm9ybWFsOmZ1bmN0aW9uKCl7dmFyIG49Qm8ucmFuZG9tLm5vcm1hbC5hcHBseShCbyxhcmd1bWVudHMpO3JldHVybiBmdW5jdGlvbigpe3JldHVybiBNYXRoLmV4cChuKCkpfX0sYmF0ZXM6ZnVuY3Rpb24obil7dmFyIHQ9Qm8ucmFuZG9tLmlyd2luSGFsbChuKTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gdCgpL259fSxpcndpbkhhbGw6ZnVuY3Rpb24obil7cmV0dXJuIGZ1bmN0aW9uKCl7Zm9yKHZhciB0PTAsZT0wO24+ZTtlKyspdCs9TWF0aC5yYW5kb20oKTtyZXR1cm4gdH19fSxCby5zY2FsZT17fTt2YXIgZ2w9e2Zsb29yOkV0LGNlaWw6RXR9O0JvLnNjYWxlLmxpbmVhcj1mdW5jdGlvbigpe3JldHVybiBPaShbMCwxXSxbMCwxXSxkdSwhMSl9O3ZhciBwbD17czoxLGc6MSxwOjEscjoxLGU6MX07Qm8uc2NhbGUubG9nPWZ1bmN0aW9uKCl7cmV0dXJuIFdpKEJvLnNjYWxlLmxpbmVhcigpLmRvbWFpbihbMCwxXSksMTAsITAsWzEsMTBdKX07dmFyIHZsPUJvLmZvcm1hdCgiLjBlIiksZGw9e2Zsb29yOmZ1bmN0aW9uKG4pe3JldHVybi1NYXRoLmNlaWwoLW4pfSxjZWlsOmZ1bmN0aW9uKG4pe3JldHVybi1NYXRoLmZsb29yKC1uKX19O0JvLnNjYWxlLnBvdz1mdW5jdGlvbigpe3JldHVybiBKaShCby5zY2FsZS5saW5lYXIoKSwxLFswLDFdKX0sQm8uc2NhbGUuc3FydD1mdW5jdGlvbigpe3JldHVybiBCby5zY2FsZS5wb3coKS5leHBvbmVudCguNSl9LEJvLnNjYWxlLm9yZGluYWw9ZnVuY3Rpb24oKXtyZXR1cm4gS2koW10se3Q6InJhbmdlIixhOltbXV19KX0sQm8uc2NhbGUuY2F0ZWdvcnkxMD1mdW5jdGlvbigpe3JldHVybiBCby5zY2FsZS5vcmRpbmFsKCkucmFuZ2UobWwpfSxCby5zY2FsZS5jYXRlZ29yeTIwPWZ1bmN0aW9uKCl7cmV0dXJuIEJvLnNjYWxlLm9yZGluYWwoKS5yYW5nZSh5bCl9LEJvLnNjYWxlLmNhdGVnb3J5MjBiPWZ1bmN0aW9uKCl7cmV0dXJuIEJvLnNjYWxlLm9yZGluYWwoKS5yYW5nZSh4bCl9LEJvLnNjYWxlLmNhdGVnb3J5MjBjPWZ1bmN0aW9uKCl7cmV0dXJuIEJvLnNjYWxlLm9yZGluYWwoKS5yYW5nZShNbCl9O3ZhciBtbD1bMjA2MjI2MCwxNjc0NDIwNiwyOTI0NTg4LDE0MDM0NzI4LDk3MjU4ODUsOTE5NzEzMSwxNDkwNzMzMCw4MzU1NzExLDEyMzY5MTg2LDE1NTYxNzVdLm1hcCh5dCkseWw9WzIwNjIyNjAsMTE0NTQ0NDAsMTY3NDQyMDYsMTY3NTk2NzIsMjkyNDU4OCwxMDAxODY5OCwxNDAzNDcyOCwxNjc1MDc0Miw5NzI1ODg1LDEyOTU1ODYxLDkxOTcxMzEsMTI4ODUxNDAsMTQ5MDczMzAsMTYyMzQxOTQsODM1NTcxMSwxMzA5MjgwNywxMjM2OTE4NiwxNDQwODU4OSwxNTU2MTc1LDEwNDEwNzI1XS5tYXAoeXQpLHhsPVszNzUwNzc3LDUzOTU2MTksNzA0MDcxOSwxMDI2NDI4Niw2NTE5MDk3LDkyMTY1OTQsMTE5MTUxMTUsMTM1NTY2MzYsOTIwMjk5MywxMjQyNjgwOSwxNTE4NjUxNCwxNTE5MDkzMiw4NjY2MTY5LDExMzU2NDkwLDE0MDQ5NjQzLDE1MTc3MzcyLDgwNzc2ODMsMTA4MzQzMjQsMTM1Mjg1MDksMTQ1ODk2NTRdLm1hcCh5dCksTWw9WzMyNDQ3MzMsNzA1NzExMCwxMDQwNjYyNSwxMzAzMjQzMSwxNTA5NTA1MywxNjYxNjc2NCwxNjYyNTI1OSwxNjYzNDAxOCwzMjUzMDc2LDc2NTI0NzAsMTA2MDcwMDMsMTMxMDE1MDQsNzY5NTI4MSwxMDM5NDMxMiwxMjM2OTM3MiwxNDM0Mjg5MSw2NTEzNTA3LDk4Njg5NTAsMTI0MzQ4NzcsMTQyNzcwODFdLm1hcCh5dCk7Qm8uc2NhbGUucXVhbnRpbGU9ZnVuY3Rpb24oKXtyZXR1cm4gUWkoW10sW10pCn0sQm8uc2NhbGUucXVhbnRpemU9ZnVuY3Rpb24oKXtyZXR1cm4gbm8oMCwxLFswLDFdKX0sQm8uc2NhbGUudGhyZXNob2xkPWZ1bmN0aW9uKCl7cmV0dXJuIHRvKFsuNV0sWzAsMV0pfSxCby5zY2FsZS5pZGVudGl0eT1mdW5jdGlvbigpe3JldHVybiBlbyhbMCwxXSl9LEJvLnN2Zz17fSxCby5zdmcuYXJjPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbigpe3ZhciBuPXQuYXBwbHkodGhpcyxhcmd1bWVudHMpLGk9ZS5hcHBseSh0aGlzLGFyZ3VtZW50cyksbz1yLmFwcGx5KHRoaXMsYXJndW1lbnRzKStfbCxhPXUuYXBwbHkodGhpcyxhcmd1bWVudHMpK19sLGM9KG8+YSYmKGM9byxvPWEsYT1jKSxhLW8pLGw9RWE+Yz8iMCI6IjEiLHM9TWF0aC5jb3MobyksZj1NYXRoLnNpbihvKSxoPU1hdGguY29zKGEpLGc9TWF0aC5zaW4oYSk7cmV0dXJuIGM+PWJsP24/Ik0wLCIraSsiQSIraSsiLCIraSsiIDAgMSwxIDAsIistaSsiQSIraSsiLCIraSsiIDAgMSwxIDAsIitpKyJNMCwiK24rIkEiK24rIiwiK24rIiAwIDEsMCAwLCIrLW4rIkEiK24rIiwiK24rIiAwIDEsMCAwLCIrbisiWiI6Ik0wLCIraSsiQSIraSsiLCIraSsiIDAgMSwxIDAsIistaSsiQSIraSsiLCIraSsiIDAgMSwxIDAsIitpKyJaIjpuPyJNIitpKnMrIiwiK2kqZisiQSIraSsiLCIraSsiIDAgIitsKyIsMSAiK2kqaCsiLCIraSpnKyJMIituKmgrIiwiK24qZysiQSIrbisiLCIrbisiIDAgIitsKyIsMCAiK24qcysiLCIrbipmKyJaIjoiTSIraSpzKyIsIitpKmYrIkEiK2krIiwiK2krIiAwICIrbCsiLDEgIitpKmgrIiwiK2kqZysiTDAsMCIrIloifXZhciB0PXJvLGU9dW8scj1pbyx1PW9vO3JldHVybiBuLmlubmVyUmFkaXVzPWZ1bmN0aW9uKGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0PWt0KGUpLG4pOnR9LG4ub3V0ZXJSYWRpdXM9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGU9a3QodCksbik6ZX0sbi5zdGFydEFuZ2xlPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPWt0KHQpLG4pOnJ9LG4uZW5kQW5nbGU9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHU9a3QodCksbik6dX0sbi5jZW50cm9pZD1mdW5jdGlvbigpe3ZhciBuPSh0LmFwcGx5KHRoaXMsYXJndW1lbnRzKStlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSkvMixpPShyLmFwcGx5KHRoaXMsYXJndW1lbnRzKSt1LmFwcGx5KHRoaXMsYXJndW1lbnRzKSkvMitfbDtyZXR1cm5bTWF0aC5jb3MoaSkqbixNYXRoLnNpbihpKSpuXX0sbn07dmFyIF9sPS1DYSxibD1BYS1OYTtCby5zdmcubGluZT1mdW5jdGlvbigpe3JldHVybiBhbyhFdCl9O3ZhciB3bD1Cby5tYXAoe2xpbmVhcjpjbywibGluZWFyLWNsb3NlZCI6bG8sc3RlcDpzbywic3RlcC1iZWZvcmUiOmZvLCJzdGVwLWFmdGVyIjpobyxiYXNpczp4bywiYmFzaXMtb3BlbiI6TW8sImJhc2lzLWNsb3NlZCI6X28sYnVuZGxlOmJvLGNhcmRpbmFsOnZvLCJjYXJkaW5hbC1vcGVuIjpnbywiY2FyZGluYWwtY2xvc2VkIjpwbyxtb25vdG9uZTpDb30pO3dsLmZvckVhY2goZnVuY3Rpb24obix0KXt0LmtleT1uLHQuY2xvc2VkPS8tY2xvc2VkJC8udGVzdChuKX0pO3ZhciBTbD1bMCwyLzMsMS8zLDBdLGtsPVswLDEvMywyLzMsMF0sRWw9WzAsMS82LDIvMywxLzZdO0JvLnN2Zy5saW5lLnJhZGlhbD1mdW5jdGlvbigpe3ZhciBuPWFvKE5vKTtyZXR1cm4gbi5yYWRpdXM9bi54LGRlbGV0ZSBuLngsbi5hbmdsZT1uLnksZGVsZXRlIG4ueSxufSxmby5yZXZlcnNlPWhvLGhvLnJldmVyc2U9Zm8sQm8uc3ZnLmFyZWE9ZnVuY3Rpb24oKXtyZXR1cm4gem8oRXQpfSxCby5zdmcuYXJlYS5yYWRpYWw9ZnVuY3Rpb24oKXt2YXIgbj16byhObyk7cmV0dXJuIG4ucmFkaXVzPW4ueCxkZWxldGUgbi54LG4uaW5uZXJSYWRpdXM9bi54MCxkZWxldGUgbi54MCxuLm91dGVyUmFkaXVzPW4ueDEsZGVsZXRlIG4ueDEsbi5hbmdsZT1uLnksZGVsZXRlIG4ueSxuLnN0YXJ0QW5nbGU9bi55MCxkZWxldGUgbi55MCxuLmVuZEFuZ2xlPW4ueTEsZGVsZXRlIG4ueTEsbn0sQm8uc3ZnLmNob3JkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbihuLGEpe3ZhciBjPXQodGhpcyxpLG4sYSksbD10KHRoaXMsbyxuLGEpO3JldHVybiJNIitjLnAwK3IoYy5yLGMucDEsYy5hMS1jLmEwKSsoZShjLGwpP3UoYy5yLGMucDEsYy5yLGMucDApOnUoYy5yLGMucDEsbC5yLGwucDApK3IobC5yLGwucDEsbC5hMS1sLmEwKSt1KGwucixsLnAxLGMucixjLnAwKSkrIloifWZ1bmN0aW9uIHQobix0LGUscil7dmFyIHU9dC5jYWxsKG4sZSxyKSxpPWEuY2FsbChuLHUsciksbz1jLmNhbGwobix1LHIpK19sLHM9bC5jYWxsKG4sdSxyKStfbDtyZXR1cm57cjppLGEwOm8sYTE6cyxwMDpbaSpNYXRoLmNvcyhvKSxpKk1hdGguc2luKG8pXSxwMTpbaSpNYXRoLmNvcyhzKSxpKk1hdGguc2luKHMpXX19ZnVuY3Rpb24gZShuLHQpe3JldHVybiBuLmEwPT10LmEwJiZuLmExPT10LmExfWZ1bmN0aW9uIHIobix0LGUpe3JldHVybiJBIituKyIsIituKyIgMCAiKyArKGU+RWEpKyIsMSAiK3R9ZnVuY3Rpb24gdShuLHQsZSxyKXtyZXR1cm4iUSAwLDAgIityfXZhciBpPW1yLG89eXIsYT1MbyxjPWlvLGw9b287cmV0dXJuIG4ucmFkaXVzPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhhPWt0KHQpLG4pOmF9LG4uc291cmNlPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhpPWt0KHQpLG4pOml9LG4udGFyZ2V0PWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhvPWt0KHQpLG4pOm99LG4uc3RhcnRBbmdsZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oYz1rdCh0KSxuKTpjfSxuLmVuZEFuZ2xlPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhsPWt0KHQpLG4pOmx9LG59LEJvLnN2Zy5kaWFnb25hbD1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obix1KXt2YXIgaT10LmNhbGwodGhpcyxuLHUpLG89ZS5jYWxsKHRoaXMsbix1KSxhPShpLnkrby55KS8yLGM9W2kse3g6aS54LHk6YX0se3g6by54LHk6YX0sb107cmV0dXJuIGM9Yy5tYXAociksIk0iK2NbMF0rIkMiK2NbMV0rIiAiK2NbMl0rIiAiK2NbM119dmFyIHQ9bXIsZT15cixyPVRvO3JldHVybiBuLnNvdXJjZT1mdW5jdGlvbihlKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odD1rdChlKSxuKTp0fSxuLnRhcmdldD1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT1rdCh0KSxuKTplfSxuLnByb2plY3Rpb249ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHI9dCxuKTpyfSxufSxCby5zdmcuZGlhZ29uYWwucmFkaWFsPWZ1bmN0aW9uKCl7dmFyIG49Qm8uc3ZnLmRpYWdvbmFsKCksdD1UbyxlPW4ucHJvamVjdGlvbjtyZXR1cm4gbi5wcm9qZWN0aW9uPWZ1bmN0aW9uKG4pe3JldHVybiBhcmd1bWVudHMubGVuZ3RoP2UocW8odD1uKSk6dH0sbn0sQm8uc3ZnLnN5bWJvbD1mdW5jdGlvbigpe2Z1bmN0aW9uIG4obixyKXtyZXR1cm4oQWwuZ2V0KHQuY2FsbCh0aGlzLG4scikpfHxQbykoZS5jYWxsKHRoaXMsbixyKSl9dmFyIHQ9RG8sZT1SbztyZXR1cm4gbi50eXBlPWZ1bmN0aW9uKGUpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyh0PWt0KGUpLG4pOnR9LG4uc2l6ZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT1rdCh0KSxuKTplfSxufTt2YXIgQWw9Qm8ubWFwKHtjaXJjbGU6UG8sY3Jvc3M6ZnVuY3Rpb24obil7dmFyIHQ9TWF0aC5zcXJ0KG4vNSkvMjtyZXR1cm4iTSIrLTMqdCsiLCIrLXQrIkgiKy10KyJWIistMyp0KyJIIit0KyJWIistdCsiSCIrMyp0KyJWIit0KyJIIit0KyJWIiszKnQrIkgiKy10KyJWIit0KyJIIistMyp0KyJaIn0sZGlhbW9uZDpmdW5jdGlvbihuKXt2YXIgdD1NYXRoLnNxcnQobi8oMipMbCkpLGU9dCpMbDtyZXR1cm4iTTAsIistdCsiTCIrZSsiLDAiKyIgMCwiK3QrIiAiKy1lKyIsMCIrIloifSxzcXVhcmU6ZnVuY3Rpb24obil7dmFyIHQ9TWF0aC5zcXJ0KG4pLzI7cmV0dXJuIk0iKy10KyIsIistdCsiTCIrdCsiLCIrLXQrIiAiK3QrIiwiK3QrIiAiKy10KyIsIit0KyJaIn0sInRyaWFuZ2xlLWRvd24iOmZ1bmN0aW9uKG4pe3ZhciB0PU1hdGguc3FydChuL3psKSxlPXQqemwvMjtyZXR1cm4iTTAsIitlKyJMIit0KyIsIistZSsiICIrLXQrIiwiKy1lKyJaIn0sInRyaWFuZ2xlLXVwIjpmdW5jdGlvbihuKXt2YXIgdD1NYXRoLnNxcnQobi96bCksZT10KnpsLzI7cmV0dXJuIk0wLCIrLWUrIkwiK3QrIiwiK2UrIiAiKy10KyIsIitlKyJaIn19KTtCby5zdmcuc3ltYm9sVHlwZXM9QWwua2V5cygpO3ZhciBDbCxObCx6bD1NYXRoLnNxcnQoMyksTGw9TWF0aC50YW4oMzAqTGEpLFRsPVtdLHFsPTA7VGwuY2FsbD15YS5jYWxsLFRsLmVtcHR5PXlhLmVtcHR5LFRsLm5vZGU9eWEubm9kZSxUbC5zaXplPXlhLnNpemUsQm8udHJhbnNpdGlvbj1mdW5jdGlvbihuKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD9DbD9uLnRyYW5zaXRpb24oKTpuOl9hLnRyYW5zaXRpb24oKX0sQm8udHJhbnNpdGlvbi5wcm90b3R5cGU9VGwsVGwuc2VsZWN0PWZ1bmN0aW9uKG4pe3ZhciB0LGUscix1PXRoaXMuaWQsaT1bXTtuPWsobik7Zm9yKHZhciBvPS0xLGE9dGhpcy5sZW5ndGg7KytvPGE7KXtpLnB1c2godD1bXSk7Zm9yKHZhciBjPXRoaXNbb10sbD0tMSxzPWMubGVuZ3RoOysrbDxzOykocj1jW2xdKSYmKGU9bi5jYWxsKHIsci5fX2RhdGFfXyxsLG8pKT8oIl9fZGF0YV9fImluIHImJihlLl9fZGF0YV9fPXIuX19kYXRhX18pLEhvKGUsbCx1LHIuX190cmFuc2l0aW9uX19bdV0pLHQucHVzaChlKSk6dC5wdXNoKG51bGwpfXJldHVybiBVbyhpLHUpfSxUbC5zZWxlY3RBbGw9ZnVuY3Rpb24obil7dmFyIHQsZSxyLHUsaSxvPXRoaXMuaWQsYT1bXTtuPUUobik7Zm9yKHZhciBjPS0xLGw9dGhpcy5sZW5ndGg7KytjPGw7KWZvcih2YXIgcz10aGlzW2NdLGY9LTEsaD1zLmxlbmd0aDsrK2Y8aDspaWYocj1zW2ZdKXtpPXIuX190cmFuc2l0aW9uX19bb10sZT1uLmNhbGwocixyLl9fZGF0YV9fLGYsYyksYS5wdXNoKHQ9W10pO2Zvcih2YXIgZz0tMSxwPWUubGVuZ3RoOysrZzxwOykodT1lW2ddKSYmSG8odSxnLG8saSksdC5wdXNoKHUpfXJldHVybiBVbyhhLG8pfSxUbC5maWx0ZXI9ZnVuY3Rpb24obil7dmFyIHQsZSxyLHU9W107ImZ1bmN0aW9uIiE9dHlwZW9mIG4mJihuPVUobikpO2Zvcih2YXIgaT0wLG89dGhpcy5sZW5ndGg7bz5pO2krKyl7dS5wdXNoKHQ9W10pO2Zvcih2YXIgZT10aGlzW2ldLGE9MCxjPWUubGVuZ3RoO2M+YTthKyspKHI9ZVthXSkmJm4uY2FsbChyLHIuX19kYXRhX18sYSxpKSYmdC5wdXNoKHIpfXJldHVybiBVbyh1LHRoaXMuaWQpfSxUbC50d2Vlbj1mdW5jdGlvbihuLHQpe3ZhciBlPXRoaXMuaWQ7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8Mj90aGlzLm5vZGUoKS5fX3RyYW5zaXRpb25fX1tlXS50d2Vlbi5nZXQobik6Rih0aGlzLG51bGw9PXQ/ZnVuY3Rpb24odCl7dC5fX3RyYW5zaXRpb25fX1tlXS50d2Vlbi5yZW1vdmUobil9OmZ1bmN0aW9uKHIpe3IuX190cmFuc2l0aW9uX19bZV0udHdlZW4uc2V0KG4sdCl9KX0sVGwuYXR0cj1mdW5jdGlvbihuLHQpe2Z1bmN0aW9uIGUoKXt0aGlzLnJlbW92ZUF0dHJpYnV0ZShhKX1mdW5jdGlvbiByKCl7dGhpcy5yZW1vdmVBdHRyaWJ1dGVOUyhhLnNwYWNlLGEubG9jYWwpfWZ1bmN0aW9uIHUobil7cmV0dXJuIG51bGw9PW4/ZToobis9IiIsZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMuZ2V0QXR0cmlidXRlKGEpO3JldHVybiBlIT09biYmKHQ9byhlLG4pLGZ1bmN0aW9uKG4pe3RoaXMuc2V0QXR0cmlidXRlKGEsdChuKSl9KX0pfWZ1bmN0aW9uIGkobil7cmV0dXJuIG51bGw9PW4/cjoobis9IiIsZnVuY3Rpb24oKXt2YXIgdCxlPXRoaXMuZ2V0QXR0cmlidXRlTlMoYS5zcGFjZSxhLmxvY2FsKTtyZXR1cm4gZSE9PW4mJih0PW8oZSxuKSxmdW5jdGlvbihuKXt0aGlzLnNldEF0dHJpYnV0ZU5TKGEuc3BhY2UsYS5sb2NhbCx0KG4pKX0pfSl9aWYoYXJndW1lbnRzLmxlbmd0aDwyKXtmb3IodCBpbiBuKXRoaXMuYXR0cih0LG5bdF0pO3JldHVybiB0aGlzfXZhciBvPSJ0cmFuc2Zvcm0iPT1uP0Z1OmR1LGE9Qm8ubnMucXVhbGlmeShuKTtyZXR1cm4gam8odGhpcywiYXR0ci4iK24sdCxhLmxvY2FsP2k6dSl9LFRsLmF0dHJUd2Vlbj1mdW5jdGlvbihuLHQpe2Z1bmN0aW9uIGUobixlKXt2YXIgcj10LmNhbGwodGhpcyxuLGUsdGhpcy5nZXRBdHRyaWJ1dGUodSkpO3JldHVybiByJiZmdW5jdGlvbihuKXt0aGlzLnNldEF0dHJpYnV0ZSh1LHIobikpfX1mdW5jdGlvbiByKG4sZSl7dmFyIHI9dC5jYWxsKHRoaXMsbixlLHRoaXMuZ2V0QXR0cmlidXRlTlModS5zcGFjZSx1LmxvY2FsKSk7cmV0dXJuIHImJmZ1bmN0aW9uKG4pe3RoaXMuc2V0QXR0cmlidXRlTlModS5zcGFjZSx1LmxvY2FsLHIobikpfX12YXIgdT1Cby5ucy5xdWFsaWZ5KG4pO3JldHVybiB0aGlzLnR3ZWVuKCJhdHRyLiIrbix1LmxvY2FsP3I6ZSl9LFRsLnN0eWxlPWZ1bmN0aW9uKG4sdCxlKXtmdW5jdGlvbiByKCl7dGhpcy5zdHlsZS5yZW1vdmVQcm9wZXJ0eShuKX1mdW5jdGlvbiB1KHQpe3JldHVybiBudWxsPT10P3I6KHQrPSIiLGZ1bmN0aW9uKCl7dmFyIHIsdT1Rby5nZXRDb21wdXRlZFN0eWxlKHRoaXMsbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShuKTtyZXR1cm4gdSE9PXQmJihyPWR1KHUsdCksZnVuY3Rpb24odCl7dGhpcy5zdHlsZS5zZXRQcm9wZXJ0eShuLHIodCksZSl9KX0pfXZhciBpPWFyZ3VtZW50cy5sZW5ndGg7aWYoMz5pKXtpZigic3RyaW5nIiE9dHlwZW9mIG4pezI+aSYmKHQ9IiIpO2ZvcihlIGluIG4pdGhpcy5zdHlsZShlLG5bZV0sdCk7cmV0dXJuIHRoaXN9ZT0iIn1yZXR1cm4gam8odGhpcywic3R5bGUuIituLHQsdSl9LFRsLnN0eWxlVHdlZW49ZnVuY3Rpb24obix0LGUpe2Z1bmN0aW9uIHIocix1KXt2YXIgaT10LmNhbGwodGhpcyxyLHUsUW8uZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLG51bGwpLmdldFByb3BlcnR5VmFsdWUobikpO3JldHVybiBpJiZmdW5jdGlvbih0KXt0aGlzLnN0eWxlLnNldFByb3BlcnR5KG4saSh0KSxlKX19cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8MyYmKGU9IiIpLHRoaXMudHdlZW4oInN0eWxlLiIrbixyKX0sVGwudGV4dD1mdW5jdGlvbihuKXtyZXR1cm4gam8odGhpcywidGV4dCIsbixGbyl9LFRsLnJlbW92ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmVhY2goImVuZC50cmFuc2l0aW9uIixmdW5jdGlvbigpe3ZhciBuO3RoaXMuX190cmFuc2l0aW9uX18uY291bnQ8MiYmKG49dGhpcy5wYXJlbnROb2RlKSYmbi5yZW1vdmVDaGlsZCh0aGlzKX0pfSxUbC5lYXNlPWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXMuaWQ7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8MT90aGlzLm5vZGUoKS5fX3RyYW5zaXRpb25fX1t0XS5lYXNlOigiZnVuY3Rpb24iIT10eXBlb2YgbiYmKG49Qm8uZWFzZS5hcHBseShCbyxhcmd1bWVudHMpKSxGKHRoaXMsZnVuY3Rpb24oZSl7ZS5fX3RyYW5zaXRpb25fX1t0XS5lYXNlPW59KSl9LFRsLmRlbGF5PWZ1bmN0aW9uKG4pe3ZhciB0PXRoaXMuaWQ7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg8MT90aGlzLm5vZGUoKS5fX3RyYW5zaXRpb25fX1t0XS5kZWxheTpGKHRoaXMsImZ1bmN0aW9uIj09dHlwZW9mIG4/ZnVuY3Rpb24oZSxyLHUpe2UuX190cmFuc2l0aW9uX19bdF0uZGVsYXk9K24uY2FsbChlLGUuX19kYXRhX18scix1KX06KG49K24sZnVuY3Rpb24oZSl7ZS5fX3RyYW5zaXRpb25fX1t0XS5kZWxheT1ufSkpfSxUbC5kdXJhdGlvbj1mdW5jdGlvbihuKXt2YXIgdD10aGlzLmlkO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPDE/dGhpcy5ub2RlKCkuX190cmFuc2l0aW9uX19bdF0uZHVyYXRpb246Rih0aGlzLCJmdW5jdGlvbiI9PXR5cGVvZiBuP2Z1bmN0aW9uKGUscix1KXtlLl9fdHJhbnNpdGlvbl9fW3RdLmR1cmF0aW9uPU1hdGgubWF4KDEsbi5jYWxsKGUsZS5fX2RhdGFfXyxyLHUpKX06KG49TWF0aC5tYXgoMSxuKSxmdW5jdGlvbihlKXtlLl9fdHJhbnNpdGlvbl9fW3RdLmR1cmF0aW9uPW59KSl9LFRsLmVhY2g9ZnVuY3Rpb24obix0KXt2YXIgZT10aGlzLmlkO2lmKGFyZ3VtZW50cy5sZW5ndGg8Mil7dmFyIHI9TmwsdT1DbDtDbD1lLEYodGhpcyxmdW5jdGlvbih0LHIsdSl7Tmw9dC5fX3RyYW5zaXRpb25fX1tlXSxuLmNhbGwodCx0Ll9fZGF0YV9fLHIsdSl9KSxObD1yLENsPXV9ZWxzZSBGKHRoaXMsZnVuY3Rpb24ocil7dmFyIHU9ci5fX3RyYW5zaXRpb25fX1tlXTsodS5ldmVudHx8KHUuZXZlbnQ9Qm8uZGlzcGF0Y2goInN0YXJ0IiwiZW5kIikpKS5vbihuLHQpfSk7cmV0dXJuIHRoaXN9LFRsLnRyYW5zaXRpb249ZnVuY3Rpb24oKXtmb3IodmFyIG4sdCxlLHIsdT10aGlzLmlkLGk9KytxbCxvPVtdLGE9MCxjPXRoaXMubGVuZ3RoO2M+YTthKyspe28ucHVzaChuPVtdKTtmb3IodmFyIHQ9dGhpc1thXSxsPTAscz10Lmxlbmd0aDtzPmw7bCsrKShlPXRbbF0pJiYocj1PYmplY3QuY3JlYXRlKGUuX190cmFuc2l0aW9uX19bdV0pLHIuZGVsYXkrPXIuZHVyYXRpb24sSG8oZSxsLGkscikpLG4ucHVzaChlKX1yZXR1cm4gVW8obyxpKX0sQm8uc3ZnLmF4aXM9ZnVuY3Rpb24oKXtmdW5jdGlvbiBuKG4pe24uZWFjaChmdW5jdGlvbigpe3ZhciBuLGw9Qm8uc2VsZWN0KHRoaXMpLHM9dGhpcy5fX2NoYXJ0X198fGUsZj10aGlzLl9fY2hhcnRfXz1lLmNvcHkoKSxoPW51bGw9PWM/Zi50aWNrcz9mLnRpY2tzLmFwcGx5KGYsYSk6Zi5kb21haW4oKTpjLGc9bnVsbD09dD9mLnRpY2tGb3JtYXQ/Zi50aWNrRm9ybWF0LmFwcGx5KGYsYSk6RXQ6dCxwPWwuc2VsZWN0QWxsKCIudGljayIpLmRhdGEoaCxmKSx2PXAuZW50ZXIoKS5pbnNlcnQoImciLCIuZG9tYWluIikuYXR0cigiY2xhc3MiLCJ0aWNrIikuc3R5bGUoIm9wYWNpdHkiLE5hKSxkPUJvLnRyYW5zaXRpb24ocC5leGl0KCkpLnN0eWxlKCJvcGFjaXR5IixOYSkucmVtb3ZlKCksbT1Cby50cmFuc2l0aW9uKHAub3JkZXIoKSkuc3R5bGUoIm9wYWNpdHkiLDEpLHk9TWF0aC5tYXgodSwwKStvLHg9UGkoZiksTT1sLnNlbGVjdEFsbCgiLmRvbWFpbiIpLmRhdGEoWzBdKSxfPShNLmVudGVyKCkuYXBwZW5kKCJwYXRoIikuYXR0cigiY2xhc3MiLCJkb21haW4iKSxCby50cmFuc2l0aW9uKE0pKTt2LmFwcGVuZCgibGluZSIpLHYuYXBwZW5kKCJ0ZXh0Iik7dmFyIGIsdyxTLGssRT12LnNlbGVjdCgibGluZSIpLEE9bS5zZWxlY3QoImxpbmUiKSxDPXAuc2VsZWN0KCJ0ZXh0IikudGV4dChnKSxOPXYuc2VsZWN0KCJ0ZXh0Iiksej1tLnNlbGVjdCgidGV4dCIpLEw9InRvcCI9PT1yfHwibGVmdCI9PT1yPy0xOjE7aWYoImJvdHRvbSI9PT1yfHwidG9wIj09PXI/KG49T28sYj0ieCIsUz0ieSIsdz0ieDIiLGs9InkyIixDLmF0dHIoImR5IiwwPkw/IjBlbSI6Ii43MWVtIikuc3R5bGUoInRleHQtYW5jaG9yIiwibWlkZGxlIiksXy5hdHRyKCJkIiwiTSIreFswXSsiLCIrTCppKyJWMEgiK3hbMV0rIlYiK0wqaSkpOihuPVlvLGI9InkiLFM9IngiLHc9InkyIixrPSJ4MiIsQy5hdHRyKCJkeSIsIi4zMmVtIikuc3R5bGUoInRleHQtYW5jaG9yIiwwPkw/ImVuZCI6InN0YXJ0IiksXy5hdHRyKCJkIiwiTSIrTCppKyIsIit4WzBdKyJIMFYiK3hbMV0rIkgiK0wqaSkpLEUuYXR0cihrLEwqdSksTi5hdHRyKFMsTCp5KSxBLmF0dHIodywwKS5hdHRyKGssTCp1KSx6LmF0dHIoYiwwKS5hdHRyKFMsTCp5KSxmLnJhbmdlQmFuZCl7dmFyIFQ9ZixxPVQucmFuZ2VCYW5kKCkvMjtzPWY9ZnVuY3Rpb24obil7cmV0dXJuIFQobikrcX19ZWxzZSBzLnJhbmdlQmFuZD9zPWY6ZC5jYWxsKG4sZixzKTt2LmNhbGwobixzLGYpLG0uY2FsbChuLGYsZil9KX12YXIgdCxlPUJvLnNjYWxlLmxpbmVhcigpLHI9UmwsdT02LGk9NixvPTMsYT1bMTBdLGM9bnVsbDtyZXR1cm4gbi5zY2FsZT1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oZT10LG4pOmV9LG4ub3JpZW50PWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhyPXQgaW4gRGw/dCsiIjpSbCxuKTpyfSxuLnRpY2tzPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGE9YXJndW1lbnRzLG4pOmF9LG4udGlja1ZhbHVlcz1mdW5jdGlvbih0KXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8oYz10LG4pOmN9LG4udGlja0Zvcm1hdD1mdW5jdGlvbihlKXtyZXR1cm4gYXJndW1lbnRzLmxlbmd0aD8odD1lLG4pOnR9LG4udGlja1NpemU9ZnVuY3Rpb24odCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aDtyZXR1cm4gZT8odT0rdCxpPSthcmd1bWVudHNbZS0xXSxuKTp1fSxuLmlubmVyVGlja1NpemU9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KHU9K3Qsbik6dX0sbi5vdXRlclRpY2tTaXplPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhpPSt0LG4pOml9LG4udGlja1BhZGRpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KG89K3Qsbik6b30sbi50aWNrU3ViZGl2aWRlPWZ1bmN0aW9uKCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGgmJm59LG59O3ZhciBSbD0iYm90dG9tIixEbD17dG9wOjEscmlnaHQ6MSxib3R0b206MSxsZWZ0OjF9O0JvLnN2Zy5icnVzaD1mdW5jdGlvbigpe2Z1bmN0aW9uIG4oaSl7aS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9Qm8uc2VsZWN0KHRoaXMpLnN0eWxlKCJwb2ludGVyLWV2ZW50cyIsImFsbCIpLnN0eWxlKCItd2Via2l0LXRhcC1oaWdobGlnaHQtY29sb3IiLCJyZ2JhKDAsMCwwLDApIikub24oIm1vdXNlZG93bi5icnVzaCIsdSkub24oInRvdWNoc3RhcnQuYnJ1c2giLHUpLG89aS5zZWxlY3RBbGwoIi5iYWNrZ3JvdW5kIikuZGF0YShbMF0pO28uZW50ZXIoKS5hcHBlbmQoInJlY3QiKS5hdHRyKCJjbGFzcyIsImJhY2tncm91bmQiKS5zdHlsZSgidmlzaWJpbGl0eSIsImhpZGRlbiIpLnN0eWxlKCJjdXJzb3IiLCJjcm9zc2hhaXIiKSxpLnNlbGVjdEFsbCgiLmV4dGVudCIpLmRhdGEoWzBdKS5lbnRlcigpLmFwcGVuZCgicmVjdCIpLmF0dHIoImNsYXNzIiwiZXh0ZW50Iikuc3R5bGUoImN1cnNvciIsIm1vdmUiKTt2YXIgYT1pLnNlbGVjdEFsbCgiLnJlc2l6ZSIpLmRhdGEocCxFdCk7YS5leGl0KCkucmVtb3ZlKCksYS5lbnRlcigpLmFwcGVuZCgiZyIpLmF0dHIoImNsYXNzIixmdW5jdGlvbihuKXtyZXR1cm4icmVzaXplICIrbn0pLnN0eWxlKCJjdXJzb3IiLGZ1bmN0aW9uKG4pe3JldHVybiBQbFtuXX0pLmFwcGVuZCgicmVjdCIpLmF0dHIoIngiLGZ1bmN0aW9uKG4pe3JldHVybi9bZXddJC8udGVzdChuKT8tMzpudWxsfSkuYXR0cigieSIsZnVuY3Rpb24obil7cmV0dXJuL15bbnNdLy50ZXN0KG4pPy0zOm51bGx9KS5hdHRyKCJ3aWR0aCIsNikuYXR0cigiaGVpZ2h0Iiw2KS5zdHlsZSgidmlzaWJpbGl0eSIsImhpZGRlbiIpLGEuc3R5bGUoImRpc3BsYXkiLG4uZW1wdHkoKT8ibm9uZSI6bnVsbCk7dmFyIHMsZj1Cby50cmFuc2l0aW9uKGkpLGg9Qm8udHJhbnNpdGlvbihvKTtjJiYocz1QaShjKSxoLmF0dHIoIngiLHNbMF0pLmF0dHIoIndpZHRoIixzWzFdLXNbMF0pLGUoZikpLGwmJihzPVBpKGwpLGguYXR0cigieSIsc1swXSkuYXR0cigiaGVpZ2h0IixzWzFdLXNbMF0pLHIoZikpLHQoZil9KX1mdW5jdGlvbiB0KG4pe24uc2VsZWN0QWxsKCIucmVzaXplIikuYXR0cigidHJhbnNmb3JtIixmdW5jdGlvbihuKXtyZXR1cm4idHJhbnNsYXRlKCIrc1srL2UkLy50ZXN0KG4pXSsiLCIrZlsrL15zLy50ZXN0KG4pXSsiKSJ9KX1mdW5jdGlvbiBlKG4pe24uc2VsZWN0KCIuZXh0ZW50IikuYXR0cigieCIsc1swXSksbi5zZWxlY3RBbGwoIi5leHRlbnQsLm4+cmVjdCwucz5yZWN0IikuYXR0cigid2lkdGgiLHNbMV0tc1swXSl9ZnVuY3Rpb24gcihuKXtuLnNlbGVjdCgiLmV4dGVudCIpLmF0dHIoInkiLGZbMF0pLG4uc2VsZWN0QWxsKCIuZXh0ZW50LC5lPnJlY3QsLnc+cmVjdCIpLmF0dHIoImhlaWdodCIsZlsxXS1mWzBdKX1mdW5jdGlvbiB1KCl7ZnVuY3Rpb24gdSgpezMyPT1Cby5ldmVudC5rZXlDb2RlJiYoQ3x8KHk9bnVsbCx6WzBdLT1zWzFdLHpbMV0tPWZbMV0sQz0yKSxfKCkpfWZ1bmN0aW9uIHAoKXszMj09Qm8uZXZlbnQua2V5Q29kZSYmMj09QyYmKHpbMF0rPXNbMV0selsxXSs9ZlsxXSxDPTAsXygpKX1mdW5jdGlvbiB2KCl7dmFyIG49Qm8ubW91c2UoTSksdT0hMTt4JiYoblswXSs9eFswXSxuWzFdKz14WzFdKSxDfHwoQm8uZXZlbnQuYWx0S2V5Pyh5fHwoeT1bKHNbMF0rc1sxXSkvMiwoZlswXStmWzFdKS8yXSkselswXT1zWysoblswXTx5WzBdKV0selsxXT1mWysoblsxXTx5WzFdKV0pOnk9bnVsbCksRSYmZChuLGMsMCkmJihlKFMpLHU9ITApLEEmJmQobixsLDEpJiYocihTKSx1PSEwKSx1JiYodChTKSx3KHt0eXBlOiJicnVzaCIsbW9kZTpDPyJtb3ZlIjoicmVzaXplIn0pKX1mdW5jdGlvbiBkKG4sdCxlKXt2YXIgcix1LGE9UGkodCksYz1hWzBdLGw9YVsxXSxwPXpbZV0sdj1lP2Y6cyxkPXZbMV0tdlswXTtyZXR1cm4gQyYmKGMtPXAsbC09ZCtwKSxyPShlP2c6aCk/TWF0aC5tYXgoYyxNYXRoLm1pbihsLG5bZV0pKTpuW2VdLEM/dT0ocis9cCkrZDooeSYmKHA9TWF0aC5tYXgoYyxNYXRoLm1pbihsLDIqeVtlXS1yKSkpLHI+cD8odT1yLHI9cCk6dT1wKSx2WzBdIT1yfHx2WzFdIT11PyhlP289bnVsbDppPW51bGwsdlswXT1yLHZbMV09dSwhMCk6dm9pZCAwfWZ1bmN0aW9uIG0oKXt2KCksUy5zdHlsZSgicG9pbnRlci1ldmVudHMiLCJhbGwiKS5zZWxlY3RBbGwoIi5yZXNpemUiKS5zdHlsZSgiZGlzcGxheSIsbi5lbXB0eSgpPyJub25lIjpudWxsKSxCby5zZWxlY3QoImJvZHkiKS5zdHlsZSgiY3Vyc29yIixudWxsKSxMLm9uKCJtb3VzZW1vdmUuYnJ1c2giLG51bGwpLm9uKCJtb3VzZXVwLmJydXNoIixudWxsKS5vbigidG91Y2htb3ZlLmJydXNoIixudWxsKS5vbigidG91Y2hlbmQuYnJ1c2giLG51bGwpLm9uKCJrZXlkb3duLmJydXNoIixudWxsKS5vbigia2V5dXAuYnJ1c2giLG51bGwpLE4oKSx3KHt0eXBlOiJicnVzaGVuZCJ9KX12YXIgeSx4LE09dGhpcyxiPUJvLnNlbGVjdChCby5ldmVudC50YXJnZXQpLHc9YS5vZihNLGFyZ3VtZW50cyksUz1Cby5zZWxlY3QoTSksaz1iLmRhdHVtKCksRT0hL14obnxzKSQvLnRlc3QoaykmJmMsQT0hL14oZXx3KSQvLnRlc3QoaykmJmwsQz1iLmNsYXNzZWQoImV4dGVudCIpLE49WCgpLHo9Qm8ubW91c2UoTSksTD1Cby5zZWxlY3QoUW8pLm9uKCJrZXlkb3duLmJydXNoIix1KS5vbigia2V5dXAuYnJ1c2giLHApO2lmKEJvLmV2ZW50LmNoYW5nZWRUb3VjaGVzP0wub24oInRvdWNobW92ZS5icnVzaCIsdikub24oInRvdWNoZW5kLmJydXNoIixtKTpMLm9uKCJtb3VzZW1vdmUuYnJ1c2giLHYpLm9uKCJtb3VzZXVwLmJydXNoIixtKSxTLmludGVycnVwdCgpLnNlbGVjdEFsbCgiKiIpLmludGVycnVwdCgpLEMpelswXT1zWzBdLXpbMF0selsxXT1mWzBdLXpbMV07ZWxzZSBpZihrKXt2YXIgVD0rL3ckLy50ZXN0KGspLHE9Ky9ebi8udGVzdChrKTt4PVtzWzEtVF0telswXSxmWzEtcV0telsxXV0selswXT1zW1RdLHpbMV09ZltxXX1lbHNlIEJvLmV2ZW50LmFsdEtleSYmKHk9ei5zbGljZSgpKTtTLnN0eWxlKCJwb2ludGVyLWV2ZW50cyIsIm5vbmUiKS5zZWxlY3RBbGwoIi5yZXNpemUiKS5zdHlsZSgiZGlzcGxheSIsbnVsbCksQm8uc2VsZWN0KCJib2R5Iikuc3R5bGUoImN1cnNvciIsYi5zdHlsZSgiY3Vyc29yIikpLHcoe3R5cGU6ImJydXNoc3RhcnQifSksdigpfXZhciBpLG8sYT13KG4sImJydXNoc3RhcnQiLCJicnVzaCIsImJydXNoZW5kIiksYz1udWxsLGw9bnVsbCxzPVswLDBdLGY9WzAsMF0saD0hMCxnPSEwLHA9VWxbMF07cmV0dXJuIG4uZXZlbnQ9ZnVuY3Rpb24obil7bi5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49YS5vZih0aGlzLGFyZ3VtZW50cyksdD17eDpzLHk6ZixpOmksajpvfSxlPXRoaXMuX19jaGFydF9ffHx0O3RoaXMuX19jaGFydF9fPXQsQ2w/Qm8uc2VsZWN0KHRoaXMpLnRyYW5zaXRpb24oKS5lYWNoKCJzdGFydC5icnVzaCIsZnVuY3Rpb24oKXtpPWUuaSxvPWUuaixzPWUueCxmPWUueSxuKHt0eXBlOiJicnVzaHN0YXJ0In0pfSkudHdlZW4oImJydXNoOmJydXNoIixmdW5jdGlvbigpe3ZhciBlPW11KHMsdC54KSxyPW11KGYsdC55KTtyZXR1cm4gaT1vPW51bGwsZnVuY3Rpb24odSl7cz10Lng9ZSh1KSxmPXQueT1yKHUpLG4oe3R5cGU6ImJydXNoIixtb2RlOiJyZXNpemUifSl9fSkuZWFjaCgiZW5kLmJydXNoIixmdW5jdGlvbigpe2k9dC5pLG89dC5qLG4oe3R5cGU6ImJydXNoIixtb2RlOiJyZXNpemUifSksbih7dHlwZToiYnJ1c2hlbmQifSl9KToobih7dHlwZToiYnJ1c2hzdGFydCJ9KSxuKHt0eXBlOiJicnVzaCIsbW9kZToicmVzaXplIn0pLG4oe3R5cGU6ImJydXNoZW5kIn0pKX0pfSxuLng9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGM9dCxwPVVsWyFjPDwxfCFsXSxuKTpjfSxuLnk9ZnVuY3Rpb24odCl7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg/KGw9dCxwPVVsWyFjPDwxfCFsXSxuKTpsfSxuLmNsYW1wPWZ1bmN0aW9uKHQpe3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhjJiZsPyhoPSEhdFswXSxnPSEhdFsxXSk6Yz9oPSEhdDpsJiYoZz0hIXQpLG4pOmMmJmw/W2gsZ106Yz9oOmw/ZzpudWxsfSxuLmV4dGVudD1mdW5jdGlvbih0KXt2YXIgZSxyLHUsYSxoO3JldHVybiBhcmd1bWVudHMubGVuZ3RoPyhjJiYoZT10WzBdLHI9dFsxXSxsJiYoZT1lWzBdLHI9clswXSksaT1bZSxyXSxjLmludmVydCYmKGU9YyhlKSxyPWMocikpLGU+ciYmKGg9ZSxlPXIscj1oKSwoZSE9c1swXXx8ciE9c1sxXSkmJihzPVtlLHJdKSksbCYmKHU9dFswXSxhPXRbMV0sYyYmKHU9dVsxXSxhPWFbMV0pLG89W3UsYV0sbC5pbnZlcnQmJih1PWwodSksYT1sKGEpKSx1PmEmJihoPXUsdT1hLGE9aCksKHUhPWZbMF18fGEhPWZbMV0pJiYoZj1bdSxhXSkpLG4pOihjJiYoaT8oZT1pWzBdLHI9aVsxXSk6KGU9c1swXSxyPXNbMV0sYy5pbnZlcnQmJihlPWMuaW52ZXJ0KGUpLHI9Yy5pbnZlcnQocikpLGU+ciYmKGg9ZSxlPXIscj1oKSkpLGwmJihvPyh1PW9bMF0sYT1vWzFdKToodT1mWzBdLGE9ZlsxXSxsLmludmVydCYmKHU9bC5pbnZlcnQodSksYT1sLmludmVydChhKSksdT5hJiYoaD11LHU9YSxhPWgpKSksYyYmbD9bW2UsdV0sW3IsYV1dOmM/W2Uscl06bCYmW3UsYV0pfSxuLmNsZWFyPWZ1bmN0aW9uKCl7cmV0dXJuIG4uZW1wdHkoKXx8KHM9WzAsMF0sZj1bMCwwXSxpPW89bnVsbCksbn0sbi5lbXB0eT1mdW5jdGlvbigpe3JldHVybiEhYyYmc1swXT09c1sxXXx8ISFsJiZmWzBdPT1mWzFdfSxCby5yZWJpbmQobixhLCJvbiIpfTt2YXIgUGw9e246Im5zLXJlc2l6ZSIsZToiZXctcmVzaXplIixzOiJucy1yZXNpemUiLHc6ImV3LXJlc2l6ZSIsbnc6Im53c2UtcmVzaXplIixuZToibmVzdy1yZXNpemUiLHNlOiJud3NlLXJlc2l6ZSIsc3c6Im5lc3ctcmVzaXplIn0sVWw9W1sibiIsImUiLCJzIiwidyIsIm53IiwibmUiLCJzZSIsInN3Il0sWyJlIiwidyJdLFsibiIsInMiXSxbXV0samw9cmMuZm9ybWF0PWxjLnRpbWVGb3JtYXQsRmw9amwudXRjLEhsPUZsKCIlWS0lbS0lZFQlSDolTTolUy4lTFoiKTtqbC5pc289RGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcmJituZXcgRGF0ZSgiMjAwMC0wMS0wMVQwMDowMDowMC4wMDBaIik/SW86SGwsSW8ucGFyc2U9ZnVuY3Rpb24obil7dmFyIHQ9bmV3IERhdGUobik7cmV0dXJuIGlzTmFOKHQpP251bGw6dH0sSW8udG9TdHJpbmc9SGwudG9TdHJpbmcscmMuc2Vjb25kPUZ0KGZ1bmN0aW9uKG4pe3JldHVybiBuZXcgdWMoMWUzKk1hdGguZmxvb3Iobi8xZTMpKX0sZnVuY3Rpb24obix0KXtuLnNldFRpbWUobi5nZXRUaW1lKCkrMWUzKk1hdGguZmxvb3IodCkpfSxmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXRTZWNvbmRzKCl9KSxyYy5zZWNvbmRzPXJjLnNlY29uZC5yYW5nZSxyYy5zZWNvbmRzLnV0Yz1yYy5zZWNvbmQudXRjLnJhbmdlLHJjLm1pbnV0ZT1GdChmdW5jdGlvbihuKXtyZXR1cm4gbmV3IHVjKDZlNCpNYXRoLmZsb29yKG4vNmU0KSl9LGZ1bmN0aW9uKG4sdCl7bi5zZXRUaW1lKG4uZ2V0VGltZSgpKzZlNCpNYXRoLmZsb29yKHQpKX0sZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0TWludXRlcygpfSkscmMubWludXRlcz1yYy5taW51dGUucmFuZ2UscmMubWludXRlcy51dGM9cmMubWludXRlLnV0Yy5yYW5nZSxyYy5ob3VyPUZ0KGZ1bmN0aW9uKG4pe3ZhciB0PW4uZ2V0VGltZXpvbmVPZmZzZXQoKS82MDtyZXR1cm4gbmV3IHVjKDM2ZTUqKE1hdGguZmxvb3Iobi8zNmU1LXQpK3QpKX0sZnVuY3Rpb24obix0KXtuLnNldFRpbWUobi5nZXRUaW1lKCkrMzZlNSpNYXRoLmZsb29yKHQpKX0sZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0SG91cnMoKX0pLHJjLmhvdXJzPXJjLmhvdXIucmFuZ2UscmMuaG91cnMudXRjPXJjLmhvdXIudXRjLnJhbmdlLHJjLm1vbnRoPUZ0KGZ1bmN0aW9uKG4pe3JldHVybiBuPXJjLmRheShuKSxuLnNldERhdGUoMSksbn0sZnVuY3Rpb24obix0KXtuLnNldE1vbnRoKG4uZ2V0TW9udGgoKSt0KX0sZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0TW9udGgoKX0pLHJjLm1vbnRocz1yYy5tb250aC5yYW5nZSxyYy5tb250aHMudXRjPXJjLm1vbnRoLnV0Yy5yYW5nZTt2YXIgT2w9WzFlMyw1ZTMsMTVlMywzZTQsNmU0LDNlNSw5ZTUsMThlNSwzNmU1LDEwOGU1LDIxNmU1LDQzMmU1LDg2NGU1LDE3MjhlNSw2MDQ4ZTUsMjU5MmU2LDc3NzZlNiwzMTUzNmU2XSxZbD1bW3JjLnNlY29uZCwxXSxbcmMuc2Vjb25kLDVdLFtyYy5zZWNvbmQsMTVdLFtyYy5zZWNvbmQsMzBdLFtyYy5taW51dGUsMV0sW3JjLm1pbnV0ZSw1XSxbcmMubWludXRlLDE1XSxbcmMubWludXRlLDMwXSxbcmMuaG91ciwxXSxbcmMuaG91ciwzXSxbcmMuaG91ciw2XSxbcmMuaG91ciwxMl0sW3JjLmRheSwxXSxbcmMuZGF5LDJdLFtyYy53ZWVrLDFdLFtyYy5tb250aCwxXSxbcmMubW9udGgsM10sW3JjLnllYXIsMV1dLElsPWpsLm11bHRpKFtbIi4lTCIsZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0TWlsbGlzZWNvbmRzKCl9XSxbIjolUyIsZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0U2Vjb25kcygpfV0sWyIlSTolTSIsZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0TWludXRlcygpfV0sWyIlSSAlcCIsZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0SG91cnMoKX1dLFsiJWEgJWQiLGZ1bmN0aW9uKG4pe3JldHVybiBuLmdldERheSgpJiYxIT1uLmdldERhdGUoKX1dLFsiJWIgJWQiLGZ1bmN0aW9uKG4pe3JldHVybiAxIT1uLmdldERhdGUoKX1dLFsiJUIiLGZ1bmN0aW9uKG4pe3JldHVybiBuLmdldE1vbnRoKCl9XSxbIiVZIixBZV1dKSxabD17cmFuZ2U6ZnVuY3Rpb24obix0LGUpe3JldHVybiBCby5yYW5nZShNYXRoLmNlaWwobi9lKSplLCt0LGUpLm1hcChWbyl9LGZsb29yOkV0LGNlaWw6RXR9O1lsLnllYXI9cmMueWVhcixyYy5zY2FsZT1mdW5jdGlvbigpe3JldHVybiBabyhCby5zY2FsZS5saW5lYXIoKSxZbCxJbCl9O3ZhciBWbD1ZbC5tYXAoZnVuY3Rpb24obil7cmV0dXJuW25bMF0udXRjLG5bMV1dfSksWGw9RmwubXVsdGkoW1siLiVMIixmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXRVVENNaWxsaXNlY29uZHMoKX1dLFsiOiVTIixmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXRVVENTZWNvbmRzKCl9XSxbIiVJOiVNIixmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXRVVENNaW51dGVzKCl9XSxbIiVJICVwIixmdW5jdGlvbihuKXtyZXR1cm4gbi5nZXRVVENIb3VycygpfV0sWyIlYSAlZCIsZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0VVRDRGF5KCkmJjEhPW4uZ2V0VVRDRGF0ZSgpfV0sWyIlYiAlZCIsZnVuY3Rpb24obil7cmV0dXJuIDEhPW4uZ2V0VVRDRGF0ZSgpfV0sWyIlQiIsZnVuY3Rpb24obil7cmV0dXJuIG4uZ2V0VVRDTW9udGgoKX1dLFsiJVkiLEFlXV0pO1ZsLnllYXI9cmMueWVhci51dGMscmMuc2NhbGUudXRjPWZ1bmN0aW9uKCl7cmV0dXJuIFpvKEJvLnNjYWxlLmxpbmVhcigpLFZsLFhsKX0sQm8udGV4dD1BdChmdW5jdGlvbihuKXtyZXR1cm4gbi5yZXNwb25zZVRleHR9KSxCby5qc29uPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIEN0KG4sImFwcGxpY2F0aW9uL2pzb24iLFhvLHQpfSxCby5odG1sPWZ1bmN0aW9uKG4sdCl7cmV0dXJuIEN0KG4sInRleHQvaHRtbCIsJG8sdCl9LEJvLnhtbD1BdChmdW5jdGlvbihuKXtyZXR1cm4gbi5yZXNwb25zZVhNTH0pLCJmdW5jdGlvbiI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKEJvKToib2JqZWN0Ij09dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHMmJihtb2R1bGUuZXhwb3J0cz1CbyksdGhpcy5kMz1Cb30oKTs=')
},
{
'name': '/app/jslib/notify.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/jslib/selectize.bootstrap3.css', 'data': base64.b64decode('')
},
{
'name': '/app/js/serviceapi.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgTWFydWYgTWFuaXJ1enphbWFuIChtYXJ1Zm1AY29zbW9zZnJhbWV3b3JrLmNvbSkgb24gNi8xNC8xNC4KICovCgpmdW5jdGlvbiBwcm9jZXNzRXJyb3IoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKXsKICAgIGpRdWVyeSgiI3N0YXR1cyIpLmh0bWwoIjxoMz5FcnJvcjwvaDM+PGRpdj4iK2Vycm9yVGhyb3duKyI8L2Rpdj4iKTsKfQoKZnVuY3Rpb24gcHJvY2Vzc1N1Y2Nlc3MoZGF0YSl7CiAgICB2YXIgZGF0YTIgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgalF1ZXJ5KCIjcmVzdWx0IikudmFsKEpTT04uc3RyaW5naWZ5KGRhdGEyLHVuZGVmaW5lZCwgMikpOwp9CgpmdW5jdGlvbiBnZXRTZXJ2aWNlVXJsKHNlcnZpY2UpIHsKICAgIHZhciByb290ID0gZG9jdW1lbnQuVVJMOwogICAgaWYoc2VydmljZVswXSA9PSAnLycpewogICAgICAgIHNlcnZpY2UgPSBzZXJ2aWNlLnN1YnN0cmluZygxKTsKICAgIH0KICAgIHJldHVybiByb290K3NlcnZpY2U7Cn0KCmZ1bmN0aW9uIGRvX29wZXJhdGlvbih1cmwsIG1ldGhvZCwgZGF0YSwgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrKXsKICAgIGpRdWVyeSgiI3Jlc3VsdCIpLnZhbCgiIik7CiAgICBqUXVlcnkoIiNzdGF0dXMiKS5odG1sKCIiKTsKICAgIGNvbnNvbGUubG9nKG1ldGhvZCsgIjogIit1cmwpCiAgICAkLmFqYXgoewogICAgICAgIHVybDogdXJsLAogICAgICAgIHR5cGU6IG1ldGhvZCwKICAgICAgICBkYXRhOmRhdGEsCiAgICAgICAgc3VjY2VzczogY2FsbGJhY2ssCiAgICAgICAgZXJyb3I6IGVycm9yX2NhbGxiYWNrCiAgICB9KTsKfQoKZnVuY3Rpb24gaW5zZXJ0U2VydmljZSgpewogICAgdmFyIG5hbWUgPSBqUXVlcnkoIiNuYW1lIikudmFsKCk7CiAgICB2YXIgZGF0YSA9IGpRdWVyeSgiI2RhdGEiKS52YWwoKTsKCiAgICB2YXIgdXJsID0gIGdldFNlcnZpY2VVcmwobmFtZSk7CiAgICBkb19vcGVyYXRpb24odXJsLCAnUE9TVCcsIGRhdGEsIHByb2Nlc3NTdWNjZXNzLCBwcm9jZXNzRXJyb3IpOwp9CgpmdW5jdGlvbiBkZWxldGVJdGVtKCl7CiAgICB2YXIgbmFtZSA9IGpRdWVyeSgiI25hbWUiKS52YWwoKTsKICAgIHZhciBkYXRhID0galF1ZXJ5KCIjZGF0YSIpLnZhbCgpOwoKICAgIHZhciB1cmwgPSAgZ2V0U2VydmljZVVybChuYW1lKTsKCiAgICBkb19vcGVyYXRpb24odXJsLCAnREVMRVRFJywgZGF0YSwgcHJvY2Vzc1N1Y2Nlc3MsIHByb2Nlc3NFcnJvcik7Cn0KCmZ1bmN0aW9uIGxvYWRJdGVtKCl7CiAgICB2YXIgbmFtZSA9IGpRdWVyeSgiI25hbWUiKS52YWwoKTsKICAgIHZhciBkYXRhID0galF1ZXJ5KCIjZGF0YSIpLnZhbCgpOwogICAgdmFyIGNvbHVtbnMgPSBqUXVlcnkoIiNjb2x1bW5zIikudmFsKCk7CiAgICB2YXIgZmlsdGVyID0galF1ZXJ5KCIjZmlsdGVyIikudmFsKCk7CgogICAgdmFyIHVybCA9ICBnZXRTZXJ2aWNlVXJsKG5hbWUpOwogICAgaWYoY29sdW1ucyl7CiAgICAgICAgdXJsID0gdXJsKyI/IjsKICAgICAgICB1cmwgPXVybCsgImNvbHVtbnM9Iitjb2x1bW5zOwogICAgfQogICAgaWYoZmlsdGVyKXsKICAgICAgICBpZighY29sdW1ucykgewogICAgICAgICAgICB1cmwgPSB1cmwgKyAiPyI7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIHVybD11cmwrIiYiOwogICAgICAgIH0KICAgICAgICB1cmwgPSB1cmwrImZpbHRlcj0iK2ZpbHRlcgogICAgfQoKICAgIGRvX29wZXJhdGlvbih1cmwsICdHRVQnLCBkYXRhLCBwcm9jZXNzU3VjY2VzcyAscHJvY2Vzc0Vycm9yKTsKfQoKZnVuY3Rpb24gdXBkYXRlSXRlbSgpewogICAgdmFyIG5hbWUgPSBqUXVlcnkoIiNuYW1lIikudmFsKCk7CiAgICB2YXIgZGF0YSA9IGpRdWVyeSgiI2RhdGEiKS52YWwoKTsKCiAgICB2YXIgdXJsID0gIGdldFNlcnZpY2VVcmwobmFtZSk7CgogICAgZG9fb3BlcmF0aW9uKHVybCwgJ1BVVCcsIGRhdGEsIHByb2Nlc3NTdWNjZXNzLCBwcm9jZXNzRXJyb3IpOwp9CgpmdW5jdGlvbiBzdWJzY3JpYmUgKG1vbml0b3JfZW5kcG9pbnQsIG9iamVjdF9uYW1lLCBjYWxsYmFjaykgewogICAgLy9UT0RPOiBVbmlmeSB0aGUgb2JzZXJ2ZXIgdG8gbGlzdGVuIHRvIG1hbnkgb2JqZWN0cyBhdCBhIHRpbWUgdXNpbmcgZGlmZmVyZW50IGNhbGxiYWNrCiAgICAvL3ZhciBtb25pdG9yX2VuZHBvaW50ID0gIndzOi8vbG9jYWxob3N0OjgwODAvY2hhbmdlbW9uaXRvciIKICAgIHZhciB3ZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KG1vbml0b3JfZW5kcG9pbnQpOwogICAgdmFyIGZuID0gY2FsbGJhY2s7CiAgICB3ZWJzb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnNvbGUubG9nKCJTb2NrZXQgb3BlbmVkIik7CiAgICAgICAgd2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyJ0eXBlIjogIm1vbml0b3JfbnMiLCAibnMiOiBvYmplY3RfbmFtZX0pKQogICAgfQoKICAgIHdlYnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgY29uc29sZS5sb2coIk9uIG1lc3NhZ2U6ICIgKyBldnQuZGF0YSk7CiAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgIGZuKGV2dC5kYXRhKTsKICAgICAgICAgICAgLyoKICAgICAgICAgICAgIC8vSW4gY2FsbGJhY2sgeW91IG1heSBkbyBzb21ldGhpbmcgbGlrZSAoYWxzbyBjb25zaWRlciB0aGUgZXZ0LmRhdGEgaWYgeW91IGFyZSBtb25pdG9yaW5nIG11bHRpcGxlIG9iamVjdHMuOgogICAgICAgICAgICAgJGh0dHAuZ2V0KCcvc2VydmljZS8nK29iamVjdF9uYW1lKycvJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICovCiAgICAgICAgfQoKICAgIH0KCiAgICB3ZWJzb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zb2xlLmxvZygiT24gY2xvc2VkIik7CiAgICB9Cn0=')
},
{
'name': '/app/js/app.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKCi8vIERlY2xhcmUgYXBwIGxldmVsIG1vZHVsZSB3aGljaCBkZXBlbmRzIG9uIGZpbHRlcnMsIGFuZCBzZXJ2aWNlcwp2YXIgY29zbW9zVUkgPSBhbmd1bGFyLm1vZHVsZSgnY29zbW9zVUknLCBbCiAgICAnbmdSb3V0ZScsCiAgICAndWkuYm9vdHN0cmFwJywKICAgICd1aS5zb3J0YWJsZScsCiAgICAndWkuYWNlJywKICAgICd1aS5zZWxlY3QnLAogICAgJ3lhcnUyMi5qc29uSHVtYW4nLAogICAgJ0xvY2FsU3RvcmFnZU1vZHVsZScsCiAgICAnY29zbW9zVUkuZmlsdGVycycsCiAgICAnY29zbW9zVUkuc2VydmljZXMnLAogICAgJ2Nvc21vc1VJLmRpcmVjdGl2ZXMnLAogICAgJ2Nvc21vc1VJLmNvbnRyb2xsZXJzJwpdKS4KY29uZmlnKFsnJHJvdXRlUHJvdmlkZXInLCBmdW5jdGlvbigkcm91dGVQcm92aWRlcikgewogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL3Rlcm1pbmFsJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvdGVybWluYWwuaHRtbCcsIGNvbnRyb2xsZXI6ICdUZXJtaW5hbEN0cmwnfSk7CgogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2luc3RhbGwnLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9pbnN0YWxsLmh0bWwnLCBjb250cm9sbGVyOiAnVGVybWluYWxDdHJsJ30pOwogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL21lc3NhZ2UnLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9tZXNzYWdlLmh0bWwnLCBjb250cm9sbGVyOiAnTWVzc2FnZVZpZXdDdHJsJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy91c2VycycsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL3VzZXJzLmh0bWwnLCBjb250cm9sbGVyOiAnVXNlcnNDdHJsJ30pOwogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL3JvbGVzJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvcm9sZXMuaHRtbCcsIGNvbnRyb2xsZXI6ICdSb2xlc0N0cmwnfSk7CiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvbGlzdHMvJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvbGlzdC5odG1sJywgY29udHJvbGxlcjogJ0xpc3RDdHJsJ30pOwogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2xvZ2luLycsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2xvZ2luLmh0bWwnLCBjb250cm9sbGVyOiAnTG9naW5DdHJsJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hcHBzdHVkaW8vOmFwcFBhdGg/Jywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvYXBwc3R1ZGlvLmh0bWwnLCBjb250cm9sbGVyOiAnQXBwU3R1ZGlvQ3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hcHBzdHVkaW8vcGFnZS86YXBwUGF0aC86cGFnZUlkPycsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL3BhZ2UtZGVzaWduLmh0bWwnLCBjb250cm9sbGVyOiAnUGFnZURlc2lnbkN0cmwnfSk7CiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYXBwc3R1ZGlvL2Zvcm0vOmFwcFBhdGgvOmZvcm1JZD8nLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9mb3JtLWRlc2lnbi5odG1sJywgY29udHJvbGxlcjogJ0Zvcm1EZXNpZ25Db250cm9sbGVyJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hcHBzdHVkaW8vOml0ZW1UeXBlLzphcHBQYXRoLzppdGVtSWQ/Jywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvaXRlbS1kZXNpZ24uaHRtbCcsIGNvbnRyb2xsZXI6ICdJdGVtRGVzaWduQ3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYS86YXBwUGF0aC9mb3JtZGVzaWduLzpmb3JtSWQ/Jywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvZm9ybS1kZXNpZ24uaHRtbCcsIGNvbnRyb2xsZXI6ICdGb3JtRGVzaWduQ29udHJvbGxlcid9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL3BhZ2VkZXNpZ24vOnBhZ2VJZD8nLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9wYWdlLWRlc2lnbi5odG1sJywgY29udHJvbGxlcjogJ1BhZ2VEZXNpZ25DdHJsJ30pOwoKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYS86YXBwUGF0aD8vJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvcGFnZWhvbGRlci5odG1sJywgY29udHJvbGxlcjogJ0luZGV4Q3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL2xpc3RzLzpsaXN0SWQvJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvd2lkZ2V0LWhvc3QuaHRtbCcsIGNvbnRyb2xsZXI6ICdMaXN0RGV0YWlsQ3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYS86YXBwUGF0aC9jb250ZW50LzpmaWxlT2JqZWN0TmFtZS8nLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy91cGxvYWRmaWxlLmh0bWwnLCBjb250cm9sbGVyOiAnRmlsZVVwbG9hZEN0cmwnfSk7CiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYS86YXBwUGF0aC9mb3Jtcy86Zm9ybUlkPy86ZGF0YUlkPycsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2Zvcm12aWV3Lmh0bWwnLCBjb250cm9sbGVyOiAnRm9ybVZpZXdDdHJsJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL3BhZ2UvOnBhZ2VJZD8nLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9wYWdlLmh0bWwnLCBjb250cm9sbGVyOiAnUGFnZVZpZXdDdHJsJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL3ZpZXcvOmNvbmZpZ0lkLzppdGVtSWQvJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvc2luZ2xlaXRlbXZpZXcuaHRtbCcsIGNvbnRyb2xsZXI6ICdTaW5nbGVJdGVtVmlld0N0cmwnfSk7CgogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2FwcGxpc3QvJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvYXBwbGlzdC5odG1sJywgY29udHJvbGxlcjogJ0FwcExpc3RDdHJsJ30pOwoKCiAgICAkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe3JlZGlyZWN0VG86ICcvYS8nfSk7Cn1dKTsKCmNvc21vc1VJLmNvbmZpZyhmdW5jdGlvbiAobG9jYWxTdG9yYWdlU2VydmljZVByb3ZpZGVyKSB7CiAgbG9jYWxTdG9yYWdlU2VydmljZVByb3ZpZGVyLnNldFByZWZpeCgnY29zbW9zVUknKTsKfSk7Cgpjb3Ntb3NVSS5mYWN0b3J5KCckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnksICRodHRwLCAkaW5qZWN0b3IpIHsKICAgIHZhciBjYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ3RlbXBsYXRlcycpOwogICAgdmFyIHdpZGdldFByb21pc2U7CgogICAgcmV0dXJuIHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKHVybCkgewogICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGUuZ2V0KHVybCk7CgogICAgICAgICAgICBpZiAoY2FjaGVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIXdpZGdldFByb21pc2UpIHsKICAgICAgICAgICAgICAgIHZhciB1cmk9Jy9zZXJ2aWNlL2Nvc21vcy53aWRnZXRzLyc7CgogICAgICAgICAgICAgICAgd2lkZ2V0UHJvbWlzZSA9ICRodHRwLmdldCh1cmkpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVfZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UuZGF0YS5fZCk7CiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRlbXBsYXRlX2RhdGEsIGZ1bmN0aW9uIChkYXRhLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0iJyArIGRhdGEubmFtZSArICciPicgKyBkYXRhLnRlbXBsYXRlICsgJzwvc2NyaXB0Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICRpbmplY3Rvci5nZXQoJyRjb21waWxlJykodGVtcGxhdGUpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGUuZ2V0KHVybCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHdpZGdldFByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGUuZ2V0KHVybCk7CiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vRmFsbGJhY2sgdG8gcmVxdWVzdCB0aGUgc2VydmVyCiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pCiAgICAgICAgfSwKCiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIGNhY2hlLnB1dChrZXksIHZhbHVlKTsKICAgICAgICB9CiAgICB9Owp9KTsK')
},
{
'name': '/app/js/charthelper.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/filters.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogRmlsdGVycyAqLwoKYW5ndWxhci5tb2R1bGUoJ2Nvc21vc1VJLmZpbHRlcnMnLCBbXSkuCiAgZmlsdGVyKCdpbnRlcnBvbGF0ZScsIFsndmVyc2lvbicsIGZ1bmN0aW9uKHZlcnNpb24pIHsKICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7CiAgICAgIHJldHVybiBTdHJpbmcodGV4dCkucmVwbGFjZSgvXCVWRVJTSU9OXCUvbWcsIHZlcnNpb24pOwogICAgfTsKICB9XSk7Cg==')
},
{
'name': '/app/js/utils.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgbWFuaXJ1enphbWFuIG9uIDcvNS8xNC4KICovCgoKZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHsKICAgIHZhciB2YWx1ZSA9ICI7ICIgKyBkb2N1bWVudC5jb29raWU7CiAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCgiOyAiICsgbmFtZSArICI9Iik7CiAgICBpZiAocGFydHMubGVuZ3RoID09IDIpIHJldHVybiBwYXJ0cy5wb3AoKS5zcGxpdCgiOyIpLnNoaWZ0KCk7Cn0KCmZ1bmN0aW9uIGdldFVzZXJOYW1lKGRlZmF1bHRfdXNlcil7CiAgICB2YXIgdXNlckNvb2tpZSA9IGdldENvb2tpZSgidXNlciIpOwogICAgaWYodXNlckNvb2tpZSl7CiAgICAgICAgdXNlckNvb2tpZSA9IHVzZXJDb29raWUucmVwbGFjZSgvXCIvZywgIiIpCiAgICAgICAgdmFyIGRlY29kZWQgPSBKU09OLnBhcnNlKHdpbmRvdy5hdG9iKHVzZXJDb29raWUpKTsKICAgICAgICByZXR1cm4gZGVjb2RlZFsidXNlcm5hbWUiXSB8fCBkZWZhdWx0X3VzZXI7CiAgICB9CgogICAgcmV0dXJuIGRlZmF1bHRfdXNlcjsKfQoKZnVuY3Rpb24gbG9nZ2VkSW4oKXsKICAgIHZhciB1c2VyQ29va2llID0gZ2V0Q29va2llKCJ1c2Vyc2VjcmV0Iik7CiAgICBpZih1c2VyQ29va2llKXsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQ==')
},
{
'name': '/app/js/controllers/LoginCtrl.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKY29udHJvbGxlcnMuY29udHJvbGxlcignTG9naW5DdHJsJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdDb3Ntb3NTZXJ2aWNlJywgJyRodHRwJywKICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgQ29zbW9zU2VydmljZSwgJGh0dHApIHsKICAgICAgICAgICAgJHNjb3BlLnJlZGlyZWN0VXJsID0gJHJvdXRlUGFyYW1zLnJlZGlyZWN0OwogICAgICAgICAgICAkc2NvcGUuaGF2ZUFjY291bnQgPSB0cnVlOwoKICAgICAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLnVzZXJuYW1lIHx8ICRzY29wZS51c2VybmFtZS5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gIlVzZXJuYW1lIGlzIHJlcXVpcmVkLiI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLnBhc3N3b3JkIHx8ICRzY29wZS5wYXNzd29yZC5sZW5ndGggPCA0KSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gIlBhc3N3b3JkIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGF0IGxlYXN0IDQgY2hhcmFjdGVyIGxvbmcuIjsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2xvZ2luLycsIHsidXNlcm5hbWUiOiRzY29wZS51c2VybmFtZSwgInBhc3N3b3JkIjokc2NvcGUucGFzc3dvcmQgfSkuCiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24udXJsKCRzY29wZS5yZWRpcmVjdFVybCB8fCAnLycpOwogICAgICAgICAgICAgICAgICB9KS4KICAgICAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RhdHVzID09PSA0MDEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gIlVzZXJuYW1lIG9yIHBhc3N3b3JkIGRpZCBub3QgbWF0Y2guIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAkc2NvcGUuc2lnbnVwID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgLy9UT0RPOmNyZWF0ZSBhIHNlcnZpY2UgZm9yIGdsb2JhbCBzZXR0aW5ncwogICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUudXNlcm5hbWUgfHwgJHNjb3BlLnVzZXJuYW1lLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSAiVXNlcm5hbWUgaXMgcmVxdWlyZWQuIjsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUucGFzc3dvcmQgfHwgJHNjb3BlLnBhc3N3b3JkLmxlbmd0aCA8IDYpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSAiUGFzc3dvcmQgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXIgbG9uZy4iOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnBhc3N3b3JkICE9PSAkc2NvcGUucGFzc3dvcmRfcmUpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSAiUGFzc3dvcmQgZG9lcyBub3QgbWF0Y2guIjsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS9jb3Ntb3MudXNlcnMvJzsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0geyAidXNlcm5hbWUiOiAkc2NvcGUudXNlcm5hbWUsICJwYXNzd29yZCI6ICRzY29wZS5wYXNzd29yZCB9OwoKICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucG9zdCh1cmwsIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJldHVybmVkRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9naW4oKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RhdHVzID09PSA0MDkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gIlVzZXJuYW1lIGFscmVhZHkgdGFrZW4uIFBsZWFzZSB1c2UgYW5vdGhlciB1c2VybmFtZSBvciBsb2dpbiB1c2luZyB5b3VyIHBhc3N3b3JkLiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9ICJDb3VsZCBub3QgY3JlYXRlIHVzZXIuIEVycm9yIGNvZGU6ICIrIHN0YXR1cyArICIgRXJyb3I6ICIgKyBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfTsKICAgIH1dKQo7')
},
{
'name': '/app/js/controllers/PageViewCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ1BhZ2VWaWV3Q3RybCcsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnQ29zbW9zU2VydmljZScsICdjb3Ntb3Muc2V0dGluZ3MnLAogICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIENvc21vc1NlcnZpY2UsIHNldHRpbmdzKSB7CiAgICAgICAgJHNjb3BlLnBhZ2VJZCA9ICRyb3V0ZVBhcmFtcy5wYWdlSWQ7CiAgICAgICAgJHNjb3BlLmFwcFBhdGggPSAkcm91dGVQYXJhbXMuYXBwUGF0aDsKICAgICAgICAkc2NvcGUucm91dGVQYXJhbXMgPSAkcm91dGVQYXJhbXM7CgogICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwgPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sb2dpblJlcXVpcmVkICYmICFsb2dnZWRJbigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJVcmwgPSAkbG9jYXRpb24udXJsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi51cmwoIi9sb2dpbi8/cmVkaXJlY3Q9IiArIGN1clVybCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnZSA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2V0dGluZ3MuZ2V0QXBwU2V0dGluZ3MoJHNjb3BlLmFwcFBhdGgsICJwYWdlY29uZmlnb2JqZWN0IiwgZnVuY3Rpb24gKG9iamVjdE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9zZXJ2aWNlLycgKyBvYmplY3ROYW1lICsgJy8nICsgJHNjb3BlLnBhZ2VJZCArICcvJzsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXR1cywgZGF0YSkgewogICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLnBhZ2VzLycgKyAkc2NvcGUucGFnZUlkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwodXJsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2V0dGluZ3MuaW5pdFNldHRpbmdzKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb24oKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmluaXQoKTsKCgogICAgfV0pOwo=')
},
{
'name': '/app/js/controllers/AppStudioCtrl.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/controllers/TerminalCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignVGVybWluYWxDdHJsJywgWyckc2NvcGUnLCAnJG1vZGFsJywgJyRyb3V0ZVBhcmFtcycsICdDb3Ntb3NTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsLCAkcm91dGVQYXJhbXMsIENvc21vc1NlcnZpY2UpIHsKICAgICRzY29wZS5zZXJ2aWNlID0gIi9zZXJ2aWNlLyI7CiAgICAkc2NvcGUuY29sdW1ucyA9ICIiOwogICAgJHNjb3BlLmZpbHRlciA9ICIiOwogICAgJHNjb3BlLmRhdGEgPSAiIjsKICAgICRzY29wZS5yZXN1bHQgPSAiIjsKICAgICRzY29wZS5zdGF0dXMgPSAiIjsKICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwoKICAgICRzY29wZS5jbGVhckVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICRzY29wZS5oYXNFcnJvciA9IGZhbHNlOwogICAgICAgICRzY29wZS5zdGF0dXMgPSAiIjsKICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSAiIjsKICAgIH07CgogICAgJHNjb3BlLnByb2Nlc3NSZXN1bHQgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICRzY29wZS5yZXN1bHQgPSBKU09OLnN0cmluZ2lmeShkYXRhLCB1bmRlZmluZWQsIDQpCiAgICB9OwoKICAgICRzY29wZS5jbGVhclJlc3VsdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAkc2NvcGUucmVzdWx0ID0gIiI7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICIiOwogICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwogICAgfTsKCiAgICAkc2NvcGUucHJvY2Vzc0Vycm9yID0gZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICRzY29wZS5oYXNFcnJvciA9IHRydWU7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTsKICAgIH07CgogICAgJHNjb3BlLmdldCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuY2xlYXJSZXN1bHQoKTsKICAgICAgICB2YXIgdXJsID0gJHNjb3BlLnNlcnZpY2U7CiAgICAgICAgdmFyIHF1ZXJ5U3RhcnRlZCA9IGZhbHNlOwogICAgICAgIGlmICgkc2NvcGUuY29sdW1ucyAmJiAkc2NvcGUuY29sdW1ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHVybCA9IHVybCArICI/Y29sdW1ucz0iICsgJHNjb3BlLmNvbHVtbnM7CiAgICAgICAgICAgIHF1ZXJ5U3RhcnRlZCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICgkc2NvcGUuZmlsdGVyICYmICRzY29wZS5maWx0ZXIubGVuZ3RoID4gMCkgewogICAgICAgICAgICBpZiAocXVlcnlTdGFydGVkKSB7CiAgICAgICAgICAgICAgICB1cmwgPSB1cmwgKyAiJmZpbHRlcj0iICsgJHNjb3BlLmZpbHRlcjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHVybCA9IHVybCArICI/ZmlsdGVyPSIgKyAkc2NvcGUuZmlsdGVyOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmwsIGZ1bmN0aW9uIChyZXR1cm5lZERhdGEpIHsKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzUmVzdWx0KHJldHVybmVkRGF0YSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgfQogICAgICAgICk7CiAgICB9OwoKICAgICRzY29wZS5wb3N0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICRzY29wZS5jbGVhclJlc3VsdCgpOwogICAgICAgIHZhciB1cmwgPSAkc2NvcGUuc2VydmljZTsKICAgICAgICBDb3Ntb3NTZXJ2aWNlLnBvc3QodXJsLCAkc2NvcGUuZGF0YSwgZnVuY3Rpb24gKHJldHVybmVkRGF0YSkgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NSZXN1bHQocmV0dXJuZWREYXRhKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICB9CiAgICAgICAgKTsKICAgIH07CgogICAgJHNjb3BlLnB1dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuY2xlYXJSZXN1bHQoKTsKICAgICAgICB2YXIgdXJsID0gJHNjb3BlLnNlcnZpY2U7CiAgICAgICAgQ29zbW9zU2VydmljZS5wdXQodXJsLCAkc2NvcGUuZGF0YSwgZnVuY3Rpb24gKHJldHVybmVkRGF0YSkgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NSZXN1bHQocmV0dXJuZWREYXRhKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICB9CiAgICAgICAgKTsKICAgIH07CgogICAgJHNjb3BlLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuY2xlYXJSZXN1bHQoKTsKICAgICAgICB2YXIgdXJsID0gJHNjb3BlLnNlcnZpY2U7CiAgICAgICAgQ29zbW9zU2VydmljZS5kZWxldGUodXJsLCBmdW5jdGlvbiAocmV0dXJuZWREYXRhKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc1Jlc3VsdChyZXR1cm5lZERhdGEpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgIH0KICAgICAgICApOwogICAgfTsKfV0pCjs=')
},
{
'name': '/app/js/controllers/ListDetailCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignTGlzdERldGFpbEN0cmwnLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJG1vZGFsJywgJ0Nvc21vc1NlcnZpY2UnLAogICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkdGVtcGxhdGVDYWNoZSwgJG1vZGFsLCBDb3Ntb3NTZXJ2aWNlKSB7CgogICAgICAgICRzY29wZS5jbGVhckVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkc2NvcGUuaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICIiOwogICAgICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSAiIjsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUubGlzdElkID0gJHJvdXRlUGFyYW1zLmxpc3RJZDsKCiAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvciA9IGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gdHJ1ZTsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1c19kYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLmxpc3Rjb25maWd1cmF0aW9ucy8nICsgJHNjb3BlLmxpc3RJZCArICcvJzsKCiAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdENvbmZpZ3VyYXRpb24gPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXREYXRhKCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSAiIjsKICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5saXN0Q29uZmlndXJhdGlvbi5jb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uLCBpbmRleCkgewogICAgICAgICAgICAgICAgY29sdW1ucyArPSBjb2x1bW4ubmFtZSArICIsIjsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJyArICRzY29wZS5saXN0Q29uZmlndXJhdGlvbi5vYmplY3ROYW1lICsgJy8/Y29sdW1ucz0nICsgY29sdW1uczsKCiAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuc2hvd0xpc3RJdGVtRGV0YWlscyA9IGZ1bmN0aW9uIChkYXRhLCBsaXN0Q29uZmlndXJhdGlvbikgewogICAgICAgICAgICAgJHNjb3BlLnNob3dEZXRhaWxzKCdsZycsIGRhdGEsIGxpc3RDb25maWd1cmF0aW9uKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuc2hvd0RldGFpbHMgPSBmdW5jdGlvbiAoc2l6ZSwgZGF0YSwgbGlzdENvbmZpZ3VyYXRpb24pIHsKICAgICAgICAgICAgaWYgKGxpc3RDb25maWd1cmF0aW9uLmFsbG93RGV0YWlscykgewogICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7CiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9zaG93X2pzb24uaHRtbCcsCiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogIlNob3dKc29uRGF0YUN0cmwiLAogICAgICAgICAgICAgICAgICAgIHNpemU6IHNpemUsCiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLAogICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbigpOwogICAgfV0pOw==')
},
{
'name': '/app/js/controllers/UsersCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ1VzZXJzQ3RybCcsIFsnJHNjb3BlJywgJyRtb2RhbCcsICdDb3Ntb3NTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsLCBDb3Ntb3NTZXJ2aWNlKSB7CgogICAgJHNjb3BlLmNsZWFyRXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gZmFsc2U7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICIiOwogICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwogICAgfTsKCiAgICAkc2NvcGUucHJvY2Vzc0Vycm9yID0gZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICRzY29wZS5oYXNFcnJvciA9IHRydWU7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTsKICAgIH07CgogICAgJHNjb3BlLmFkZFVzZXIgPSBmdW5jdGlvbiAoc2l6ZSwgY3VycmVudF91c2VyKSB7CiAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7CiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvYWRkdXNlci5odG1sJywKICAgICAgICAgICAgY29udHJvbGxlcjogIlVzZXJNb2RhbEluc3RhbmNlQ3RybCIsCiAgICAgICAgICAgIHNpemU6IHNpemUsCiAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJywKICAgICAgICAgICAgcmVzb2x2ZTogewogICAgICAgICAgICAgICAgdXNlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50X3VzZXI7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcm9sZXM6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnJvbGVzOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHVzZXIpIHsKICAgICAgICAgICAgaWYgKCF1c2VyLl9pZCkgewogICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5wb3N0KCcvc2VydmljZS9jb3Ntb3MudXNlcnMvJywgdXNlciwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldFVzZXJzKCk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHVzZXJfaWQgPSB1c2VyLl9pZDsKICAgICAgICAgICAgICAgIGRlbGV0ZSB1c2VyLl9pZDsKICAgICAgICAgICAgICAgIGRlbGV0ZSB1c2VyLm93bmVyOwogICAgICAgICAgICAgICAgZGVsZXRlIHVzZXIudXNlcm5hbWU7CiAgICAgICAgICAgICAgICBkZWxldGUgdXNlci5jcmVhdGV0aW1lOwogICAgICAgICAgICAgICAgaWYgKCF1c2VyLnBhc3N3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHVzZXIucGFzc3dvcmQ7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5wdXQoJy9zZXJ2aWNlL2Nvc21vcy51c2Vycy8nICsgdXNlcl9pZCArICcvJywgdXNlciwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldFVzZXJzKCk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyRsb2cuaW5mbygnTW9kYWwgZGlzbWlzc2VkIGF0OiAnICsgbmV3IERhdGUoKSk7CiAgICAgICAgfSk7CiAgICB9OwoKICAgICRzY29wZS5lZGl0VXNlciA9IGZ1bmN0aW9uICh1c2VySW5kZXgpIHsKICAgICAgICAkc2NvcGUuYWRkVXNlcignbGcnLCAkc2NvcGUudXNlcnNbdXNlckluZGV4XSk7CiAgICB9OwoKICAgICRzY29wZS5yZW1vdmVVc2VyID0gZnVuY3Rpb24gKHVzZXJJbmRleCkgewogICAgICAgIHZhciB1c2VyID0gJHNjb3BlLnVzZXJzW3VzZXJJbmRleF07CgogICAgICAgIGlmIChjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSB1c2VyICcgKyB1c2VyLnVzZXJuYW1lICsgJz8nKSkgewogICAgICAgICAgICB2YXIgdXNlcl9pZCA9IHVzZXIuX2lkOwogICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmRlbGV0ZSgnL3NlcnZpY2UvY29zbW9zLnVzZXJzLycgKyB1c2VyX2lkICsgJy8nLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRVc2VycygpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfTsKCiAgICAkc2NvcGUuZ2V0Um9sZXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgQ29zbW9zU2VydmljZS5nZXQoJy9zZXJ2aWNlL2Nvc21vcy5yYmFjLm9iamVjdC5yb2xlLycsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUucm9sZXMgPSBkYXRhOwogICAgICAgICAgICB9LAogICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgIH0pOwogICAgfTsKCiAgICAkc2NvcGUuZ2V0Um9sZXMoKTsKCiAgICAkc2NvcGUuZ2V0VXNlcnMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgQ29zbW9zU2VydmljZS5nZXQoJy9zZXJ2aWNlL2Nvc21vcy51c2Vycy8nLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJzID0gZGF0YTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICB9CiAgICAgICAgKTsKICAgIH07CgogICAgJHNjb3BlLmdldFVzZXJzKCk7Cn1dKTsKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ1VzZXJNb2RhbEluc3RhbmNlQ3RybCcsIFsnJHNjb3BlJywgJyRtb2RhbEluc3RhbmNlJywgJ3JvbGVzJywgJ3VzZXInLCBmdW5jdGlvbiAoJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgcm9sZXMsIHVzZXIpIHsKICAgICRzY29wZS51c2VyID0gdXNlciB8fCB7InVzZXJuYW1lIjogbnVsbCwgInBhc3N3b3JkIjogbnVsbCwgInBhc3N3b3JkX3JlIjogbnVsbCwgImVtYWlsIjogbnVsbCwgInJvbGVzIjogW119OwogICAgJHNjb3BlLnVzZXIucGFzc3dvcmQgPSBudWxsOwogICAgJHNjb3BlLmlzVXBkYXRpbmcgPSAodXNlciAmJiB1c2VyLl9pZCAmJiB1c2VyLl9pZC5sZW5ndGggPiAwKTsKICAgICRzY29wZS5yb2xlcyA9IHJvbGVzOwoKICAgICRzY29wZS5nZXRSb2xlTmFtZSA9IGZ1bmN0aW9uIChzaWQpIHsKICAgICAgICB2YXIgZm91bmRfcm9sZSA9ICJbQnVpbHRpbiBSb2xlXSI7CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5yb2xlcywgZnVuY3Rpb24gKHJvbGUsIGtleSkgewogICAgICAgICAgICBpZiAocm9sZS5zaWQgPT09IHNpZCkgewogICAgICAgICAgICAgICAgZm91bmRfcm9sZSA9IHJvbGUubmFtZTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICByZXR1cm4gZm91bmRfcm9sZTsKICAgIH07CgogICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkgewogICAgICAgIGlmICgkc2NvcGUudXNlci51c2VybmFtZSAmJiAoJHNjb3BlLnVzZXIucGFzc3dvcmQgfHwgJHNjb3BlLmlzVXBkYXRpbmcpKSB7CiAgICAgICAgICAgIGlmICgkc2NvcGUudXNlci5wYXNzd29yZCA9PSAkc2NvcGUudXNlci5wYXNzd29yZF9yZSkgewogICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS51c2VyLnBhc3N3b3JkX3JlOwogICAgICAgICAgICAgICAgJG1vZGFsSW5zdGFuY2UuY2xvc2UoJHNjb3BlLnVzZXIpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJHNjb3BlLmhhc2Vycm9yID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICRzY29wZS5oYXNlcnJvciA9IHRydWU7CiAgICAgICAgfQoKICAgIH07CgogICAgJHNjb3BlLnJlbW92ZVJvbGUgPSBmdW5jdGlvbiAoaW5kZXgpIHsKICAgICAgICAkc2NvcGUudXNlci5yb2xlcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgfTsKCiAgICAkc2NvcGUuYWRkUm9sZSA9IGZ1bmN0aW9uIChzZWxlY3RlZF9yb2xlKSB7CiAgICAgICAgaWYgKCFzZWxlY3RlZF9yb2xlIHx8IHNlbGVjdGVkX3JvbGUubGVuZ3RoIDwgMSkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIGlmICghJHNjb3BlLnVzZXIucm9sZXMpIHsKICAgICAgICAgICAgJHNjb3BlLnVzZXIucm9sZXMgPSBbXTsKICAgICAgICB9CiAgICAgICAgdmFyIGR1cCA9IGZhbHNlOwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUudXNlci5yb2xlcywgZnVuY3Rpb24gKHJvbGVzaWQsIGluZGV4KSB7CiAgICAgICAgICAgIGlmIChyb2xlc2lkID09PSBzZWxlY3RlZF9yb2xlKSB7CiAgICAgICAgICAgICAgICBkdXAgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgaWYgKCFkdXApIHsKICAgICAgICAgICAgJHNjb3BlLnVzZXIucm9sZXMucHVzaChzZWxlY3RlZF9yb2xlKTsKICAgICAgICB9CiAgICB9OwoKICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7CiAgICB9Owp9XSkKOwo=')
},
{
'name': '/app/js/controllers/FormViewCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ0Zvcm1WaWV3Q3RybCcsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnJGluamVjdG9yJywgJ0Nvc21vc1NlcnZpY2UnLCAnbWVzc2FnZScsCiAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgJGluamVjdG9yLCBDb3Ntb3NTZXJ2aWNlLCBtZXNzYWdlKSB7CiAgICAgICAgJHNjb3BlLmZvcm0gPSB7fTsKICAgICAgICAkc2NvcGUuZGF0YSA9IHt9OwoKICAgICAgICAkc2NvcGUuZm9ybXJlZiA9IHsgInR5cGUiOiJmb3JtcmVmIiwgInZhbHVlIjp7ImZvcm1JZCI6ICRyb3V0ZVBhcmFtcy5mb3JtSWR9fTsKICAgICAgICAkc2NvcGUuZGF0YUlkID0gJHJvdXRlUGFyYW1zLmRhdGFJZDsKICAgIH1dKTsKCi8vVE9ETzogTWVyZ2Ugd2l0aCBhYm92ZQpjb250cm9sbGVycy5jb250cm9sbGVyKCdGb3JtVmlld01vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnJGluamVjdG9yJywgJ0Nvc21vc1NlcnZpY2UnLCAnbWVzc2FnZScsJ21vZGVsJywgJ2Zvcm1JZCcsCiAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgJGluamVjdG9yLCBDb3Ntb3NTZXJ2aWNlLCBtZXNzYWdlLCBtb2RlbCwgZm9ybUlkKSB7CiAgICAgICAgJHNjb3BlLmZvcm1yZWYgPSB7ICJ0eXBlIjoiZm9ybXJlZiIsICJ2YWx1ZSI6eyJmb3JtSWQiOiBmb3JtSWR8fCAkcm91dGVQYXJhbXMuZm9ybUlkfX07CiAgICAgICAgJHNjb3BlLmRhdGFJZCA9IG1vZGVsPyBtb2RlbC5faWQgOiAkcm91dGVQYXJhbXMuZGF0YUlkOwogICAgfV0pOw==')
},
{
'name': '/app/js/controllers/FileUploadCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignRmlsZVVwbG9hZEN0cmwnLCBbJyRzY29wZScsICckbW9kYWwnLCAnJHJvdXRlUGFyYW1zJywgJ0Nvc21vc1NlcnZpY2UnLAogICAgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsLCAkcm91dGVQYXJhbXMsIENvc21vc1NlcnZpY2UpIHsKCiAgICAgICAgJHNjb3BlLmZpbGVPYmplY3ROYW1lID0gJHJvdXRlUGFyYW1zLmZpbGVPYmplY3ROYW1lOwoKICAgICAgICAkc2NvcGUuc2V0QWN0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGRvY3VtZW50LnVwbG9hZEZvcm0uYWN0aW9uID0gIi9ncmlkZnMvIiArICRzY29wZS5maWxlT2JqZWN0TmFtZSArICIvIjsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuY2xlYXJFcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gZmFsc2U7CiAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSAiIjsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1c19kYXRhID0gIiI7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvciA9IGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gdHJ1ZTsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1c19kYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnVwbG9hZGVkX2ZpbGVzID0gWwogICAgICAgICAgICB7ImZpbGVfaWQiOiAidGVzdCJ9CiAgICAgICAgXTsKCiAgICAgICAgJHNjb3BlLm9uRmlsZVVwbG9hZExvYWRlZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc3BvbnNlVGV4dCA9IHRoaXMuY29udGVudERvY3VtZW50LmJvZHkuaW5uZXJUZXh0OwoKICAgICAgICAgICAgaWYgKHJlc3BvbnNlVGV4dCkgewogICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IEpTT04ucGFyc2UoSlNPTi5wYXJzZShyZXNwb25zZVRleHQpLl9kKTsKICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uIChkYXRhLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS51cGxvYWRlZF9maWxlcy5wdXNoKGRhdGEpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGlmcmFtZSBjb250cm9sCiAgICAgICAgICAgICQoJyNzdWJtaXQtaWZyYW1lJykucmVtb3ZlKCk7CiAgICAgICAgICAgIGpRdWVyeSgiI2ZpbGVMaXN0IikuZW1wdHkoKTsKICAgICAgICAgICAgalF1ZXJ5KCIjZmlsZUxpc3QiKS5hcHBlbmQoalF1ZXJ5KCc8aW5wdXQgY2xhc3M9ImZpbGUtc2VsZWN0b3IiIG5hbWU9InVwbG9hZGVkZmlsZSIgdHlwZT0iZmlsZSIgb25jaGFuZ2U9ImFuZ3VsYXIuZWxlbWVudCh0aGlzKS5zY29wZSgpLmZpbGVOYW1lQ2hhbmdlZCgpIiAvPicpKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUudXBsb2FkRmlsZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgalF1ZXJ5KCIjaUZyYW1lUGxhY2Vob2xkZXIiKS5odG1sKCI8aWZyYW1lIG5hbWU9J3N1Ym1pdC1pZnJhbWUnIGlkPSdzdWJtaXQtaWZyYW1lJyBzdHlsZT0nZGlzcGxheTogbm9uZTsnPjwvaWZyYW1lPiIpOwoKICAgICAgICAgICAgalF1ZXJ5KCIjc3VibWl0LWlmcmFtZSIpLmxvYWQoJHNjb3BlLm9uRmlsZVVwbG9hZExvYWRlZCk7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cGxvYWRGb3JtIikuc3VibWl0KCk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmZpbGVOYW1lQ2hhbmdlZCA9IGZ1bmN0aW9uIChmaWxlSW5wdXQpIHsKICAgICAgICAgICAgdmFyIGVtcHR5Rm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGpRdWVyeSgiI2ZpbGVMaXN0IikuY2hpbGRyZW4oKSwgZnVuY3Rpb24gKGRhdGEsIGluZGV4KSB7CiAgICAgICAgICAgICAgICBpZiAoIWRhdGEudmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBlbXB0eUZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoIWVtcHR5Rm91bmQpIHsKICAgICAgICAgICAgICAgIGpRdWVyeSgiI2ZpbGVMaXN0IikuYXBwZW5kKGpRdWVyeSgnPGlucHV0IGNsYXNzPSJmaWxlLXNlbGVjdG9yIiBuYW1lPSJ1cGxvYWRlZGZpbGUiIHR5cGU9ImZpbGUiIG9uY2hhbmdlPSJhbmd1bGFyLmVsZW1lbnQodGhpcykuc2NvcGUoKS5maWxlTmFtZUNoYW5nZWQoKSIgLz4nKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2NvcGUucmVtb3ZlRmlsZSA9IGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICB2YXIgZmlsZSA9ICRzY29wZS51cGxvYWRlZF9maWxlc1tpbmRleF07CiAgICAgICAgICAgIGlmIChjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSBmaWxlICcgKyBmaWxlLmZpbGVuYW1lICsgJz8nKSkgewogICAgICAgICAgICAgICAgdmFyIGZpbGVfaWQgPSBmaWxlLmZpbGVfaWQ7CiAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmRlbGV0ZSgnL2dyaWRmcy8nICsgJHNjb3BlLmZpbGVPYmplY3ROYW1lICsgJy8nICsgZmlsZV9pZCArICcvJywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZGVkX2ZpbGVzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmdldEZpbGVzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCgnL2dyaWRmcy8nICsgJHNjb3BlLmZpbGVPYmplY3ROYW1lICsgJy8nLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS51cGxvYWRlZF9maWxlcyA9IGRhdGE7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0RmlsZXMoKTsKICAgIH1dKTs=')
},
{
'name': '/app/js/controllers/RolesCtrl.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/controllers/ListCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignTGlzdEN0cmwnLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJG1vZGFsJywgJ0Nvc21vc1NlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRtb2RhbCwgQ29zbW9zU2VydmljZSkgewoKICAgICRzY29wZS5zZXJ2aWNlTmFtZSA9ICJsaXN0cyI7CgogICAgJHNjb3BlLmNsZWFyRXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gZmFsc2U7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICIiOwogICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwogICAgfTsKCiAgICAkc2NvcGUucHJvY2Vzc0Vycm9yID0gZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICRzY29wZS5oYXNFcnJvciA9IHRydWU7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTsKICAgIH07CgogICAgJHNjb3BlLmdldERhdGEgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS9jb3Ntb3MubGlzdGNvbmZpZ3VyYXRpb25zLyc7CgogICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICRzY29wZS5saXN0cyA9IGRhdGE7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgfQogICAgICAgICk7CiAgICB9OwoKICAgICRzY29wZS5nZXREYXRhKCk7Cn1dKTs=')
},
{
'name': '/app/js/controllers/PageDesignCtrl.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/controllers/IndexCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ0luZGV4Q3RybCcsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnQ29zbW9zU2VydmljZScsICdtZXNzYWdlJywKICAgICdjb3Ntb3MuY2FjaGVkbG9hZGVyJywnY29zbW9zLnV0aWxzJywKICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBDb3Ntb3NTZXJ2aWNlLCBtZXNzYWdlLCBjYWNoZWRsb2FkZXIsIHV0aWxzKSB7CgogICAgICAgICRzY29wZS5wYWdlUmVmcyA9IFtdOwogICAgICAgICRzY29wZS5hcHBQYXRoID0gJHJvdXRlUGFyYW1zLmFwcFBhdGg7CgogICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IgPSBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYXBwc3R1ZGlvLycpOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoJHNjb3BlLmFwcFBhdGggJiYgJHNjb3BlLmFwcFBhdGgubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdldEFwcENvbmZpZ3VyYXRpb24oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLmdsb2JhbHNldHRpbmdzLyc7CgogICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJsLCBmdW5jdGlvbiAocmV0dXJuZWREYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmV0dXJuZWREYXRhIHx8IHJldHVybmVkRGF0YS5sZW5ndGggIT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hcHBzdHVkaW8vJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnbG9iYWxTZXR0aW5ncyA9IHJldHVybmVkRGF0YVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcElkID0gZ2xvYmFsU2V0dGluZ3MuZGVmYXVsdGFwcGlkOwogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0QXBwQ29uZmlndXJhdGlvbigpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICRzY29wZS5nZXRBcHBDb25maWd1cmF0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdXJsOwogICAgICAgICAgICBpZiAoJHNjb3BlLmFwcElkKSB7CiAgICAgICAgICAgICAgICB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLmFwcGxpY2F0aW9ucy8/ZmlsdGVyPXsiaWQiOiInICsgJHNjb3BlLmFwcElkICsgJyJ9JzsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICgkc2NvcGUuYXBwUGF0aCkgewogICAgICAgICAgICAgICAgdXJsID0gJy9zZXJ2aWNlL2Nvc21vcy5hcHBsaWNhdGlvbnMvP2ZpbHRlcj17InBhdGgiOiInICsgJHNjb3BlLmFwcFBhdGggKyAnIn0nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hcHBsaXN0LycpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgYXBwQ2FjaGUgPSAiQXBwbGljYXRpb24uIiArICgkc2NvcGUuYXBwUGF0aCB8fCAkc2NvcGUuYXBwSWQpOwoKICAgICAgICAgICAgY2FjaGVkbG9hZGVyLmdldChhcHBDYWNoZSwgdXJsLCBmdW5jdGlvbiAocmV0dXJuZWREYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXR1cm5lZERhdGEgfHwgcmV0dXJuZWREYXRhLmxlbmd0aCAhPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIG1zZyA9ICJFeGFjdGx5IG9uZSBhcHBsaWNhdGlvbiBpcyBleHBlY3RlZCBmb3IgcGF0aCA9ICIKICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgKyAkc2NvcGUuYXBwUGF0aCArICIuIEZvdW5kID0gIiArICgoIXJldHVybmVkRGF0YSkgPyAwIDogcmV0dXJuZWREYXRhLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWVzc2FnZS5wdXNoKHsibWVzc2FnZSI6IG1zZywgInRpdGxlIjogIkludmFsaWQgYXBwbGljYXRpb24gbmFtZSIsICJkYXRhIjogIiJ9KTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8kbG9jYXRpb24ucGF0aCgnL21lc3NhZ2UnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hcHBzdHVkaW8vJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBTZXR0aW5ncyA9IHJldHVybmVkRGF0YVswXTsKICAgICAgICAgICAgICAgICAgICBpZighJHNjb3BlLmFwcFBhdGgpewogICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2EvJyskc2NvcGUuYXBwU2V0dGluZ3MucGF0aCsnLycpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGx5U2V0dGluZ3MoJHNjb3BlLmFwcFNldHRpbmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuYXBwbHlTZXR0aW5ncyA9IGZ1bmN0aW9uIChhcHApIHsKICAgICAgICAgICAgaWYoIWFwcCl7CiAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKDQwNCwgIkFwcGxpY2F0aW9uIG5vdCBmb3VuZCBhdCB0aGUgcGF0aCIpOwoKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChhcHAuc2V0dGluZ3MgJiYgYXBwLnNldHRpbmdzLmluZGV4UGFnZUlkKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2VSZWZzID0gWwogICAgICAgICAgICAgICAgICAgICAgICB7InR5cGUiOiAicGFnZXJlZiIsICJuYW1lIjogIkluZGV4IiwgInBhZ2VJZCI6IGFwcC5zZXR0aW5ncy5pbmRleFBhZ2VJZH0KICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdXRpbHMuZ2V0QWxsUGFnZXMoYXBwLCBmdW5jdGlvbiAocGFnZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdlcyA9IHBhZ2VzOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uKCk7CiAgICB9XSkKOw==')
},
{
'name': '/app/js/controllers/controllers.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogQ29udHJvbGxlcnMgKi8KdmFyIGNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ2Nvc21vc1VJLmNvbnRyb2xsZXJzJywgW10pCiAgICAuY29udHJvbGxlcignQWRtaW5NYWluQ3RybCcsIFsnJHNjb3BlJywgJyRtb2RhbCcsICdDb3Ntb3NTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsLCBDb3Ntb3NTZXJ2aWNlKSB7CiAgICAgICAgJHNjb3BlLnVzZXJOYW1lID0gZ2V0VXNlck5hbWUoIk5vIE5hbWUiKTsKICAgICAgICAkc2NvcGUubG9nZ2VkSW4gPSBsb2dnZWRJbjsKICAgIH1dKQoKICAgIC5jb250cm9sbGVyKCdNZXNzYWdlVmlld0N0cmwnLCBbJyRzY29wZScsICdDb3Ntb3NTZXJ2aWNlJywgJ21lc3NhZ2UnLCBmdW5jdGlvbiAoJHNjb3BlLCBDb3Ntb3NTZXJ2aWNlLCBtZXNzYWdlKSB7CiAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBtZXNzYWdlLnBvcCgpOwogICAgfV0pCgogICAgLmNvbnRyb2xsZXIoJ1Nob3dKc29uRGF0YUN0cmwnLCBbJyRzY29wZScsICckbW9kYWxJbnN0YW5jZScsICdtb2RlbCcsIGZ1bmN0aW9uICgkc2NvcGUsICRtb2RhbEluc3RhbmNlLCBtb2RlbCkgewogICAgICAgICRzY29wZS5tb2RlbCA9IG1vZGVsOwogICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpOwogICAgICAgIH07CiAgICB9XSkKCiAgICAuY29udHJvbGxlcignU2luZ2xlSXRlbVZpZXdDdHJsJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlUGFyYW1zKSB7CiAgICAgICAgJHNjb3BlLmNvbmZpZ0lkID0gJHJvdXRlUGFyYW1zLmNvbmZpZ0lkOwogICAgICAgICRzY29wZS5pdGVtSWQgPSAkcm91dGVQYXJhbXMuaXRlbUlkOwogICAgfV0pCgogICAgLmNvbnRyb2xsZXIoJ0FwcExpc3RDdHJsJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywnQ29zbW9zU2VydmljZScsJ2Nvc21vcy5jYWNoZWRsb2FkZXInLCAnY29zbW9zLnNldHRpbmdzJywKICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsIENvc21vc1NlcnZpY2UsIGNhY2hlZGxvYWRlciwgc2V0dGluZ3MpIHsKICAgICAgICAgICAgJHNjb3BlLmFwcHMgPSBbXTsKCiAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IgPSBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuaGFzRXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgJHNjb3BlLmluaXQ9ZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBsaWNhdGlvbnMoZnVuY3Rpb24gKGFwcGxpY2F0aW9ucykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFwcGxpY2F0aW9ucyB8fCBhcHBsaWNhdGlvbnMubGVuZ3RoPT0wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2FwcHN0dWRpby8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBzID0gYXBwbGljYXRpb25zOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICB9XSkKCgoKOwo=')
},
{
'name': '/app/js/controllers/ItemDesignCtrl.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/controllers/FormDesignCtrl.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/services/constants.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTIvMTMvMTQuCiAqLwoKc2VydmljZXMuY29uc3RhbnQoCiAgICAiY29zbW9zLmNvbmZpZ05hbWVzIix7CiAgICAgICAgIk1FTlUiOiAibWVudSIsCiAgICAgICAgIkZPUk0iOiJmb3JtIiwKICAgICAgICAiUEFHRSI6InBhZ2UiLAogICAgICAgICJMSVNUIjogImxpc3QiLAogICAgICAgICJDSEFSVCI6ICJjaGFydCIsCiAgICAgICAgIldJREdFVCI6ICJ3aWRnZXQiLAogICAgICAgICJBUFAiOiAiYXBwIiwKICAgICAgICAiU0lOR0xFX09CSkVDVCI6ICJzaW5nbGVvYmplY3QiLAogICAgICAgICJTT1VSQ0VGSUxFUyI6ICJzb3VyY2VmaWxlcyIKICAgIH0KKTs=')
},
{
'name': '/app/js/services/services.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogU2VydmljZXMgKi8KCnZhciBzZXJ2aWNlczsKc2VydmljZXMgPSBhbmd1bGFyLm1vZHVsZSgnY29zbW9zVUkuc2VydmljZXMnLCBbXSkKICAgIC52YWx1ZSgndmVyc2lvbicsICcwLjEnKQogICAgLmZhY3RvcnkoJ21lc3NhZ2UnLCBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKSB7CiAgICAgICAgdmFyIG1zZ3MgPSBbXTsKICAgICAgICByZXR1cm57CiAgICAgICAgICAgIHB1c2g6IGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICAgIG1zZ3MucHVzaChtc2cpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBwb3A6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtc2dzLnNoaWZ0KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhhc01lc3NhZ2U6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiAobXNncyAmJiBtc2dzLmxlbmd0aCA+IDApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH1dKQogICAgLmZhY3RvcnkoJ2dsb2JhbGhhc2h0YWJsZScsIFsnJGh0dHAnLCAnbG9jYWxTdG9yYWdlU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgbG9jYWxTdG9yYWdlU2VydmljZSkgewogICAgICAgIHJldHVybnsKICAgICAgICAgICAgY29sbGVjdGlvbnM6IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KCdnbG9iYWxoYXNodGFibGUnKSB8fCB7fSwKICAgICAgICAgICAgZ2V0QWxsOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uczsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAobmFtZSwgb2JqZWN0KSB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zW25hbWVdID0gb2JqZWN0OwogICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ2dsb2JhbGhhc2h0YWJsZScsIHRoaXMuY29sbGVjdGlvbnMpCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uc1tuYW1lXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH1dKQoKICAgIC5mYWN0b3J5KCduYW1lZGNvbGVjdGlvbicsIFsnJGh0dHAnLCAnbG9jYWxTdG9yYWdlU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgbG9jYWxTdG9yYWdlU2VydmljZSkgewogICAgICAgIHJldHVybnsKICAgICAgICAgICAgY29sbGVjdGlvbnM6IHt9LAogICAgICAgICAgICAvLyBUT0RPOiBtYXliZSBwdXQgYWxsIG5hbWVkIGNvbGxlY3Rpb24gaW4gdGhlIGxvY2FsIHN0b3JhZ2UgYXQgb25jZS0gbm93IHdlIGFyZSBzYXZpbmcgaW5kaXZpZHVhbAogICAgICAgICAgICAvLyB3ZSBzaG91bGQgYmUgY2FyZWZ1bCBhYm91dCB0aGlzIHNpbmNlIGRhdGEgc2l6ZSBtYXkgaW5jcmVhc2UgYSBsb3QgZm9yIGxhcmdlIGFwcGxpY2F0aW9ucwoKICAgICAgICAgICAgZ2V0Q29sbGVjdGlvbjogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gdGhpcy5jb2xsZWN0aW9uc1tuYW1lXTsKCiAgICAgICAgICAgICAgICBpZiAoIW9iamVjdHMpIHsKICAgICAgICAgICAgICAgICAgICBvYmplY3RzID0gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQobmFtZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmplY3RzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdHMgPSBbXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uc1tuYW1lXSA9IG9iamVjdHM7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQobmFtZSwgb2JqZWN0cyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdHM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uIChuYW1lLCBvYmplY3QpIHsKICAgICAgICAgICAgICAgIGlmICghbmFtZSB8fCAhb2JqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gdGhpcy5nZXRDb2xsZWN0aW9uKG5hbWUpOwoKICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaChvYmplY3QpOwoKICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KG5hbWUsIG9iamVjdHMpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVtb3ZlQnlJZDogZnVuY3Rpb24gKG5hbWUsIF9pZCkgewogICAgICAgICAgICAgICAgdmFyIGZvdW5kSW5kZXggPSAtMTsKICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gdGhpcy5nZXRDb2xsZWN0aW9uKG5hbWUpOwogICAgICAgICAgICAgICAgaWYgKCFvYmplY3RzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kSW5kZXg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gob2JqZWN0cywgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZEluZGV4IDwgMCAmJiB2YWx1ZVsiX2lkIl0gPT09IF9pZCkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKGZvdW5kSW5kZXggPj0gMCkgewogICAgICAgICAgICAgICAgICAgIG9iamVjdHMuc3BsaWNlKGZvdW5kSW5kZXgsIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQobmFtZSwgb2JqZWN0cyk7CiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmRJbmRleDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxlbmd0aDogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gdGhpcy5nZXRDb2xsZWN0aW9uKG5hbWUpOwogICAgICAgICAgICAgICAgaWYgKCFvYmplY3RzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0cy5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfV0pCgogICAgLmZhY3RvcnkoJ2NhbGN1bGF0b3InLCBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKSB7CiAgICAgICAgcmV0dXJuewoKICAgICAgICAgICAgc3VtQ29sdW1uVmFsdWVzOiBmdW5jdGlvbiAobGlzdCwgY29sdW1uTmFtZSkgewogICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gMDsKICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ciA9IE51bWJlcih2YWx1ZVtjb2x1bW5OYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cikgewogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBjdXI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdG90YWw7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhdmVyYWdlQ29sdW1uVmFsdWVzOiBmdW5jdGlvbiAobGlzdCwgY29sdW1uTmFtZSkgewogICAgICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoIDwgMSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBzdW0gPSBzdW1Db2x1bW5WYWx1ZXMobGlzdCwgY29sdW1uTmFtZSk7CiAgICAgICAgICAgICAgICB2YXIgYXZlcmFnZSA9IHN1bSAvIGxpc3QubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfV0pCgogICAgLmZhY3RvcnkoJ2Nvc21vcy5jYWNoZScsIFsnJGh0dHAnLCBmdW5jdGlvbiAoJGh0dHApIHsKICAgICAgICByZXR1cm57CiAgICAgICAgICAgIHN0b3JlOiB7fSwKICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoaWQsIHZhbHVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlW2lkXSA9IHZhbHVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVbaWRdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfV0pOwo=')
},
{
'name': '/app/js/services/cachedloader.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKc2VydmljZXMuZmFjdG9yeSgnY29zbW9zLmNhY2hlZGxvYWRlcicsIFsnQ29zbW9zU2VydmljZScsIGZ1bmN0aW9uIChDb3Ntb3NTZXJ2aWNlKSB7CiAgICByZXR1cm57CiAgICAgICAgc3RvcmU6IHt9LAogICAgICAgIGNsZWFyQ2FjaGU6IGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICBkZWxldGUgdGhpcy5zdG9yZVtuYW1lXTsKICAgICAgICB9LAogICAgICAgIGdldDogZnVuY3Rpb24gKG5hbWUsIHVyaSwgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrLCByZWZyZXNoKSB7CgogICAgICAgICAgICBpZiAoIXJlZnJlc2gpIHsKICAgICAgICAgICAgICAgIHZhciByZXR1cm5lZF9kYXRhID0gdGhpcy5zdG9yZVtuYW1lXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmV0dXJuZWRfZGF0YSkgewogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmV0dXJuZWRfZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmksCiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVbbmFtZV0gPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkuYmluZCh0aGlzKSwKICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JfY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KS5iaW5kKHRoaXMpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBnZXRGcm9tQ2FjaGU6IGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVtuYW1lXTsKICAgICAgICB9CiAgICB9Cn1dKTs=')
},
{
'name': '/app/js/services/utils.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTIvMTQvMTQuCiAqLwoKCnNlcnZpY2VzLmZhY3RvcnkoJ2Nvc21vcy51dGlscycsIFsnQ29zbW9zU2VydmljZScsICdjb3Ntb3MuY2FjaGVkbG9hZGVyJywgJ2Nvc21vcy5zZXR0aW5ncycsCiAgICBmdW5jdGlvbiAoQ29zbW9zU2VydmljZSwgY2FjaGVkbG9hZGVyLCBzZXR0aW5ncykgewogICAgcmV0dXJuewogICAgICAgIHNpdGVXaWRlQ291bnRlciA6IDAsCiAgICAgICAgc2V0QXBwQXNEZWZhdWx0OiBmdW5jdGlvbiAoYXBwLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKCiAgICAgICAgICAgIGlmIChhcHAgJiYgYXBwLmlkKSB7CiAgICAgICAgICAgICAgICB2YXIgdXJpID0gIi9zZXJ2aWNlL2Nvc21vcy5nbG9iYWxzZXR0aW5ncy8iOwogICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJpLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncyA9IGRhdGFbMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmkgPSB1cmkgKyBncy5faWQgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHV0ZGF0YSA9IHsiZGVmYXVsdGFwcGlkIjogYXBwLmlkfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucHV0KHVyaSwgcHV0ZGF0YSwgb25TdWNjZXNzLCBvbkVycm9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHNldHRpbmdzIG5vdCBmb3VuZCAtIGNyZWF0ZSBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwdXRkYXRhID0geyJkZWZhdWx0YXBwaWQiOiBhcHAuaWR9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5wb3N0KHVyaSwgcHV0ZGF0YSwgb25TdWNjZXNzLCBvbkVycm9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb25FcnJvcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAob25FcnJvcikgewogICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoNDA0LCAiQXBwbGljYXRpb24gbm90IGZvdW5kIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBzZXRQYWdlQXNEZWZhdWx0OiBmdW5jdGlvbiAoYXBwLCBwYWdlLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKICAgICAgICAgICAgaWYgKGFwcCAmJiBhcHAuX2lkKSB7CiAgICAgICAgICAgICAgICB2YXIgdXJpID0gIi9zZXJ2aWNlL2Nvc21vcy5hcHBsaWNhdGlvbnMvIithcHAuX2lkOwogICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJpLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvYWRlZEFwcCA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWRBcHAuc2V0dGluZ3MuaW5kZXhQYWdlSWQgPSBwYWdlLl9pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwdXRkYXRhID0geyAic2V0dGluZ3MiIDogbG9hZGVkQXBwLnNldHRpbmdzfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucHV0KHVyaSwgcHV0ZGF0YSwgb25TdWNjZXNzLCBvbkVycm9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoNDA0LCAiQXBwbGljYXRpb24gbm90IGZvdW5kIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uRXJyb3IpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICBvbkVycm9yKDQwNCwgIkFwcGxpY2F0aW9uIG5vdCBmb3VuZCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgZ2V0QWxsUGFnZXM6IGZ1bmN0aW9uIChhcHAsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykgewogICAgICAgICAgICB2YXIgYXBwQ2FjaGUgPSAiUGFnZS5fQ29zbW9zX0FsbF9QYWdlc18iOwogICAgICAgICAgICB2YXIgYXBwVXJsID0gJy9zZXJ2aWNlLycgKyBhcHAuc2V0dGluZ3Mub2JqZWN0bWFwLnBhZ2Vjb25maWdvYmplY3QgKyAnLyc7CiAgICAgICAgICAgIGNhY2hlZGxvYWRlci5nZXQoYXBwQ2FjaGUsIGFwcFVybCwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChwYWdlcykgewogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhwYWdlcyk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9LAoKICAgICAgICBnZXROZXh0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgaWYodmFsdWUpewogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICsxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuc2l0ZVdpZGVDb3VudGVyICs9MTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2l0ZVdpZGVDb3VudGVyOwogICAgICAgIH0sCgogICAgICAgIGdldENhcGNoYVNpdGVLZXk6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBnbG9iYWxTZXR0aW5ncyA9IGNhY2hlZGxvYWRlci5nZXRGcm9tQ2FjaGUoIlNldHRpbmdzLl9Db3Ntb3NfR2xvYmFsX1NldHRpbmdzXyIpOwogICAgICAgICAgICBpZihnbG9iYWxTZXR0aW5ncyl7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsU2V0dGluZ3NbMF1bInJlY2FwY2hhc2l0ZWtleSJdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9XSk7')
},
{
'name': '/app/js/services/settings.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/services/http.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKc2VydmljZXMuZmFjdG9yeSgnQ29zbW9zU2VydmljZScsIFsnJGh0dHAnLCBmdW5jdGlvbiAoJGh0dHApIHsKICAgIHJldHVybnsKICAgICAgICBnZXQ6IGZ1bmN0aW9uICh1cmksIGNhbGxiYWNrLCBlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAkaHR0cC5nZXQodXJpKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuZWRfZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLl9jb3Ntb3Nfc2VydmljZV9hcnJheV9yZXN1bHRfKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRfZGF0YSA9IEpTT04ucGFyc2UoZGF0YS5fZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXR1cm5lZF9kYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBzZWFyY2g6IGZ1bmN0aW9uICh1cmksIHBhcmFtcywgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICRodHRwLmdldCh1cmksIHBhcmFtcykuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgdmFyIHJldHVybmVkX2RhdGEgPSBkYXRhOwogICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5fY29zbW9zX3NlcnZpY2VfYXJyYXlfcmVzdWx0XykgewogICAgICAgICAgICAgICAgICAgIHJldHVybmVkX2RhdGEgPSBKU09OLnBhcnNlKGRhdGEuX2QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmV0dXJuZWRfZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jYWxsYmFjayhkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgcG9zdDogZnVuY3Rpb24gKHVyaSwgZGF0YSwgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICRodHRwLnBvc3QodXJpLCBkYXRhKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuZWRfZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLl9jb3Ntb3Nfc2VydmljZV9hcnJheV9yZXN1bHRfKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRfZGF0YSA9IEpTT04ucGFyc2UoZGF0YS5fZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXR1cm5lZF9kYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgcG9zdFdpdGhBcmdzOiBmdW5jdGlvbiAodXJpLCBkYXRhLCBjYWxsYmFjaywgY2FsbGJhY2tBcmdzLCBlcnJvcl9jYWxsYmFjaywgZXJyb3JDYWxsYmFja0FyZ3MpIHsKICAgICAgICAgICAgJGh0dHAucG9zdCh1cmksIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgIHZhciByZXR1cm5lZF9kYXRhID0gZGF0YTsKICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEuX2Nvc21vc19zZXJ2aWNlX2FycmF5X3Jlc3VsdF8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm5lZF9kYXRhID0gSlNPTi5wYXJzZShkYXRhLl9kKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJldHVybmVkX2RhdGEsIGNhbGxiYWNrQXJncyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jYWxsYmFjayhkYXRhLCBzdGF0dXMsIGVycm9yQ2FsbGJhY2tBcmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBwdXQ6IGZ1bmN0aW9uICh1cmksIGRhdGEsIGNhbGxiYWNrLCBlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAkaHR0cC5wdXQodXJpLCBkYXRhKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgZGVsZXRlOiBmdW5jdGlvbiAodXJpLCBjYWxsYmFjaywgZXJyb3JfY2FsbGJhY2spIHsKICAgICAgICAgICAgJGh0dHAuZGVsZXRlKHVyaSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jYWxsYmFjayhkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIHNhdmVGaWxlOiBmdW5jdGlvbiAoY29sbGVjdGlvbk5hbWUsIGNvbnRlbnQsIGNvbnRlbnRUeXBlLCBmaWxlTmFtZSwgZmlsZUlkLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdLCB7IHR5cGU6IGNvbnRlbnRUeXBlfSk7CgogICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoInVwbG9hZGVkZmlsZSIsIGJsb2IsIGZpbGVOYW1lKTsKCiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CgogICAgICAgICAgICB2YXIgdXJsID0gICIvZ3JpZGZzLyIgKyBjb2xsZWN0aW9uTmFtZSArICIvIiArIChmaWxlSWQ/IChmaWxlSWQgKyAiLyIpOicnKTsKCiAgICAgICAgICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICBpZihvblN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVybmVkX2RhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0dXJuZWRfZGF0YSAmJiByZXR1cm5lZF9kYXRhLl9jb3Ntb3Nfc2VydmljZV9hcnJheV9yZXN1bHRfKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5lZF9kYXRhID0gSlNPTi5wYXJzZShyZXR1cm5lZF9kYXRhLl9kKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJldHVybmVkX2RhdGEgJiYgcmV0dXJuZWRfZGF0YS5sZW5ndGg+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRfZGF0YSA9IHJldHVybmVkX2RhdGFbMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKHJldHVybmVkX2RhdGEpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZihvbkVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IocmVxdWVzdC5zdGF0dXMsIHJlcXVlc3QucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciByZXF1ZXN0TWV0aG9kID0gZmlsZUlkPyJQVVQiOiJQT1NUIjsKCiAgICAgICAgICAgIHJlcXVlc3Qub3BlbihyZXF1ZXN0TWV0aG9kLHVybCk7CiAgICAgICAgICAgIHJlcXVlc3Quc2VuZChmb3JtRGF0YSk7CiAgICAgICAgfQogICAgfQoKfV0pOw==')
},
{
'name': '/app/js/directives/field.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/directives/directives.js', 'data': base64.b64decode('')
},
{
'name': '/app/img/.gitkeep', 'data': base64.b64decode('')
},
{
'name': '/app/data/sample.css', 'data': base64.b64decode('LnByb2R1Y3QgewogICAgd2lkdGg6IDEwMCU7CiAgICBtYXgtd2lkdGg6IDMyMHB4OwogICAgbWluLWhlaWdodDogMjUwcHg7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjRUZFRkVGOwogICAgbWFyZ2luOiA3cHg7CiAgICBwYWRkaW5nOiA3cHg7Cn0=')
},
{
'name': '/app/data/app_init.json', 'data': base64.b64decode('')
},
{
'name': '/app/data/components.json', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgbWFuaXJ1enphbWFuIG9uIDgvMjEvMTQuCiAqLwpbCnsKICAgICJuYW1lIjoicGF5cGFsYnV0dG9uIiwKICAgICJ0aXRsZSI6ICJQYXlwYWwgQnV0dG9uIiwKICAgICJzZXR0aW5ncyI6WwogICAgICAgIHsKICAgICAgICAgICAgImVtYWlsIjogInRleHQiLAogICAgICAgICAgICAiaXRlbW5hbWUiOiJ0ZXh0IiwKICAgICAgICAgICAgIml0ZW1pZCI6InRleHQiLAogICAgICAgICAgICAicHJpY2UiOiJ0ZXh0IiwKICAgICAgICAgICAgImN1cnJlbmN5IjoiQ3VycmVuY3kiCiAgICAgICAgfQogICAgXQp9Cl0=')
},
{
'name': '/app/css/charts.css', 'data': base64.b64decode('LyogQmFyIGNoYXJ0IHN0eWxlICovCgouYmFyIHsKICBmaWxsOiBzdGVlbGJsdWU7Cn0KCi5iYXI6aG92ZXIgewogIGZpbGw6IGJyb3duOwp9CgouYXhpcyB7CiAgZm9udDogMTBweCBzYW5zLXNlcmlmOwp9CgouYXhpcyBwYXRoLAouYXhpcyBsaW5lIHsKICBmaWxsOiBub25lOwogIHN0cm9rZTogIzAwMDsKICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwRWRnZXM7Cn0KCi54LmF4aXMgcGF0aCB7CiAgZGlzcGxheTogbm9uZTsKfQoKLyogRU5EIEJhciBjaGFydCBzdHlsZSAqLwoKLyogTGluZSBDaGFydCBTdHlsZXMqLwoKLmF4aXMgcGF0aCwKLmF4aXMgbGluZSB7CiAgZmlsbDogbm9uZTsKICBzdHJva2U6ICMwMDA7CiAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzOwp9CgoueC5heGlzIHBhdGggewogIGRpc3BsYXk6IG5vbmU7Cn0KCi5saW5lIHsKICBmaWxsOiBub25lOwogIHN0cm9rZTogc3RlZWxibHVlOwogIHN0cm9rZS13aWR0aDogMS41cHg7Cn0KCi8qIEVORCBMaW5lIENoYXJ0IFN0eWxlcyovCgovKiBQaWUgY2hhcnQgc3R5bGUgKi8KLmFyYyBwYXRoIHsKICBzdHJva2U6ICNmZmY7Cn0KCi8qIEVuZCBQaWUgQ2hhcnQgU3R5bGUgKi8KCi5jaGFydEhvbGRlcgp7CiAgICB3aWR0aDo5ODBweDsKICAgIGhlaWdodDo1MjBweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkOwogICAgb3ZlcmZsb3c6IGF1dG87Cn0KLmNoYXJ0ewogICAgd2lkdGg6OTcwcHg7CiAgICBoZWlnaHQ6NTEwcHg7Cn0KCg==')
},
{
'name': '/app/css/app.css', 'data': base64.b64decode('LyogYXBwIGNzcyBzdHlsZXNoZWV0ICovCgoubWVudSB7CiAgbGlzdC1zdHlsZTogbm9uZTsKICBib3JkZXItYm90dG9tOiAwLjFlbSBzb2xpZCBibGFjazsKICBtYXJnaW4tYm90dG9tOiAyZW07CiAgcGFkZGluZzogMCAwIDAuNWVtOwp9CgoubWVudTpiZWZvcmUgewogIGNvbnRlbnQ6ICJbIjsKfQoKLm1lbnU6YWZ0ZXIgewogIGNvbnRlbnQ6ICJdIjsKfQoKLm1lbnUgPiBsaSB7CiAgZGlzcGxheTogaW5saW5lOwp9CgoubWVudSA+IGxpOmJlZm9yZSB7CiAgY29udGVudDogInwiOwogIHBhZGRpbmctcmlnaHQ6IDAuM2VtOwp9CgoubWVudSA+IGxpOm50aC1jaGlsZCgxKTpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwogIHBhZGRpbmc6IDA7Cn0KCi5lZGl0b3J7CiAgICBtaW4td2lkdGg6IDQwMHB4Owp9CgouYWNlX2VkaXRvciB7CiAgICBtaW4taGVpZ2h0OiAyMDBweDsKfQoKLnRhYmxlLWhvdmVyIHRib2R5IHRyOmhvdmVyID4gdGQgewogICAgY3Vyc29yOiBwb2ludGVyOwogICAgY3Vyc29yOiBoYW5kOwp9')
},
{
'name': '/app/partials/message.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxoMT57e21lc3NhZ2UudGl0bGV9fTwvaDE+CiAgICA8ZGl2Pnt7bWVzc2FnZS5tZXNzYWdlfX08L2Rpdj4KICAgIDxkaXY+e3ttZXNzYWdlLmRhdGF9fTwvZGl2Pgo8L2Rpdj4=')
},
{
'name': '/app/partials/page-design.html', 'data': base64.b64decode('')
},
{
'name': '/app/partials/roles.html', 'data': base64.b64decode('ICAgIDxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii8jL3Rlcm1pbmFsLyI+VGVybWluYWw8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8jL2FwcHN0dWRpby8iPkFwcCBTdHVkaW88L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy9yb2xlcyI+Um9sZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+IDxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+IDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9IiFsb2dnZWRJbigpIj48YSBocmVmPSIvIy9sb2dpbi8/cmVkaXJlY3Q9L3Rlcm1pbmFsLyI+TG9naW48L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cgo8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICAgICAgPGRpdj48bGFiZWw+RXJyb3IgY29kZTo8L2xhYmVsPjxzcGFuIG5nLWJpbmQ9InN0YXR1cyIgLz48L2Rpdj4KICAgICAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxoMz5Sb2xlczwvaDM+CgogICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICAgICAgPHRoZWFkPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGg+U0lEPC90aD4KICAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD4KICAgICAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGUgaW4gcm9sZXMiPgogICAgICAgICAgICA8dGQ+e3tyb2xlLnNpZH19PC90ZD48dGQ+e3tyb2xlLm5hbWV9fTwvdGQ+CiAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLXdhcm5pbmcgZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0IiBuZy1jbGljaz0iZWRpdFJvbGUoJGluZGV4KTsiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0icmVtb3ZlLXJvbGUte3tyb2xlLnNpZH19IiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIiBuZy1jbGljaz0icmVtb3ZlUm9sZSgkaW5kZXgpOyI+PC9idXR0b24+CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KCiAgICA8YnV0dG9uIGlkPSJjcmVhdGUtcm9sZS1idG4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJhZGRSb2xlKCdsZycpIj5DcmVhdGUgcm9sZTwvYnV0dG9uPgo8L2Rpdj4=')
},
{
'name': '/app/partials/widget-host.html', 'data': base64.b64decode('PGRpdiBuZy1pbmNsdWRlPSJsaXN0Q29uZmlndXJhdGlvbi53aWRnZXROYW1lIiAvPjwvZGl2Pg==')
},
{
'name': '/app/partials/form-design.html', 'data': base64.b64decode('')
},
{
'name': '/app/partials/uploadfile.html', 'data': base64.b64decode('PHN0eWxlPgouZmlsZS1saXN0IHsKICAgIHBhZGRpbmctYm90dG9tOiAxMHB4Owp9Ci5maWxlLXNlbGVjdG9yewogICAgbWFyZ2luOiA1cHg7Cn0KPC9zdHlsZT4KCjxkaXYgbmctc2hvdz0iaGFzRXJyb3IiIGNsYXNzPSJiZy13YXJuaW5nIj4KICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICA8ZGl2PjxsYWJlbD5FcnJvciBjb2RlOjwvbGFiZWw+PHNwYW4gbmctYmluZD0ic3RhdHVzIj48L3NwYW4+PC9kaXY+CiAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KPC9kaXY+CjxkaXYgaWQ9ImlGcmFtZVBsYWNlaG9sZGVyIj48L2Rpdj4KCjx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgPHRoZWFkPgogICAgPHRyPgogICAgICAgIDx0aD5GaWxlIElkPC90aD4KICAgICAgICA8dGg+RmlsZSBzaXplPC90aD4KICAgICAgICA8dGg+RmlsZSBuYW1lPC90aD4KICAgICAgICA8dGg+RmlsZSBNRDU8L3RoPgogICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICA8dHIgbmctcmVwZWF0PSJmaWxlIGluIHVwbG9hZGVkX2ZpbGVzIj4KICAgICAgICA8dGQ+e3tmaWxlLmZpbGVfaWR9fTwvdGQ+PHRkPnt7ZmlsZS5sZW5ndGh9fTwvdGQ+PHRkPnt7ZmlsZS5maWxlbmFtZX19PC90ZD48dGQ+e3tmaWxlLm1kNX19PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzIGdseXBoaWNvbiBnbHlwaGljb24tZG93bmxvYWQiIGhyZWY9Ii9ncmlkZnMve3tmaWxlLmNvbGxlY3Rpb25fbmFtZX19L3t7ZmlsZS5maWxlX2lkfX0vIj48L2E+CiAgICAgICAgPC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSIgbmctY2xpY2s9InJlbW92ZUZpbGUoJGluZGV4KSI+PC9idXR0b24+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8L3Rib2R5Pgo8L3RhYmxlPgoKPGZvcm0gbmctaW5pdD0ic2V0QWN0aW9uKCkiIGlkPSJ1cGxvYWRGb3JtIiBuYW1lPSJ1cGxvYWRGb3JtIiBtZXRob2Q9J1BPU1QnIGVuY3R5cGU9J211bHRpcGFydC9mb3JtLWRhdGEnIHRhcmdldD0nc3VibWl0LWlmcmFtZScgYWN0aW9uPSIvZ3JpZGZzLyI+CiAgICA8ZGl2IGNsYXNzPSJmaWxlLWxpc3QiIGlkPSJmaWxlTGlzdCI+CiAgICAgICAgPGlucHV0IGNsYXNzPSJmaWxlLXNlbGVjdG9yIiBuYW1lPSJ1cGxvYWRlZGZpbGUiIHR5cGU9ImZpbGUiIG9uY2hhbmdlPSJhbmd1bGFyLmVsZW1lbnQodGhpcykuc2NvcGUoKS5maWxlTmFtZUNoYW5nZWQodGhpcykiIC8+CiAgICA8L2Rpdj4KICAgIDxidXR0b24gIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgZ2x5cGhpY29uIGdseXBoaWNvbi1jbG91ZC11cGxvYWQiIG5nLWNsaWNrPSJ1cGxvYWRGaWxlKCkiID4gVXBsb2FkIDwvYnV0dG9uPgo8L2Zvcm0+')
},
{
'name': '/app/partials/show_json.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiPkRldGFpbHM8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8ZGl2IGpzb24taHVtYW49Im1vZGVsIj48L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiIG5nLWNsaWNrPSJjYW5jZWwoKSI+Q2xvc2U8L2J1dHRvbj4KPC9kaXY+')
},
{
'name': '/app/partials/singleitemview.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxvYmplY3R2aWV3IGNvbmZpZy1pZD0iY29uZmlnSWQiIGl0ZW0taWQ9Iml0ZW1JZCIgLz4KPC9kaXY+')
},
{
'name': '/app/partials/page.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgICAgICA8ZGl2IG5nLXJlcGVhdD0iZmllbGQgaW4gcGFnZS5maWVsZHMiPgogICAgICAgICAgICA8ZmllbGQgaXRlbT0iZmllbGQiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/partials/item-design.html', 'data': base64.b64decode('PHN0eWxlPgppbnB1dC5uZy1pbnZhbGlkCnsKICAgIGJvcmRlcjoxcHggc29saWQgI0MwMDsKfQo8L3N0eWxlPgoKPGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyMvYXBwc3R1ZGlvLyI+QXBwIFN0dWRpbzwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIy9hcHBzdHVkaW8vIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyMvdGVybWluYWwvIj5UZXJtaW5hbDwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9ImxvZ2dlZEluKCkiPjxhIGhyZWY9IiMvdXNlcnMiPlVzZXJzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy9yb2xlcyI+Um9sZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSJsb2dnZWRJbigpIj48YSBocmVmPSIvbG9nb3V0LyI+TG9nb3V0IFt7e3VzZXJOYW1lfX1dPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0iIWxvZ2dlZEluKCkiPjxhIGhyZWY9Ii8jL2xvZ2luP3JlZGlyZWN0PS9hcHBzdHVkaW8vIj5Mb2dpbjwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBuZy1pbml0PSJpbml0KCkiIGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGxhYmVsPi97e2l0ZW1UeXBlfX0ve3thcHBQYXRofX0vPC9sYWJlbD48bGFiZWwgbmctc2hvdz0iaXRlbUlkIiBpZD0iaXRlbV9pZF9sYWJlbCI+e3tpdGVtSWR9fTwvbGFiZWw+CiAgICA8aHIgLz4KCiAgICA8Zm9ybSBuYW1lPSJpdGVtY29uZmlnZm9ybSIgbm92YWxpZGF0ZSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiBuZy1pZiA9ICJyZWFkeSI+CiAgICAgICAgPGRpdiBuZy1pZj0iaXRlbVR5cGUgPT09ICd3aWRnZXQnIj4KICAgICAgICAgICAgPGZpZWxkIHR5cGU9ImZvcm0iIGl0ZW09IndpZGdldEVkaXRvckZvcm0iIHZhbD0id2lkZ2V0Ij48L2ZpZWxkPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgbmctaWY9Iml0ZW1UeXBlID09PSAnbGlzdCciPgogICAgICAgICAgICA8ZmllbGQgdHlwZT0iZm9ybSIgaXRlbT0ibGlzdEVkaXRvckZvcm0iIHZhbD0ibGlzdCI+PC9maWVsZD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBuZy1pZj0iaXRlbVR5cGUgPT09ICdjaGFydCciPgogICAgICAgICAgICA8ZmllbGQgdHlwZT0iZm9ybSIgaXRlbT0iY2hhcnRjb25maWdFZGl0b3JGb3JtIiB2YWw9ImNoYXJ0Ij48L2ZpZWxkPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IG5nLWlmPSJpdGVtVHlwZSA9PT0gJ21lbnUnIj4KICAgICAgICAgICAgPGZpZWxkIHR5cGU9ImZvcm0iIGl0ZW09Im1lbnVFZGl0b3JGb3JtIiB2YWw9Im1lbnUiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgbmctaWY9Iml0ZW1UeXBlID09PSAnc2luZ2xlaXRlbXZpZXcnIj4KICAgICAgICAgICAgPGZpZWxkIHR5cGU9ImZvcm0iIGl0ZW09InNpbmdsZWl0ZW1jb25maWdFZGl0b3JGb3JtIiB2YWw9InNpbmdsZWl0ZW12aWV3Ij48L2ZpZWxkPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IG5nLWlmPSJpdGVtVHlwZSA9PT0gJ2FwcCciPgogICAgICAgICAgICA8ZmllbGQgdHlwZT0iZm9ybSIgaXRlbT0iYXBwRWRpdG9yRm9ybSIgdmFsPSJhcHAiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgbmctaWY9Iml0ZW1UeXBlID09PSAnc291cmNlZmlsZXMnIj4KICAgICAgICAgICAgPGZpZWxkIGl0ZW09J3sidHlwZSI6ImlucHV0IiwgInJlcXVpcmVkIjp0cnVlLCAibmFtZSI6ImZpbGVuYW1lIiwgImxhYmVsIjoiRmlsZSBuYW1lIn0nIHZhbD0ic291cmNlZmlsZXMuZmlsZW5hbWUiPjwvZmllbGQ+CiAgICAgICAgICAgIDxmaWVsZCBpdGVtPSd7InR5cGUiOiJpbnB1dCIsICJyZXF1aXJlZCI6dHJ1ZSwgIm5hbWUiOiJtb2R1bGVuYW1lIiwgImxhYmVsIjoiTW9kdWxlIG5hbWUifScgdmFsPSJzb3VyY2VmaWxlcy5mdWxsbmFtZSI+PC9maWVsZD4KICAgICAgICAgICAgPGZpZWxkIG5nLWlmPSJzb3VyY2VmaWxlcy50eXBlPT09J2dyaWRmaWxlJyIgaXRlbT0neyJ0eXBlIjoiY29kZWVkaXRvciIsICJyZXF1aXJlZCI6dHJ1ZSwgImxhYmVsIjoiU291cmNlIGNvZGUiLCAibmFtZSI6ImNvZGUifScgdmFsPSJzb3VyY2UuY29kZSI+PC9maWVsZD4KICAgICAgICAgICAgPGZpZWxkIG5nLWlmPSJzb3VyY2VmaWxlcy50eXBlPT09J2VtYmVkZGVkJyIgaXRlbT0neyJ0eXBlIjoiY29kZWVkaXRvciIsICJsYWJlbCI6IlNvdXJjZSBjb2RlIiwgIm5hbWUiOiJjb2RlIn0nIHZhbD0ic291cmNlZmlsZXMuY29kZSI+PC9maWVsZD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBuZy1pZj0iaXRlbVR5cGUgPT09ICdpbnRlcmNlcHRvciciPgogICAgICAgICAgICA8ZmllbGQgdHlwZT0iZm9ybSIgaXRlbT0iaW50ZXJjZXB0b3JFZGl0b3JGb3JtIiB2YWw9ImludGVyY2VwdG9yIj48L2ZpZWxkPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IG5nLWlmPSJpdGVtVHlwZSA9PT0gJ2FwcGVuZHBvaW50JyI+CiAgICAgICAgICAgIDxmaWVsZCB0eXBlPSJmb3JtIiBpdGVtPSJhcHBlbmRwb2ludEVkaXRvckZvcm0iIHZhbD0iYXBwZW5kcG9pbnQiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICA8YnV0dG9uIGlkPSJjcmVhdGVfaXRlbV9idG4iIG5nLWRpc2FibGVkPSIhKGl0ZW1jb25maWdmb3JtLiR2YWxpZCkiIG5nLWNsaWNrPSJzYXZlSXRlbSgpIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij5TYXZlIHt7aXRlbVR5cGV9fTwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9mb3JtPgo8L2Rpdj4=')
},
{
'name': '/app/partials/pageholder.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgICAgICA8ZGl2IG5nLXNob3c9InBhZ2VSZWZzICYmIHBhZ2VSZWZzLmxlbmd0aD4wIiBuZy1yZXBlYXQ9InBhZ2UgaW4gcGFnZVJlZnMiPgogICAgICAgICAgICA8cGFnZSBwYWdlaWQ9InBhZ2UucGFnZUlkIj48L3BhZ2U+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgbmctc2hvdz0icGFnZXMgJiYgcGFnZXMubGVuZ3RoPjAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvIj5iZWVuZHU8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXY+TGlzdCBvZiBwYWdlczwvZGl2PgogICAgICAgICAgICA8ZGl2ICBuZy1yZXBlYXQ9InBhZ2UgaW4gcGFnZXMiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iLyMvYS97e2FwcFNldHRpbmdzLnBhdGh9fS9wYWdlL3t7cGFnZS5faWR9fSI+e3twYWdlLnRpdGxlfX08L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKPC9kaXY+')
},
{
'name': '/app/partials/login.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjxodG1sIG5nLWFwcD0ibXlBcHAiPgo8aGVhZCBsYW5nPSJlbiI+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+TG9naW48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5ICByb2xlPSJkb2N1bWVudCIgbmctY29udHJvbGxlcj0iQWRtaW5NYWluQ3RybCI+CiAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+CiAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvIj5Mb2dpbjwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj48YSBocmVmPSIvIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PjwhLS0vLm5hdi1jb2xsYXBzZSAtLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgICAgICAgPGRpdiBjbGFzcz0ianVtYm90cm9uIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgIDxoMyAgbmctc2hvdz0iIWxvZ2dlZEluKCkiPjxzcGFuIG5nLXNob3c9ImhhdmVBY2NvdW50Ij5Mb2dpbjwvc3Bhbj48c3BhbiBuZy1zaG93PSIhaGF2ZUFjY291bnQiPkNyZWF0ZSBhY2NvdW50PC9zcGFuPiA8L2gzPgogICAgICAgICAgICAgICAgPGRpdiBuZy1iaW5kPSJlcnJvciI+PC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IG5nLXNob3c9IiFsb2dnZWRJbigpIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wteHMtNCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlVzZXIgbmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InVzZXJuYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSIgbmctbW9kZWw9InVzZXJuYW1lIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QYXNzd29yZDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0icGFzc3dvcmQiIGlkPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIG5nLW1vZGVsPSJwYXNzd29yZCIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIG5nLXNob3c9IiFoYXZlQWNjb3VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UGFzc3dvcmQgYWdhaW48L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIHR5cGU9InBhc3N3b3JkIiBpZD0icGFzc3dvcmRfcmUiIG5hbWU9InBhc3N3b3JkX3JlIiBuZy1tb2RlbD0icGFzc3dvcmRfcmUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIiBuZy1zaG93PSJoYXZlQWNjb3VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJsb2dpbmJ0biIgdmFsdWU9IkxvZ2luIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ibG9naW4oKSI+TG9naW48L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIiBuZy1zaG93PSIhaGF2ZUFjY291bnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ic2lnbnVwYnRuIiB2YWx1ZT0iTG9naW4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJzaWdudXAoKSI+Q3JlYXRlIGFjY291bnQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxociBjb2xvcj0iZ3JlZW4iLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gbmctc2hvdz0iaGF2ZUFjY291bnQiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgYnRuLXhzIiAgbmctY2xpY2s9ImhhdmVBY2NvdW50PWZhbHNlOyI+U2lnbiB1cCBmb3IgYSBuZXcgYWNjb3VudDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1zaG93PSIhaGF2ZUFjY291bnQiIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MgYnRuLXhzIiAgbmctY2xpY2s9ImhhdmVBY2NvdW50PXRydWU7Ij5JIGFscmVhZHkgaGF2ZSBhbiBhY2NvdW50PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgPGRpdiBuZy1zaG93PSJsb2dnZWRJbigpIj5XZWxjb21lPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJzdGF0dXMiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTEuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSIvL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjEuMS9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4xLjEvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiAvPgoKICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXIvYW5ndWxhci5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXJvdXRlL2FuZ3VsYXItcm91dGUuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1ib290c3RyYXAvdWktYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC10cGxzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy91dGlscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9zZXJ2aWNlcy9zZXJ2aWNlcy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvY29udHJvbGxlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2ZpbHRlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2RpcmVjdGl2ZXMvZGlyZWN0aXZlcy5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9ImpzL2NvbnRyb2xsZXJzL0xvZ2luQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvSW5kZXhDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy9UZXJtaW5hbEN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2NvbnRyb2xsZXJzL1VzZXJzQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvUm9sZXNDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy9MaXN0Q3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvTGlzdERldGFpbEN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2NvbnRyb2xsZXJzL0ZpbGVVcGxvYWRDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy9Gb3JtRGVzaWduQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMvRm9ybVZpZXdDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy9QYWdlVmlld0N0cmwuanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgc3JjPSJqcy9kaXJlY3RpdmVzL2ZpZWxkLmpzIj48L3NjcmlwdD4KCgogICAgPHNjcmlwdCBzcmM9Ii8vcmF3Z2l0aHViLmNvbS9hbmd1bGFyLXVpL3VpLXNvcnRhYmxlL21hc3Rlci9zcmMvc29ydGFibGUuanMiPjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K')
},
{
'name': '/app/partials/terminal.html', 'data': base64.b64decode('ICAgIDxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii8jL3Rlcm1pbmFsLyI+VGVybWluYWw8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8jL2FwcHN0dWRpby8iPkFwcCBTdHVkaW88L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy9yb2xlcyI+Um9sZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+IDxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+IDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9IiFsb2dnZWRJbigpIj48YSBocmVmPSIvIy9sb2dpbi8/cmVkaXJlY3Q9L3Rlcm1pbmFsLyI+TG9naW48L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgICAgIDxlcnJvci1iYW5uZXI+PC9lcnJvci1iYW5uZXI+CgogICAgICAgIDxoMz5PcGVyYXRpb25zPC9oMz4KICAgICAgICA8Zm9ybSBjbGFzcz0iYmFzaWMtb3BlcmF0aW9ucyIgcm9sZT0iZm9ybSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsPlNlcnZpY2UgVVJMIChyZWxhdGl2ZSkgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9Im5hbWUiIHR5cGU9InRleHQiIG5hbWU9Im5hbWUiIG5nLW1vZGVsPSJzZXJ2aWNlIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+Q29sdW1ucyBbR0VUXTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImNvbHVtbnMiIHR5cGU9InRleHQiIG5hbWU9ImNvbHVtbnMiIG5nLW1vZGVsPSJjb2x1bW5zIiBwbGFjZWhvbGRlcj0ibmFtZSxhZGRyZXNzIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+RmlsdGVyIFtHRVRdPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZmlsdGVyIiB0eXBlPSJ0ZXh0IiBuYW1lPSJmaWx0ZXIiIG5nLW1vZGVsPSJmaWx0ZXIiIHBsYWNlaG9sZGVyPSd7Im5hbWUiOiJBYnJhaGFtIn0nLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsPkRhdGEgWyogUE9TVHxQVVRdPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxkaXYgdWktYWNlPSJ7J21vZGUnOidqc29uJ30iIG5nLW1vZGVsPSJkYXRhIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5SZXN1bHQ8L2xhYmVsPgogICAgICAgICAgICAgICAgPGRpdiB1aS1hY2U9InsnbW9kZSc6J2pzb24nfSIgbmctbW9kZWw9InJlc3VsdCI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmctY2xpY2s9ImdldCgpIj4gIEdFVCA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmctY2xpY2s9InBvc3QoKSI+IFBPU1QgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWluZm8iIG5nLWNsaWNrPSJwdXQoKSI+ICBQVVQgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRhbmdlciIgbmctY2xpY2s9ImRlbGV0ZSgpIj5ERUxFVEU8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2Pg==')
},
{
'name': '/app/partials/browsefile.html', 'data': base64.b64decode('PHN0eWxlPgouZmlsZS1saXN0IHsKICAgIHBhZGRpbmctYm90dG9tOiAxMHB4Owp9Ci5maWxlLXNlbGVjdG9yewogICAgbWFyZ2luOiA1cHg7Cn0KICAgLnNlbGVjdGVkewogICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0RERDsKICAgfQo8L3N0eWxlPgoKPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiID5TZWxlY3QgYSBmaWxlPC9oMz4KPC9kaXY+CjxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgPGRpdj4KICAgICAgICA8ZGl2IG5nLWJpbmQ9ImZpbGVPYmplY3ROYW1lIj48L2Rpdj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc0Vycm9yIiBjbGFzcz0iYmctd2FybmluZyI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICAgICAgICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiPjwvc3Bhbj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBuZy1iaW5kPSJzdGF0dXNfZGF0YSI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBpZD0iaUZyYW1lUGxhY2Vob2xkZXIiPjwvZGl2PgogICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0aD5GaWxlIElkPC90aD4KICAgICAgICAgICAgICAgIDx0aD5GaWxlIHNpemU8L3RoPgogICAgICAgICAgICAgICAgPHRoPkZpbGUgbmFtZTwvdGg+CiAgICAgICAgICAgICAgICA8dGg+RmlsZSBNRDU8L3RoPgogICAgICAgICAgICAgICAgPHRoPiZuYnNwOzwvdGg+CiAgICAgICAgICAgICAgICA8dGg+Jm5ic3A7PC90aD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICA8dHIgbmctcmVwZWF0PSJmaWxlIGluIHVwbG9hZGVkX2ZpbGVzIiBuZy1jbGljaz0ic2VsZWN0RmlsZShmaWxlKSIgbmctY2xhc3M9IihmaWxlLmZpbGVfaWQgPT0gc2VsZWN0ZWRGaWxlLmZpbGVfaWQpPydzZWxlY3RlZCc6JyciPgogICAgICAgICAgICAgICAgPHRkPnt7ZmlsZS5maWxlX2lkfX08L3RkPgogICAgICAgICAgICAgICAgPHRkPnt7ZmlsZS5sZW5ndGh9fTwvdGQ+PHRkPnt7ZmlsZS5maWxlbmFtZX19PC90ZD4KICAgICAgICAgICAgICAgIDx0ZD57e2ZpbGUubWQ1fX08L3RkPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzIGdseXBoaWNvbiBnbHlwaGljb24tZG93bmxvYWQiIGhyZWY9Ii9ncmlkZnMve3tmaWxlLmNvbGxlY3Rpb25fbmFtZX19L3t7ZmlsZS5maWxlX2lkfX0vIj48L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSIgbmctY2xpY2s9InJlbW92ZUZpbGUoJGluZGV4KSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgICAgPGZvcm0gbmctaW5pdD0ic2V0QWN0aW9uKCkiIGlkPSJ1cGxvYWRGb3JtIiBuYW1lPSJ1cGxvYWRGb3JtIiBtZXRob2Q9J1BPU1QnIGVuY3R5cGU9J211bHRpcGFydC9mb3JtLWRhdGEnIHRhcmdldD0nc3VibWl0LWlmcmFtZScgYWN0aW9uPSIvZ3JpZGZzLyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpbGUtbGlzdCIgaWQ9ImZpbGVMaXN0Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZmlsZS1zZWxlY3RvciIgbmFtZT0idXBsb2FkZWRmaWxlIiB0eXBlPSJmaWxlIiBvbmNoYW5nZT0iYW5ndWxhci5lbGVtZW50KHRoaXMpLnNjb3BlKCkuZmlsZU5hbWVDaGFuZ2VkKHRoaXMpIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJ1dHRvbiAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBnbHlwaGljb24gZ2x5cGhpY29uLWNsb3VkLXVwbG9hZCIgbmctY2xpY2s9InVwbG9hZEZpbGUoKSIgPiBVcGxvYWQgPC9idXR0b24+CiAgICAgICAgPC9mb3JtPgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgIDxidXR0b24gbmctZGlzYWJsZWQ9IiFzZWxlY3RlZEZpbGUiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJvaygpIj5PSzwvYnV0dG9uPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIiBuZy1jbGljaz0iY2FuY2VsKCkiPkNhbmNlbDwvYnV0dG9uPgo8L2Rpdj4=')
},
{
'name': '/app/partials/formview.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxmaWVsZCBpdGVtPSJmb3JtcmVmIiB2YWw9ImRhdGFJZCI+PC9maWVsZD4KPC9kaXY+Cg==')
},
{
'name': '/app/partials/applist.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyI+YmVlbmR1PC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSI+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8jL2FwcHN0dWRpby8iPkFwcCBTdHVkaW88L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIy90ZXJtaW5hbC8iPlRlcm1pbmFsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSJsb2dnZWRJbigpIj48YSBocmVmPSIjL3JvbGVzIj5Sb2xlczwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9ImxvZ2dlZEluKCkiPjxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+PGEgaHJlZj0iLyMvbG9naW4/cmVkaXJlY3Q9L2FwcHN0dWRpby8iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IG5nLWluaXQ9ImluaXQoKSIgY2xhc3M9ImNvbnRhaW5lciB0aGVtZS1zaG93Y2FzZSIgcm9sZT0ibWFpbiI+CiAgICA8ZGl2IG5nLXNob3c9Imhhc0Vycm9yIiBjbGFzcz0iYmctd2FybmluZyI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQiIG5nLWNsaWNrPSJjbGVhckVycm9yKCk7Ij48L2J1dHRvbj4KICAgICAgICA8ZGl2PjxsYWJlbD5FcnJvciBjb2RlOjwvbGFiZWw+PHNwYW4gbmctYmluZD0ic3RhdHVzIiAvPjwvZGl2PgogICAgICAgIDxkaXYgbmctYmluZD0ic3RhdHVzX2RhdGEiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPGgzPkF2YWlsYWJsZSBBcHBsaWNhdGlvbnM8L2gzPgogICAgPGRpdiBuZy1yZXBlYXQ9ImFwcCBpbiBhcHBzIj4KICAgICAgICA8dGQ+PGEgaHJlZj0iIy9hL3t7YXBwLnBhdGh9fS8iPnt7YXBwLnRpdGxlfX08L2E+PC90ZD4KICAgIDwvZGl2Pgo8L2Rpdj4=')
},
{
'name': '/app/partials/list.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxkaXYgbmctc2hvdz0iaGFzRXJyb3IiIGNsYXNzPSJiZy13YXJuaW5nIj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIgZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgcHVsbC1yaWdodCIgbmctY2xpY2s9ImNsZWFyRXJyb3IoKTsiPjwvYnV0dG9uPgogICAgICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+PC9kaXY+CiAgICAgICAgPGRpdiBuZy1iaW5kPSJzdGF0dXNfZGF0YSI+PC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8aDM+e3t0aXRsZX19PC9oMz4KICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgIDx0aGVhZD4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aD5JZDwvdGg+CiAgICAgICAgICAgIDx0aD5OYW1lPC90aD4KICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgIDx0ciBuZy1yZXBlYXQ9Imxpc3QgaW4gbGlzdHMiPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0iIy97e3NlcnZpY2VOYW1lfX0ve3tsaXN0Ll9pZH19LyI+e3tsaXN0Ll9pZH19PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZD48YSBocmVmPSIjL3t7c2VydmljZU5hbWV9fS97e2xpc3QuX2lkfX0vIj57e2xpc3QudGl0bGV9fTwvYT48L3RkPgogICAgICAgIDwvdHI+CiAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CgogICAgPGRpdiBuZy1yZXBlYXQ9ImxpbmsgaW4gbGlua3MiPgogICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGhyZWY9Int7bGluay5ocmVmfX0iPnt7bGluay50aXRsZX19PC9hPiZuYnNwOwogICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/partials/appstudio.html', 'data': base64.b64decode('')
},
{
'name': '/app/partials/adduser.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLXNob3c9IiFpc1VwZGF0aW5nIj5DcmVhdGUgbmV3IHVzZXI8L2gzPgogICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgbmctc2hvdz0iaXNVcGRhdGluZyI+VXBkYXRlIHVzZXI8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc2Vycm9yIj5UaGVyZSBpcyBhbiBlcnJvciEhITwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPlVzZXJuYW1lPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnVzZXJuYW1lIiBuZy1yZWFkb25seT0iaXNVcGRhdGluZyI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPlBhc3N3b3JkPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0idXNlci5wYXNzd29yZCIgbmctc2hvdz0iIWlzVXBkYXRpbmciIC8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkIiAgbmctc2hvdz0iaXNVcGRhdGluZyIKICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iTGVhdmUgYmxhbmsgdG8ga2VlcCBjdXJyZW50IHBhc3N3b3JkIiAvPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTMgY29udHJvbC1sYWJlbCI+UGFzc3dvcmQgYWdhaW48L2xhYmVsPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkX3JlIiBuZy1zaG93PSIhaXNVcGRhdGluZyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkX3JlIiBuZy1zaG93PSJpc1VwZGF0aW5nIgogICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJMZWF2ZSBibGFuayB0byBrZWVwIGN1cnJlbnQgcGFzc3dvcmQiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPkVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0idXNlci5lbWFpbCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIj5Sb2xlczwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCI+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWhvdmVyIj4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TSUQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+Jm5ic3A7PC90aD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGVfc2lkIGluIHVzZXIucm9sZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNwYW4+e3tnZXRSb2xlTmFtZShyb2xlX3NpZCk7fX08L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxzcGFuPnt7cm9sZV9zaWR9fTwvc3Bhbj4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciIgbmctY2xpY2s9InJlbW92ZVJvbGUoJGluZGV4KSI+eDwvYnV0dG9uPiA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0ic2VsZWN0ZWRfcm9sZSIgbmctb3B0aW9ucz0icm9sZS5zaWQgYXMgcm9sZS5uYW1lIGZvciByb2xlIGluIHJvbGVzIj48L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iYWRkLXVzZXItYWRkLXJvbGUtYnRuIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0iYWRkUm9sZShzZWxlY3RlZF9yb2xlKSI+QWRkPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgPGJ1dHRvbiBpZD0iYWRkLXVzZXItb2stYnRuIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib2soKSI+T0s8L2J1dHRvbj4KICAgIDxidXR0b24gaWQ9ImFkZC11c2VyLWNhbmNlbC1idG4iICBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIiBuZy1jbGljaz0iY2FuY2VsKCkiPkNhbmNlbDwvYnV0dG9uPgo8L2Rpdj4=')
},
{
'name': '/app/partials/users.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyMvdGVybWluYWwvIj5UZXJtaW5hbDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIy9hcHBzdHVkaW8vIj5BcHAgU3R1ZGlvPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSJsb2dnZWRJbigpIj48YSBocmVmPSIjL3JvbGVzIj5Sb2xlczwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9ImxvZ2dlZEluKCkiPjxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+PGEgaHJlZj0iLyMvbG9naW4vP3JlZGlyZWN0PS90ZXJtaW5hbC8iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICAgICAgPGRpdj48bGFiZWw+RXJyb3IgY29kZTo8L2xhYmVsPjxzcGFuIG5nLWJpbmQ9InN0YXR1cyIvPjwvZGl2PgogICAgICAgIDxkaXYgbmctYmluZD0ic3RhdHVzX2RhdGEiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPGgzPlVzZXJzPC9oMz4KCiAgICA8dGFibGUgY2xhc3M9InRhYmxlIj4KICAgICAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+TmFtZTwvdGg+CiAgICAgICAgICAgIDx0aD5FbWFpbDwvdGg+CiAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgPHRyIG5nLXJlcGVhdD0idXNlciBpbiB1c2VycyI+CiAgICAgICAgICAgIDx0ZD57e3VzZXIudXNlcm5hbWV9fTwvdGQ+CiAgICAgICAgICAgIDx0ZD57e3VzZXIuZW1haWx9fTwvdGQ+CiAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImVkaXQtdXNlci17e3VzZXIudXNlcm5hbWV9fSIgIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi13YXJuaW5nIGdseXBoaWNvbiBnbHlwaGljb24tZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgbmctY2xpY2s9ImVkaXRVc2VyKCRpbmRleCk7Ij48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InJlbW92ZS11c2VyLXt7dXNlci51c2VybmFtZX19IiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIgogICAgICAgICAgICAgICAgICAgICAgICBuZy1jbGljaz0icmVtb3ZlVXNlcigkaW5kZXgpOyI+PC9idXR0b24+CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KCiAgICA8YnV0dG9uIGlkPSJjcmVhdGUtdXNlci1idG4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJhZGRVc2VyKCdsZycpIj5DcmVhdGUgdXNlcjwvYnV0dG9uPgo8L2Rpdj4=')
},
{
'name': '/app/partials/install.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyI+Q29zbW9zIEZyYW1ld29yazwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIy90ZXJtaW5hbC8iPlRlcm1pbmFsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iL2xvZ291dC8iPkxvZ291dCBbe3t1c2VyTmFtZX19XTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9IiFsb2dnZWRJbigpIj48YSBocmVmPSIvIy9sb2dpbi8iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGVycm9yLWJhbm5lcj48L2Vycm9yLWJhbm5lcj4KICAgIDxkaXYgbmctc2hvdz0ibG9nZ2VkSW4oKSI+CiAgICAgICAgPGgxPkluc3RhbGwgYXBwbGljYXRpb248L2gxPgoKICAgICAgICA8Zm9ybSBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iL2FwcGxpY2F0aW9uL2luc3RhbGwvIj4KICAgICAgICAgICAgQXBwbGljYXRpb24gcGFja2FnZTogPGlucHV0IG5hbWU9ImFwcGxpY2F0aW9uIiB0eXBlPSJmaWxlIi8+PGJyLz4KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiAgICAgICBJbnN0YWxsICAgICAgICIvPgogICAgICAgIDwvZm9ybT4KICAgIDwvZGl2PgogICAgPGRpdiBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+CiAgICAgICAgPHA+WW91IHNob3VsZCBsb2dpbiAoYXMgYWRtaW4pIHRvIGluc3RhbGwgYW4gYXBwbGljYXRpb24uPC9wPgogICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/partials/addrole.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLXNob3c9IiFpc1VwZGF0aW5nIj5DcmVhdGUgbmV3IHJvbGU8L2gzPgogICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgbmctc2hvdz0iaXNVcGRhdGluZyI+VXBkYXRlIHJvbGU8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc2Vycm9yIj5UaGVyZSBpcyBhbiBlcnJvciEhITwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0yIGNvbnRyb2wtbGFiZWwiPk5hbWUgKjwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZS5uYW1lIiBwbGFjZWhvbGRlcj0iUm9sZSBuYW1lIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTIgY29udHJvbC1sYWJlbCI+U0lEPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZS5zaWQiIG5nLXJlYWRvbmx5PSJpc1VwZGF0aW5nIiBwbGFjZWhvbGRlcj0iT3B0aW9uYWwsIHdpbGwgYmUgZ2VuZXJhdGVkIGlmIGxlZnQgZW1wdHkiPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIj5Sb2xlIGl0ZW1zPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEwIj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWNjZXNzIHR5cGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC14cy0yIj5PYmplY3QgbmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLXhzLTIiPlByb3BlcnR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjY2VzczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGVfaXRlbSBpbiByb2xlLnJvbGVfaXRlbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNlbGVjdCBpZD0icm9sZS1pdGVtLXt7JGluZGV4fX0tdHlwZSIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmctbW9kZWw9InJvbGVfaXRlbS50eXBlIiBuZy1vcHRpb25zPSJhY2Nlc3NfdHlwZS5uYW1lIGFzIGFjY2Vzc190eXBlLmRpc3BsYXkgZm9yIGFjY2Vzc190eXBlIGluIGFjY2Vzc190eXBlcyI+PC9zZWxlY3Q+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wteHMtMiI+PGlucHV0IGlkPSJyb2xlLWl0ZW0te3skaW5kZXh9fS1vYmplY3QtbmFtZSIgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0idGV4dCIgbmctbW9kZWw9InJvbGVfaXRlbS5vYmplY3RfbmFtZSIgLz4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wteHMtMiI+PGlucHV0IGlkPSJyb2xlLWl0ZW0te3skaW5kZXh9fS1wcm9wZXJ0eS1uYW1lIiBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0icm9sZV9pdGVtLnByb3BlcnR5X25hbWUiIC8+IDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0icm9sZS1pdGVtLXt7JGluZGV4fX0tYWNjZXNzLWJpdHMtcmVhZCIgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJyb2xlX2l0ZW0uYWNjZXNzX2JpdHMucmVhZCIgLz4gUmVhZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJyb2xlLWl0ZW0te3skaW5kZXh9fS1hY2Nlc3MtYml0cy1pbnNlcnQiIHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0icm9sZV9pdGVtLmFjY2Vzc19iaXRzLmluc2VydCIgLz4gSW5zZXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9InJvbGUtaXRlbS17eyRpbmRleH19LWFjY2Vzcy1iaXRzLXdyaXRlIiB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InJvbGVfaXRlbS5hY2Nlc3NfYml0cy53cml0ZSIgLz4gV3JpdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0icm9sZS1pdGVtLXt7JGluZGV4fX0tYWNjZXNzLWJpdHMtZGVsZXRlIiB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InJvbGVfaXRlbS5hY2Nlc3NfYml0cy5kZWxldGUiIC8+IERlbGV0ZQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGJ1dHRvbiBpZD0icmVtb3ZlLXJvbGUtaXRlbS17eyRpbmRleH19LWJ0biIgIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIiIG5nLWNsaWNrPSJyZW1vdmVSb2xlSXRlbSgkaW5kZXgpIj54PC9idXR0b24+IDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI1Ij48YnV0dG9uIGlkPSJhZGQtcm9sZS1pdGVtLWJ0biIgY2xhc3M9ImJ0biBidG4taW5mbyBidG4tc20iIG5nLWNsaWNrPSJhZGRSb2xlSXRlbSgpIj5BZGQ8L2J1dHRvbj4gPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgPGJ1dHRvbiBpZD0iYWRkLXJvbGUtb2stYnRuIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib2soKSI+T0s8L2J1dHRvbj4KICAgIDxidXR0b24gaWQ9ImFkZC1yb2xlLWNhbmNlbC1idG4iIGNsYXNzPSJidG4gYnRuLXdhcm5pbmciIG5nLWNsaWNrPSJjYW5jZWwoKSI+Q2FuY2VsPC9idXR0b24+CjwvZGl2Pg==')
}]
