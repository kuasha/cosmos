# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/.bowerrc', 'data': base64.b64decode('ewogICJkaXJlY3RvcnkiOiAiYXBwL2Jvd2VyX2NvbXBvbmVudHMiCn0=')
},
{
'name': '/LICENSE', 'data': base64.b64decode('VGhlIE1JVCBMaWNlbnNlCgpDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCgo=')
},
{
'name': '/bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImNvc21vcy1hZG1pbi1wYW5lbCIsCiAgImRlc2NyaXB0aW9uIjogIkFkbWluIHBhbmVsIGZvciBjb3Ntb3MgZnJhbWV3b3JrIiwKICAidmVyc2lvbiI6ICIwLjAuMCIsCiAgImhvbWVwYWdlIjogImh0dHA6Ly9jb3Ntb3NmcmFtZXdvcmsuY29tIiwKICAibGljZW5zZSI6ICJNSVQiLAogICJwcml2YXRlIjogdHJ1ZSwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiMS4yLngiLAogICAgImFuZ3VsYXItcm91dGUiOiAiMS4yLngiLAogICAgImFuZ3VsYXItbG9hZGVyIjogIjEuMi54IiwKICAgICJhbmd1bGFyLW1vY2tzIjogIn4xLjIueCIsCiAgICAiaHRtbDUtYm9pbGVycGxhdGUiOiAifjQuMy4wIiwKICAgICJhbmd1bGFyLWJvb3RzdHJhcCI6ICJ+MC4xMS54IiwKICAgICJhbmd1bGFyLXVpLXNvcnRhYmxlIjoifjAuMTIueCIsCiAgICAiYW5ndWxhci11aS1hY2UiOiJ+MC4xLngiLAogICAgImFuZ3VsYXItanNvbi1odW1hbiI6In4xLjIueCIsCiAgICAiYW5ndWxhci1sb2NhbC1zdG9yYWdlIjogIiIKICB9Cn0K')
},
{
'name': '/app/index.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjwhLS1baWYgbHQgSUUgN10+ICAgICAgPGh0bWwgbGFuZz0iZW4iIG5nLWFwcD0ibXlBcHAiIG5nLWNvbnRyb2xsZXI9IkFkbWluTWFpbkN0cmwiIGNsYXNzPSJuby1qcyBsdC1pZTkgbHQtaWU4IGx0LWllNyI+IDwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPiAgICAgICAgIDxodG1sIGxhbmc9ImVuIiBuZy1hcHA9Im15QXBwIiBuZy1jb250cm9sbGVyPSJBZG1pbk1haW5DdHJsIiBjbGFzcz0ibm8tanMgbHQtaWU5IGx0LWllOCI+IDwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDhdPiAgICAgICAgIDxodG1sIGxhbmc9ImVuIiBuZy1hcHA9Im15QXBwIiBuZy1jb250cm9sbGVyPSJBZG1pbk1haW5DdHJsIiBjbGFzcz0ibm8tanMgbHQtaWU5Ij4gPCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOF0+PCEtLT4gPGh0bWwgbGFuZz0iZW4iIG5nLWFwcD0ibXlBcHAiIG5nLWNvbnRyb2xsZXI9IkFkbWluTWFpbkN0cmwiIGNsYXNzPSJuby1qcyI+IDwhLS08IVtlbmRpZl0tLT4KCjxoZWFkPgogIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogIDx0aXRsZT5Db3Ntb3MgQWRtaW4gQXBwPC90aXRsZT4KICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iIj4KICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iYm93ZXJfY29tcG9uZW50cy9odG1sNS1ib2lsZXJwbGF0ZS9jc3Mvbm9ybWFsaXplLmNzcyI+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJib3dlcl9jb21wb25lbnRzL2h0bWw1LWJvaWxlcnBsYXRlL2Nzcy9tYWluLmNzcyI+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJjc3MvYXBwLmNzcyIvPgogIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4xLjEvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiAvPgogIDxzdHlsZT4KICAgICAgYm9keSB7CiAgICAgICAgICBwYWRkaW5nLXRvcDogNTBweDsKICAgICAgfQogIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHk+CiAgICA8IS0tW2lmIGx0IElFIDddPgogICAgPHAgY2xhc3M9ImJyb3dzZWhhcHB5Ij5Zb3UgYXJlIHVzaW5nIGFuIDxzdHJvbmc+b3V0ZGF0ZWQ8L3N0cm9uZz4gYnJvd3Nlci4gUGxlYXNlIDxhIGhyZWY9Imh0dHA6Ly9icm93c2VoYXBweS5jb20vIj51cGdyYWRlIHlvdXIgYnJvd3NlcjwvYT4gdG8gaW1wcm92ZSB5b3VyIGV4cGVyaWVuY2UuPC9wPgogICAgPCFbZW5kaWZdLS0+CgogICAgPGRpdiBuZy12aWV3PjwvZGl2PgoKICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2h0bWw1LWJvaWxlcnBsYXRlL2pzL3ZlbmRvci9tb2Rlcm5penItMi42LjIubWluLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0iLy9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9qcXVlcnkvMS4xMS4xL2pxdWVyeS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Ii8vbmV0ZG5hLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuMS4xL2pzL2Jvb3RzdHJhcC5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Ii8vY29kZS5qcXVlcnkuY29tL3VpLzEuMTAuMy9qcXVlcnktdWkuanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXIvYW5ndWxhci5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXJvdXRlL2FuZ3VsYXItcm91dGUuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1ib290c3RyYXAvdWktYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC10cGxzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItdWktc29ydGFibGUvc29ydGFibGUuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1sb2NhbC1zdG9yYWdlL2Rpc3QvYW5ndWxhci1sb2NhbC1zdG9yYWdlLm1pbi5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iYm93ZXJfY29tcG9uZW50cy9hY2UtYnVpbGRzL3NyYy1taW4tbm9jb25mbGljdC9hY2UuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXVpLWFjZS91aS1hY2UuanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgZGF0YS1yZXF1aXJlPSJsb2Rhc2guanNAMi40LjEiIGRhdGEtc2VtdmVyPSIyLjQuMSIgc3JjPSIvL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9sb2Rhc2guanMvMi40LjEvbG9kYXNoLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1qc29uLWh1bWFuL2Rpc3QvYW5ndWxhci1qc29uLWh1bWFuLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1qc29uLWh1bWFuL2Rpc3QvYW5ndWxhci1qc29uLWh1bWFuLm1pbi5jc3MiIC8+CgogICAgPHNjcmlwdCBzcmM9ImpzL3V0aWxzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9hcHAuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL3NlcnZpY2VzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9jb250cm9sbGVycy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvZmlsdGVycy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvZGlyZWN0aXZlcy5qcyI+PC9zY3JpcHQ+Cgo8L2JvZHk+CjwvaHRtbD4K')
},
{
'name': '/app/login.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjxodG1sIG5nLWFwcD0ibXlBcHAiPgo8aGVhZCBsYW5nPSJlbiI+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+TG9naW48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5ICByb2xlPSJkb2N1bWVudCIgbmctY29udHJvbGxlcj0iQWRtaW5NYWluQ3RybCI+CiAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+CiAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvIj5Db3Ntb3MgRnJhbWV3b3JrPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSI+CiAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPjxhIGhyZWY9Ii8iPkhvbWU8L2E+PC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+PCEtLS8ubmF2LWNvbGxhcHNlIC0tPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciB0aGVtZS1zaG93Y2FzZSIgcm9sZT0ibWFpbiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJqdW1ib3Ryb24iPgogICAgICAgICAgICA8aDMgIG5nLXNob3c9IiFsb2dnZWRJbigpIj5Mb2dpbjwvaDM+CiAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1zbWFsbCBidG4tcHJpbWFyeSIgaHJlZj0iL2xvZ2luL2dvb2dsZS8iPkdvb2dsZTwvYT4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXNtYWxsIGJ0bi1wcmltYXJ5IiBocmVmPSIvbG9naW4vZmFjZWJvb2tncmFwaC8iPkZhY2Vib29rPC9hPgogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tc21hbGwgYnRuLXByaW1hcnkiIGhyZWY9Ii9sb2dpbi9naXRodWIvIj5HaXRodWI8L2E+CiAgICAgICAgICAgICAgICA8YnIgLz4KICAgICAgICAgICAgICAgIDxociAvPgogICAgICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIvbG9naW4vb3BlbmlkLyIgbWV0aG9kPSJnZXQiPgogICAgICAgICAgICAgICAgICAgIDxsYWJlbD5PcGVuaWQ8L2xhYmVsPjxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJvcGVuaWQub3BfZW5kcG9pbnQiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSJMb2dpbiI+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxmb3JtIG5nLXNob3c9IiFsb2dnZWRJbigpIiByb2xlPSJmb3JtIiBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL2xvZ2luLyI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlciBuYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9InVzZXJuYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJ1c2VybmFtZSIvPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UGFzc3dvcmQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJ1bnB3ZGxvZ2luIiB0eXBlPSJzdWJtaXQiIHZhbHVlPSJMb2dpbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgLz4KICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgPGRpdiBuZy1zaG93PSJsb2dnZWRJbigpIj5XZWxjb21lPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJzdGF0dXMiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTEuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSIvL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjEuMS9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4xLjEvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiAvPgoKICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXIvYW5ndWxhci5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXJvdXRlL2FuZ3VsYXItcm91dGUuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1ib290c3RyYXAvdWktYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC10cGxzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy91dGlscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9zZXJ2aWNlcy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2ZpbHRlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2RpcmVjdGl2ZXMuanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgc3JjPSIvL3Jhd2dpdGh1Yi5jb20vYW5ndWxhci11aS91aS1zb3J0YWJsZS9tYXN0ZXIvc3JjL3NvcnRhYmxlLmpzIj48L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+Cg==')
},
{
'name': '/app/js/serviceapi.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgTWFydWYgTWFuaXJ1enphbWFuIChtYXJ1Zm1AY29zbW9zZnJhbWV3b3JrLmNvbSkgb24gNi8xNC8xNC4KICovCgpmdW5jdGlvbiBwcm9jZXNzRXJyb3IoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKXsKICAgIGpRdWVyeSgiI3N0YXR1cyIpLmh0bWwoIjxoMz5FcnJvcjwvaDM+PGRpdj4iK2Vycm9yVGhyb3duKyI8L2Rpdj4iKTsKfQoKZnVuY3Rpb24gcHJvY2Vzc1N1Y2Nlc3MoZGF0YSl7CiAgICB2YXIgZGF0YTIgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgalF1ZXJ5KCIjcmVzdWx0IikudmFsKEpTT04uc3RyaW5naWZ5KGRhdGEyLHVuZGVmaW5lZCwgMikpOwp9CgpmdW5jdGlvbiBnZXRTZXJ2aWNlVXJsKHNlcnZpY2UpIHsKICAgIHZhciByb290ID0gZG9jdW1lbnQuVVJMOwogICAgaWYoc2VydmljZVswXSA9PSAnLycpewogICAgICAgIHNlcnZpY2UgPSBzZXJ2aWNlLnN1YnN0cmluZygxKTsKICAgIH0KICAgIHJldHVybiByb290K3NlcnZpY2U7Cn0KCmZ1bmN0aW9uIGRvX29wZXJhdGlvbih1cmwsIG1ldGhvZCwgZGF0YSwgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrKXsKICAgIGpRdWVyeSgiI3Jlc3VsdCIpLnZhbCgiIik7CiAgICBqUXVlcnkoIiNzdGF0dXMiKS5odG1sKCIiKTsKICAgIGNvbnNvbGUubG9nKG1ldGhvZCsgIjogIit1cmwpCiAgICAkLmFqYXgoewogICAgICAgIHVybDogdXJsLAogICAgICAgIHR5cGU6IG1ldGhvZCwKICAgICAgICBkYXRhOmRhdGEsCiAgICAgICAgc3VjY2VzczogY2FsbGJhY2ssCiAgICAgICAgZXJyb3I6IGVycm9yX2NhbGxiYWNrCiAgICB9KTsKfQoKZnVuY3Rpb24gaW5zZXJ0U2VydmljZSgpewogICAgdmFyIG5hbWUgPSBqUXVlcnkoIiNuYW1lIikudmFsKCk7CiAgICB2YXIgZGF0YSA9IGpRdWVyeSgiI2RhdGEiKS52YWwoKTsKCiAgICB2YXIgdXJsID0gIGdldFNlcnZpY2VVcmwobmFtZSk7CiAgICBkb19vcGVyYXRpb24odXJsLCAnUE9TVCcsIGRhdGEsIHByb2Nlc3NTdWNjZXNzLCBwcm9jZXNzRXJyb3IpOwp9CgpmdW5jdGlvbiBkZWxldGVJdGVtKCl7CiAgICB2YXIgbmFtZSA9IGpRdWVyeSgiI25hbWUiKS52YWwoKTsKICAgIHZhciBkYXRhID0galF1ZXJ5KCIjZGF0YSIpLnZhbCgpOwoKICAgIHZhciB1cmwgPSAgZ2V0U2VydmljZVVybChuYW1lKTsKCiAgICBkb19vcGVyYXRpb24odXJsLCAnREVMRVRFJywgZGF0YSwgcHJvY2Vzc1N1Y2Nlc3MsIHByb2Nlc3NFcnJvcik7Cn0KCmZ1bmN0aW9uIGxvYWRJdGVtKCl7CiAgICB2YXIgbmFtZSA9IGpRdWVyeSgiI25hbWUiKS52YWwoKTsKICAgIHZhciBkYXRhID0galF1ZXJ5KCIjZGF0YSIpLnZhbCgpOwogICAgdmFyIGNvbHVtbnMgPSBqUXVlcnkoIiNjb2x1bW5zIikudmFsKCk7CiAgICB2YXIgZmlsdGVyID0galF1ZXJ5KCIjZmlsdGVyIikudmFsKCk7CgogICAgdmFyIHVybCA9ICBnZXRTZXJ2aWNlVXJsKG5hbWUpOwogICAgaWYoY29sdW1ucyl7CiAgICAgICAgdXJsID0gdXJsKyI/IjsKICAgICAgICB1cmwgPXVybCsgImNvbHVtbnM9Iitjb2x1bW5zOwogICAgfQogICAgaWYoZmlsdGVyKXsKICAgICAgICBpZighY29sdW1ucykgewogICAgICAgICAgICB1cmwgPSB1cmwgKyAiPyI7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIHVybD11cmwrIiYiOwogICAgICAgIH0KICAgICAgICB1cmwgPSB1cmwrImZpbHRlcj0iK2ZpbHRlcgogICAgfQoKICAgIGRvX29wZXJhdGlvbih1cmwsICdHRVQnLCBkYXRhLCBwcm9jZXNzU3VjY2VzcyAscHJvY2Vzc0Vycm9yKTsKfQoKZnVuY3Rpb24gdXBkYXRlSXRlbSgpewogICAgdmFyIG5hbWUgPSBqUXVlcnkoIiNuYW1lIikudmFsKCk7CiAgICB2YXIgZGF0YSA9IGpRdWVyeSgiI2RhdGEiKS52YWwoKTsKCiAgICB2YXIgdXJsID0gIGdldFNlcnZpY2VVcmwobmFtZSk7CgogICAgZG9fb3BlcmF0aW9uKHVybCwgJ1BVVCcsIGRhdGEsIHByb2Nlc3NTdWNjZXNzLCBwcm9jZXNzRXJyb3IpOwp9CgpmdW5jdGlvbiBzdWJzY3JpYmUgKG1vbml0b3JfZW5kcG9pbnQsIG9iamVjdF9uYW1lLCBjYWxsYmFjaykgewogICAgLy9UT0RPOiBVbmlmeSB0aGUgb2JzZXJ2ZXIgdG8gbGlzdGVuIHRvIG1hbnkgb2JqZWN0cyBhdCBhIHRpbWUgdXNpbmcgZGlmZmVyZW50IGNhbGxiYWNrCiAgICAvL3ZhciBtb25pdG9yX2VuZHBvaW50ID0gIndzOi8vbG9jYWxob3N0OjgwODAvY2hhbmdlbW9uaXRvciIKICAgIHZhciB3ZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KG1vbml0b3JfZW5kcG9pbnQpOwogICAgdmFyIGZuID0gY2FsbGJhY2s7CiAgICB3ZWJzb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnNvbGUubG9nKCJTb2NrZXQgb3BlbmVkIik7CiAgICAgICAgd2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyJ0eXBlIjogIm1vbml0b3JfbnMiLCAibnMiOiBvYmplY3RfbmFtZX0pKQogICAgfQoKICAgIHdlYnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgY29uc29sZS5sb2coIk9uIG1lc3NhZ2U6ICIgKyBldnQuZGF0YSk7CiAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgIGZuKGV2dC5kYXRhKTsKICAgICAgICAgICAgLyoKICAgICAgICAgICAgIC8vSW4gY2FsbGJhY2sgeW91IG1heSBkbyBzb21ldGhpbmcgbGlrZSAoYWxzbyBjb25zaWRlciB0aGUgZXZ0LmRhdGEgaWYgeW91IGFyZSBtb25pdG9yaW5nIG11bHRpcGxlIG9iamVjdHMuOgogICAgICAgICAgICAgJGh0dHAuZ2V0KCcvc2VydmljZS8nK29iamVjdF9uYW1lKycvJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICovCiAgICAgICAgfQoKICAgIH0KCiAgICB3ZWJzb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zb2xlLmxvZygiT24gY2xvc2VkIik7CiAgICB9Cn0=')
},
{
'name': '/app/js/app.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKCi8vIERlY2xhcmUgYXBwIGxldmVsIG1vZHVsZSB3aGljaCBkZXBlbmRzIG9uIGZpbHRlcnMsIGFuZCBzZXJ2aWNlcwp2YXIgbXlBcHAgPSBhbmd1bGFyLm1vZHVsZSgnbXlBcHAnLCBbCiAgICAnbmdSb3V0ZScsCiAgICAndWkuYm9vdHN0cmFwJywKICAgICd1aS5zb3J0YWJsZScsCiAgICAndWkuYWNlJywKICAgICd5YXJ1MjIuanNvbkh1bWFuJywKICAgICdMb2NhbFN0b3JhZ2VNb2R1bGUnLAogICAgJ215QXBwLmZpbHRlcnMnLAogICAgJ215QXBwLnNlcnZpY2VzJywKICAgICdteUFwcC5kaXJlY3RpdmVzJywKICAgICdteUFwcC5jb250cm9sbGVycycKXSkuCmNvbmZpZyhbJyRyb3V0ZVByb3ZpZGVyJywgZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIpIHsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy90ZXJtaW5hbCcsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2hvbWUuaHRtbCcsIGNvbnRyb2xsZXI6ICdIb21lQ3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvaW5zdGFsbCcsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2luc3RhbGwuaHRtbCcsIGNvbnRyb2xsZXI6ICdIb21lQ3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9tZXNzYWdlJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvbWVzc2FnZS5odG1sJywgY29udHJvbGxlcjogJ01lc3NhZ2VWaWV3Q3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvdXNlcnMnLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy91c2Vycy5odG1sJywgY29udHJvbGxlcjogJ1VzZXJzQ3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9yb2xlcycsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL3JvbGVzLmh0bWwnLCBjb250cm9sbGVyOiAnUm9sZXNDdHJsJ30pOwogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2xpc3RzLycsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2xpc3QuaHRtbCcsIGNvbnRyb2xsZXI6ICdMaXN0Q3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9sb2dpbi8nLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9sb2dpbi5odG1sJywgY29udHJvbGxlcjogJ0xvZ2luQ3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYS86YXBwUGF0aD8vJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvcGFnZWhvbGRlci5odG1sJywgY29udHJvbGxlcjogJ0luZGV4Q3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL2xpc3RzLzpsaXN0SWQvJywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvd2lkZ2V0LWhvc3QuaHRtbCcsIGNvbnRyb2xsZXI6ICdMaXN0RGV0YWlsQ3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYS86YXBwUGF0aC9jb250ZW50LzpmaWxlT2JqZWN0TmFtZS8nLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy91cGxvYWRmaWxlLmh0bWwnLCBjb250cm9sbGVyOiAnRmlsZVVwbG9hZEN0cmwnfSk7CiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYS86YXBwUGF0aC9mb3JtZGVzaWduLzpmb3JtSWQ/Jywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvZm9ybS1kZXNpZ24uaHRtbCcsIGNvbnRyb2xsZXI6ICdGb3JtRGVzaWduQ29udHJvbGxlcid9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL2Zvcm1zLzpmb3JtSWQ/LzpkYXRhSWQ/Jywge3RlbXBsYXRlVXJsOiAncGFydGlhbHMvZm9ybXZpZXcuaHRtbCcsIGNvbnRyb2xsZXI6ICdGb3JtVmlld0N0cmwnfSk7CgogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2EvOmFwcFBhdGgvcGFnZS86cGFnZUlkPycsIHt0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL3BhZ2UuaHRtbCcsIGNvbnRyb2xsZXI6ICdQYWdlVmlld0N0cmwnfSk7CgogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2EvOmFwcFBhdGgvdmlldy86Y29uZmlnSWQvOml0ZW1JZC8nLCB7dGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9zaW5nbGVpdGVtdmlldy5odG1sJywgY29udHJvbGxlcjogJ1NpbmdsZUl0ZW1WaWV3Q3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe3JlZGlyZWN0VG86ICcvYS8nfSk7Cn1dKTsKCm15QXBwLmNvbmZpZyhmdW5jdGlvbiAobG9jYWxTdG9yYWdlU2VydmljZVByb3ZpZGVyKSB7CiAgbG9jYWxTdG9yYWdlU2VydmljZVByb3ZpZGVyLnNldFByZWZpeCgnbXlBcHAnKTsKfSk7CgpteUFwcC5mYWN0b3J5KCckdGVtcGxhdGVDYWNoZScsIGZ1bmN0aW9uKCRjYWNoZUZhY3RvcnksICRodHRwLCAkaW5qZWN0b3IpIHsKICAgIHZhciBjYWNoZSA9ICRjYWNoZUZhY3RvcnkoJ3RlbXBsYXRlcycpOwogICAgdmFyIHdpZGdldFByb21pc2U7CgogICAgcmV0dXJuIHsKICAgICAgICBnZXQ6IGZ1bmN0aW9uKHVybCkgewogICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGUuZ2V0KHVybCk7CgogICAgICAgICAgICBpZiAoY2FjaGVkKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiAoIXdpZGdldFByb21pc2UpIHsKICAgICAgICAgICAgICAgIHZhciB1cmk9Jy9zZXJ2aWNlL2Nvc21vcy53aWRnZXRzLyc7CgogICAgICAgICAgICAgICAgd2lkZ2V0UHJvbWlzZSA9ICRodHRwLmdldCh1cmkpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGVfZGF0YSA9IEpTT04ucGFyc2UocmVzcG9uc2UuZGF0YS5fZCk7CiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHRlbXBsYXRlX2RhdGEsIGZ1bmN0aW9uIChkYXRhLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnPHNjcmlwdCB0eXBlPSJ0ZXh0L25nLXRlbXBsYXRlIiBpZD0iJyArIGRhdGEubmFtZSArICciPicgKyBkYXRhLnRlbXBsYXRlICsgJzwvc2NyaXB0Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICRpbmplY3Rvci5nZXQoJyRjb21waWxlJykodGVtcGxhdGUpOwogICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGUuZ2V0KHVybCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGNhY2hlZCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlewogICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHdpZGdldFByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICB2YXIgY2FjaGVkID0gY2FjaGUuZ2V0KHVybCk7CiAgICAgICAgICAgICAgICBpZiAoY2FjaGVkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhY2hlZDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIC8vRmFsbGJhY2sgdG8gcmVxdWVzdCB0aGUgc2VydmVyCiAgICAgICAgICAgICAgICByZXR1cm4gJGh0dHAuZ2V0KHVybCkudGhlbihmdW5jdGlvbihyZXNwb25zZSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pCiAgICAgICAgfSwKCiAgICAgICAgcHV0OiBmdW5jdGlvbihrZXksIHZhbHVlKSB7CiAgICAgICAgICAgIGNhY2hlLnB1dChrZXksIHZhbHVlKTsKICAgICAgICB9CiAgICB9Owp9KTsK')
},
{
'name': '/app/js/directives.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogRGlyZWN0aXZlcyAqLwoKCmFuZ3VsYXIubW9kdWxlKCdteUFwcC5kaXJlY3RpdmVzJywgW10pLgogICAgZGlyZWN0aXZlKCdhcHBWZXJzaW9uJywgWyd2ZXJzaW9uJywgZnVuY3Rpb24gKHZlcnNpb24pIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbG0sIGF0dHJzKSB7CiAgICAgICAgICAgIGVsbS50ZXh0KHZlcnNpb24pOwogICAgICAgIH07CiAgICB9XSkKCiAgICAuZGlyZWN0aXZlKCdmaWVsZCcsIGZ1bmN0aW9uICgkY29tcGlsZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgICAgIHNjb3BlOiB7CiAgICAgICAgICAgICAgICBpdGVtOiAnPScsCiAgICAgICAgICAgICAgICB2YWw6ICc9JwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGxvY2F0aW9uJywnJHJvdXRlUGFyYW1zJywgJ21lc3NhZ2UnLCAnQ29zbW9zU2VydmljZScsICduYW1lZGNvbGVjdGlvbicsICdjYWxjdWxhdG9yJywgJ2dsb2JhbGhhc2h0YWJsZScsJ2Nvc21vcy5zZXR0aW5ncycsCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgbWVzc2FnZSwgQ29zbW9zU2VydmljZSwgbmFtZWRjb2xlY3Rpb24sIGNhbGN1bGF0b3IsIGhhc2h0YWJsZSwgc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgICRzY29wZS5uYW1lZGNvbGVjdGlvbiA9IG5hbWVkY29sZWN0aW9uOwogICAgICAgICAgICAgICAgJHNjb3BlLmNhbGN1bGF0b3IgPSBjYWxjdWxhdG9yOwogICAgICAgICAgICAgICAgJHNjb3BlLkNvc21vc1NlcnZpY2UgPSBDb3Ntb3NTZXJ2aWNlOwogICAgICAgICAgICAgICAgJHNjb3BlLmhhc2h0YWJsZSA9IGhhc2h0YWJsZTsKCiAgICAgICAgICAgICAgICAkc2NvcGUucmVjZWl2ZVNlcnZpY2VEYXRhQXMgPSAgZnVuY3Rpb24oZGF0YSwgYXJncykgewogICAgICAgICAgICAgICAgICAgIGlmKCFhcmdzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciBuYW1lID0gYXJnc1snbmFtZSddOwogICAgICAgICAgICAgICAgICAgIHZhciBwYXJzZSA9IGFyZ3NbJ3BhcnNlJ107CgogICAgICAgICAgICAgICAgICAgIGlmKG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYocGFyc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZVtuYW1lXSA9IEpTT04ucGFyc2UoZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZVtuYW1lXSA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICRzY29wZS5wcmVwYXJlT2JqZWN0ID0gZnVuY3Rpb24gKGl0ZW0sIGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaXRlbS5maWVsZHMsIGZ1bmN0aW9uICh2YWx1ZSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlLnR5cGUgPT09ICJjb21wb3NpdGUiKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3ZhbHVlLm5hbWVdID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJlcGFyZU9iamVjdCh2YWx1ZSwgZGF0YVt2YWx1ZS5uYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUudHlwZSA9PT0gImFycmF5IikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt2YWx1ZS5uYW1lXSA9IFtdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt2YWx1ZS5uYW1lXVswXSA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByZXBhcmVPYmplY3QodmFsdWUsIGRhdGFbdmFsdWUubmFtZV1bMF0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUubmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdmFsdWUubmFtZV0gPSAiIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kYXRhW3ZhbHVlXSA9ICIiOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICRzY29wZS5hZGRfcHJpbWl0aXZlX2l0ZW0gPSBmdW5jdGlvbiAocG9zaXRpb24pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbmV3SXRlbSA9ICIiOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcmVwYXJlT2JqZWN0KCRzY29wZS5pdGVtLCBuZXdJdGVtKTsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbC5zcGxpY2UocG9zaXRpb24gKyAxLCAwLCBuZXdJdGVtKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJHNjb3BlLmFkZF9pdGVtID0gZnVuY3Rpb24gKHBvc2l0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0l0ZW0gPSB7fTsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJlcGFyZU9iamVjdCgkc2NvcGUuaXRlbSwgbmV3SXRlbSk7CgogICAgICAgICAgICAgICAgICAgIGlmKCEkc2NvcGUudmFsKXsKICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiBUaGlzIGNvbmRpdGlvbiBzaG91bGQgYmUgaGFuZGxlZCBmcm9tIGxpbmsgZnVuY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbCA9IFtdOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbC5zcGxpY2UocG9zaXRpb24gKyAxLCAwLCBuZXdJdGVtKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmFsLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICRzY29wZS5nZXRMb29rdXAgPSBmdW5jdGlvbiAoZmllbGQsIHJlZikgewogICAgICAgICAgICAgICAgICAgIHZhciBsb29rdXBGb3VuZDsKICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZmllbGQub3B0aW9ucy5sb29rdXBzLCBmdW5jdGlvbiAobG9va3VwLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9va3VwLnJlZiA9PT0gcmVmKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb29rdXBGb3VuZCA9IGxvb2t1cDsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBsb29rdXBGb3VuZDsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZU9wdGlvbnMgPSBmdW5jdGlvbiAoZmllbGQpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgbG9va3VwOwogICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5pdGVtLm9wdGlvbnMuc2F2ZVZhbHVlT25seSl7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52YWwgPSB1bmRlZmluZWQ7CiAgICAgICAgICAgICAgICAgICAgICAgIGxvb2t1cCA9ICRzY29wZS5nZXRMb29rdXAoZmllbGQsICRzY29wZS5yZWYpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbC5kYXRhID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgICAgICAgICBsb29rdXAgPSAkc2NvcGUuZ2V0TG9va3VwKGZpZWxkLCAkc2NvcGUudmFsLnJlZiB8fCAkc2NvcGUucmVmKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZC5vcHRpb25EYXRhW2xvb2t1cC5yZWZdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcHRpb25EYXRhID0gZmllbGQub3B0aW9uRGF0YVtsb29rdXAucmVmXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSBsb29rdXAudXJsOwogICAgICAgICAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wdGlvbkRhdGEgPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLm9wdGlvbkRhdGFbbG9va3VwLnJlZl0gPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvL1NUQVJUIE1lbnVSZWYgbWV0aG9kcwogICAgICAgICAgICAgICAgJHNjb3BlLmdldE1lbnVDb25maWd1cmF0aW9uQnlVcmwgPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJsLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZW51Q29uZmlndXJhdGlvbiA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETzogJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJHNjb3BlLmdldE1lbnVDb25maWd1cmF0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBQYXRoID0gJHJvdXRlUGFyYW1zLmFwcFBhdGg7CgogICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmdldEFwcFNldHRpbmdzKCRzY29wZS5hcHBQYXRoLCAibWVudWNvbmZpZ29iamVjdCIsIGZ1bmN0aW9uKG9iamVjdE5hbWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJytvYmplY3ROYW1lKycvJyArICRzY29wZS5pdGVtLnZhbHVlLm1lbnVJZCArICcvJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRNZW51Q29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHN0YXR1cywgZGF0YSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9zZXJ2aWNlL2Nvc21vcy5tZW51Y29uZmlndXJhdGlvbnMvJyArICRzY29wZS5pdGVtLnZhbHVlLm1lbnVJZCArICcvJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRNZW51Q29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvL0VORCBNZW51UmVmIG1ldGhvZHMKCiAgICAgICAgICAgICAgICAvL1NUQVJUIExpc3QgbWV0aG9kcwoKICAgICAgICAgICAgICAgIC8vTGlzdCByZWYKCiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0TGlzdERhdGFCeSA9IGZ1bmN0aW9uKGNvbHVtbnMsIG9iamVjdE5hbWUpewogICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zQ3N2ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnNDc3YgKz0gY29sdW1uLm5hbWUgKyAiLCI7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS8nICsgb2JqZWN0TmFtZSArICcvP2NvbHVtbnM9JyArIGNvbHVtbnNDc3Y7CgogICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0TGlzdERhdGFGcm9tQ29uZmlnID0gZnVuY3Rpb24obGlzdENvbmZpZ3VyYXRpb24pewogICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zID0gbGlzdENvbmZpZ3VyYXRpb24uY29sdW1uczsKICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0TmFtZSA9IGxpc3RDb25maWd1cmF0aW9uLm9iamVjdE5hbWU7CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRMaXN0RGF0YUJ5KGNvbHVtbnMsIG9iamVjdE5hbWUpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0TGlzdENvbmZpZ3VyYXRpb25CeVVybCA9IGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IHt9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxpc3RDb25maWd1cmF0aW9uID0gZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRMaXN0RGF0YUZyb21Db25maWcoJHNjb3BlLmxpc3RDb25maWd1cmF0aW9uKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0TGlzdENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcFBhdGggPSAkcm91dGVQYXJhbXMuYXBwUGF0aDsKCiAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3MuZ2V0QXBwU2V0dGluZ3MoJHNjb3BlLmFwcFBhdGgsICJsaXN0Y29uZmlnb2JqZWN0IiwgZnVuY3Rpb24ob2JqZWN0TmFtZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS8nK29iamVjdE5hbWUrJy8nICsgJHNjb3BlLml0ZW0udmFsdWUubGlzdElkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldExpc3RDb25maWd1cmF0aW9uQnlVcmwodXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oc3RhdHVzLCBkYXRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLmxpc3Rjb25maWd1cmF0aW9ucy8nICsgJHNjb3BlLml0ZW0udmFsdWUubGlzdElkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldExpc3RDb25maWd1cmF0aW9uQnlVcmwodXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIC8vRU5EIExpc3QgbWV0aG9kcwoKICAgICAgICAgICAgICAgIC8vIFNUQVJUIEZvcm1SZWYgbWV0aG9kcwogICAgICAgICAgICAgICAgJHNjb3BlLmdldEZvcm1Db25maWd1cmF0aW9uQnlVcmwgPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJsLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGEgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mb3JtID0gZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS52YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Rm9ybURhdGEoJHNjb3BlLmZvcm0sICRzY29wZS52YWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86ICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICRzY29wZS5nZXRGb3JtQ29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwUGF0aCA9ICRyb3V0ZVBhcmFtcy5hcHBQYXRoOwoKICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBTZXR0aW5ncygkc2NvcGUuYXBwUGF0aCwgImZvcm1jb25maWdvYmplY3QiLCBmdW5jdGlvbihvYmplY3ROYW1lKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9zZXJ2aWNlLycrb2JqZWN0TmFtZSsnLycgKyAkc2NvcGUuaXRlbS52YWx1ZS5mb3JtSWQgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Rm9ybUNvbmZpZ3VyYXRpb25CeVVybCh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihzdGF0dXMsIGRhdGEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS9jb3Ntb3MuZm9ybXMvJyArICRzY29wZS5pdGVtLnZhbHVlLmZvcm1JZCArICcvJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRGb3JtQ29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Rm9ybURhdGEgPSBmdW5jdGlvbiAoZm9ybSwgZGF0YUlkKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFJZCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gZm9ybS5hY3Rpb24gKyAnLycgKyBkYXRhSWQgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRm9ybVJlc3VsdCA9IGZ1bmN0aW9uKGZvcm0sIHJlc3VsdCl7CiAgICAgICAgICAgICAgICAgICAgaWYoZm9ybSAmJiBmb3JtLm9uc3VjY2Vzcyl7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZvcm0ub25zdWNjZXNzLnR5cGUgPT09ICJ1cmwiKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfaWQgPSAoJHNjb3BlLml0ZW0uZGF0YUlkIHx8IEpTT04ucGFyc2UocmVzdWx0KSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGZvcm0ub25zdWNjZXNzLnZhbHVlLnJlcGxhY2UoInt7X2lkfX0iLF9pZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZihmb3JtLm9uc3VjY2Vzcy50eXBlID09PSAibWVzc2FnZSIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wdXNoKHsibWVzc2FnZSI6Zm9ybS5vbnN1Y2Nlc3MudmFsdWUsICJ0aXRsZSI6IlN1Y2VzcyIsICJkYXRhIjogcmVzdWx0fSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL21lc3NhZ2UnKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmKGZvcm0ub25zdWNjZXNzLnR5cGUgPT09ICJpbmxpbmVtZXNzYWdlIil7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3VibWl0RG9uZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICRzY29wZS5vbkZvcm1TdWJtaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYoJHNjb3BlLmZvcm0uYWN0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5mb3JtLmFjdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoISRzY29wZS5pdGVtLmRhdGFJZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucG9zdCgkc2NvcGUuZm9ybS5hY3Rpb24sICRzY29wZS5kYXRhLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NGb3JtUmVzdWx0KCRzY29wZS5mb3JtLCBkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJHNjb3BlLmZvcm0uYWN0aW9uICsgJy8nKyAkc2NvcGUuaXRlbS5kYXRhSWQgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5wdXQodXJsLCAkc2NvcGUuZGF0YSwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRm9ybVJlc3VsdCgkc2NvcGUuZm9ybSwgZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETzogJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAvLyBFTkQgRm9ybVJlZiBtZXRob2RzCgogICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRlQmxvY2tUeXBlID0gZnVuY3Rpb24oYmxvY2tUeXBlKXsKICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGJsb2NrVHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoMSc6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2gyJzoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaDMnOgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoNCc6CiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2g1JzoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93ICJIVE1MIGJsb2NrIG5vdCBhbGxvd2VkIjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgJHNjb3BlLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbVR5cGUgPSBpdGVtLnR5cGU7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlOwogICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaXRlbVR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy9QYWdlIGZpZWxkcwogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJodG1sYmxvY2siOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbGlkYXRlQmxvY2tUeXBlKGl0ZW0uYmxvY2t0eXBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJzwnK2l0ZW0uYmxvY2t0eXBlKycgbmctY2xhc3M9Iml0ZW0uY3NzY2xhc3MiPnt7aXRlbS52YWx1ZX19PC8nK2l0ZW0uYmxvY2t0eXBlKyc+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiaHlwZXJsaW5rIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52YWxpZGF0ZUJsb2NrVHlwZShpdGVtLmJsb2NrdHlwZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICc8YSBuZy1jbGFzcz0iaXRlbS5jc3NjbGFzcyIgaHJlZj0iJytpdGVtLnZhbHVlLmhyZWYrJyI+JytpdGVtLnZhbHVlLnRleHQrJzwvYT4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJpbWFnZSI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICc8aW1nIG5nLXNyYz0ie3tpdGVtLnNyY319IiAvPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgInR3b2NvbHVtbiI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICcnKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQiPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxkaXYgY2xhc3M9InJvdyI+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxkaXYgY2xhc3M9Int7aXRlbS5sZWZ0Y29sdW1uLmNzc2NsYXNzfX0iPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgICAgIDxmaWVsZCBpdGVtPSJpdGVtLmxlZnRjb2x1bW4iPjwvZmllbGQ+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICA8L2Rpdj4nKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPGRpdiBjbGFzcz0ie3tpdGVtLnJpZ2h0Y29sdW1uLmNzc2NsYXNzfX0iPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgICAgIDxmaWVsZCBpdGVtPSJpdGVtLnJpZ2h0Y29sdW1uIj48L2ZpZWxkPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPC9kaXY+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPC9kaXY+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAidGhyZWVjb2x1bW4iOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSAnJysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0iY29udGFpbmVyLWZsdWlkIj4nKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8ZGl2IGNsYXNzPSJyb3ciPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICA8ZGl2IGNsYXNzPSJ7e2l0ZW0ubGVmdGNvbHVtbi5jc3NjbGFzc319Ij4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgICAgICA8ZmllbGQgaXRlbT0iaXRlbS5sZWZ0Y29sdW1uIj48L2ZpZWxkPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPC9kaXY+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxkaXYgY2xhc3M9Int7aXRlbS5taWRkbGVjb2x1bW4uY3NzY2xhc3N9fSI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgPGZpZWxkIGl0ZW09Iml0ZW0ubWlkZGxlY29sdW1uIj48L2ZpZWxkPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPC9kaXY+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxkaXYgY2xhc3M9Int7aXRlbS5yaWdodGNvbHVtbi5jc3NjbGFzc319Ij4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgICAgICA8ZmllbGQgaXRlbT0iaXRlbS5yaWdodGNvbHVtbiI+PC9maWVsZD4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDwvZGl2PicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvZGl2PicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIm1lbnUiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoaXRlbS5uYXZ0eXBlID09PSAic2lkZWJhciIpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHVsIGNsYXNzPSJ3ZWxsIG5hdiBuYXYtcGlsbHMgbmF2LXN0YWNrZWQiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPGxpIG5nLXJlcGVhdD0iZmllbGQgaW4gaXRlbS5maWVsZHMiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxmaWVsZCBpdGVtPSJmaWVsZCI+PC9maWVsZD4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvbGk+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3VsPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICcnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9ImNvbnRhaW5lciI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Int7aXRlbS5icmFuZGhyZWZ9fSI+e3tpdGVtLmJyYW5kdGl0bGV9fTwvYT4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ibmF2YmFyLWNvbGxhcHNlIGNvbGxhcHNlIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPGxpIG5nLXJlcGVhdD0iZmllbGQgaW4gaXRlbS5maWVsZHMiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxmaWVsZCBpdGVtPSJmaWVsZCI+PC9maWVsZD4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvbGk+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3VsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIm1lbnVpdGVtIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8YSBocmVmPSJ7e2l0ZW0udmFsdWUuaHJlZn19Ij57e2l0ZW0udmFsdWUudGl0bGV9fTwvYT4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJtZW51cmVmIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxmaWVsZCBuZy1pZj0ibWVudUNvbmZpZ3VyYXRpb24iIGl0ZW09Im1lbnVDb25maWd1cmF0aW9uIj48L2ZpZWxkPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImNvbXBvc2l0ZWJsb2NrIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IG5nLXJlcGVhdD0iZmllbGQgaW4gaXRlbS5maWVsZHMiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgPGZpZWxkIGl0ZW09ImZpZWxkIj48L2ZpZWxkPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJ3aWRnZXRob3N0IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJzxkaXYgbmctaW5jbHVkZT0iXCcnK2l0ZW0udmFsdWUrJ1wnIiBjbGFzcz0iJytpdGVtLmNzc2NsYXNzKyciPjwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vRm9ybSBmaWVsZHMKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiaW5wdXQiOgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJ0ZXh0IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJzxzcGFuPjxsYWJlbD57e2l0ZW0udGl0bGV9fTwvbGFiZWw+PGlucHV0IHR5cGU9Int7aXRlbS5odG1sdHlwZSB8fCBcJ3RleHRcJ319IiBuZy1tb2RlbD0idmFsIi8+PC9zcGFuPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgInN0YXRpYyI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICc8c3Bhbj48bGFiZWw+e3tpdGVtLnRpdGxlfX08L2xhYmVsPjxpbnB1dCB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0idmFsIiByZWFkb25seT0icmVhZG9ubHkiLz48L3NwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAidGV4dGFyZWEiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSAnPHNwYW4+PGxhYmVsPnt7aXRlbS50aXRsZX19PC9sYWJlbD48dGV4dGFyZWEgbmctbW9kZWw9InZhbCIgLz48L3NwYW4+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiY29kZWVkaXRvciI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICc8c3Bhbj48bGFiZWw+e3tpdGVtLnRpdGxlfX08L2xhYmVsPjxkaXYgdWktYWNlIG5nLW1vZGVsPSJ2YWwiPjwvZGl2Pjwvc3Bhbj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJjaGVja2JveCI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICc8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJ2YWwiPiA8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwiPnt7aXRlbS50aXRsZX19PC9sYWJlbD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJzZWxlY3QiOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPSAnJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCI+e3tpdGVtLnRpdGxlfX08L2xhYmVsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c2VsZWN0IG5nLW1vZGVsPSJ2YWwiIG5nLW9wdGlvbnM9ImNob2ljZS52YWx1ZSBhcyBjaG9pY2UudGl0bGUgZm9yIGNob2ljZSBpbiBpdGVtLm9wdGlvbnMuY2hvaWNlcyI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxvcHRpb24gbmctaWY9Iml0ZW0ubnVsbGFibGUgPT09IHRydWUiPiAtLS0gU2VsZWN0IC0tLTwvb3B0aW9uPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NlbGVjdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJyYWRpb2dyb3VwIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWwgY2xhc3M9ImNvbnRyb2wtbGFiZWwiPnt7aXRlbS50aXRsZX19PC9sYWJlbD4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0iY29tcG9zaXRlIiBuZy1yZXBlYXQ9ImNob2ljZSBpbiBpdGVtLm9wdGlvbnMuY2hvaWNlcyI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxpbnB1dCB0eXBlPSJyYWRpbyIgbmctdmFsdWU9ImNob2ljZS52YWx1ZSIgbmctbW9kZWw9IiRwYXJlbnQudmFsIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPGxhYmVsIGNsYXNzPSJjb250cm9sLWxhYmVsIj57e2Nob2ljZS50aXRsZX19PC9sYWJlbD4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAibG9va3VwIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0ub3B0aW9ucy5zYXZlVmFsdWVPbmx5KXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICcnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCI+e3tpdGVtLnRpdGxlfX08L2xhYmVsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNlbGVjdCBuZy1pZj0iIWl0ZW0ub3B0aW9ucy5oaWRlUmVmVHlwZSIgbmctbW9kZWw9InJlZiIgJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduZy1vcHRpb25zPSJsb29rdXAucmVmIGFzIGxvb2t1cC5sb29rdXBuYW1lIGZvciBsb29rdXAgaW4gaXRlbS5vcHRpb25zLmxvb2t1cHMiJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduZy1jaGFuZ2U9InVwZGF0ZU9wdGlvbnMoaXRlbSkiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPG9wdGlvbiBuZy12YWx1ZT0ibnVsbCI+LS0tPC9vcHRpb24+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NlbGVjdD4nICsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c2VsZWN0IG5nLW1vZGVsPSJ2YWwiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIDxvcHRpb24gbmctdmFsdWU9Im9wdGlvbltnZXRMb29rdXAoaXRlbSwgcmVmKS52YWx1ZV0iJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgbmctc2VsZWN0ZWQ9Im9wdGlvbltnZXRMb29rdXAoaXRlbSwgcmVmKS52YWx1ZV0gPT09IHZhbCInICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgbmctcmVwZWF0PSJvcHRpb24gaW4gb3B0aW9uRGF0YSI+e3tvcHRpb25bZ2V0TG9va3VwKGl0ZW0sIHJlZikudGl0bGVdfX08L29wdGlvbj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvc2VsZWN0Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICcnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxsYWJlbCBjbGFzcz0iY29udHJvbC1sYWJlbCI+e3tpdGVtLnRpdGxlfX08L2xhYmVsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNlbGVjdCBuZy1tb2RlbD0idmFsLnJlZiIgJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduZy1vcHRpb25zPSJsb29rdXAucmVmIGFzIGxvb2t1cC5sb29rdXBuYW1lIGZvciBsb29rdXAgaW4gaXRlbS5vcHRpb25zLmxvb2t1cHMiJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduZy1jaGFuZ2U9InVwZGF0ZU9wdGlvbnMoaXRlbSkiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPG9wdGlvbiBuZy12YWx1ZT0ibnVsbCI+LS0tPC9vcHRpb24+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NlbGVjdD4nICsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8c2VsZWN0IG5nLW1vZGVsPSJ2YWwuZGF0YSI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgPG9wdGlvbiBuZy12YWx1ZT0ib3B0aW9uW2dldExvb2t1cChpdGVtLCB2YWwucmVmKS52YWx1ZV0iJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgbmctc2VsZWN0ZWQ9Im9wdGlvbltnZXRMb29rdXAoaXRlbSwgdmFsLnJlZikudmFsdWVdID09PSB2YWwuZGF0YSInICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgbmctcmVwZWF0PSJvcHRpb24gaW4gb3B0aW9uRGF0YSI+e3tvcHRpb25bZ2V0TG9va3VwKGl0ZW0sIHZhbC5yZWYpLnRpdGxlXX19PC9vcHRpb24+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3NlbGVjdD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJwYWdlcmVmIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cGFnZSBwYWdlaWQ9Iml0ZW0ucGFnZUlkIj48L3BhZ2U+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZm9ybXJlZiI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9ICcnICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBuZy1zaG93PSJzdWJtaXREb25lIj57e2Zvcm0ub25zdWNjZXNzLnZhbHVlfX08L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGZvcm0gbmctaGlkZT0ic3VibWl0RG9uZSI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICA8ZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgIDxoMT57e2Zvcm0udGl0bGV9fTwvaDE+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICA8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIDx1bD4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgICA8bGkgbmctcmVwZWF0PSJmaWVsZCBpbiBmb3JtLmZpZWxkcyI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgIDxmaWVsZCBpdGVtPSJmaWVsZCIgdmFsPSJkYXRhW2ZpZWxkLm5hbWVdIj48L2ZpZWxkPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgIDwvbGk+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICA8L3VsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib25Gb3JtU3VibWl0KCkiPlN1Ym1pdDwvYnV0dG9uPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Zvcm0+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiY3NzcmVmIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlPSc8bGluayBkYXRhLW5nLWhyZWY9Int7aXRlbS5ocmVmfX0iIHJlbD0ic3R5bGVzaGVldCIgLz4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJsaXN0cmVmIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJzxkaXYgbmctaWY9Imxpc3RDb25maWd1cmF0aW9uICE9PSB1bmRlZmluZWQiPjxkaXYgbmctaW5jbHVkZT0ibGlzdENvbmZpZ3VyYXRpb24ud2lkZ2V0TmFtZSIgLz48L2Rpdj48L2Rpdj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICBjYXNlICJmb3JtIjoKICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiY29tcG9zaXRlIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8bGFiZWw+e3tpdGVtLnRpdGxlfX08L2xhYmVsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHVsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8bGkgbmctcmVwZWF0PSJmaWVsZCBpbiBpdGVtLmZpZWxkcyI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICA8ZmllbGQgaXRlbT0iZmllbGQiIHZhbD0idmFsW2ZpZWxkLm5hbWVdIj48L2ZpZWxkPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8L2xpPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3VsPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgImFycmF5IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGl0ZW0ub3B0aW9ucyAmJiBpdGVtLm9wdGlvbnMucHJpbWl0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxsYWJlbD57e2l0ZW0udGl0bGV9fTwvbGFiZWw+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8YnV0dG9uIG5nLWNsaWNrPSJhZGRfcHJpbWl0aXZlX2l0ZW0oLTEpIj4rPC9idXR0b24+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzx1bD4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxsaSBuZy1yZXBlYXQ9InYgaW4gdmFsIHRyYWNrIGJ5ICRpbmRleCI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPGZpZWxkIHZhbD0idmFsWyRpbmRleF0iIGl0ZW09Iml0ZW0uZmllbGRzWzBdIj48L2ZpZWxkPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxidXR0b24gbmctY2xpY2s9InJlbW92ZUl0ZW0oJGluZGV4KSI+LTwvYnV0dG9uPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxidXR0b24gbmctY2xpY2s9ImFkZF9wcmltaXRpdmVfaXRlbSgkaW5kZXgpIj4rPC9idXR0b24+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8L2xpPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC91bD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxsYWJlbD57e2l0ZW0udGl0bGV9fTwvbGFiZWw+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8YnV0dG9uIG5nLWNsaWNrPSJhZGRfaXRlbSgtMSkiPis8L2J1dHRvbj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHVsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPGxpIG5nLXJlcGVhdD0iZCBpbiB2YWwiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxmaWVsZCB2YWw9ImRbZmllbGQubmFtZV0iIGl0ZW09ImZpZWxkIiBuZy1yZXBlYXQ9ImZpZWxkIGluIGl0ZW0uZmllbGRzIj48L2ZpZWxkPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxidXR0b24gbmctY2xpY2s9InJlbW92ZUl0ZW0oJGluZGV4KSI+LTwvYnV0dG9uPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxidXR0b24gbmctY2xpY2s9ImFkZF9pdGVtKCRpbmRleCkiPis8L2J1dHRvbj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvbGk+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3VsPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgIml0ZW12aWV3IjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gJzxkaXYgbmctaW5jbHVkZT0iXCcnK2l0ZW0udmFsdWUud2lkZ2V0KydcJyIgY2xhc3M9IicraXRlbS5jc3NjbGFzcysnIj48L2Rpdj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgoKICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gbnVsbDsgLy8nPHNwYW4+PGxhYmVsPnt7aXRlbS50aXRsZX19PC9sYWJlbD57e3ZhbH19PC9zcGFuPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfV0sCgogICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDcmVhdGluZyBmaWVsZCAiICsgc2NvcGUuaXRlbS50eXBlKTsKICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IHNjb3BlLmdldFRlbXBsYXRlKHNjb3BlLml0ZW0pOwogICAgICAgICAgICAgICAgaWYgKCF0ZW1wbGF0ZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuaXRlbS50eXBlID09PSAic3RhdGljIikgewogICAgICAgICAgICAgICAgICAgIHNjb3BlLnZhbCA9IHNjb3BlLml0ZW0ub3B0aW9ucy52YWx1ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuaXRlbS50eXBlID09PSAiYXJyYXkiKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY29wZS52YWwgfHwgc2NvcGUudmFsLmxlbmd0aCA8IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudmFsID0gW107CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzY29wZS5pdGVtLnR5cGUgPT09ICJjb21wb3NpdGUiIHx8IHNjb3BlLml0ZW0udHlwZSA9PT0gImZvcm0iKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY29wZS52YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudmFsID0ge307CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChzY29wZS5pdGVtLnR5cGUgPT09ICJsb29rdXAiKSB7CiAgICAgICAgICAgICAgICAgICAgc2NvcGUuaXRlbS5vcHRpb25EYXRhID0ge307CiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY29wZS52YWwgJiYgIXNjb3BlLml0ZW0ub3B0aW9ucy5zYXZlVmFsdWVPbmx5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnZhbCA9IHsicmVmIjogbnVsbCwgImRhdGEiOiBudWxsfTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoKHNjb3BlLnZhbCAmJiBzY29wZS52YWwucmVmKSB8fChzY29wZS5pdGVtLm9wdGlvbnMuc2F2ZVZhbHVlT25seSAmJiBzY29wZS5yZWYpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnVwZGF0ZU9wdGlvbnMoc2NvcGUuaXRlbSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHNjb3BlLml0ZW0ub3B0aW9ucy5zYXZlVmFsdWVPbmx5ICYmIHNjb3BlLml0ZW0ub3B0aW9ucy5oaWRlUmVmVHlwZSl7CiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLnJlZiA9IHNjb3BlLml0ZW0ub3B0aW9ucy5sb29rdXBzWzBdLnJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUudXBkYXRlT3B0aW9ucyhzY29wZS5pdGVtKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoc2NvcGUuaXRlbS50eXBlID09PSAibGlzdHJlZiIpewogICAgICAgICAgICAgICAgICAgIHNjb3BlLmdldExpc3RDb25maWd1cmF0aW9uKCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoc2NvcGUuaXRlbS50eXBlID09PSAiZm9ybXJlZiIpIHsKICAgICAgICAgICAgICAgICAgICBzY29wZS5nZXRGb3JtQ29uZmlndXJhdGlvbigpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmKHNjb3BlLml0ZW0udHlwZSA9PT0gImNzc3JlZiIpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaGVhZEVsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXSk7CgogICAgICAgICAgICAgICAgICAgIHZhciBuZXdFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KHRlbXBsYXRlKTsKICAgICAgICAgICAgICAgICAgICAkY29tcGlsZShuZXdFbGVtZW50KShzY29wZSk7CiAgICAgICAgICAgICAgICAgICAgaGVhZEVsZW1lbnQuYXBwZW5kKG5ld0VsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgIC8vVE9ETzogbWF5YmUgcmVtb3ZlIHRoZSAiZWxlbWVudCIKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoc2NvcGUuaXRlbS50eXBlID09PSAibWVudXJlZiIpIHsKICAgICAgICAgICAgICAgICAgICBzY29wZS5tZW51Q29uZmlndXJhdGlvbiA9IHsiYnJhbmR0aXRsZSI6ICIiLCAidHlwZSI6Im1lbnUiLCAiZmllbGRzIjpbXX07CiAgICAgICAgICAgICAgICAgICAgc2NvcGUuZ2V0TWVudUNvbmZpZ3VyYXRpb24oKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiRmllbGQgdGVtcGxhdGUiICsgdGVtcGxhdGUpOwoKICAgICAgICAgICAgICAgIHZhciBuZXdFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KHRlbXBsYXRlKTsKICAgICAgICAgICAgICAgICRjb21waWxlKG5ld0VsZW1lbnQpKHNjb3BlKTsKICAgICAgICAgICAgICAgIGVsZW1lbnQucmVwbGFjZVdpdGgobmV3RWxlbWVudCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfSkKCiAgICAuZGlyZWN0aXZlKCdlcnJvckJhbm5lcicsIGZ1bmN0aW9uICgkY29tcGlsZSkgewogICAgICAgIC8vVE9ETzogY3JlYXRlIHN1Yi1zY29wZSB3aXRoIGl0cyBvd24gZGF0YSBhdHRyaWJ1dGUgYW5kIGNsZWFyRXJyb3IoKSBtZXRob2QKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHJlc3RyaWN0OiAiRSIsCiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgbmctc2hvdz0iaGFzRXJyb3IiIGNsYXNzPSJiZy13YXJuaW5nIj4nICsKICAgICAgICAgICAgICAgICAgICAnICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+JyArCiAgICAgICAgICAgICAgICAgICAgJyAgICA8ZGl2PicgKwogICAgICAgICAgICAgICAgICAgICcgICAgICAgIDxsYWJlbD5FcnJvciBjb2RlOjwvbGFiZWw+JyArCiAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgPHNwYW4gbmctYmluZD0ic3RhdHVzIiAvPicgKwogICAgICAgICAgICAgICAgICAgICcgICAgPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgJyAgIDxkaXYgbmctYmluZD0ic3RhdHVzX2RhdGEiPjwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nCiAgICAgICAgICAgIH0KICAgIH0pCgogICAgLmRpcmVjdGl2ZSgncGFnZScsIGZ1bmN0aW9uICgkY29tcGlsZSkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsCiAgICAgICAgICAgIHNjb3BlOiB7CiAgICAgICAgICAgICAgICBwYWdlSWQ6ICc9cGFnZWlkJyAgLy8gYmVjYXVzZSBwYWdlSWQgd2lsbCB0cmFuc2xhdGUgdG8gcGFnZS1pZAogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICdtZXNzYWdlJywgJ0Nvc21vc1NlcnZpY2UnLCAnY29zbW9zLnNldHRpbmdzJywKICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBtZXNzYWdlLCBDb3Ntb3NTZXJ2aWNlLCBzZXR0aW5ncykgewoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbkJ5VXJsID0gZnVuY3Rpb24gKHVybCkgewogICAgICAgICAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2VkZWYgPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1RPRE86ICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUucGFnZUlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBQYXRoID0gJHJvdXRlUGFyYW1zLmFwcFBhdGg7CgogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBTZXR0aW5ncygkc2NvcGUuYXBwUGF0aCwgInBhZ2Vjb25maWdvYmplY3QiLCBmdW5jdGlvbiAob2JqZWN0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJyArIG9iamVjdE5hbWUgKyAnLycgKyAkc2NvcGUucGFnZUlkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwodXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RhdHVzLCBkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS9jb3Ntb3MucGFnZXMvJyArICRzY29wZS5wYWdlSWQgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb25CeVVybCh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICA8ZGl2IG5nLXJlcGVhdD0iZmllbGQgaW4gcGFnZWRlZi5maWVsZHMiPlxuJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgICA8ZmllbGQgaXRlbT0iZmllbGQiPjwvZmllbGQ+XG4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgPC9kaXY+XG4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd7e3BhZ2V9fScgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9XSwKCiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNyZWF0aW5nIHBhZ2UiKTsKICAgICAgICAgICAgICAgIHNjb3BlLnBhZ2VkZWYgPSBbXTsKICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IHNjb3BlLmdldFRlbXBsYXRlKCk7CiAgICAgICAgICAgICAgICBpZiAoIXRlbXBsYXRlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNjb3BlLmdldENvbmZpZ3VyYXRpb24oKTsKCiAgICAgICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCh0ZW1wbGF0ZSk7CiAgICAgICAgICAgICAgICAkY29tcGlsZShuZXdFbGVtZW50KShzY29wZSk7CiAgICAgICAgICAgICAgICBlbGVtZW50LnJlcGxhY2VXaXRoKG5ld0VsZW1lbnQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSkKCiAgICAuZGlyZWN0aXZlKCdvYmplY3R2aWV3JywgZnVuY3Rpb24gKCRjb21waWxlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgc2NvcGU6IHsKICAgICAgICAgICAgICAgIGl0ZW1JZDogJz0nLAogICAgICAgICAgICAgICAgY29uZmlnSWQ6ICc9JwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICdtZXNzYWdlJywgJ0Nvc21vc1NlcnZpY2UnLCAnY29zbW9zLnNldHRpbmdzJywKICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBtZXNzYWdlLCBDb3Ntb3NTZXJ2aWNlLCBzZXR0aW5ncykgewoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbkJ5VXJsID0gZnVuY3Rpb24gKHVybCkgewogICAgICAgICAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvbmZpZyA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRTaW5nbGVJdGVtKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH07CgoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcFBhdGggPSAkcm91dGVQYXJhbXMuYXBwUGF0aDsKCiAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLmdldEFwcFNldHRpbmdzKCRzY29wZS5hcHBQYXRoLCAic2luZ2xlaXRlbWNvbmZpZ29iamVjdCIsIGZ1bmN0aW9uKG9iamVjdE5hbWUpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9zZXJ2aWNlLycrb2JqZWN0TmFtZSsnLycgKyAkc2NvcGUuY29uZmlnSWQgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb25CeVVybCh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHN0YXR1cywgZGF0YSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS9jb3Ntb3Muc2luZ2xlaXRlbWNvbmZpZy8nICsgJHNjb3BlLmNvbmZpZ0lkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwodXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9hZFNpbmdsZUl0ZW0gPSBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqZWN0TmFtZSA9ICRzY29wZS5jb25maWcub2JqZWN0TmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSAkc2NvcGUuY29uZmlnLmNvbHVtbnM7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uc0NzdiA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goY29sdW1ucywgZnVuY3Rpb24gKGNvbHVtbiwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnNDc3YgKz0gY29sdW1uLm5hbWUgKyAiLCI7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS8nICsgb2JqZWN0TmFtZSArICcvJyArICRzY29wZS5pdGVtSWQgKyAnLz9jb2x1bW5zPScgKyBjb2x1bW5zQ3N2OwoKICAgICAgICAgICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJsLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhID0gZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIDxkaXYgbmctcmVwZWF0PSJmaWVsZCBpbiBjb25maWcuZmllbGRzIj5cbicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgPGZpZWxkIGl0ZW09ImZpZWxkIiB2YWw9IiRwYXJlbnQuZGF0YSI+PC9maWVsZD5cbicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICA8L2Rpdj5cbicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfV0sCgogICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDcmVhdGluZyBwYWdlIik7CiAgICAgICAgICAgICAgICBzY29wZS5wYWdlZGVmID0gW107CiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBzY29wZS5nZXRUZW1wbGF0ZSgpOwogICAgICAgICAgICAgICAgaWYgKCF0ZW1wbGF0ZSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBzY29wZS5nZXRDb25maWd1cmF0aW9uKCk7CgogICAgICAgICAgICAgICAgdmFyIG5ld0VsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQodGVtcGxhdGUpOwogICAgICAgICAgICAgICAgJGNvbXBpbGUobmV3RWxlbWVudCkoc2NvcGUpOwogICAgICAgICAgICAgICAgZWxlbWVudC5yZXBsYWNlV2l0aChuZXdFbGVtZW50KTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pCgo7Cg==')
},
{
'name': '/app/js/services.js', 'data': base64.b64decode('')
},
{
'name': '/app/js/filters.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogRmlsdGVycyAqLwoKYW5ndWxhci5tb2R1bGUoJ215QXBwLmZpbHRlcnMnLCBbXSkuCiAgZmlsdGVyKCdpbnRlcnBvbGF0ZScsIFsndmVyc2lvbicsIGZ1bmN0aW9uKHZlcnNpb24pIHsKICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7CiAgICAgIHJldHVybiBTdHJpbmcodGV4dCkucmVwbGFjZSgvXCVWRVJTSU9OXCUvbWcsIHZlcnNpb24pOwogICAgfTsKICB9XSk7Cg==')
},
{
'name': '/app/js/utils.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgbWFuaXJ1enphbWFuIG9uIDcvNS8xNC4KICovCgoKZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHsKICAgIHZhciB2YWx1ZSA9ICI7ICIgKyBkb2N1bWVudC5jb29raWU7CiAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCgiOyAiICsgbmFtZSArICI9Iik7CiAgICBpZiAocGFydHMubGVuZ3RoID09IDIpIHJldHVybiBwYXJ0cy5wb3AoKS5zcGxpdCgiOyIpLnNoaWZ0KCk7Cn0KCmZ1bmN0aW9uIGdldFVzZXJOYW1lKGRlZmF1bHRfdXNlcil7CiAgICB2YXIgdXNlckNvb2tpZSA9IGdldENvb2tpZSgidXNlciIpOwogICAgaWYodXNlckNvb2tpZSl7CiAgICAgICAgdXNlckNvb2tpZSA9IHVzZXJDb29raWUucmVwbGFjZSgvXCIvZywgIiIpCiAgICAgICAgdmFyIGRlY29kZWQgPSBKU09OLnBhcnNlKHdpbmRvdy5hdG9iKHVzZXJDb29raWUpKTsKICAgICAgICByZXR1cm4gZGVjb2RlZFsidXNlcm5hbWUiXSB8fCBkZWZhdWx0X3VzZXI7CiAgICB9CgogICAgcmV0dXJuIGRlZmF1bHRfdXNlcjsKfQoKZnVuY3Rpb24gbG9nZ2VkSW4oKXsKICAgIHZhciB1c2VyQ29va2llID0gZ2V0Q29va2llKCJ1c2Vyc2VjcmV0Iik7CiAgICBpZih1c2VyQ29va2llKXsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQo=')
},
{
'name': '/app/js/controllers.js', 'data': base64.b64decode('')
},
{
'name': '/app/img/.gitkeep', 'data': base64.b64decode('')
},
{
'name': '/app/data/sample.css', 'data': base64.b64decode('LnByb2R1Y3QgewogICAgd2lkdGg6IDEwMCU7CiAgICBtYXgtd2lkdGg6IDMyMHB4OwogICAgbWluLWhlaWdodDogMjUwcHg7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjRUZFRkVGOwogICAgbWFyZ2luOiA3cHg7CiAgICBwYWRkaW5nOiA3cHg7Cn0=')
},
{
'name': '/app/data/app_init.json', 'data': base64.b64decode('')
},
{
'name': '/app/data/components.json', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgbWFuaXJ1enphbWFuIG9uIDgvMjEvMTQuCiAqLwpbCnsKICAgICJuYW1lIjoicGF5cGFsYnV0dG9uIiwKICAgICJ0aXRsZSI6ICJQYXlwYWwgQnV0dG9uIiwKICAgICJzZXR0aW5ncyI6WwogICAgICAgIHsKICAgICAgICAgICAgImVtYWlsIjogInRleHQiLAogICAgICAgICAgICAiaXRlbW5hbWUiOiJ0ZXh0IiwKICAgICAgICAgICAgIml0ZW1pZCI6InRleHQiLAogICAgICAgICAgICAicHJpY2UiOiJ0ZXh0IiwKICAgICAgICAgICAgImN1cnJlbmN5IjoiQ3VycmVuY3kiCiAgICAgICAgfQogICAgXQp9Cl0=')
},
{
'name': '/app/css/app.css', 'data': base64.b64decode('LyogYXBwIGNzcyBzdHlsZXNoZWV0ICovCgoubWVudSB7CiAgbGlzdC1zdHlsZTogbm9uZTsKICBib3JkZXItYm90dG9tOiAwLjFlbSBzb2xpZCBibGFjazsKICBtYXJnaW4tYm90dG9tOiAyZW07CiAgcGFkZGluZzogMCAwIDAuNWVtOwp9CgoubWVudTpiZWZvcmUgewogIGNvbnRlbnQ6ICJbIjsKfQoKLm1lbnU6YWZ0ZXIgewogIGNvbnRlbnQ6ICJdIjsKfQoKLm1lbnUgPiBsaSB7CiAgZGlzcGxheTogaW5saW5lOwp9CgoubWVudSA+IGxpOmJlZm9yZSB7CiAgY29udGVudDogInwiOwogIHBhZGRpbmctcmlnaHQ6IDAuM2VtOwp9CgoubWVudSA+IGxpOm50aC1jaGlsZCgxKTpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwogIHBhZGRpbmc6IDA7Cn0KCi5lZGl0b3J7CiAgICBtaW4td2lkdGg6IDQwMHB4Owp9CgouYWNlX2VkaXRvciB7CiAgICBtaW4taGVpZ2h0OiAyMDBweDsKfQoKLnRhYmxlLWhvdmVyIHRib2R5IHRyOmhvdmVyID4gdGQgewogICAgY3Vyc29yOiBwb2ludGVyOwogICAgY3Vyc29yOiBoYW5kOwp9')
},
{
'name': '/app/partials/message.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxoMT57e21lc3NhZ2UudGl0bGV9fTwvaDE+CiAgICA8ZGl2Pnt7bWVzc2FnZS5tZXNzYWdlfX08L2Rpdj4KICAgIDxkaXY+e3ttZXNzYWdlLmRhdGF9fTwvZGl2Pgo8L2Rpdj4=')
},
{
'name': '/app/partials/roles.html', 'data': base64.b64decode('PGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQiIG5nLWNsaWNrPSJjbGVhckVycm9yKCk7Ij48L2J1dHRvbj4KICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+PC9kaXY+CiAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KPC9kaXY+Cgo8aDM+Um9sZXM8L2gzPgoKPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+U0lEPC90aD4KICAgICAgICAgICAgPHRoPk5hbWU8L3RoPgogICAgICAgICAgICA8dGg+Jm5ic3A7PC90aD4KICAgICAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgIDx0ciBuZy1yZXBlYXQ9InJvbGUgaW4gcm9sZXMiPgogICAgICAgIDx0ZD57e3JvbGUuc2lkfX08L3RkPjx0ZD57e3JvbGUubmFtZX19PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLXdhcm5pbmcgZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0IiBuZy1jbGljaz0iZWRpdFJvbGUoJGluZGV4KTsiPjwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIgZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUiIG5nLWNsaWNrPSJyZW1vdmVSb2xlKCRpbmRleCk7Ij48L2J1dHRvbj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDwvdGJvZHk+CjwvdGFibGU+Cgo8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJhZGRSb2xlKCdsZycpIj5DcmVhdGUgcm9sZTwvYnV0dG9uPg==')
},
{
'name': '/app/partials/widget-host.html', 'data': base64.b64decode('PGRpdiBuZy1pbmNsdWRlPSJsaXN0Q29uZmlndXJhdGlvbi53aWRnZXROYW1lIiAvPjwvZGl2Pg==')
},
{
'name': '/app/partials/form-design.html', 'data': base64.b64decode('')
},
{
'name': '/app/partials/uploadfile.html', 'data': base64.b64decode('PHN0eWxlPgouZmlsZS1saXN0IHsKICAgIHBhZGRpbmctYm90dG9tOiAxMHB4Owp9Ci5maWxlLXNlbGVjdG9yewogICAgbWFyZ2luOiA1cHg7Cn0KPC9zdHlsZT4KCjxkaXYgbmctc2hvdz0iaGFzRXJyb3IiIGNsYXNzPSJiZy13YXJuaW5nIj4KICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICA8ZGl2PjxsYWJlbD5FcnJvciBjb2RlOjwvbGFiZWw+PHNwYW4gbmctYmluZD0ic3RhdHVzIj48L3NwYW4+PC9kaXY+CiAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KPC9kaXY+CjxkaXYgaWQ9ImlGcmFtZVBsYWNlaG9sZGVyIj48L2Rpdj4KCjx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgPHRoZWFkPgogICAgPHRyPgogICAgICAgIDx0aD5GaWxlIElkPC90aD4KICAgICAgICA8dGg+RmlsZSBzaXplPC90aD4KICAgICAgICA8dGg+RmlsZSBuYW1lPC90aD4KICAgICAgICA8dGg+RmlsZSBNRDU8L3RoPgogICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICA8dHIgbmctcmVwZWF0PSJmaWxlIGluIHVwbG9hZGVkX2ZpbGVzIj4KICAgICAgICA8dGQ+e3tmaWxlLmZpbGVfaWR9fTwvdGQ+PHRkPnt7ZmlsZS5sZW5ndGh9fTwvdGQ+PHRkPnt7ZmlsZS5maWxlbmFtZX19PC90ZD48dGQ+e3tmaWxlLm1kNX19PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzIGdseXBoaWNvbiBnbHlwaGljb24tZG93bmxvYWQiIGhyZWY9Ii9ncmlkZnMve3tmaWxlLmNvbGxlY3Rpb25fbmFtZX19L3t7ZmlsZS5maWxlX2lkfX0vIj48L2E+CiAgICAgICAgPC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSIgbmctY2xpY2s9InJlbW92ZUZpbGUoJGluZGV4KSI+PC9idXR0b24+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8L3Rib2R5Pgo8L3RhYmxlPgoKPGZvcm0gaWQ9InVwbG9hZEZvcm0iIG5hbWU9InVwbG9hZEZvcm0iIG1ldGhvZD0nUE9TVCcgZW5jdHlwZT0nbXVsdGlwYXJ0L2Zvcm0tZGF0YScgdGFyZ2V0PSdzdWJtaXQtaWZyYW1lJyBhY3Rpb249Ii9ncmlkZnMvIj4KICAgIDxkaXYgY2xhc3M9ImZpbGUtbGlzdCIgaWQ9ImZpbGVMaXN0Ij4KICAgICAgICA8aW5wdXQgY2xhc3M9ImZpbGUtc2VsZWN0b3IiIG5hbWU9InVwbG9hZGVkZmlsZSIgdHlwZT0iZmlsZSIgb25jaGFuZ2U9ImFuZ3VsYXIuZWxlbWVudCh0aGlzKS5zY29wZSgpLmZpbGVOYW1lQ2hhbmdlZCh0aGlzKSIgLz4KICAgIDwvZGl2PgogICAgPGJ1dHRvbiAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBnbHlwaGljb24gZ2x5cGhpY29uLWNsb3VkLXVwbG9hZCIgbmctY2xpY2s9InVwbG9hZEZpbGUoKSIgPiBVcGxvYWQgPC9idXR0b24+CjwvZm9ybT4=')
},
{
'name': '/app/partials/show_json.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiPkRldGFpbHM8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8ZGl2IGpzb24taHVtYW49Im1vZGVsIj48L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiIG5nLWNsaWNrPSJjYW5jZWwoKSI+Q2xvc2U8L2J1dHRvbj4KPC9kaXY+')
},
{
'name': '/app/partials/singleitemview.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxvYmplY3R2aWV3IGNvbmZpZy1pZD0iY29uZmlnSWQiIGl0ZW0taWQ9Iml0ZW1JZCIgLz4KPC9kaXY+')
},
{
'name': '/app/partials/page.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgICAgICA8ZGl2IG5nLXJlcGVhdD0iZmllbGQgaW4gcGFnZS5maWVsZHMiPgogICAgICAgICAgICA8ZmllbGQgaXRlbT0iZmllbGQiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/partials/pageholder.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgICAgICA8ZGl2IG5nLXJlcGVhdD0icGFnZSBpbiBwYWdlUmVmcyI+CiAgICAgICAgICAgIDxwYWdlIHBhZ2VpZD0icGFnZS5wYWdlSWQiPjwvcGFnZT4KICAgICAgICA8L2Rpdj4KPC9kaXY+')
},
{
'name': '/app/partials/login.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjxodG1sIG5nLWFwcD0ibXlBcHAiPgo8aGVhZCBsYW5nPSJlbiI+CiAgICA8bWV0YSBjaGFyc2V0PSJVVEYtOCI+CiAgICA8dGl0bGU+TG9naW48L3RpdGxlPgo8L2hlYWQ+Cjxib2R5ICByb2xlPSJkb2N1bWVudCIgbmctY29udHJvbGxlcj0iQWRtaW5NYWluQ3RybCI+CiAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0ibmF2YmFyLWhlYWRlciI+CiAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvIj5Mb2dpbjwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj48YSBocmVmPSIvIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PjwhLS0vLm5hdi1jb2xsYXBzZSAtLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgICAgICAgPGRpdiBjbGFzcz0ianVtYm90cm9uIj4KICAgICAgICAgICAgPGgzICBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+TG9naW48L2gzPgogICAgICAgICAgICA8ZGl2IG5nLWJpbmQ9ImVycm9yIj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlciBuYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJ1c2VybmFtZSIgdHlwZT0idGV4dCIgbmFtZT0idXNlcm5hbWUiIG5nLW1vZGVsPSJ1c2VybmFtZSIvPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJoYXZlQWNjb3VudCIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPkkgaGF2ZSBwYXNzd29yZDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QYXNzd29yZDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgbmctbW9kZWw9InBhc3N3b3JkIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIG5nLXNob3c9IiFoYXZlQWNjb3VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QYXNzd29yZCBhZ2FpbjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkX3JlIiBuYW1lPSJwYXNzd29yZF9yZSIgbmctbW9kZWw9InBhc3N3b3JkX3JlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIG5nLXNob3c9ImhhdmVBY2NvdW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0ibG9naW5idG4iIHZhbHVlPSJMb2dpbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmctY2xpY2s9ImxvZ2luKCkiPkxvZ2luPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIG5nLXNob3c9IiFoYXZlQWNjb3VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InNpZ251cGJ0biIgdmFsdWU9IkxvZ2luIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ic2lnbnVwKCkiPkNyZWF0ZSBhY2NvdW50PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgPGRpdiBuZy1zaG93PSJsb2dnZWRJbigpIj5XZWxjb21lPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGlkPSJzdGF0dXMiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPHNjcmlwdCBzcmM9Ii8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzEuMTEuMS9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSIvL25ldGRuYS5ib290c3RyYXBjZG4uY29tL2Jvb3RzdHJhcC8zLjEuMS9qcy9ib290c3RyYXAubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4xLjEvY3NzL2Jvb3RzdHJhcC5taW4uY3NzIiAvPgoKICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXIvYW5ndWxhci5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXJvdXRlL2FuZ3VsYXItcm91dGUuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1ib290c3RyYXAvdWktYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC10cGxzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy91dGlscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJqcy9zZXJ2aWNlcy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ianMvY29udHJvbGxlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2ZpbHRlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImpzL2RpcmVjdGl2ZXMuanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgc3JjPSIvL3Jhd2dpdGh1Yi5jb20vYW5ndWxhci11aS91aS1zb3J0YWJsZS9tYXN0ZXIvc3JjL3NvcnRhYmxlLmpzIj48L3NjcmlwdD4KPC9ib2R5Pgo8L2h0bWw+Cg==')
},
{
'name': '/app/partials/formview.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxlcnJvci1iYW5uZXI+PC9lcnJvci1iYW5uZXI+CiAgICA8Zm9ybT4KICAgICAgICA8ZGl2PgogICAgICAgICAgICA8aDE+e3tmb3JtLnRpdGxlfX08L2gxPgogICAgICAgIDwvZGl2PgogICAgICAgIDx1bD4KICAgICAgICAgICAgPGxpIG5nLXJlcGVhdD0iZmllbGQgaW4gZm9ybS5maWVsZHMiPgogICAgICAgICAgICAgICAgPGZpZWxkIGl0ZW09ImZpZWxkIiB2YWw9ImRhdGFbZmllbGQubmFtZV0iPjwvZmllbGQ+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgPC91bD4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJvblN1Ym1pdCgpIj5TdWJtaXQ8L2J1dHRvbj4KICAgIDwvZm9ybT4KPC9kaXY+')
},
{
'name': '/app/partials/list.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxkaXYgbmctc2hvdz0iaGFzRXJyb3IiIGNsYXNzPSJiZy13YXJuaW5nIj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIgZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgcHVsbC1yaWdodCIgbmctY2xpY2s9ImNsZWFyRXJyb3IoKTsiPjwvYnV0dG9uPgogICAgICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+PC9kaXY+CiAgICAgICAgPGRpdiBuZy1iaW5kPSJzdGF0dXNfZGF0YSI+PC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8aDM+e3t0aXRsZX19PC9oMz4KICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgIDx0aGVhZD4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aD5JZDwvdGg+CiAgICAgICAgICAgIDx0aD5OYW1lPC90aD4KICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgIDx0ciBuZy1yZXBlYXQ9Imxpc3QgaW4gbGlzdHMiPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0iIy97e3NlcnZpY2VOYW1lfX0ve3tsaXN0Ll9pZH19LyI+e3tsaXN0Ll9pZH19PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZD48YSBocmVmPSIjL3t7c2VydmljZU5hbWV9fS97e2xpc3QuX2lkfX0vIj57e2xpc3QudGl0bGV9fTwvYT48L3RkPgogICAgICAgIDwvdHI+CiAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CgogICAgPGRpdiBuZy1yZXBlYXQ9ImxpbmsgaW4gbGlua3MiPgogICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGhyZWY9Int7bGluay5ocmVmfX0iPnt7bGluay50aXRsZX19PC9hPiZuYnNwOwogICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/partials/home.html', 'data': base64.b64decode('ICAgIDxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii8iPkNvc21vcyBUZXJtaW5hbDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyI+SG9tZTwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIjL2xpc3RzLyI+TGlzdHM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIy9yb2xlcyI+Um9sZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+IDxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+IDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9IiFsb2dnZWRJbigpIj48YSBocmVmPSIvbG9naW4uaHRtbCI+TG9naW48L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgoKICAgICAgICA8ZXJyb3ItYmFubmVyPjwvZXJyb3ItYmFubmVyPgoKICAgICAgICA8aDM+T3BlcmF0aW9uczwvaDM+CiAgICAgICAgPGZvcm0gY2xhc3M9ImJhc2ljLW9wZXJhdGlvbnMiIHJvbGU9ImZvcm0iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5TZXJ2aWNlIFVSTCAocmVsYXRpdmUpICo8L2xhYmVsPgogICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJuYW1lIiB0eXBlPSJ0ZXh0IiBuYW1lPSJuYW1lIiBuZy1tb2RlbD0ic2VydmljZSIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsPkNvbHVtbnMgW0dFVF08L2xhYmVsPgogICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJjb2x1bW5zIiB0eXBlPSJ0ZXh0IiBuYW1lPSJjb2x1bW5zIiBuZy1tb2RlbD0iY29sdW1ucyIgcGxhY2Vob2xkZXI9Im5hbWUsYWRkcmVzcyIgLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsPkZpbHRlciBbR0VUXTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImZpbHRlciIgdHlwZT0idGV4dCIgbmFtZT0iZmlsdGVyIiBuZy1tb2RlbD0iZmlsdGVyIiBwbGFjZWhvbGRlcj0neyJuYW1lIjoiQWJyYWhhbSJ9Jy8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5EYXRhIFsqIFBPU1R8UFVUXTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8ZGl2IHVpLWFjZT0ieydtb2RlJzonanNvbid9IiBuZy1tb2RlbD0iZGF0YSI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+UmVzdWx0PC9sYWJlbD4KICAgICAgICAgICAgICAgIDxkaXYgdWktYWNlPSJ7J21vZGUnOidqc29uJ30iIG5nLW1vZGVsPSJyZXN1bHQiPjwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJnZXQoKSI+ICBHRVQgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJwb3N0KCkiPiBQT1NUIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1pbmZvIiBuZy1jbGljaz0icHV0KCkiPiAgUFVUIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1kYW5nZXIiIG5nLWNsaWNrPSJkZWxldGUoKSI+REVMRVRFPC9idXR0b24+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZm9ybT4KICAgICAgICA8L2Rpdj4=')
},
{
'name': '/app/partials/adduser.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLXNob3c9IiFpc1VwZGF0aW5nIj5DcmVhdGUgbmV3IHVzZXI8L2gzPgogICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgbmctc2hvdz0iaXNVcGRhdGluZyI+VXBkYXRlIHVzZXI8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc2Vycm9yIj5UaGVyZSBpcyBhbiBlcnJvciEhITwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPlVzZXJuYW1lPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnVzZXJuYW1lIiBuZy1yZWFkb25seT0iaXNVcGRhdGluZyI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPlBhc3N3b3JkPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0idXNlci5wYXNzd29yZCIgbmctc2hvdz0iIWlzVXBkYXRpbmciIC8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkIiAgbmctc2hvdz0iaXNVcGRhdGluZyIKICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iTGVhdmUgYmxhbmsgdG8ga2VlcCBjdXJyZW50IHBhc3N3b3JkIiAvPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTMgY29udHJvbC1sYWJlbCI+UGFzc3dvcmQgYWdhaW48L2xhYmVsPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkX3JlIiBuZy1zaG93PSIhaXNVcGRhdGluZyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkX3JlIiBuZy1zaG93PSJpc1VwZGF0aW5nIgogICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJMZWF2ZSBibGFuayB0byBrZWVwIGN1cnJlbnQgcGFzc3dvcmQiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPkVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0idXNlci5lbWFpbCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIj5Sb2xlczwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCI+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWhvdmVyIj4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TSUQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+Jm5ic3A7PC90aD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGVfc2lkIGluIHVzZXIucm9sZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNwYW4+e3tnZXRSb2xlTmFtZShyb2xlX3NpZCk7fX08L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxzcGFuPnt7cm9sZV9zaWR9fTwvc3Bhbj4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciIgbmctY2xpY2s9InJlbW92ZVJvbGUoJGluZGV4KSI+eDwvYnV0dG9uPiA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0ic2VsZWN0ZWRfcm9sZSIgbmctb3B0aW9ucz0icm9sZS5zaWQgYXMgcm9sZS5uYW1lIGZvciByb2xlIGluIHJvbGVzIj48L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0iYWRkUm9sZShzZWxlY3RlZF9yb2xlKSI+QWRkPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib2soKSI+T0s8L2J1dHRvbj4KICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4td2FybmluZyIgbmctY2xpY2s9ImNhbmNlbCgpIj5DYW5jZWw8L2J1dHRvbj4KPC9kaXY+')
},
{
'name': '/app/partials/users.html', 'data': base64.b64decode('PGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQiIG5nLWNsaWNrPSJjbGVhckVycm9yKCk7Ij48L2J1dHRvbj4KICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+PC9kaXY+CiAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KPC9kaXY+Cgo8aDM+VXNlcnM8L2gzPgoKPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICA8dGhlYWQ+CiAgICA8dHI+CiAgICAgICAgPHRoPk5hbWU8L3RoPgogICAgICAgIDx0aD5FbWFpbDwvdGg+CiAgICAgICAgPHRoPiZuYnNwOzwvdGg+CiAgICA8L3RyPgogICAgPC90aGVhZD4KICAgIDx0Ym9keT4KICAgIDx0ciBuZy1yZXBlYXQ9InVzZXIgaW4gdXNlcnMiPgogICAgICAgIDx0ZD57e3VzZXIudXNlcm5hbWV9fTwvdGQ+PHRkPnt7dXNlci5lbWFpbH19PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLXdhcm5pbmcgZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0IiBuZy1jbGljaz0iZWRpdFVzZXIoJGluZGV4KTsiPjwvYnV0dG9uPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIgZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUiIG5nLWNsaWNrPSJyZW1vdmVVc2VyKCRpbmRleCk7Ij48L2J1dHRvbj4KICAgICAgICA8L3RkPgogICAgPC90cj4KICAgIDwvdGJvZHk+CjwvdGFibGU+Cgo8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJhZGRVc2VyKCdsZycpIj5DcmVhdGUgdXNlcjwvYnV0dG9uPgo=')
},
{
'name': '/app/partials/install.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyI+Q29zbW9zIEZyYW1ld29yazwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIy9ob21lLyI+RGF0YSBDb25zb2xlPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iL2xvZ291dC8iPkxvZ291dCBbe3t1c2VyTmFtZX19XTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9IiFsb2dnZWRJbigpIj48YSBocmVmPSIvIy9sb2dpbi8iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGVycm9yLWJhbm5lcj48L2Vycm9yLWJhbm5lcj4KICAgIDxkaXYgbmctc2hvdz0ibG9nZ2VkSW4oKSI+CiAgICAgICAgPGgxPkluc3RhbGwgYXBwbGljYXRpb248L2gxPgoKICAgICAgICA8Zm9ybSBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iL2FwcGxpY2F0aW9uL2luc3RhbGwvIj4KICAgICAgICAgICAgQXBwbGljYXRpb24gcGFja2FnZTogPGlucHV0IG5hbWU9ImFwcGxpY2F0aW9uIiB0eXBlPSJmaWxlIi8+PGJyLz4KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiAgICAgICBJbnN0YWxsICAgICAgICIvPgogICAgICAgIDwvZm9ybT4KICAgIDwvZGl2PgogICAgPGRpdiBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+CiAgICAgICAgPHA+WW91IHNob3VsZCBsb2dpbiAoYXMgYWRtaW4pIHRvIGluc3RhbGwgYW4gYXBwbGljYXRpb24uPC9wPgogICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/partials/addrole.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLXNob3c9IiFpc1VwZGF0aW5nIj5DcmVhdGUgbmV3IHJvbGU8L2gzPgogICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgbmctc2hvdz0iaXNVcGRhdGluZyI+VXBkYXRlIHJvbGU8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc2Vycm9yIj5UaGVyZSBpcyBhbiBlcnJvciEhITwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0yIGNvbnRyb2wtbGFiZWwiPk5hbWUgKjwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZS5uYW1lIiBwbGFjZWhvbGRlcj0iUm9sZSBuYW1lIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTIgY29udHJvbC1sYWJlbCI+U0lEPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZS5zaWQiIG5nLXJlYWRvbmx5PSJpc1VwZGF0aW5nIiBwbGFjZWhvbGRlcj0iT3B0aW9uYWwsIHdpbGwgYmUgZ2VuZXJhdGVkIGlmIGxlZnQgZW1wdHkiPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIj5Sb2xlIGl0ZW1zPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEwIj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWNjZXNzIHR5cGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC14cy0yIj5PYmplY3QgbmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLXhzLTIiPlByb3BlcnR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjY2VzczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGVfaXRlbSBpbiByb2xlLnJvbGVfaXRlbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZV9pdGVtLnR5cGUiIG5nLW9wdGlvbnM9ImFjY2Vzc190eXBlLm5hbWUgYXMgYWNjZXNzX3R5cGUuZGlzcGxheSBmb3IgYWNjZXNzX3R5cGUgaW4gYWNjZXNzX3R5cGVzIj48L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbC14cy0yIj48aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0idGV4dCIgbmctbW9kZWw9InJvbGVfaXRlbS5vYmplY3RfbmFtZSIgLz4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wteHMtMiI+PGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIHR5cGU9InRleHQiIG5nLW1vZGVsPSJyb2xlX2l0ZW0ucHJvcGVydHlfbmFtZSIgLz4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0icm9sZV9pdGVtLmFjY2Vzc19iaXRzLnJlYWQiIC8+IFJlYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InJvbGVfaXRlbS5hY2Nlc3NfYml0cy5pbnNlcnQiIC8+IEluc2VydAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0icm9sZV9pdGVtLmFjY2Vzc19iaXRzLndyaXRlIiAvPiBXcml0ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0icm9sZV9pdGVtLmFjY2Vzc19iaXRzLmRlbGV0ZSIgLz4gRGVsZXRlCiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIiIG5nLWNsaWNrPSJyZW1vdmVSb2xlSXRlbSgkaW5kZXgpIj54PC9idXR0b24+IDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI1Ij48YnV0dG9uIG5nLWNsaWNrPSJhZGRSb2xlSXRlbSgpIj5BZGQ8L2J1dHRvbj4gPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib2soKSI+T0s8L2J1dHRvbj4KICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4td2FybmluZyIgbmctY2xpY2s9ImNhbmNlbCgpIj5DYW5jZWw8L2J1dHRvbj4KPC9kaXY+')
}]
