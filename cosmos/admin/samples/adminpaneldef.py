# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/.bowerrc', 'data': base64.b64decode('ewogICJkaXJlY3RvcnkiOiAiYXBwL2Jvd2VyX2NvbXBvbmVudHMiCn0=')
},
{
'name': '/bower.json', 'data': base64.b64decode('ewogICJuYW1lIjogImNvc21vcy1hZG1pbi1wYW5lbCIsCiAgImRlc2NyaXB0aW9uIjogIkFkbWluIHBhbmVsIGZvciBjb3Ntb3MgZnJhbWV3b3JrIiwKICAidmVyc2lvbiI6ICIwLjAuMCIsCiAgImhvbWVwYWdlIjogImh0dHA6Ly9jb3Ntb3NmcmFtZXdvcmsuY29tIiwKICAibGljZW5zZSI6ICJNSVQiLAogICJwcml2YXRlIjogdHJ1ZSwKICAiZGVwZW5kZW5jaWVzIjogewogICAgImFuZ3VsYXIiOiAiMS4yLngiLAogICAgImFuZ3VsYXItcm91dGUiOiAiMS4yLngiLAogICAgImFuZ3VsYXItbG9hZGVyIjogIjEuMi54IiwKICAgICJhbmd1bGFyLW1vY2tzIjogIn4xLjMueCIsCiAgICAiaHRtbDUtYm9pbGVycGxhdGUiOiAifjQuMy4wIiwKICAgICJhbmd1bGFyLWJvb3RzdHJhcCI6ICJ+MC4xMS54IiwKICAgICJhbmd1bGFyLXVpLXNvcnRhYmxlIjoifjAuMTIueCIsCiAgICAiYW5ndWxhci11aS1hY2UiOiJ+MC4xLngiLAogICAgImFuZ3VsYXItanNvbi1odW1hbiI6In4xLjIueCIsCiAgICAiYW5ndWxhci1sb2NhbC1zdG9yYWdlIjogIiIsCiAgICAiYm9vdHN0cmFwIjogIiIsCiAgICAiYW5ndWxhci11aS1zZWxlY3QiOiAiIgogIH0sCiAgInJlc29sdXRpb25zIjogewogICAgImFuZ3VsYXIiOiAiMS4zLjEwIgogIH0KfQo=')
},
{
'name': '/LICENSE', 'data': base64.b64decode('VGhlIE1JVCBMaWNlbnNlCgpDb3B5cmlnaHQgKGMpIDIwMTAtMjAxNCBHb29nbGUsIEluYy4gaHR0cDovL2FuZ3VsYXJqcy5vcmcKClBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHkKb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgIlNvZnR3YXJlIiksIHRvIGRlYWwKaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cwp0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsCmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcwpmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOgoKVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW4KYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuCgpUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgpJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFCkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgpUSEUgU09GVFdBUkUuCgo=')
},
{
'name': '/app/login_providers.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjwhLS0gVE9ETzogQ29weSBucyBhbmQgc2NyaXB0IGZyb20gaW5kZXguaHRtbCByZWY6IGh0dHBzOi8vZG9jcy5hbmd1bGFyanMub3JnL2d1aWRlL2llLS0+CjxodG1sIG5nLWFwcD0iY29zbW9zVUlEZW1vIj4KPGhlYWQgbGFuZz0iZW4iPgogICAgPG1ldGEgY2hhcnNldD0iVVRGLTgiPgogICAgPHRpdGxlPkxvZ2luPC90aXRsZT4KPC9oZWFkPgo8Ym9keSAgcm9sZT0iZG9jdW1lbnQiIG5nLWNvbnRyb2xsZXI9IkFkbWluTWFpbkN0cmwiPgogICAgPGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPgogICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyI+Q29zbW9zIEZyYW1ld29yazwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iYWN0aXZlIj48YSBocmVmPSIvIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PjwhLS0vLm5hdi1jb2xsYXBzZSAtLT4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgICAgICAgPGRpdiBjbGFzcz0ianVtYm90cm9uIj4KICAgICAgICAgICAgPGgzICBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+TG9naW48L2gzPgogICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgPGEgY2xhc3M9ImJ0biBidG4tc21hbGwgYnRuLXByaW1hcnkiIGhyZWY9Ii9sb2dpbi9nb29nbGUvIj5Hb29nbGU8L2E+CiAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYnRuIGJ0bi1zbWFsbCBidG4tcHJpbWFyeSIgaHJlZj0iL2xvZ2luL2ZhY2Vib29rZ3JhcGgvIj5GYWNlYm9vazwvYT4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXNtYWxsIGJ0bi1wcmltYXJ5IiBocmVmPSIvbG9naW4vZ2l0aHViLyI+R2l0aHViPC9hPgogICAgICAgICAgICAgICAgPGJyIC8+CiAgICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL2xvZ2luL29wZW5pZC8iIG1ldGhvZD0iZ2V0Ij4KICAgICAgICAgICAgICAgICAgICA8bGFiZWw+T3BlbmlkPC9sYWJlbD48aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0ib3BlbmlkLm9wX2VuZHBvaW50Ij4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iTG9naW4iPgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgPGhyIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8Zm9ybSBuZy1zaG93PSIhbG9nZ2VkSW4oKSIgcm9sZT0iZm9ybSIgbWV0aG9kPSJwb3N0IiBhY3Rpb249Ii9sb2dpbi8iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlVzZXIgbmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIGlkPSJ1c2VybmFtZSIgdHlwZT0idGV4dCIgbmFtZT0idXNlcm5hbWUiLz4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlBhc3N3b3JkPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0icGFzc3dvcmQiIGlkPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiIC8+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0idW5wd2Rsb2dpbiIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iTG9naW4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIC8+CiAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgIDxkaXYgbmctc2hvdz0ibG9nZ2VkSW4oKSI+V2VsY29tZTwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBpZD0ic3RhdHVzIj48L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxzY3JpcHQgc3JjPSIvL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8xLjExLjEvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iLy9uZXRkbmEuYm9vdHN0cmFwY2RuLmNvbS9ib290c3RyYXAvMy4xLjEvanMvYm9vdHN0cmFwLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii8vbmV0ZG5hLmJvb3RzdHJhcGNkbi5jb20vYm9vdHN0cmFwLzMuMS4xL2Nzcy9ib290c3RyYXAubWluLmNzcyIgLz4KICAgIDxzY3JpcHQgc3JjPSIvL3Jhd2dpdGh1Yi5jb20vYW5ndWxhci11aS91aS1zb3J0YWJsZS9tYXN0ZXIvc3JjL3NvcnRhYmxlLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyL2FuZ3VsYXIuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1yb3V0ZS9hbmd1bGFyLXJvdXRlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLWJvb3RzdHJhcC91aS1ib290c3RyYXAtdHBscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy91dGlscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9zZXJ2aWNlcy9zZXJ2aWNlcy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9jb250cm9sbGVycy9jb250cm9sbGVycy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9maWx0ZXJzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJsaWIvY29zbW9zL2pzL2RpcmVjdGl2ZXMvZGlyZWN0aXZlcy5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9ImpzL2FwcC5qcyI+PC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPgo=')
},
{
'name': '/app/index.html', 'data': base64.b64decode('PCFET0NUWVBFIGh0bWw+CjwhLS1baWYgbHQgSUUgN10+ICAgICAgPGh0bWwgeG1sbnM6bmc9Imh0dHA6Ly9hbmd1bGFyanMub3JnIiBsYW5nPSJlbiIgbmctYXBwPSJjb3Ntb3NVSURlbW8iIG5nLWNvbnRyb2xsZXI9IkFkbWluTWFpbkN0cmwiIGNsYXNzPSJuby1qcyBsdC1pZTkgbHQtaWU4IGx0LWllNyI+IDwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDddPiAgICAgICAgIDxodG1sIHhtbG5zOm5nPSJodHRwOi8vYW5ndWxhcmpzLm9yZyIgbGFuZz0iZW4iIG5nLWFwcD0iY29zbW9zVUlEZW1vIiBuZy1jb250cm9sbGVyPSJBZG1pbk1haW5DdHJsIiBjbGFzcz0ibm8tanMgbHQtaWU5IGx0LWllOCI+IDwhW2VuZGlmXS0tPgo8IS0tW2lmIElFIDhdPiAgICAgICAgIDxodG1sIHhtbG5zOm5nPSJodHRwOi8vYW5ndWxhcmpzLm9yZyIgbGFuZz0iZW4iIG5nLWFwcD0iY29zbW9zVUlEZW1vIiBuZy1jb250cm9sbGVyPSJBZG1pbk1haW5DdHJsIiBjbGFzcz0ibm8tanMgbHQtaWU5Ij4gPCFbZW5kaWZdLS0+CjwhLS1baWYgZ3QgSUUgOF0+PCEtLT4gPGh0bWwgeG1sbnM6bmc9Imh0dHA6Ly9hbmd1bGFyanMub3JnIiBsYW5nPSJlbiIgbmctYXBwPSJjb3Ntb3NVSURlbW8iIG5nLWNvbnRyb2xsZXI9IkFkbWluTWFpbkN0cmwiIGNsYXNzPSJuby1qcyI+IDwhLS08IVtlbmRpZl0tLT4KCjxoZWFkPgogIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICA8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPWVkZ2UiPgogIDx0aXRsZT5CZWVuZHU8L3RpdGxlPgogIDxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSIiPgogIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJib3dlcl9jb21wb25lbnRzL2h0bWw1LWJvaWxlcnBsYXRlL2Nzcy9ub3JtYWxpemUuY3NzIj4KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImJvd2VyX2NvbXBvbmVudHMvaHRtbDUtYm9pbGVycGxhdGUvY3NzL21haW4uY3NzIj4KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImxpYi9jb3Ntb3MvY3NzL2FwcC5jc3MiLz4KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImxpYi9jb3Ntb3MvY3NzL2NoYXJ0cy5jc3MiLz4KICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImxpYi9jc3MvYm9vdHN0cmFwLm1pbi5jc3MiIC8+CiAgPHN0eWxlPgogICAgICBib2R5IHsKICAgICAgICAgIHBhZGRpbmctdG9wOiA1MHB4OwogICAgICB9CiAgPC9zdHlsZT4KCiAgICA8IS0tW2lmIGx0ZSBJRSA4XT4KICAgICAgPHNjcmlwdD4KICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCduZy1pbmNsdWRlJyk7CiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmctcGx1cmFsaXplJyk7CiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmctdmlldycpOwoKICAgICAgICAvLyBPcHRpb25hbGx5IHRoZXNlIGZvciBDU1MKICAgICAgICBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCduZzppbmNsdWRlJyk7CiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmc6cGx1cmFsaXplJyk7CiAgICAgICAgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbmc6dmlldycpOwogICAgICA8L3NjcmlwdD4KICAgIDwhW2VuZGlmXS0tPgo8L2hlYWQ+Cjxib2R5IHJvbGU9ImRvY3VtZW50Ij4KICAgIDwhLS1baWYgbHQgSUUgN10+CiAgICA8cCBjbGFzcz0iYnJvd3NlaGFwcHkiPllvdSBhcmUgdXNpbmcgYW4gPHN0cm9uZz5vdXRkYXRlZDwvc3Ryb25nPiBicm93c2VyLiBQbGVhc2UgPGEgaHJlZj0iaHR0cDovL2Jyb3dzZWhhcHB5LmNvbS8iPnVwZ3JhZGUgeW91ciBicm93c2VyPC9hPiB0byBpbXByb3ZlIHlvdXIgZXhwZXJpZW5jZS48L3A+CiAgICA8IVtlbmRpZl0tLT4KCiAgICA8ZGl2IG5nLXZpZXc+PC9kaXY+CgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvaHRtbDUtYm9pbGVycGxhdGUvanMvdmVuZG9yL21vZGVybml6ci0yLjYuMi5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgc3JjPSJsaWIvanMvanF1ZXJ5Lm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2pzL2Jvb3RzdHJhcC5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9qcy9qcXVlcnktdWkuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9qcy9kMy5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImxpYi9qcy9ub3RpZnkubWluLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyL2FuZ3VsYXIuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci1yb3V0ZS9hbmd1bGFyLXJvdXRlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItYm9vdHN0cmFwL3VpLWJvb3RzdHJhcC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLWJvb3RzdHJhcC91aS1ib290c3RyYXAtdHBscy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXVpLXNvcnRhYmxlL3NvcnRhYmxlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItbG9jYWwtc3RvcmFnZS9kaXN0L2FuZ3VsYXItbG9jYWwtc3RvcmFnZS5taW4uanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYWNlLWJ1aWxkcy9zcmMtbWluLW5vY29uZmxpY3QvYWNlLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci11aS1hY2UvdWktYWNlLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IGRhdGEtcmVxdWlyZT0ibG9kYXNoLmpzQDIuNC4xIiBkYXRhLXNlbXZlcj0iMi40LjEiIHNyYz0ibGliL2pzL2xvZGFzaC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItanNvbi1odW1hbi9kaXN0L2FuZ3VsYXItanNvbi1odW1hbi5taW4uanMiPjwvc2NyaXB0PgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJib3dlcl9jb21wb25lbnRzL2FuZ3VsYXItanNvbi1odW1hbi9kaXN0L2FuZ3VsYXItanNvbi1odW1hbi5taW4uY3NzIiAvPgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9ImJvd2VyX2NvbXBvbmVudHMvYW5ndWxhci11aS1zZWxlY3QvZGlzdC9zZWxlY3QubWluLmpzIj48L3NjcmlwdD4KICAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iYm93ZXJfY29tcG9uZW50cy9hbmd1bGFyLXVpLXNlbGVjdC9kaXN0L3NlbGVjdC5taW4uY3NzIiAvPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJsaWIvY3NzL3NlbGVjdGl6ZS5ib290c3RyYXAzLmNzcyI+CgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvdXRpbHMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY2hhcnRoZWxwZXIuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvc2VydmljZXMvc2VydmljZXMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvY29udHJvbGxlcnMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvZmlsdGVycy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9kaXJlY3RpdmVzL2RpcmVjdGl2ZXMuanMiPjwvc2NyaXB0PgoKICAgIDxzY3JpcHQgc3JjPSJsaWIvY29zbW9zL2pzL2NvbnRyb2xsZXJzL0xvZ2luQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9jb250cm9sbGVycy9JbmRleEN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvVGVybWluYWxDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJsaWIvY29zbW9zL2pzL2NvbnRyb2xsZXJzL1VzZXJzQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9jb250cm9sbGVycy9Sb2xlc0N0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvTGlzdEN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvTGlzdERldGFpbEN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvRmlsZVVwbG9hZEN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvRm9ybURlc2lnbkN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvUGFnZURlc2lnbkN0cmwuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvRm9ybVZpZXdDdHJsLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJsaWIvY29zbW9zL2pzL2NvbnRyb2xsZXJzL1BhZ2VWaWV3Q3RybC5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvY29udHJvbGxlcnMvQXBwU3R1ZGlvQ3RybC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9jb250cm9sbGVycy9JdGVtRGVzaWduQ3RybC5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvZGlyZWN0aXZlcy9maWVsZC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9kaXJlY3RpdmVzL2ZpbHRlci5qcyI+PC9zY3JpcHQ+CgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvc2VydmljZXMvaHR0cC5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0ibGliL2Nvc21vcy9qcy9zZXJ2aWNlcy9jYWNoZWRsb2FkZXIuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvc2VydmljZXMvc2V0dGluZ3MuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9ImxpYi9jb3Ntb3MvanMvc2VydmljZXMvY29uc3RhbnRzLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJsaWIvY29zbW9zL2pzL3NlcnZpY2VzL3V0aWxzLmpzIj48L3NjcmlwdD4KCiAgICA8c2NyaXB0IHNyYz0ianMvYXBwLmpzIj48L3NjcmlwdD4KCjwvYm9keT4KPC9odG1sPgoK')
},
{
'name': '/app/img/.gitkeep', 'data': base64.b64decode('')
},
{
'name': '/app/lib/css/selectize.bootstrap3.css', 'data': base64.b64decode('LyoqCiAqIHNlbGVjdGl6ZS5ib290c3RyYXAzLmNzcyAodjAuOC41KSAtIEJvb3RzdHJhcCAzIFRoZW1lCiAqIENvcHlyaWdodCAoYykgMjAxMyBCcmlhbiBSZWF2aXMgJiBjb250cmlidXRvcnMKICoKICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzCiAqIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0OgogKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoKICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlcgogKiB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRgogKiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UKICogZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KICoKICogQGF1dGhvciBCcmlhbiBSZWF2aXMgPGJyaWFuQHRoaXJkcm91dGUuY29tPgogKi8KCi5zZWxlY3RpemUtY29udHJvbC5wbHVnaW4tZHJhZ19kcm9wLm11bHRpID4gLnNlbGVjdGl6ZS1pbnB1dCA+IGRpdi51aS1zb3J0YWJsZS1wbGFjZWhvbGRlciB7CiAgYmFja2dyb3VuZDogI2YyZjJmMiAhaW1wb3J0YW50OwogIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4wNikgIWltcG9ydGFudDsKICBib3JkZXI6IDAgbm9uZSAhaW1wb3J0YW50OwogIHZpc2liaWxpdHk6IHZpc2libGUgIWltcG9ydGFudDsKICAtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgMCAxMnB4IDRweCAjZmZmZmZmOwogICAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMCAwIDEycHggNHB4ICNmZmZmZmY7Cn0KCi5zZWxlY3RpemUtY29udHJvbC5wbHVnaW4tZHJhZ19kcm9wIC51aS1zb3J0YWJsZS1wbGFjZWhvbGRlcjo6YWZ0ZXIgewogIGNvbnRlbnQ6ICchJzsKICB2aXNpYmlsaXR5OiBoaWRkZW47Cn0KCi5zZWxlY3RpemUtY29udHJvbC5wbHVnaW4tZHJhZ19kcm9wIC51aS1zb3J0YWJsZS1oZWxwZXIgewogIC13ZWJraXQtYm94LXNoYWRvdzogMCAycHggNXB4IHJnYmEoMCwgMCwgMCwgMC4yKTsKICAgICAgICAgIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMik7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24taGVhZGVyIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgcGFkZGluZzogM3B4IDEycHg7CiAgYmFja2dyb3VuZDogI2Y4ZjhmODsKICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2QwZDBkMDsKICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweCA0cHggMCAwOwogICAgIC1tb3otYm9yZGVyLXJhZGl1czogNHB4IDRweCAwIDA7CiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHggNHB4IDAgMDsKfQoKLnNlbGVjdGl6ZS1kcm9wZG93bi1oZWFkZXItY2xvc2UgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDUwJTsKICByaWdodDogMTJweDsKICBtYXJnaW4tdG9wOiAtMTJweDsKICBmb250LXNpemU6IDIwcHggIWltcG9ydGFudDsKICBsaW5lLWhlaWdodDogMjBweDsKICBjb2xvcjogIzMzMzMzMzsKICBvcGFjaXR5OiAwLjQ7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24taGVhZGVyLWNsb3NlOmhvdmVyIHsKICBjb2xvcjogIzAwMDAwMDsKfQoKLnNlbGVjdGl6ZS1kcm9wZG93bi5wbHVnaW4tb3B0Z3JvdXBfY29sdW1ucyAub3B0Z3JvdXAgewogIGZsb2F0OiBsZWZ0OwogIGJvcmRlci10b3A6IDAgbm9uZTsKICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCAjZjJmMmYyOwogIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9Cgouc2VsZWN0aXplLWRyb3Bkb3duLnBsdWdpbi1vcHRncm91cF9jb2x1bW5zIC5vcHRncm91cDpsYXN0LWNoaWxkIHsKICBib3JkZXItcmlnaHQ6IDAgbm9uZTsKfQoKLnNlbGVjdGl6ZS1kcm9wZG93bi5wbHVnaW4tb3B0Z3JvdXBfY29sdW1ucyAub3B0Z3JvdXA6YmVmb3JlIHsKICBkaXNwbGF5OiBub25lOwp9Cgouc2VsZWN0aXplLWRyb3Bkb3duLnBsdWdpbi1vcHRncm91cF9jb2x1bW5zIC5vcHRncm91cC1oZWFkZXIgewogIGJvcmRlci10b3A6IDAgbm9uZTsKfQoKLnNlbGVjdGl6ZS1jb250cm9sLnBsdWdpbi1yZW1vdmVfYnV0dG9uIFtkYXRhLXZhbHVlXSB7CiAgcG9zaXRpb246IHJlbGF0aXZlOwogIHBhZGRpbmctcmlnaHQ6IDI0cHggIWltcG9ydGFudDsKfQoKLnNlbGVjdGl6ZS1jb250cm9sLnBsdWdpbi1yZW1vdmVfYnV0dG9uIFtkYXRhLXZhbHVlXSAucmVtb3ZlIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiAwOwogIHJpZ2h0OiAwOwogIGJvdHRvbTogMDsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgd2lkdGg6IDE3cHg7CiAgcGFkZGluZzogMXB4IDAgMCAwOwogIGZvbnQtc2l6ZTogMTJweDsKICBmb250LXdlaWdodDogYm9sZDsKICBjb2xvcjogaW5oZXJpdDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7CiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDApOwogIC13ZWJraXQtYm9yZGVyLXJhZGl1czogMCAycHggMnB4IDA7CiAgICAgLW1vei1ib3JkZXItcmFkaXVzOiAwIDJweCAycHggMDsKICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDAgMnB4IDJweCAwOwogIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9Cgouc2VsZWN0aXplLWNvbnRyb2wucGx1Z2luLXJlbW92ZV9idXR0b24gW2RhdGEtdmFsdWVdIC5yZW1vdmU6aG92ZXIgewogIGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC4wNSk7Cn0KCi5zZWxlY3RpemUtY29udHJvbC5wbHVnaW4tcmVtb3ZlX2J1dHRvbiBbZGF0YS12YWx1ZV0uYWN0aXZlIC5yZW1vdmUgewogIGJvcmRlci1sZWZ0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApOwp9Cgouc2VsZWN0aXplLWNvbnRyb2wucGx1Z2luLXJlbW92ZV9idXR0b24gLmRpc2FibGVkIFtkYXRhLXZhbHVlXSAucmVtb3ZlOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiBub25lOwp9Cgouc2VsZWN0aXplLWNvbnRyb2wucGx1Z2luLXJlbW92ZV9idXR0b24gLmRpc2FibGVkIFtkYXRhLXZhbHVlXSAucmVtb3ZlIHsKICBib3JkZXItbGVmdC1jb2xvcjogcmdiYSg3NywgNzcsIDc3LCAwKTsKfQoKLnNlbGVjdGl6ZS1jb250cm9sIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24sCi5zZWxlY3RpemUtaW5wdXQsCi5zZWxlY3RpemUtaW5wdXQgaW5wdXQgewogIGZvbnQtZmFtaWx5OiAiSGVsdmV0aWNhIE5ldWUiLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmOwogIGZvbnQtc2l6ZTogMTRweDsKICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBpbmhlcml0OwogIGxpbmUtaGVpZ2h0OiAyMHB4OwogIGNvbG9yOiAjMzMzMzMzOwp9Cgouc2VsZWN0aXplLWlucHV0LAouc2VsZWN0aXplLWNvbnRyb2wuc2luZ2xlIC5zZWxlY3RpemUtaW5wdXQuaW5wdXQtYWN0aXZlIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgY3Vyc29yOiB0ZXh0OwogIGJhY2tncm91bmQ6ICNmZmZmZmY7Cn0KCi5zZWxlY3RpemUtaW5wdXQgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB6LWluZGV4OiAxOwogIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICB3aWR0aDogMTAwJTsKICBwYWRkaW5nOiA2cHggMTJweDsKICBvdmVyZmxvdzogaGlkZGVuOwogIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7CiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7CiAgICAgLW1vei1ib3JkZXItcmFkaXVzOiA0cHg7CiAgICAgICAgICBib3JkZXItcmFkaXVzOiA0cHg7CiAgLXdlYmtpdC1ib3gtc2hhZG93OiBub25lOwogICAgICAgICAgYm94LXNoYWRvdzogbm9uZTsKICAtd2Via2l0LWJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgLW1vei1ib3gtc2l6aW5nOiBib3JkZXItYm94OwogICAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsKfQoKLnNlbGVjdGl6ZS1jb250cm9sLm11bHRpIC5zZWxlY3RpemUtaW5wdXQuaGFzLWl0ZW1zIHsKICBwYWRkaW5nOiA1cHggMTJweCAycHg7Cn0KCi5zZWxlY3RpemUtaW5wdXQuZnVsbCB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsKfQoKLnNlbGVjdGl6ZS1pbnB1dC5kaXNhYmxlZCwKLnNlbGVjdGl6ZS1pbnB1dC5kaXNhYmxlZCAqIHsKICBjdXJzb3I6IGRlZmF1bHQgIWltcG9ydGFudDsKfQoKLnNlbGVjdGl6ZS1pbnB1dC5mb2N1cyB7CiAgLXdlYmtpdC1ib3gtc2hhZG93OiBpbnNldCAwIDFweCAycHggcmdiYSgwLCAwLCAwLCAwLjE1KTsKICAgICAgICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDJweCByZ2JhKDAsIDAsIDAsIDAuMTUpOwp9Cgouc2VsZWN0aXplLWlucHV0LmRyb3Bkb3duLWFjdGl2ZSB7CiAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHggNHB4IDAgMDsKICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDRweCA0cHggMCAwOwogICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4IDRweCAwIDA7Cn0KCi5zZWxlY3RpemUtaW5wdXQgPiAqIHsKICBkaXNwbGF5OiAtbW96LWlubGluZS1zdGFjazsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgKmRpc3BsYXk6IGlubGluZTsKICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7CiAgem9vbTogMTsKfQoKLnNlbGVjdGl6ZS1jb250cm9sLm11bHRpIC5zZWxlY3RpemUtaW5wdXQgPiBkaXYgewogIHBhZGRpbmc6IDFweCAzcHg7CiAgbWFyZ2luOiAwIDNweCAzcHggMDsKICBjb2xvcjogIzMzMzMzMzsKICBjdXJzb3I6IHBvaW50ZXI7CiAgYmFja2dyb3VuZDogI2VmZWZlZjsKICBib3JkZXI6IDAgc29saWQgcmdiYSgwLCAwLCAwLCAwKTsKfQoKLnNlbGVjdGl6ZS1jb250cm9sLm11bHRpIC5zZWxlY3RpemUtaW5wdXQgPiBkaXYuYWN0aXZlIHsKICBjb2xvcjogI2ZmZmZmZjsKICBiYWNrZ3JvdW5kOiAjNDI4YmNhOwogIGJvcmRlcjogMCBzb2xpZCByZ2JhKDAsIDAsIDAsIDApOwp9Cgouc2VsZWN0aXplLWNvbnRyb2wubXVsdGkgLnNlbGVjdGl6ZS1pbnB1dC5kaXNhYmxlZCA+IGRpdiwKLnNlbGVjdGl6ZS1jb250cm9sLm11bHRpIC5zZWxlY3RpemUtaW5wdXQuZGlzYWJsZWQgPiBkaXYuYWN0aXZlIHsKICBjb2xvcjogIzgwODA4MDsKICBiYWNrZ3JvdW5kOiAjZmZmZmZmOwogIGJvcmRlcjogMCBzb2xpZCByZ2JhKDc3LCA3NywgNzcsIDApOwp9Cgouc2VsZWN0aXplLWlucHV0ID4gaW5wdXQgewogIG1heC13aWR0aDogMTAwJSAhaW1wb3J0YW50OwogIG1heC1oZWlnaHQ6IG5vbmUgIWltcG9ydGFudDsKICBtaW4taGVpZ2h0OiAwICFpbXBvcnRhbnQ7CiAgcGFkZGluZzogMCAhaW1wb3J0YW50OwogIG1hcmdpbjogMCAhaW1wb3J0YW50OwogIGxpbmUtaGVpZ2h0OiBpbmhlcml0ICFpbXBvcnRhbnQ7CiAgdGV4dC1pbmRlbnQ6IDAgIWltcG9ydGFudDsKICBiYWNrZ3JvdW5kOiBub25lICFpbXBvcnRhbnQ7CiAgYm9yZGVyOiAwIG5vbmUgIWltcG9ydGFudDsKICAtd2Via2l0LWJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsKICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmUgIWltcG9ydGFudDsKICAtd2Via2l0LXVzZXItc2VsZWN0OiBhdXRvICFpbXBvcnRhbnQ7Cn0KCi5zZWxlY3RpemUtaW5wdXQgPiBpbnB1dDpmb2N1cyB7CiAgb3V0bGluZTogbm9uZSAhaW1wb3J0YW50Owp9Cgouc2VsZWN0aXplLWlucHV0OjphZnRlciB7CiAgZGlzcGxheTogYmxvY2s7CiAgY2xlYXI6IGxlZnQ7CiAgY29udGVudDogJyAnOwp9Cgouc2VsZWN0aXplLWlucHV0LmRyb3Bkb3duLWFjdGl2ZTo6YmVmb3JlIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgcmlnaHQ6IDA7CiAgYm90dG9tOiAwOwogIGxlZnQ6IDA7CiAgZGlzcGxheTogYmxvY2s7CiAgaGVpZ2h0OiAxcHg7CiAgYmFja2dyb3VuZDogI2ZmZmZmZjsKICBjb250ZW50OiAnICc7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24gewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB6LWluZGV4OiAxMDsKICBtYXJnaW46IC0xcHggMCAwIDA7CiAgYmFja2dyb3VuZDogI2ZmZmZmZjsKICBib3JkZXI6IDFweCBzb2xpZCAjY2NjY2NjOwogIGJvcmRlci10b3A6IDAgbm9uZTsKICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDAgMCA0cHggNHB4OwogICAgIC1tb3otYm9yZGVyLXJhZGl1czogMCAwIDRweCA0cHg7CiAgICAgICAgICBib3JkZXItcmFkaXVzOiAwIDAgNHB4IDRweDsKICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMXB4IDNweCByZ2JhKDAsIDAsIDAsIDAuMSk7CiAgICAgICAgICBib3gtc2hhZG93OiAwIDFweCAzcHggcmdiYSgwLCAwLCAwLCAwLjEpOwogIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDsKICAgICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgICAgICAgICBib3gtc2l6aW5nOiBib3JkZXItYm94Owp9Cgouc2VsZWN0aXplLWRyb3Bkb3duIFtkYXRhLXNlbGVjdGFibGVdIHsKICBvdmVyZmxvdzogaGlkZGVuOwogIGN1cnNvcjogcG9pbnRlcjsKfQoKLnNlbGVjdGl6ZS1kcm9wZG93biBbZGF0YS1zZWxlY3RhYmxlXSAuaGlnaGxpZ2h0IHsKICBiYWNrZ3JvdW5kOiByZ2JhKDI1NSwgMjM3LCA0MCwgMC40KTsKICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDFweDsKICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDFweDsKICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDFweDsKfQoKLnNlbGVjdGl6ZS1kcm9wZG93biBbZGF0YS1zZWxlY3RhYmxlXSwKLnNlbGVjdGl6ZS1kcm9wZG93biAub3B0Z3JvdXAtaGVhZGVyIHsKICBwYWRkaW5nOiAzcHggMTJweDsKfQoKLnNlbGVjdGl6ZS1kcm9wZG93biAub3B0Z3JvdXA6Zmlyc3QtY2hpbGQgLm9wdGdyb3VwLWhlYWRlciB7CiAgYm9yZGVyLXRvcDogMCBub25lOwp9Cgouc2VsZWN0aXplLWRyb3Bkb3duIC5vcHRncm91cC1oZWFkZXIgewogIGNvbG9yOiAjOTk5OTk5OwogIGN1cnNvcjogZGVmYXVsdDsKICBiYWNrZ3JvdW5kOiAjZmZmZmZmOwp9Cgouc2VsZWN0aXplLWRyb3Bkb3duIC5hY3RpdmUgewogIGNvbG9yOiAjZmZmZmZmOwogIGJhY2tncm91bmQtY29sb3I6ICM0MjhiY2E7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24gLmFjdGl2ZS5jcmVhdGUgewogIGNvbG9yOiAjZmZmZmZmOwp9Cgouc2VsZWN0aXplLWRyb3Bkb3duIC5jcmVhdGUgewogIGNvbG9yOiByZ2JhKDUxLCA1MSwgNTEsIDAuNSk7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24tY29udGVudCB7CiAgbWF4LWhlaWdodDogMjAwcHg7CiAgb3ZlcmZsb3cteDogaGlkZGVuOwogIG92ZXJmbG93LXk6IGF1dG87Cn0KCi5zZWxlY3RpemUtY29udHJvbC5zaW5nbGUgLnNlbGVjdGl6ZS1pbnB1dCwKLnNlbGVjdGl6ZS1jb250cm9sLnNpbmdsZSAuc2VsZWN0aXplLWlucHV0IGlucHV0IHsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KCi5zZWxlY3RpemUtY29udHJvbC5zaW5nbGUgLnNlbGVjdGl6ZS1pbnB1dC5pbnB1dC1hY3RpdmUsCi5zZWxlY3RpemUtY29udHJvbC5zaW5nbGUgLnNlbGVjdGl6ZS1pbnB1dC5pbnB1dC1hY3RpdmUgaW5wdXQgewogIGN1cnNvcjogdGV4dDsKfQoKLnNlbGVjdGl6ZS1jb250cm9sLnNpbmdsZSAuc2VsZWN0aXplLWlucHV0OmFmdGVyIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgdG9wOiA1MCU7CiAgcmlnaHQ6IDE3cHg7CiAgZGlzcGxheTogYmxvY2s7CiAgd2lkdGg6IDA7CiAgaGVpZ2h0OiAwOwogIG1hcmdpbi10b3A6IC0zcHg7CiAgYm9yZGVyLWNvbG9yOiAjMDAwMDAwIHRyYW5zcGFyZW50IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50OwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiA1cHggNXB4IDAgNXB4OwogIGNvbnRlbnQ6ICcgJzsKfQoKLnNlbGVjdGl6ZS1jb250cm9sLnNpbmdsZSAuc2VsZWN0aXplLWlucHV0LmRyb3Bkb3duLWFjdGl2ZTphZnRlciB7CiAgbWFyZ2luLXRvcDogLTRweDsKICBib3JkZXItY29sb3I6IHRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICMwMDAwMDAgdHJhbnNwYXJlbnQ7CiAgYm9yZGVyLXdpZHRoOiAwIDVweCA1cHggNXB4Owp9Cgouc2VsZWN0aXplLWNvbnRyb2wucnRsLnNpbmdsZSAuc2VsZWN0aXplLWlucHV0OmFmdGVyIHsKICByaWdodDogYXV0bzsKICBsZWZ0OiAxN3B4Owp9Cgouc2VsZWN0aXplLWNvbnRyb2wucnRsIC5zZWxlY3RpemUtaW5wdXQgPiBpbnB1dCB7CiAgbWFyZ2luOiAwIDRweCAwIC0ycHggIWltcG9ydGFudDsKfQoKLnNlbGVjdGl6ZS1jb250cm9sIC5zZWxlY3RpemUtaW5wdXQuZGlzYWJsZWQgewogIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgb3BhY2l0eTogMC41Owp9Cgouc2VsZWN0aXplLWRyb3Bkb3duLAouc2VsZWN0aXplLWRyb3Bkb3duLmZvcm0tY29udHJvbCB7CiAgei1pbmRleDogMTAwMDsKICBoZWlnaHQ6IGF1dG87CiAgcGFkZGluZzogMDsKICBtYXJnaW46IDJweCAwIDAgMDsKICBiYWNrZ3JvdW5kOiAjZmZmZmZmOwogIGJvcmRlcjogMXB4IHNvbGlkICNjY2NjY2M7CiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjE1KTsKICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDRweDsKICAgICAtbW96LWJvcmRlci1yYWRpdXM6IDRweDsKICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDsKICAtd2Via2l0LWJveC1zaGFkb3c6IDAgNnB4IDEycHggcmdiYSgwLCAwLCAwLCAwLjE3NSk7CiAgICAgICAgICBib3gtc2hhZG93OiAwIDZweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4xNzUpOwp9Cgouc2VsZWN0aXplLWRyb3Bkb3duIC5vcHRncm91cC1oZWFkZXIgewogIGZvbnQtc2l6ZTogMTJweDsKICBsaW5lLWhlaWdodDogMS40Mjg1NzE0Mjk7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24gLm9wdGdyb3VwOmZpcnN0LWNoaWxkOmJlZm9yZSB7CiAgZGlzcGxheTogbm9uZTsKfQoKLnNlbGVjdGl6ZS1kcm9wZG93biAub3B0Z3JvdXA6YmVmb3JlIHsKICBkaXNwbGF5OiBibG9jazsKICBoZWlnaHQ6IDFweDsKICBtYXJnaW46IDlweCAwOwogIG1hcmdpbi1yaWdodDogLTEycHg7CiAgbWFyZ2luLWxlZnQ6IC0xMnB4OwogIG92ZXJmbG93OiBoaWRkZW47CiAgYmFja2dyb3VuZC1jb2xvcjogI2U1ZTVlNTsKICBjb250ZW50OiAnICc7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24tY29udGVudCB7CiAgcGFkZGluZzogNXB4IDA7Cn0KCi5zZWxlY3RpemUtZHJvcGRvd24taGVhZGVyIHsKICBwYWRkaW5nOiA2cHggMTJweDsKfQoKLnNlbGVjdGl6ZS1pbnB1dCB7CiAgbWluLWhlaWdodDogMzRweDsKfQoKLnNlbGVjdGl6ZS1pbnB1dC5kcm9wZG93bi1hY3RpdmUgewogIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNHB4OwogICAgIC1tb3otYm9yZGVyLXJhZGl1czogNHB4OwogICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4Owp9Cgouc2VsZWN0aXplLWlucHV0LmRyb3Bkb3duLWFjdGl2ZTo6YmVmb3JlIHsKICBkaXNwbGF5OiBub25lOwp9Cgouc2VsZWN0aXplLWlucHV0LmZvY3VzIHsKICBib3JkZXItY29sb3I6ICM2NmFmZTk7CiAgb3V0bGluZTogMDsKICAtd2Via2l0LWJveC1zaGFkb3c6IGluc2V0IDAgMXB4IDFweCByZ2JhKDAsIDAsIDAsIDAuMDc1KSwgMCAwIDhweCByZ2JhKDEwMiwgMTc1LCAyMzMsIDAuNik7CiAgICAgICAgICBib3gtc2hhZG93OiBpbnNldCAwIDFweCAxcHggcmdiYSgwLCAwLCAwLCAwLjA3NSksIDAgMCA4cHggcmdiYSgxMDIsIDE3NSwgMjMzLCAwLjYpOwp9Cgouc2VsZWN0aXplLWNvbnRyb2wubXVsdGkgLnNlbGVjdGl6ZS1pbnB1dC5oYXMtaXRlbXMgewogIHBhZGRpbmctcmlnaHQ6IDlweDsKICBwYWRkaW5nLWxlZnQ6IDlweDsKfQoKLnNlbGVjdGl6ZS1jb250cm9sLm11bHRpIC5zZWxlY3RpemUtaW5wdXQgPiBkaXYgewogIC13ZWJraXQtYm9yZGVyLXJhZGl1czogM3B4OwogICAgIC1tb3otYm9yZGVyLXJhZGl1czogM3B4OwogICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4Owp9CgouZm9ybS1jb250cm9sLnNlbGVjdGl6ZS1jb250cm9sIHsKICBoZWlnaHQ6IGF1dG87CiAgcGFkZGluZzogMDsKICBiYWNrZ3JvdW5kOiBub25lOwogIGJvcmRlcjogbm9uZTsKICAtd2Via2l0LWJvcmRlci1yYWRpdXM6IDA7CiAgICAgLW1vei1ib3JkZXItcmFkaXVzOiAwOwogICAgICAgICAgYm9yZGVyLXJhZGl1czogMDsKICAtd2Via2l0LWJveC1zaGFkb3c6IG5vbmU7CiAgICAgICAgICBib3gtc2hhZG93OiBub25lOwp9')
},
{
'name': '/app/lib/css/bootstrap.min.css', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/css/app.css', 'data': base64.b64decode('LyogYXBwIGNzcyBzdHlsZXNoZWV0ICovCgoubWVudSB7CiAgbGlzdC1zdHlsZTogbm9uZTsKICBib3JkZXItYm90dG9tOiAwLjFlbSBzb2xpZCBibGFjazsKICBtYXJnaW4tYm90dG9tOiAyZW07CiAgcGFkZGluZzogMCAwIDAuNWVtOwp9CgoubWVudTpiZWZvcmUgewogIGNvbnRlbnQ6ICJbIjsKfQoKLm1lbnU6YWZ0ZXIgewogIGNvbnRlbnQ6ICJdIjsKfQoKLm1lbnUgPiBsaSB7CiAgZGlzcGxheTogaW5saW5lOwp9CgoubWVudSA+IGxpOmJlZm9yZSB7CiAgY29udGVudDogInwiOwogIHBhZGRpbmctcmlnaHQ6IDAuM2VtOwp9CgoubWVudSA+IGxpOm50aC1jaGlsZCgxKTpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwogIHBhZGRpbmc6IDA7Cn0KCi5lZGl0b3J7CiAgICBtaW4td2lkdGg6IDQwMHB4Owp9CgouYWNlX2VkaXRvciB7CiAgICBtaW4taGVpZ2h0OiAyMDBweDsKfQoKLnRhYmxlLWhvdmVyIHRib2R5IHRyOmhvdmVyID4gdGQgewogICAgY3Vyc29yOiBwb2ludGVyOwogICAgY3Vyc29yOiBoYW5kOwp9')
},
{
'name': '/app/lib/cosmos/css/charts.css', 'data': base64.b64decode('LyogQmFyIGNoYXJ0IHN0eWxlICovCgouYmFyIHsKICBmaWxsOiBzdGVlbGJsdWU7Cn0KCi5iYXI6aG92ZXIgewogIGZpbGw6IGJyb3duOwp9CgouYXhpcyB7CiAgZm9udDogMTBweCBzYW5zLXNlcmlmOwp9CgouYXhpcyBwYXRoLAouYXhpcyBsaW5lIHsKICBmaWxsOiBub25lOwogIHN0cm9rZTogIzAwMDsKICBzaGFwZS1yZW5kZXJpbmc6IGNyaXNwRWRnZXM7Cn0KCi54LmF4aXMgcGF0aCB7CiAgZGlzcGxheTogbm9uZTsKfQoKLyogRU5EIEJhciBjaGFydCBzdHlsZSAqLwoKLyogTGluZSBDaGFydCBTdHlsZXMqLwoKLmF4aXMgcGF0aCwKLmF4aXMgbGluZSB7CiAgZmlsbDogbm9uZTsKICBzdHJva2U6ICMwMDA7CiAgc2hhcGUtcmVuZGVyaW5nOiBjcmlzcEVkZ2VzOwp9CgoueC5heGlzIHBhdGggewogIGRpc3BsYXk6IG5vbmU7Cn0KCi5saW5lIHsKICBmaWxsOiBub25lOwogIHN0cm9rZTogc3RlZWxibHVlOwogIHN0cm9rZS13aWR0aDogMS41cHg7Cn0KCi8qIEVORCBMaW5lIENoYXJ0IFN0eWxlcyovCgovKiBQaWUgY2hhcnQgc3R5bGUgKi8KLmFyYyBwYXRoIHsKICBzdHJva2U6ICNmZmY7Cn0KCi8qIEVuZCBQaWUgQ2hhcnQgU3R5bGUgKi8KCi5jaGFydEhvbGRlcgp7CiAgICB3aWR0aDo5ODBweDsKICAgIGhlaWdodDo1MjBweDsKICAgIGJvcmRlcjogMXB4IHNvbGlkOwogICAgb3ZlcmZsb3c6IGF1dG87Cn0KLmNoYXJ0ewogICAgd2lkdGg6OTcwcHg7CiAgICBoZWlnaHQ6NTEwcHg7Cn0KCg==')
},
{
'name': '/app/lib/cosmos/partials/show_json.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiPkRldGFpbHM8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8ZGl2IGpzb24taHVtYW49Im1vZGVsIj48L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9Im1vZGFsLWZvb3RlciI+CiAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXN1Y2Nlc3MiIG5nLWNsaWNrPSJjYW5jZWwoKSI+Q2xvc2U8L2J1dHRvbj4KPC9kaXY+')
},
{
'name': '/app/lib/cosmos/partials/login.html', 'data': base64.b64decode('ICAgIDxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIj4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii8iPkxvZ2luPC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSI+CiAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgPGxpIGNsYXNzPSJhY3RpdmUiPjxhIGhyZWY9Ii8iPkhvbWU8L2E+PC9saT4KICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+PCEtLS8ubmF2LWNvbGxhcHNlIC0tPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciB0aGVtZS1zaG93Y2FzZSIgcm9sZT0ibWFpbiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJqdW1ib3Ryb24iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgPGgzICBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+PHNwYW4gbmctc2hvdz0iaGF2ZUFjY291bnQiPkxvZ2luPC9zcGFuPjxzcGFuIG5nLXNob3c9IiFoYXZlQWNjb3VudCI+Q3JlYXRlIGFjY291bnQ8L3NwYW4+IDwvaDM+CiAgICAgICAgICAgICAgICA8ZGl2IG5nLWJpbmQ9ImVycm9yIj48L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgbmctc2hvdz0iIWxvZ2dlZEluKCkiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC14cy00Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlciBuYW1lPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0idXNlcm5hbWUiIHR5cGU9InRleHQiIG5hbWU9InVzZXJuYW1lIiBuZy1tb2RlbD0idXNlcm5hbWUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsPlBhc3N3b3JkPC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIgbmctbW9kZWw9InBhc3N3b3JkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCIgbmctc2hvdz0iIWhhdmVBY2NvdW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QYXNzd29yZCBhZ2FpbjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0icGFzc3dvcmQiIGlkPSJwYXNzd29yZF9yZSIgbmFtZT0icGFzc3dvcmRfcmUiIG5nLW1vZGVsPSJwYXNzd29yZF9yZSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIG5nLXNob3c9ImhhdmVBY2NvdW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImxvZ2luYnRuIiB2YWx1ZT0iTG9naW4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJsb2dpbigpIj5Mb2dpbjwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiIG5nLXNob3c9IiFoYXZlQWNjb3VudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPSJzaWdudXBidG4iIHZhbHVlPSJMb2dpbiIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmctY2xpY2s9InNpZ251cCgpIj5DcmVhdGUgYWNjb3VudDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGhyIGNvbG9yPSJncmVlbiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBuZy1zaG93PSJoYXZlQWNjb3VudCIgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBidG4teHMiICBuZy1jbGljaz0iaGF2ZUFjY291bnQ9ZmFsc2U7Ij5TaWduIHVwIGZvciBhIG5ldyBhY2NvdW50PC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG5nLXNob3c9IiFoYXZlQWNjb3VudCIgY2xhc3M9ImJ0biBidG4tc3VjY2VzcyBidG4teHMiICBuZy1jbGljaz0iaGF2ZUFjY291bnQ9dHJ1ZTsiPkkgYWxyZWFkeSBoYXZlIGFuIGFjY291bnQ8L2J1dHRvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICA8ZGl2IG5nLXNob3c9ImxvZ2dlZEluKCkiPldlbGNvbWU8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgaWQ9InN0YXR1cyI+PC9kaXY+CiAgICA8L2Rpdj4=')
},
{
'name': '/app/lib/cosmos/partials/terminal.html', 'data': base64.b64decode('ICAgIDxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii8jL3Rlcm1pbmFsLyI+VGVybWluYWw8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8jL2FwcHN0dWRpby8iPkFwcCBTdHVkaW88L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy9yb2xlcyI+Um9sZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+IDxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+IDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9IiFsb2dnZWRJbigpIj48YSBocmVmPSIvIy9sb2dpbi8/cmVkaXJlY3Q9L3Rlcm1pbmFsLyI+TG9naW48L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgICAgIDxlcnJvci1iYW5uZXI+PC9lcnJvci1iYW5uZXI+CgogICAgICAgIDxoMz5PcGVyYXRpb25zPC9oMz4KICAgICAgICA8Zm9ybSBjbGFzcz0iYmFzaWMtb3BlcmF0aW9ucyIgcm9sZT0iZm9ybSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsPlNlcnZpY2UgVVJMIChyZWxhdGl2ZSkgKjwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9Im5hbWUiIHR5cGU9InRleHQiIG5hbWU9Im5hbWUiIG5nLW1vZGVsPSJzZXJ2aWNlIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+Q29sdW1ucyBbR0VUXTwvbGFiZWw+CiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImZvcm0tY29udHJvbCIgaWQ9ImNvbHVtbnMiIHR5cGU9InRleHQiIG5hbWU9ImNvbHVtbnMiIG5nLW1vZGVsPSJjb2x1bW5zIiBwbGFjZWhvbGRlcj0ibmFtZSxhZGRyZXNzIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgICAgICA8bGFiZWw+RmlsdGVyIFtHRVRdPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiBpZD0iZmlsdGVyIiB0eXBlPSJ0ZXh0IiBuYW1lPSJmaWx0ZXIiIG5nLW1vZGVsPSJmaWx0ZXIiIHBsYWNlaG9sZGVyPSd7Im5hbWUiOiJBYnJhaGFtIn0nLz4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICAgICAgPGxhYmVsPkRhdGEgWyogUE9TVHxQVVRdPC9sYWJlbD4KICAgICAgICAgICAgICAgIDxkaXYgdWktYWNlPSJ7J21vZGUnOidqc29uJ30iIG5nLW1vZGVsPSJkYXRhIj48L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxsYWJlbD5SZXN1bHQ8L2xhYmVsPgogICAgICAgICAgICAgICAgPGRpdiB1aS1hY2U9InsnbW9kZSc6J2pzb24nfSIgbmctbW9kZWw9InJlc3VsdCI+PC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmctY2xpY2s9ImdldCgpIj4gIEdFVCA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSIgbmctY2xpY2s9InBvc3QoKSI+IFBPU1QgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWluZm8iIG5nLWNsaWNrPSJwdXQoKSI+ICBQVVQgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLWRhbmdlciIgbmctY2xpY2s9ImRlbGV0ZSgpIj5ERUxFVEU8L2J1dHRvbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9mb3JtPgogICAgICAgIDwvZGl2Pg==')
},
{
'name': '/app/lib/cosmos/partials/page.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgICAgICA8ZGl2IG5nLXJlcGVhdD0iZmllbGQgaW4gcGFnZS5maWVsZHMiPgogICAgICAgICAgICA8ZmllbGQgaXRlbT0iZmllbGQiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/lib/cosmos/partials/list.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxkaXYgbmctc2hvdz0iaGFzRXJyb3IiIGNsYXNzPSJiZy13YXJuaW5nIj4KICAgICAgICA8YnV0dG9uIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIgZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUgcHVsbC1yaWdodCIgbmctY2xpY2s9ImNsZWFyRXJyb3IoKTsiPjwvYnV0dG9uPgogICAgICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+PC9kaXY+CiAgICAgICAgPGRpdiBuZy1iaW5kPSJzdGF0dXNfZGF0YSI+PC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8aDM+e3t0aXRsZX19PC9oMz4KICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgIDx0aGVhZD4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aD5JZDwvdGg+CiAgICAgICAgICAgIDx0aD5OYW1lPC90aD4KICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgIDx0ciBuZy1yZXBlYXQ9Imxpc3QgaW4gbGlzdHMiPgogICAgICAgICAgICA8dGQ+PGEgaHJlZj0iIy97e3NlcnZpY2VOYW1lfX0ve3tsaXN0Ll9pZH19LyI+e3tsaXN0Ll9pZH19PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZD48YSBocmVmPSIjL3t7c2VydmljZU5hbWV9fS97e2xpc3QuX2lkfX0vIj57e2xpc3QudGl0bGV9fTwvYT48L3RkPgogICAgICAgIDwvdHI+CiAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CgogICAgPGRpdiBuZy1yZXBlYXQ9ImxpbmsgaW4gbGlua3MiPgogICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIGhyZWY9Int7bGluay5ocmVmfX0iPnt7bGluay50aXRsZX19PC9hPiZuYnNwOwogICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/lib/cosmos/partials/pageholder.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgICAgICA8ZGl2IG5nLXNob3c9InBhZ2VSZWZzICYmIHBhZ2VSZWZzLmxlbmd0aD4wIiBuZy1yZXBlYXQ9InBhZ2UgaW4gcGFnZVJlZnMiPgogICAgICAgICAgICA8cGFnZSBwYWdlaWQ9InBhZ2UucGFnZUlkIj48L3BhZ2U+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgbmctc2hvdz0icGFnZXMgJiYgcGFnZXMubGVuZ3RoPjAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXIgbmF2YmFyLWludmVyc2UgbmF2YmFyLWZpeGVkLXRvcCIgcm9sZT0ibmF2aWdhdGlvbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2YmFyLWJyYW5kIiBocmVmPSIvIj5iZWVuZHU8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXY+TGlzdCBvZiBwYWdlczwvZGl2PgogICAgICAgICAgICA8ZGl2ICBuZy1yZXBlYXQ9InBhZ2UgaW4gcGFnZXMiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iLyMvYS97e2FwcFNldHRpbmdzLnBhdGh9fS9wYWdlL3t7cGFnZS5faWR9fSI+e3twYWdlLnRpdGxlfX08L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKPC9kaXY+')
},
{
'name': '/app/lib/cosmos/partials/uploadfile.html', 'data': base64.b64decode('PHN0eWxlPgouZmlsZS1saXN0IHsKICAgIHBhZGRpbmctYm90dG9tOiAxMHB4Owp9Ci5maWxlLXNlbGVjdG9yewogICAgbWFyZ2luOiA1cHg7Cn0KPC9zdHlsZT4KCjxkaXYgbmctc2hvdz0iaGFzRXJyb3IiIGNsYXNzPSJiZy13YXJuaW5nIj4KICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICA8ZGl2PjxsYWJlbD5FcnJvciBjb2RlOjwvbGFiZWw+PHNwYW4gbmctYmluZD0ic3RhdHVzIj48L3NwYW4+PC9kaXY+CiAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KPC9kaXY+CjxkaXYgaWQ9ImlGcmFtZVBsYWNlaG9sZGVyIj48L2Rpdj4KCjx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgPHRoZWFkPgogICAgPHRyPgogICAgICAgIDx0aD5GaWxlIElkPC90aD4KICAgICAgICA8dGg+RmlsZSBzaXplPC90aD4KICAgICAgICA8dGg+RmlsZSBuYW1lPC90aD4KICAgICAgICA8dGg+RmlsZSBNRDU8L3RoPgogICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgPC90cj4KICAgIDwvdGhlYWQ+CiAgICA8dGJvZHk+CiAgICA8dHIgbmctcmVwZWF0PSJmaWxlIGluIHVwbG9hZGVkX2ZpbGVzIj4KICAgICAgICA8dGQ+e3tmaWxlLmZpbGVfaWR9fTwvdGQ+PHRkPnt7ZmlsZS5sZW5ndGh9fTwvdGQ+PHRkPnt7ZmlsZS5maWxlbmFtZX19PC90ZD48dGQ+e3tmaWxlLm1kNX19PC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzIGdseXBoaWNvbiBnbHlwaGljb24tZG93bmxvYWQiIGhyZWY9Ii9ncmlkZnMve3tmaWxlLmNvbGxlY3Rpb25fbmFtZX19L3t7ZmlsZS5maWxlX2lkfX0vIj48L2E+CiAgICAgICAgPC90ZD4KICAgICAgICA8dGQ+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSIgbmctY2xpY2s9InJlbW92ZUZpbGUoJGluZGV4KSI+PC9idXR0b24+CiAgICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8L3Rib2R5Pgo8L3RhYmxlPgoKPGZvcm0gbmctaW5pdD0ic2V0QWN0aW9uKCkiIGlkPSJ1cGxvYWRGb3JtIiBuYW1lPSJ1cGxvYWRGb3JtIiBtZXRob2Q9J1BPU1QnIGVuY3R5cGU9J211bHRpcGFydC9mb3JtLWRhdGEnIHRhcmdldD0nc3VibWl0LWlmcmFtZScgYWN0aW9uPSIvZ3JpZGZzLyI+CiAgICA8ZGl2IGNsYXNzPSJmaWxlLWxpc3QiIGlkPSJmaWxlTGlzdCI+CiAgICAgICAgPGlucHV0IGNsYXNzPSJmaWxlLXNlbGVjdG9yIiBuYW1lPSJ1cGxvYWRlZGZpbGUiIHR5cGU9ImZpbGUiIG9uY2hhbmdlPSJhbmd1bGFyLmVsZW1lbnQodGhpcykuc2NvcGUoKS5maWxlTmFtZUNoYW5nZWQodGhpcykiIC8+CiAgICA8L2Rpdj4KICAgIDxidXR0b24gIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgZ2x5cGhpY29uIGdseXBoaWNvbi1jbG91ZC11cGxvYWQiIG5nLWNsaWNrPSJ1cGxvYWRGaWxlKCkiID4gVXBsb2FkIDwvYnV0dG9uPgo8L2Zvcm0+')
},
{
'name': '/app/lib/cosmos/partials/widget-host.html', 'data': base64.b64decode('PGRpdiBuZy1pbmNsdWRlPSJsaXN0Q29uZmlndXJhdGlvbi53aWRnZXROYW1lIiAvPjwvZGl2Pg==')
},
{
'name': '/app/lib/cosmos/partials/appstudio.html', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/partials/page-design.html', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/partials/adduser.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLXNob3c9IiFpc1VwZGF0aW5nIj5DcmVhdGUgbmV3IHVzZXI8L2gzPgogICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgbmctc2hvdz0iaXNVcGRhdGluZyI+VXBkYXRlIHVzZXI8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc2Vycm9yIj5UaGVyZSBpcyBhbiBlcnJvciEhITwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPlVzZXJuYW1lPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnVzZXJuYW1lIiBuZy1yZWFkb25seT0iaXNVcGRhdGluZyI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPlBhc3N3b3JkPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InBhc3N3b3JkIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0idXNlci5wYXNzd29yZCIgbmctc2hvdz0iIWlzVXBkYXRpbmciIC8+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkIiAgbmctc2hvdz0iaXNVcGRhdGluZyIKICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj0iTGVhdmUgYmxhbmsgdG8ga2VlcCBjdXJyZW50IHBhc3N3b3JkIiAvPgoKICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTMgY29udHJvbC1sYWJlbCI+UGFzc3dvcmQgYWdhaW48L2xhYmVsPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tNSI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkX3JlIiBuZy1zaG93PSIhaXNVcGRhdGluZyI+CiAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0icGFzc3dvcmQiIGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJ1c2VyLnBhc3N3b3JkX3JlIiBuZy1zaG93PSJpc1VwZGF0aW5nIgogICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyPSJMZWF2ZSBibGFuayB0byBrZWVwIGN1cnJlbnQgcGFzc3dvcmQiIC8+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0zIGNvbnRyb2wtbGFiZWwiPkVtYWlsPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTUiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImVtYWlsIiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0idXNlci5lbWFpbCI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIj5Sb2xlczwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMCI+CiAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIHRhYmxlLWhvdmVyIj4KICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+TmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD5TSUQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+Jm5ic3A7PC90aD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGVfc2lkIGluIHVzZXIucm9sZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNwYW4+e3tnZXRSb2xlTmFtZShyb2xlX3NpZCk7fX08L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxzcGFuPnt7cm9sZV9zaWR9fTwvc3Bhbj4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciIgbmctY2xpY2s9InJlbW92ZVJvbGUoJGluZGV4KSI+eDwvYnV0dG9uPiA8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0ic2VsZWN0ZWRfcm9sZSIgbmctb3B0aW9ucz0icm9sZS5zaWQgYXMgcm9sZS5uYW1lIGZvciByb2xlIGluIHJvbGVzIj48L3NlbGVjdD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iYWRkLXVzZXItYWRkLXJvbGUtYnRuIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0iYWRkUm9sZShzZWxlY3RlZF9yb2xlKSI+QWRkPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgPGJ1dHRvbiBpZD0iYWRkLXVzZXItb2stYnRuIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib2soKSI+T0s8L2J1dHRvbj4KICAgIDxidXR0b24gaWQ9ImFkZC11c2VyLWNhbmNlbC1idG4iICBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIiBuZy1jbGljaz0iY2FuY2VsKCkiPkNhbmNlbDwvYnV0dG9uPgo8L2Rpdj4=')
},
{
'name': '/app/lib/cosmos/partials/roles.html', 'data': base64.b64decode('ICAgIDxkaXYgY2xhc3M9Im5hdmJhciBuYXZiYXItaW52ZXJzZSBuYXZiYXItZml4ZWQtdG9wIiByb2xlPSJuYXZpZ2F0aW9uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9Ii8jL3Rlcm1pbmFsLyI+VGVybWluYWw8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXYgbmF2YmFyLW5hdiI+CiAgICAgICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8jL2FwcHN0dWRpby8iPkFwcCBTdHVkaW88L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy9yb2xlcyI+Um9sZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+IDxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+IDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9IiFsb2dnZWRJbigpIj48YSBocmVmPSIvIy9sb2dpbi8/cmVkaXJlY3Q9L3Rlcm1pbmFsLyI+TG9naW48L2E+PC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+Cgo8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICAgICAgPGRpdj48bGFiZWw+RXJyb3IgY29kZTo8L2xhYmVsPjxzcGFuIG5nLWJpbmQ9InN0YXR1cyIgLz48L2Rpdj4KICAgICAgICA8ZGl2IG5nLWJpbmQ9InN0YXR1c19kYXRhIj48L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxoMz5Sb2xlczwvaDM+CgogICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSI+CiAgICAgICAgPHRoZWFkPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGg+U0lEPC90aD4KICAgICAgICAgICAgICAgIDx0aD5OYW1lPC90aD4KICAgICAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGUgaW4gcm9sZXMiPgogICAgICAgICAgICA8dGQ+e3tyb2xlLnNpZH19PC90ZD48dGQ+e3tyb2xlLm5hbWV9fTwvdGQ+CiAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLXdhcm5pbmcgZ2x5cGhpY29uIGdseXBoaWNvbi1lZGl0IiBuZy1jbGljaz0iZWRpdFJvbGUoJGluZGV4KTsiPjwvYnV0dG9uPgogICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0icmVtb3ZlLXJvbGUte3tyb2xlLnNpZH19IiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIiBuZy1jbGljaz0icmVtb3ZlUm9sZSgkaW5kZXgpOyI+PC9idXR0b24+CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KCiAgICA8YnV0dG9uIGlkPSJjcmVhdGUtcm9sZS1idG4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJhZGRSb2xlKCdsZycpIj5DcmVhdGUgcm9sZTwvYnV0dG9uPgo8L2Rpdj4=')
},
{
'name': '/app/lib/cosmos/partials/singleitemview.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxvYmplY3R2aWV3IGNvbmZpZy1pZD0iY29uZmlnSWQiIGl0ZW0taWQ9Iml0ZW1JZCIgLz4KPC9kaXY+')
},
{
'name': '/app/lib/cosmos/partials/addrole.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiIG5nLXNob3c9IiFpc1VwZGF0aW5nIj5DcmVhdGUgbmV3IHJvbGU8L2gzPgogICAgPGgzIGNsYXNzPSJtb2RhbC10aXRsZSIgbmctc2hvdz0iaXNVcGRhdGluZyI+VXBkYXRlIHJvbGU8L2gzPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICA8Zm9ybSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiByb2xlPSJmb3JtIj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc2Vycm9yIj5UaGVyZSBpcyBhbiBlcnJvciEhITwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImZvcm0tZ3JvdXAiPgogICAgICAgICAgICA8bGFiZWwgY2xhc3M9ImNvbC1zbS0yIGNvbnRyb2wtbGFiZWwiPk5hbWUgKjwvbGFiZWw+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS00Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZS5uYW1lIiBwbGFjZWhvbGRlcj0iUm9sZSBuYW1lIj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iZm9ybS1ncm91cCI+CiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz0iY29sLXNtLTIgY29udHJvbC1sYWJlbCI+U0lEPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTgiPgogICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiICBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0icm9sZS5zaWQiIG5nLXJlYWRvbmx5PSJpc1VwZGF0aW5nIiBwbGFjZWhvbGRlcj0iT3B0aW9uYWwsIHdpbGwgYmUgZ2VuZXJhdGVkIGlmIGxlZnQgZW1wdHkiPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJmb3JtLWdyb3VwIj4KICAgICAgICAgICAgPGxhYmVsIGNsYXNzPSJjb2wtc20tMiBjb250cm9sLWxhYmVsIj5Sb2xlIGl0ZW1zPC9sYWJlbD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEwIj4KICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSB0YWJsZS1ob3ZlciI+CiAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGg+QWNjZXNzIHR5cGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9ImNvbC14cy0yIj5PYmplY3QgbmFtZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iY29sLXhzLTIiPlByb3BlcnR5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoPkFjY2VzczwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgIDx0ciBuZy1yZXBlYXQ9InJvbGVfaXRlbSBpbiByb2xlLnJvbGVfaXRlbXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHNlbGVjdCBpZD0icm9sZS1pdGVtLXt7JGluZGV4fX0tdHlwZSIgY2xhc3M9ImZvcm0tY29udHJvbCIgbmctbW9kZWw9InJvbGVfaXRlbS50eXBlIiBuZy1vcHRpb25zPSJhY2Nlc3NfdHlwZS5uYW1lIGFzIGFjY2Vzc190eXBlLmRpc3BsYXkgZm9yIGFjY2Vzc190eXBlIGluIGFjY2Vzc190eXBlcyI+PC9zZWxlY3Q+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wteHMtMiI+PGlucHV0IGlkPSJyb2xlLWl0ZW0te3skaW5kZXh9fS1vYmplY3QtbmFtZSIgY2xhc3M9ImZvcm0tY29udHJvbCIgdHlwZT0idGV4dCIgbmctbW9kZWw9InJvbGVfaXRlbS5vYmplY3RfbmFtZSIgLz4gPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJjb2wteHMtMiI+PGlucHV0IGlkPSJyb2xlLWl0ZW0te3skaW5kZXh9fS1wcm9wZXJ0eS1uYW1lIiBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJ0ZXh0IiBuZy1tb2RlbD0icm9sZV9pdGVtLnByb3BlcnR5X25hbWUiIC8+IDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0icm9sZS1pdGVtLXt7JGluZGV4fX0tYWNjZXNzLWJpdHMtcmVhZCIgdHlwZT0iY2hlY2tib3giIG5nLW1vZGVsPSJyb2xlX2l0ZW0uYWNjZXNzX2JpdHMucmVhZCIgLz4gUmVhZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJyb2xlLWl0ZW0te3skaW5kZXh9fS1hY2Nlc3MtYml0cy1pbnNlcnQiIHR5cGU9ImNoZWNrYm94IiBuZy1tb2RlbD0icm9sZV9pdGVtLmFjY2Vzc19iaXRzLmluc2VydCIgLz4gSW5zZXJ0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgaWQ9InJvbGUtaXRlbS17eyRpbmRleH19LWFjY2Vzcy1iaXRzLXdyaXRlIiB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InJvbGVfaXRlbS5hY2Nlc3NfYml0cy53cml0ZSIgLz4gV3JpdGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0icm9sZS1pdGVtLXt7JGluZGV4fX0tYWNjZXNzLWJpdHMtZGVsZXRlIiB0eXBlPSJjaGVja2JveCIgbmctbW9kZWw9InJvbGVfaXRlbS5hY2Nlc3NfYml0cy5kZWxldGUiIC8+IERlbGV0ZQogICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PGJ1dHRvbiBpZD0icmVtb3ZlLXJvbGUtaXRlbS17eyRpbmRleH19LWJ0biIgIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1kYW5nZXIiIG5nLWNsaWNrPSJyZW1vdmVSb2xlSXRlbSgkaW5kZXgpIj54PC9idXR0b24+IDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI1Ij48YnV0dG9uIGlkPSJhZGQtcm9sZS1pdGVtLWJ0biIgY2xhc3M9ImJ0biBidG4taW5mbyBidG4tc20iIG5nLWNsaWNrPSJhZGRSb2xlSXRlbSgpIj5BZGQ8L2J1dHRvbj4gPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Zvcm0+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJtb2RhbC1mb290ZXIiPgogICAgPGJ1dHRvbiBpZD0iYWRkLXJvbGUtb2stYnRuIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBuZy1jbGljaz0ib2soKSI+T0s8L2J1dHRvbj4KICAgIDxidXR0b24gaWQ9ImFkZC1yb2xlLWNhbmNlbC1idG4iIGNsYXNzPSJidG4gYnRuLXdhcm5pbmciIG5nLWNsaWNrPSJjYW5jZWwoKSI+Q2FuY2VsPC9idXR0b24+CjwvZGl2Pg==')
},
{
'name': '/app/lib/cosmos/partials/users.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyMvdGVybWluYWwvIj5UZXJtaW5hbDwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIy9hcHBzdHVkaW8vIj5BcHAgU3R1ZGlvPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSJsb2dnZWRJbigpIj48YSBocmVmPSIjL3JvbGVzIj5Sb2xlczwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9ImxvZ2dlZEluKCkiPjxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+PGEgaHJlZj0iLyMvbG9naW4vP3JlZGlyZWN0PS90ZXJtaW5hbC8iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPgogICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICAgICAgPGRpdj48bGFiZWw+RXJyb3IgY29kZTo8L2xhYmVsPjxzcGFuIG5nLWJpbmQ9InN0YXR1cyIvPjwvZGl2PgogICAgICAgIDxkaXYgbmctYmluZD0ic3RhdHVzX2RhdGEiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPGgzPlVzZXJzPC9oMz4KCiAgICA8dGFibGUgY2xhc3M9InRhYmxlIj4KICAgICAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgICAgICA8dGg+TmFtZTwvdGg+CiAgICAgICAgICAgIDx0aD5FbWFpbDwvdGg+CiAgICAgICAgICAgIDx0aD4mbmJzcDs8L3RoPgogICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgPHRyIG5nLXJlcGVhdD0idXNlciBpbiB1c2VycyI+CiAgICAgICAgICAgIDx0ZD57e3VzZXIudXNlcm5hbWV9fTwvdGQ+CiAgICAgICAgICAgIDx0ZD57e3VzZXIuZW1haWx9fTwvdGQ+CiAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9ImVkaXQtdXNlci17e3VzZXIudXNlcm5hbWV9fSIgIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi13YXJuaW5nIGdseXBoaWNvbiBnbHlwaGljb24tZWRpdCIKICAgICAgICAgICAgICAgICAgICAgICAgbmctY2xpY2s9ImVkaXRVc2VyKCRpbmRleCk7Ij48L2J1dHRvbj4KICAgICAgICAgICAgICAgIDxidXR0b24gaWQ9InJlbW92ZS11c2VyLXt7dXNlci51c2VybmFtZX19IiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIgogICAgICAgICAgICAgICAgICAgICAgICBuZy1jbGljaz0icmVtb3ZlVXNlcigkaW5kZXgpOyI+PC9idXR0b24+CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KCiAgICA8YnV0dG9uIGlkPSJjcmVhdGUtdXNlci1idG4iIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJhZGRVc2VyKCdsZycpIj5DcmVhdGUgdXNlcjwvYnV0dG9uPgo8L2Rpdj4=')
},
{
'name': '/app/lib/cosmos/partials/item-design.html', 'data': base64.b64decode('PHN0eWxlPgppbnB1dC5uZy1pbnZhbGlkCnsKICAgIGJvcmRlcjoxcHggc29saWQgI0MwMDsKfQo8L3N0eWxlPgoKPGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyMvYXBwc3R1ZGlvLyI+QXBwIFN0dWRpbzwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIy9hcHBzdHVkaW8vIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iLyMvdGVybWluYWwvIj5UZXJtaW5hbDwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9ImxvZ2dlZEluKCkiPjxhIGhyZWY9IiMvdXNlcnMiPlVzZXJzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy9yb2xlcyI+Um9sZXM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSJsb2dnZWRJbigpIj48YSBocmVmPSIvbG9nb3V0LyI+TG9nb3V0IFt7e3VzZXJOYW1lfX1dPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0iIWxvZ2dlZEluKCkiPjxhIGhyZWY9Ii8jL2xvZ2luP3JlZGlyZWN0PS9hcHBzdHVkaW8vIj5Mb2dpbjwvYT48L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBuZy1pbml0PSJpbml0KCkiIGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGxhYmVsPi97e2l0ZW1UeXBlfX0ve3thcHBQYXRofX0vPC9sYWJlbD48bGFiZWwgbmctc2hvdz0iaXRlbUlkIiBpZD0iaXRlbV9pZF9sYWJlbCI+e3tpdGVtSWR9fTwvbGFiZWw+CiAgICA8aHIgLz4KCiAgICA8Zm9ybSBuYW1lPSJpdGVtY29uZmlnZm9ybSIgbm92YWxpZGF0ZSBjbGFzcz0iZm9ybS1ob3Jpem9udGFsIiBuZy1pZiA9ICJyZWFkeSI+CiAgICAgICAgPGRpdiBuZy1pZj0iaXRlbVR5cGUgPT09ICd3aWRnZXQnIj4KICAgICAgICAgICAgPGZpZWxkIHR5cGU9ImZvcm0iIGl0ZW09IndpZGdldEVkaXRvckZvcm0iIHZhbD0id2lkZ2V0Ij48L2ZpZWxkPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgbmctaWY9Iml0ZW1UeXBlID09PSAnbGlzdCciPgogICAgICAgICAgICA8ZmllbGQgdHlwZT0iZm9ybSIgaXRlbT0ibGlzdEVkaXRvckZvcm0iIHZhbD0ibGlzdCI+PC9maWVsZD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBuZy1pZj0iaXRlbVR5cGUgPT09ICdjaGFydCciPgogICAgICAgICAgICA8ZmllbGQgdHlwZT0iZm9ybSIgaXRlbT0iY2hhcnRjb25maWdFZGl0b3JGb3JtIiB2YWw9ImNoYXJ0Ij48L2ZpZWxkPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IG5nLWlmPSJpdGVtVHlwZSA9PT0gJ21lbnUnIj4KICAgICAgICAgICAgPGZpZWxkIHR5cGU9ImZvcm0iIGl0ZW09Im1lbnVFZGl0b3JGb3JtIiB2YWw9Im1lbnUiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgbmctaWY9Iml0ZW1UeXBlID09PSAnc2luZ2xlaXRlbXZpZXcnIj4KICAgICAgICAgICAgPGZpZWxkIHR5cGU9ImZvcm0iIGl0ZW09InNpbmdsZWl0ZW1jb25maWdFZGl0b3JGb3JtIiB2YWw9InNpbmdsZWl0ZW12aWV3Ij48L2ZpZWxkPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IG5nLWlmPSJpdGVtVHlwZSA9PT0gJ2FwcCciPgogICAgICAgICAgICA8ZmllbGQgdHlwZT0iZm9ybSIgaXRlbT0iYXBwRWRpdG9yRm9ybSIgdmFsPSJhcHAiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgbmctaWY9Iml0ZW1UeXBlID09PSAnc291cmNlZmlsZXMnIj4KICAgICAgICAgICAgPGZpZWxkIGl0ZW09J3sidHlwZSI6ImlucHV0IiwgInJlcXVpcmVkIjp0cnVlLCAibmFtZSI6ImZpbGVuYW1lIiwgImxhYmVsIjoiRmlsZSBuYW1lIn0nIHZhbD0ic291cmNlZmlsZXMuZmlsZW5hbWUiPjwvZmllbGQ+CiAgICAgICAgICAgIDxmaWVsZCBpdGVtPSd7InR5cGUiOiJpbnB1dCIsICJyZXF1aXJlZCI6dHJ1ZSwgIm5hbWUiOiJtb2R1bGVuYW1lIiwgImxhYmVsIjoiTW9kdWxlIG5hbWUifScgdmFsPSJzb3VyY2VmaWxlcy5mdWxsbmFtZSI+PC9maWVsZD4KICAgICAgICAgICAgPGZpZWxkIG5nLWlmPSJzb3VyY2VmaWxlcy50eXBlPT09J2dyaWRmaWxlJyIgaXRlbT0neyJ0eXBlIjoiY29kZWVkaXRvciIsICJyZXF1aXJlZCI6dHJ1ZSwgImxhYmVsIjoiU291cmNlIGNvZGUiLCAibmFtZSI6ImNvZGUifScgdmFsPSJzb3VyY2UuY29kZSI+PC9maWVsZD4KICAgICAgICAgICAgPGZpZWxkIG5nLWlmPSJzb3VyY2VmaWxlcy50eXBlPT09J2VtYmVkZGVkJyIgaXRlbT0neyJ0eXBlIjoiY29kZWVkaXRvciIsICJsYWJlbCI6IlNvdXJjZSBjb2RlIiwgIm5hbWUiOiJjb2RlIn0nIHZhbD0ic291cmNlZmlsZXMuY29kZSI+PC9maWVsZD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBuZy1pZj0iaXRlbVR5cGUgPT09ICdpbnRlcmNlcHRvciciPgogICAgICAgICAgICA8ZmllbGQgdHlwZT0iZm9ybSIgaXRlbT0iaW50ZXJjZXB0b3JFZGl0b3JGb3JtIiB2YWw9ImludGVyY2VwdG9yIj48L2ZpZWxkPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IG5nLWlmPSJpdGVtVHlwZSA9PT0gJ2FwcGVuZHBvaW50JyI+CiAgICAgICAgICAgIDxmaWVsZCB0eXBlPSJmb3JtIiBpdGVtPSJhcHBlbmRwb2ludEVkaXRvckZvcm0iIHZhbD0iYXBwZW5kcG9pbnQiPjwvZmllbGQ+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXY+CiAgICAgICAgICAgIDxiciAvPgogICAgICAgICAgICA8YnV0dG9uIGlkPSJjcmVhdGVfaXRlbV9idG4iIG5nLWRpc2FibGVkPSIhKGl0ZW1jb25maWdmb3JtLiR2YWxpZCkiIG5nLWNsaWNrPSJzYXZlSXRlbSgpIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5Ij5TYXZlIHt7aXRlbVR5cGV9fTwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgPC9mb3JtPgo8L2Rpdj4=')
},
{
'name': '/app/lib/cosmos/partials/browsefile.html', 'data': base64.b64decode('PHN0eWxlPgouZmlsZS1saXN0IHsKICAgIHBhZGRpbmctYm90dG9tOiAxMHB4Owp9Ci5maWxlLXNlbGVjdG9yewogICAgbWFyZ2luOiA1cHg7Cn0KICAgLnNlbGVjdGVkewogICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0RERDsKICAgfQo8L3N0eWxlPgoKPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgIDxoMyBjbGFzcz0ibW9kYWwtdGl0bGUiID5TZWxlY3QgYSBmaWxlPC9oMz4KPC9kaXY+CjxkaXYgY2xhc3M9Im1vZGFsLWJvZHkiPgogICAgPGRpdj4KICAgICAgICA8ZGl2IG5nLWJpbmQ9ImZpbGVPYmplY3ROYW1lIj48L2Rpdj4KICAgICAgICA8ZGl2IG5nLXNob3c9Imhhc0Vycm9yIiBjbGFzcz0iYmctd2FybmluZyI+CiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSBwdWxsLXJpZ2h0IiBuZy1jbGljaz0iY2xlYXJFcnJvcigpOyI+PC9idXR0b24+CiAgICAgICAgICAgIDxkaXY+PGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD48c3BhbiBuZy1iaW5kPSJzdGF0dXMiPjwvc3Bhbj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBuZy1iaW5kPSJzdGF0dXNfZGF0YSI+PC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBpZD0iaUZyYW1lUGxhY2Vob2xkZXIiPjwvZGl2PgogICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0aD5GaWxlIElkPC90aD4KICAgICAgICAgICAgICAgIDx0aD5GaWxlIHNpemU8L3RoPgogICAgICAgICAgICAgICAgPHRoPkZpbGUgbmFtZTwvdGg+CiAgICAgICAgICAgICAgICA8dGg+RmlsZSBNRDU8L3RoPgogICAgICAgICAgICAgICAgPHRoPiZuYnNwOzwvdGg+CiAgICAgICAgICAgICAgICA8dGg+Jm5ic3A7PC90aD4KICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICA8dHIgbmctcmVwZWF0PSJmaWxlIGluIHVwbG9hZGVkX2ZpbGVzIiBuZy1jbGljaz0ic2VsZWN0RmlsZShmaWxlKSIgbmctY2xhc3M9IihmaWxlLmZpbGVfaWQgPT0gc2VsZWN0ZWRGaWxlLmZpbGVfaWQpPydzZWxlY3RlZCc6JyciPgogICAgICAgICAgICAgICAgPHRkPnt7ZmlsZS5maWxlX2lkfX08L3RkPgogICAgICAgICAgICAgICAgPHRkPnt7ZmlsZS5sZW5ndGh9fTwvdGQ+PHRkPnt7ZmlsZS5maWxlbmFtZX19PC90ZD4KICAgICAgICAgICAgICAgIDx0ZD57e2ZpbGUubWQ1fX08L3RkPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidG4gYnRuLXhzIGJ0bi1zdWNjZXNzIGdseXBoaWNvbiBnbHlwaGljb24tZG93bmxvYWQiIGhyZWY9Ii9ncmlkZnMve3tmaWxlLmNvbGxlY3Rpb25fbmFtZX19L3t7ZmlsZS5maWxlX2lkfX0vIj48L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPHRkPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4teHMgYnRuLWRhbmdlciBnbHlwaGljb24gZ2x5cGhpY29uLXJlbW92ZSIgbmctY2xpY2s9InJlbW92ZUZpbGUoJGluZGV4KSI+PC9idXR0b24+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3Rib2R5PgogICAgICAgIDwvdGFibGU+CiAgICAgICAgPGZvcm0gbmctaW5pdD0ic2V0QWN0aW9uKCkiIGlkPSJ1cGxvYWRGb3JtIiBuYW1lPSJ1cGxvYWRGb3JtIiBtZXRob2Q9J1BPU1QnIGVuY3R5cGU9J211bHRpcGFydC9mb3JtLWRhdGEnIHRhcmdldD0nc3VibWl0LWlmcmFtZScgYWN0aW9uPSIvZ3JpZGZzLyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpbGUtbGlzdCIgaWQ9ImZpbGVMaXN0Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCBjbGFzcz0iZmlsZS1zZWxlY3RvciIgbmFtZT0idXBsb2FkZWRmaWxlIiB0eXBlPSJmaWxlIiBvbmNoYW5nZT0iYW5ndWxhci5lbGVtZW50KHRoaXMpLnNjb3BlKCkuZmlsZU5hbWVDaGFuZ2VkKHRoaXMpIiAvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGJ1dHRvbiAgY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBnbHlwaGljb24gZ2x5cGhpY29uLWNsb3VkLXVwbG9hZCIgbmctY2xpY2s9InVwbG9hZEZpbGUoKSIgPiBVcGxvYWQgPC9idXR0b24+CiAgICAgICAgPC9mb3JtPgogICAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgIDxidXR0b24gbmctZGlzYWJsZWQ9IiFzZWxlY3RlZEZpbGUiIGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIG5nLWNsaWNrPSJvaygpIj5PSzwvYnV0dG9uPgogICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi13YXJuaW5nIiBuZy1jbGljaz0iY2FuY2VsKCkiPkNhbmNlbDwvYnV0dG9uPgo8L2Rpdj4=')
},
{
'name': '/app/lib/cosmos/partials/applist.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyI+YmVlbmR1PC9hPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmJhci1jb2xsYXBzZSBjb2xsYXBzZSI+CiAgICAgICAgICAgIDx1bCBjbGFzcz0ibmF2IG5hdmJhci1uYXYiPgogICAgICAgICAgICAgICAgPGxpPjxhIGhyZWY9Ii8jL2FwcHN0dWRpby8iPkFwcCBTdHVkaW88L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIy90ZXJtaW5hbC8iPlRlcm1pbmFsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iIy91c2VycyI+VXNlcnM8L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSJsb2dnZWRJbigpIj48YSBocmVmPSIjL3JvbGVzIj5Sb2xlczwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9ImxvZ2dlZEluKCkiPjxhIGhyZWY9Ii9sb2dvdXQvIj5Mb2dvdXQgW3t7dXNlck5hbWV9fV08L2E+PC9saT4KICAgICAgICAgICAgICAgIDxsaSBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+PGEgaHJlZj0iLyMvbG9naW4/cmVkaXJlY3Q9L2FwcHN0dWRpby8iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IG5nLWluaXQ9ImluaXQoKSIgY2xhc3M9ImNvbnRhaW5lciB0aGVtZS1zaG93Y2FzZSIgcm9sZT0ibWFpbiI+CiAgICA8ZGl2IG5nLXNob3c9Imhhc0Vycm9yIiBjbGFzcz0iYmctd2FybmluZyI+CiAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQiIG5nLWNsaWNrPSJjbGVhckVycm9yKCk7Ij48L2J1dHRvbj4KICAgICAgICA8ZGl2PjxsYWJlbD5FcnJvciBjb2RlOjwvbGFiZWw+PHNwYW4gbmctYmluZD0ic3RhdHVzIiAvPjwvZGl2PgogICAgICAgIDxkaXYgbmctYmluZD0ic3RhdHVzX2RhdGEiPjwvZGl2PgogICAgPC9kaXY+CgogICAgPGgzPkF2YWlsYWJsZSBBcHBsaWNhdGlvbnM8L2gzPgogICAgPGRpdiBuZy1yZXBlYXQ9ImFwcCBpbiBhcHBzIj4KICAgICAgICA8dGQ+PGEgaHJlZj0iIy9hL3t7YXBwLnBhdGh9fS8iPnt7YXBwLnRpdGxlfX08L2E+PC90ZD4KICAgIDwvZGl2Pgo8L2Rpdj4=')
},
{
'name': '/app/lib/cosmos/partials/message.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxoMT57e21lc3NhZ2UudGl0bGV9fTwvaDE+CiAgICA8ZGl2Pnt7bWVzc2FnZS5tZXNzYWdlfX08L2Rpdj4KICAgIDxkaXY+e3ttZXNzYWdlLmRhdGF9fTwvZGl2Pgo8L2Rpdj4=')
},
{
'name': '/app/lib/cosmos/partials/formview.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0iY29udGFpbmVyIHRoZW1lLXNob3djYXNlIiByb2xlPSJtYWluIj4KICAgIDxmaWVsZCBpdGVtPSJmb3JtcmVmIiB2YWw9ImRhdGFJZCI+PC9maWVsZD4KPC9kaXY+Cg==')
},
{
'name': '/app/lib/cosmos/partials/form-design.html', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/partials/install.html', 'data': base64.b64decode('PGRpdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1pbnZlcnNlIG5hdmJhci1maXhlZC10b3AiIHJvbGU9Im5hdmlnYXRpb24iPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItaGVhZGVyIj4KICAgICAgICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iLyI+Q29zbW9zIEZyYW1ld29yazwvYT4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJuYXZiYXItY29sbGFwc2UgY29sbGFwc2UiPgogICAgICAgICAgICA8dWwgY2xhc3M9Im5hdiBuYXZiYXItbmF2Ij4KICAgICAgICAgICAgICAgIDxsaT48YSBocmVmPSIvIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGk+PGEgaHJlZj0iIy90ZXJtaW5hbC8iPlRlcm1pbmFsPC9hPjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgbmctc2hvdz0ibG9nZ2VkSW4oKSI+PGEgaHJlZj0iL2xvZ291dC8iPkxvZ291dCBbe3t1c2VyTmFtZX19XTwvYT48L2xpPgogICAgICAgICAgICAgICAgPGxpIG5nLXNob3c9IiFsb2dnZWRJbigpIj48YSBocmVmPSIvIy9sb2dpbi8iPkxvZ2luPC9hPjwvbGk+CiAgICAgICAgICAgIDwvdWw+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJjb250YWluZXIgdGhlbWUtc2hvd2Nhc2UiIHJvbGU9Im1haW4iPgogICAgPGVycm9yLWJhbm5lcj48L2Vycm9yLWJhbm5lcj4KICAgIDxkaXYgbmctc2hvdz0ibG9nZ2VkSW4oKSI+CiAgICAgICAgPGgxPkluc3RhbGwgYXBwbGljYXRpb248L2gxPgoKICAgICAgICA8Zm9ybSBlbmN0eXBlPSJtdWx0aXBhcnQvZm9ybS1kYXRhIiBtZXRob2Q9IlBPU1QiIGFjdGlvbj0iL2FwcGxpY2F0aW9uL2luc3RhbGwvIj4KICAgICAgICAgICAgQXBwbGljYXRpb24gcGFja2FnZTogPGlucHV0IG5hbWU9ImFwcGxpY2F0aW9uIiB0eXBlPSJmaWxlIi8+PGJyLz4KICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidG4gYnRuLXByaW1hcnkiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiAgICAgICBJbnN0YWxsICAgICAgICIvPgogICAgICAgIDwvZm9ybT4KICAgIDwvZGl2PgogICAgPGRpdiBuZy1zaG93PSIhbG9nZ2VkSW4oKSI+CiAgICAgICAgPHA+WW91IHNob3VsZCBsb2dpbiAoYXMgYWRtaW4pIHRvIGluc3RhbGwgYW4gYXBwbGljYXRpb24uPC9wPgogICAgPC9kaXY+CjwvZGl2Pg==')
},
{
'name': '/app/lib/cosmos/js/filters.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogRmlsdGVycyAqLwoKYW5ndWxhci5tb2R1bGUoJ2Nvc21vc1VJLmZpbHRlcnMnLCBbXSkuCiAgZmlsdGVyKCdpbnRlcnBvbGF0ZScsIFsndmVyc2lvbicsIGZ1bmN0aW9uKHZlcnNpb24pIHsKICAgIHJldHVybiBmdW5jdGlvbih0ZXh0KSB7CiAgICAgIHJldHVybiBTdHJpbmcodGV4dCkucmVwbGFjZSgvXCVWRVJTSU9OXCUvbWcsIHZlcnNpb24pOwogICAgfTsKICB9XSk7Cg==')
},
{
'name': '/app/lib/cosmos/js/charthelper.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/js/utils.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgbWFuaXJ1enphbWFuIG9uIDcvNS8xNC4KICovCgoKZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIHsKICAgIHZhciB2YWx1ZSA9ICI7ICIgKyBkb2N1bWVudC5jb29raWU7CiAgICB2YXIgcGFydHMgPSB2YWx1ZS5zcGxpdCgiOyAiICsgbmFtZSArICI9Iik7CiAgICBpZiAocGFydHMubGVuZ3RoID09IDIpIHJldHVybiBwYXJ0cy5wb3AoKS5zcGxpdCgiOyIpLnNoaWZ0KCk7Cn0KCmZ1bmN0aW9uIGdldFVzZXJOYW1lKGRlZmF1bHRfdXNlcil7CiAgICB2YXIgdXNlckNvb2tpZSA9IGdldENvb2tpZSgidXNlciIpOwogICAgaWYodXNlckNvb2tpZSl7CiAgICAgICAgdXNlckNvb2tpZSA9IHVzZXJDb29raWUucmVwbGFjZSgvXCIvZywgIiIpCiAgICAgICAgdmFyIGRlY29kZWQgPSBKU09OLnBhcnNlKHdpbmRvdy5hdG9iKHVzZXJDb29raWUpKTsKICAgICAgICByZXR1cm4gZGVjb2RlZFsidXNlcm5hbWUiXSB8fCBkZWZhdWx0X3VzZXI7CiAgICB9CgogICAgcmV0dXJuIGRlZmF1bHRfdXNlcjsKfQoKZnVuY3Rpb24gbG9nZ2VkSW4oKXsKICAgIHZhciB1c2VyQ29va2llID0gZ2V0Q29va2llKCJ1c2Vyc2VjcmV0Iik7CiAgICBpZih1c2VyQ29va2llKXsKICAgICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICAgIHJldHVybiBmYWxzZTsKfQ==')
},
{
'name': '/app/lib/cosmos/js/serviceapi.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgTWFydWYgTWFuaXJ1enphbWFuIChtYXJ1Zm1AY29zbW9zZnJhbWV3b3JrLmNvbSkgb24gNi8xNC8xNC4KICovCgpmdW5jdGlvbiBwcm9jZXNzRXJyb3IoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKXsKICAgIGpRdWVyeSgiI3N0YXR1cyIpLmh0bWwoIjxoMz5FcnJvcjwvaDM+PGRpdj4iK2Vycm9yVGhyb3duKyI8L2Rpdj4iKTsKfQoKZnVuY3Rpb24gcHJvY2Vzc1N1Y2Nlc3MoZGF0YSl7CiAgICB2YXIgZGF0YTIgPSBKU09OLnBhcnNlKGRhdGEpOwogICAgalF1ZXJ5KCIjcmVzdWx0IikudmFsKEpTT04uc3RyaW5naWZ5KGRhdGEyLHVuZGVmaW5lZCwgMikpOwp9CgpmdW5jdGlvbiBnZXRTZXJ2aWNlVXJsKHNlcnZpY2UpIHsKICAgIHZhciByb290ID0gZG9jdW1lbnQuVVJMOwogICAgaWYoc2VydmljZVswXSA9PSAnLycpewogICAgICAgIHNlcnZpY2UgPSBzZXJ2aWNlLnN1YnN0cmluZygxKTsKICAgIH0KICAgIHJldHVybiByb290K3NlcnZpY2U7Cn0KCmZ1bmN0aW9uIGRvX29wZXJhdGlvbih1cmwsIG1ldGhvZCwgZGF0YSwgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrKXsKICAgIGpRdWVyeSgiI3Jlc3VsdCIpLnZhbCgiIik7CiAgICBqUXVlcnkoIiNzdGF0dXMiKS5odG1sKCIiKTsKICAgIGNvbnNvbGUubG9nKG1ldGhvZCsgIjogIit1cmwpCiAgICAkLmFqYXgoewogICAgICAgIHVybDogdXJsLAogICAgICAgIHR5cGU6IG1ldGhvZCwKICAgICAgICBkYXRhOmRhdGEsCiAgICAgICAgc3VjY2VzczogY2FsbGJhY2ssCiAgICAgICAgZXJyb3I6IGVycm9yX2NhbGxiYWNrCiAgICB9KTsKfQoKZnVuY3Rpb24gaW5zZXJ0U2VydmljZSgpewogICAgdmFyIG5hbWUgPSBqUXVlcnkoIiNuYW1lIikudmFsKCk7CiAgICB2YXIgZGF0YSA9IGpRdWVyeSgiI2RhdGEiKS52YWwoKTsKCiAgICB2YXIgdXJsID0gIGdldFNlcnZpY2VVcmwobmFtZSk7CiAgICBkb19vcGVyYXRpb24odXJsLCAnUE9TVCcsIGRhdGEsIHByb2Nlc3NTdWNjZXNzLCBwcm9jZXNzRXJyb3IpOwp9CgpmdW5jdGlvbiBkZWxldGVJdGVtKCl7CiAgICB2YXIgbmFtZSA9IGpRdWVyeSgiI25hbWUiKS52YWwoKTsKICAgIHZhciBkYXRhID0galF1ZXJ5KCIjZGF0YSIpLnZhbCgpOwoKICAgIHZhciB1cmwgPSAgZ2V0U2VydmljZVVybChuYW1lKTsKCiAgICBkb19vcGVyYXRpb24odXJsLCAnREVMRVRFJywgZGF0YSwgcHJvY2Vzc1N1Y2Nlc3MsIHByb2Nlc3NFcnJvcik7Cn0KCmZ1bmN0aW9uIGxvYWRJdGVtKCl7CiAgICB2YXIgbmFtZSA9IGpRdWVyeSgiI25hbWUiKS52YWwoKTsKICAgIHZhciBkYXRhID0galF1ZXJ5KCIjZGF0YSIpLnZhbCgpOwogICAgdmFyIGNvbHVtbnMgPSBqUXVlcnkoIiNjb2x1bW5zIikudmFsKCk7CiAgICB2YXIgZmlsdGVyID0galF1ZXJ5KCIjZmlsdGVyIikudmFsKCk7CgogICAgdmFyIHVybCA9ICBnZXRTZXJ2aWNlVXJsKG5hbWUpOwogICAgaWYoY29sdW1ucyl7CiAgICAgICAgdXJsID0gdXJsKyI/IjsKICAgICAgICB1cmwgPXVybCsgImNvbHVtbnM9Iitjb2x1bW5zOwogICAgfQogICAgaWYoZmlsdGVyKXsKICAgICAgICBpZighY29sdW1ucykgewogICAgICAgICAgICB1cmwgPSB1cmwgKyAiPyI7CiAgICAgICAgfQogICAgICAgIGVsc2V7CiAgICAgICAgICAgIHVybD11cmwrIiYiOwogICAgICAgIH0KICAgICAgICB1cmwgPSB1cmwrImZpbHRlcj0iK2ZpbHRlcgogICAgfQoKICAgIGRvX29wZXJhdGlvbih1cmwsICdHRVQnLCBkYXRhLCBwcm9jZXNzU3VjY2VzcyAscHJvY2Vzc0Vycm9yKTsKfQoKZnVuY3Rpb24gdXBkYXRlSXRlbSgpewogICAgdmFyIG5hbWUgPSBqUXVlcnkoIiNuYW1lIikudmFsKCk7CiAgICB2YXIgZGF0YSA9IGpRdWVyeSgiI2RhdGEiKS52YWwoKTsKCiAgICB2YXIgdXJsID0gIGdldFNlcnZpY2VVcmwobmFtZSk7CgogICAgZG9fb3BlcmF0aW9uKHVybCwgJ1BVVCcsIGRhdGEsIHByb2Nlc3NTdWNjZXNzLCBwcm9jZXNzRXJyb3IpOwp9CgpmdW5jdGlvbiBzdWJzY3JpYmUgKG1vbml0b3JfZW5kcG9pbnQsIG9iamVjdF9uYW1lLCBjYWxsYmFjaykgewogICAgLy9UT0RPOiBVbmlmeSB0aGUgb2JzZXJ2ZXIgdG8gbGlzdGVuIHRvIG1hbnkgb2JqZWN0cyBhdCBhIHRpbWUgdXNpbmcgZGlmZmVyZW50IGNhbGxiYWNrCiAgICAvL3ZhciBtb25pdG9yX2VuZHBvaW50ID0gIndzOi8vbG9jYWxob3N0OjgwODAvY2hhbmdlbW9uaXRvciIKICAgIHZhciB3ZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KG1vbml0b3JfZW5kcG9pbnQpOwogICAgdmFyIGZuID0gY2FsbGJhY2s7CiAgICB3ZWJzb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgIGNvbnNvbGUubG9nKCJTb2NrZXQgb3BlbmVkIik7CiAgICAgICAgd2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyJ0eXBlIjogIm1vbml0b3JfbnMiLCAibnMiOiBvYmplY3RfbmFtZX0pKQogICAgfQoKICAgIHdlYnNvY2tldC5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgY29uc29sZS5sb2coIk9uIG1lc3NhZ2U6ICIgKyBldnQuZGF0YSk7CiAgICAgICAgaWYgKGZuKSB7CiAgICAgICAgICAgIGZuKGV2dC5kYXRhKTsKICAgICAgICAgICAgLyoKICAgICAgICAgICAgIC8vSW4gY2FsbGJhY2sgeW91IG1heSBkbyBzb21ldGhpbmcgbGlrZSAoYWxzbyBjb25zaWRlciB0aGUgZXZ0LmRhdGEgaWYgeW91IGFyZSBtb25pdG9yaW5nIG11bHRpcGxlIG9iamVjdHMuOgogICAgICAgICAgICAgJGh0dHAuZ2V0KCcvc2VydmljZS8nK29iamVjdF9uYW1lKycvJykuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICovCiAgICAgICAgfQoKICAgIH0KCiAgICB3ZWJzb2NrZXQub25jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBjb25zb2xlLmxvZygiT24gY2xvc2VkIik7CiAgICB9Cn0=')
},
{
'name': '/app/lib/cosmos/js/services/http.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKc2VydmljZXMuZmFjdG9yeSgnQ29zbW9zU2VydmljZScsIFsnJGh0dHAnLCBmdW5jdGlvbiAoJGh0dHApIHsKICAgIHJldHVybnsKICAgICAgICBnZXQ6IGZ1bmN0aW9uICh1cmksIGNhbGxiYWNrLCBlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAkaHR0cC5nZXQodXJpKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuZWRfZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLl9jb3Ntb3Nfc2VydmljZV9hcnJheV9yZXN1bHRfKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRfZGF0YSA9IEpTT04ucGFyc2UoZGF0YS5fZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXR1cm5lZF9kYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBzZWFyY2g6IGZ1bmN0aW9uICh1cmksIHBhcmFtcywgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICRodHRwLmdldCh1cmksIHBhcmFtcykuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgdmFyIHJldHVybmVkX2RhdGEgPSBkYXRhOwogICAgICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5fY29zbW9zX3NlcnZpY2VfYXJyYXlfcmVzdWx0XykgewogICAgICAgICAgICAgICAgICAgIHJldHVybmVkX2RhdGEgPSBKU09OLnBhcnNlKGRhdGEuX2QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmV0dXJuZWRfZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jYWxsYmFjayhkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0sCiAgICAgICAgcG9zdDogZnVuY3Rpb24gKHVyaSwgZGF0YSwgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICRodHRwLnBvc3QodXJpLCBkYXRhKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICB2YXIgcmV0dXJuZWRfZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLl9jb3Ntb3Nfc2VydmljZV9hcnJheV9yZXN1bHRfKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRfZGF0YSA9IEpTT04ucGFyc2UoZGF0YS5fZCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXR1cm5lZF9kYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgcG9zdFdpdGhBcmdzOiBmdW5jdGlvbiAodXJpLCBkYXRhLCBjYWxsYmFjaywgY2FsbGJhY2tBcmdzLCBlcnJvcl9jYWxsYmFjaywgZXJyb3JDYWxsYmFja0FyZ3MpIHsKICAgICAgICAgICAgJGh0dHAucG9zdCh1cmksIGRhdGEpLnN1Y2Nlc3MoZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgIHZhciByZXR1cm5lZF9kYXRhID0gZGF0YTsKICAgICAgICAgICAgICAgIGlmIChkYXRhICYmIGRhdGEuX2Nvc21vc19zZXJ2aWNlX2FycmF5X3Jlc3VsdF8pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm5lZF9kYXRhID0gSlNPTi5wYXJzZShkYXRhLl9kKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJldHVybmVkX2RhdGEsIGNhbGxiYWNrQXJncyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jYWxsYmFjayhkYXRhLCBzdGF0dXMsIGVycm9yQ2FsbGJhY2tBcmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBwdXQ6IGZ1bmN0aW9uICh1cmksIGRhdGEsIGNhbGxiYWNrLCBlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAkaHR0cC5wdXQodXJpLCBkYXRhKS5zdWNjZXNzKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yX2NhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgZGVsZXRlOiBmdW5jdGlvbiAodXJpLCBjYWxsYmFjaywgZXJyb3JfY2FsbGJhY2spIHsKICAgICAgICAgICAgJGh0dHAuZGVsZXRlKHVyaSkuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcl9jYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBlcnJvcl9jYWxsYmFjayhkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIHNhdmVGaWxlOiBmdW5jdGlvbiAoY29sbGVjdGlvbk5hbWUsIGNvbnRlbnQsIGNvbnRlbnRUeXBlLCBmaWxlTmFtZSwgZmlsZUlkLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKICAgICAgICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7CiAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW2NvbnRlbnRdLCB7IHR5cGU6IGNvbnRlbnRUeXBlfSk7CgogICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoInVwbG9hZGVkZmlsZSIsIGJsb2IsIGZpbGVOYW1lKTsKCiAgICAgICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CgogICAgICAgICAgICB2YXIgdXJsID0gICIvZ3JpZGZzLyIgKyBjb2xsZWN0aW9uTmFtZSArICIvIiArIChmaWxlSWQ/IChmaWxlSWQgKyAiLyIpOicnKTsKCiAgICAgICAgICAgIHJlcXVlc3Qub25sb2FkID0gZnVuY3Rpb24oZXZlbnQpIHsKICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICBpZihvblN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVybmVkX2RhdGEgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0dXJuZWRfZGF0YSAmJiByZXR1cm5lZF9kYXRhLl9jb3Ntb3Nfc2VydmljZV9hcnJheV9yZXN1bHRfKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5lZF9kYXRhID0gSlNPTi5wYXJzZShyZXR1cm5lZF9kYXRhLl9kKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHJldHVybmVkX2RhdGEgJiYgcmV0dXJuZWRfZGF0YS5sZW5ndGg+MCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuZWRfZGF0YSA9IHJldHVybmVkX2RhdGFbMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgb25TdWNjZXNzKHJldHVybmVkX2RhdGEpCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZihvbkVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IocmVxdWVzdC5zdGF0dXMsIHJlcXVlc3QucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHZhciByZXF1ZXN0TWV0aG9kID0gZmlsZUlkPyJQVVQiOiJQT1NUIjsKCiAgICAgICAgICAgIHJlcXVlc3Qub3BlbihyZXF1ZXN0TWV0aG9kLHVybCk7CiAgICAgICAgICAgIHJlcXVlc3Quc2VuZChmb3JtRGF0YSk7CiAgICAgICAgfQogICAgfQoKfV0pOw==')
},
{
'name': '/app/lib/cosmos/js/services/settings.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/js/services/utils.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTIvMTQvMTQuCiAqLwoKCnNlcnZpY2VzLmZhY3RvcnkoJ2Nvc21vcy51dGlscycsIFsnQ29zbW9zU2VydmljZScsICdjb3Ntb3MuY2FjaGVkbG9hZGVyJywgJ2Nvc21vcy5zZXR0aW5ncycsCiAgICBmdW5jdGlvbiAoQ29zbW9zU2VydmljZSwgY2FjaGVkbG9hZGVyLCBzZXR0aW5ncykgewogICAgcmV0dXJuewogICAgICAgIHNpdGVXaWRlQ291bnRlciA6IDAsCiAgICAgICAgc2V0QXBwQXNEZWZhdWx0OiBmdW5jdGlvbiAoYXBwLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKCiAgICAgICAgICAgIGlmIChhcHAgJiYgYXBwLmlkKSB7CiAgICAgICAgICAgICAgICB2YXIgdXJpID0gIi9zZXJ2aWNlL2Nvc21vcy5nbG9iYWxzZXR0aW5ncy8iOwogICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJpLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncyA9IGRhdGFbMF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmkgPSB1cmkgKyBncy5faWQgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHV0ZGF0YSA9IHsiZGVmYXVsdGFwcGlkIjogYXBwLmlkfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucHV0KHVyaSwgcHV0ZGF0YSwgb25TdWNjZXNzLCBvbkVycm9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHNldHRpbmdzIG5vdCBmb3VuZCAtIGNyZWF0ZSBvbmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwdXRkYXRhID0geyJkZWZhdWx0YXBwaWQiOiBhcHAuaWR9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5wb3N0KHVyaSwgcHV0ZGF0YSwgb25TdWNjZXNzLCBvbkVycm9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgb25FcnJvcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBpZiAob25FcnJvcikgewogICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoNDA0LCAiQXBwbGljYXRpb24gbm90IGZvdW5kIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9LAoKICAgICAgICBzZXRQYWdlQXNEZWZhdWx0OiBmdW5jdGlvbiAoYXBwLCBwYWdlLCBvblN1Y2Nlc3MsIG9uRXJyb3IpIHsKICAgICAgICAgICAgaWYgKGFwcCAmJiBhcHAuX2lkKSB7CiAgICAgICAgICAgICAgICB2YXIgdXJpID0gIi9zZXJ2aWNlL2Nvc21vcy5hcHBsaWNhdGlvbnMvIithcHAuX2lkOwogICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJpLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvYWRlZEFwcCA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkZWRBcHAuc2V0dGluZ3MuaW5kZXhQYWdlSWQgPSBwYWdlLl9pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwdXRkYXRhID0geyAic2V0dGluZ3MiIDogbG9hZGVkQXBwLnNldHRpbmdzfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucHV0KHVyaSwgcHV0ZGF0YSwgb25TdWNjZXNzLCBvbkVycm9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoNDA0LCAiQXBwbGljYXRpb24gbm90IGZvdW5kIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uRXJyb3IpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKG9uRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICBvbkVycm9yKDQwNCwgIkFwcGxpY2F0aW9uIG5vdCBmb3VuZCIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgZ2V0QWxsUGFnZXM6IGZ1bmN0aW9uIChhcHAsIHN1Y2Nlc3NDYWxsYmFjaywgZXJyb3JDYWxsYmFjaykgewogICAgICAgICAgICB2YXIgYXBwQ2FjaGUgPSAiUGFnZS5fQ29zbW9zX0FsbF9QYWdlc18iOwogICAgICAgICAgICB2YXIgYXBwVXJsID0gJy9zZXJ2aWNlLycgKyBhcHAuc2V0dGluZ3Mub2JqZWN0bWFwLnBhZ2Vjb25maWdvYmplY3QgKyAnLyc7CiAgICAgICAgICAgIGNhY2hlZGxvYWRlci5nZXQoYXBwQ2FjaGUsIGFwcFVybCwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChwYWdlcykgewogICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NDYWxsYmFjayhwYWdlcyk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9LAoKICAgICAgICBnZXROZXh0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKXsKICAgICAgICAgICAgaWYodmFsdWUpewogICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICsxOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHRoaXMuc2l0ZVdpZGVDb3VudGVyICs9MTsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2l0ZVdpZGVDb3VudGVyOwogICAgICAgIH0sCgogICAgICAgIGdldENhcGNoYVNpdGVLZXk6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgIHZhciBnbG9iYWxTZXR0aW5ncyA9IGNhY2hlZGxvYWRlci5nZXRGcm9tQ2FjaGUoIlNldHRpbmdzLl9Db3Ntb3NfR2xvYmFsX1NldHRpbmdzXyIpOwogICAgICAgICAgICBpZihnbG9iYWxTZXR0aW5ncyl7CiAgICAgICAgICAgICAgICByZXR1cm4gZ2xvYmFsU2V0dGluZ3NbMF1bInJlY2FwY2hhc2l0ZWtleSJdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQp9XSk7')
},
{
'name': '/app/lib/cosmos/js/services/services.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogU2VydmljZXMgKi8KCnZhciBzZXJ2aWNlczsKc2VydmljZXMgPSBhbmd1bGFyLm1vZHVsZSgnY29zbW9zVUkuc2VydmljZXMnLCBbXSkKICAgIC52YWx1ZSgndmVyc2lvbicsICcwLjEnKQogICAgLmZhY3RvcnkoJ21lc3NhZ2UnLCBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKSB7CiAgICAgICAgdmFyIG1zZ3MgPSBbXTsKICAgICAgICByZXR1cm57CiAgICAgICAgICAgIHB1c2g6IGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgICAgIG1zZ3MucHVzaChtc2cpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBwb3A6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtc2dzLnNoaWZ0KCk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhhc01lc3NhZ2U6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiAobXNncyAmJiBtc2dzLmxlbmd0aCA+IDApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKICAgIH1dKQogICAgLmZhY3RvcnkoJ2dsb2JhbGhhc2h0YWJsZScsIFsnJGh0dHAnLCAnbG9jYWxTdG9yYWdlU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgbG9jYWxTdG9yYWdlU2VydmljZSkgewogICAgICAgIHJldHVybnsKICAgICAgICAgICAgY29sbGVjdGlvbnM6IGxvY2FsU3RvcmFnZVNlcnZpY2UuZ2V0KCdnbG9iYWxoYXNodGFibGUnKSB8fCB7fSwKICAgICAgICAgICAgZ2V0QWxsOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uczsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAobmFtZSwgb2JqZWN0KSB7CiAgICAgICAgICAgICAgICB0aGlzLmNvbGxlY3Rpb25zW25hbWVdID0gb2JqZWN0OwogICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQoJ2dsb2JhbGhhc2h0YWJsZScsIHRoaXMuY29sbGVjdGlvbnMpCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb2xsZWN0aW9uc1tuYW1lXTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH1dKQoKICAgIC5mYWN0b3J5KCduYW1lZGNvbGVjdGlvbicsIFsnJGh0dHAnLCAnbG9jYWxTdG9yYWdlU2VydmljZScsIGZ1bmN0aW9uICgkaHR0cCwgbG9jYWxTdG9yYWdlU2VydmljZSkgewogICAgICAgIHJldHVybnsKICAgICAgICAgICAgY29sbGVjdGlvbnM6IHt9LAogICAgICAgICAgICAvLyBUT0RPOiBtYXliZSBwdXQgYWxsIG5hbWVkIGNvbGxlY3Rpb24gaW4gdGhlIGxvY2FsIHN0b3JhZ2UgYXQgb25jZS0gbm93IHdlIGFyZSBzYXZpbmcgaW5kaXZpZHVhbAogICAgICAgICAgICAvLyB3ZSBzaG91bGQgYmUgY2FyZWZ1bCBhYm91dCB0aGlzIHNpbmNlIGRhdGEgc2l6ZSBtYXkgaW5jcmVhc2UgYSBsb3QgZm9yIGxhcmdlIGFwcGxpY2F0aW9ucwoKICAgICAgICAgICAgZ2V0Q29sbGVjdGlvbjogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gdGhpcy5jb2xsZWN0aW9uc1tuYW1lXTsKCiAgICAgICAgICAgICAgICBpZiAoIW9iamVjdHMpIHsKICAgICAgICAgICAgICAgICAgICBvYmplY3RzID0gbG9jYWxTdG9yYWdlU2VydmljZS5nZXQobmFtZSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmplY3RzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdHMgPSBbXTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsZWN0aW9uc1tuYW1lXSA9IG9iamVjdHM7CiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQobmFtZSwgb2JqZWN0cyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdHM7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhcHBlbmQ6IGZ1bmN0aW9uIChuYW1lLCBvYmplY3QpIHsKICAgICAgICAgICAgICAgIGlmICghbmFtZSB8fCAhb2JqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gdGhpcy5nZXRDb2xsZWN0aW9uKG5hbWUpOwoKICAgICAgICAgICAgICAgIG9iamVjdHMucHVzaChvYmplY3QpOwoKICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZVNlcnZpY2Uuc2V0KG5hbWUsIG9iamVjdHMpOwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgcmVtb3ZlQnlJZDogZnVuY3Rpb24gKG5hbWUsIF9pZCkgewogICAgICAgICAgICAgICAgdmFyIGZvdW5kSW5kZXggPSAtMTsKICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gdGhpcy5nZXRDb2xsZWN0aW9uKG5hbWUpOwogICAgICAgICAgICAgICAgaWYgKCFvYmplY3RzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kSW5kZXg7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gob2JqZWN0cywgZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZEluZGV4IDwgMCAmJiB2YWx1ZVsiX2lkIl0gPT09IF9pZCkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3VuZEluZGV4ID0gaW5kZXg7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKGZvdW5kSW5kZXggPj0gMCkgewogICAgICAgICAgICAgICAgICAgIG9iamVjdHMuc3BsaWNlKGZvdW5kSW5kZXgsIDEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlU2VydmljZS5zZXQobmFtZSwgb2JqZWN0cyk7CiAgICAgICAgICAgICAgICByZXR1cm4gZm91bmRJbmRleDsKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGxlbmd0aDogZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgIHZhciBvYmplY3RzID0gdGhpcy5nZXRDb2xsZWN0aW9uKG5hbWUpOwogICAgICAgICAgICAgICAgaWYgKCFvYmplY3RzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0cy5sZW5ndGg7CiAgICAgICAgICAgIH0KICAgICAgICB9OwogICAgfV0pCgogICAgLmZhY3RvcnkoJ2NhbGN1bGF0b3InLCBbJyRodHRwJywgZnVuY3Rpb24gKCRodHRwKSB7CiAgICAgICAgcmV0dXJuewoKICAgICAgICAgICAgc3VtQ29sdW1uVmFsdWVzOiBmdW5jdGlvbiAobGlzdCwgY29sdW1uTmFtZSkgewogICAgICAgICAgICAgICAgdmFyIHRvdGFsID0gMDsKICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChsaXN0LCBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGN1ciA9IE51bWJlcih2YWx1ZVtjb2x1bW5OYW1lXSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cikgewogICAgICAgICAgICAgICAgICAgICAgICB0b3RhbCArPSBjdXI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICByZXR1cm4gdG90YWw7CiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBhdmVyYWdlQ29sdW1uVmFsdWVzOiBmdW5jdGlvbiAobGlzdCwgY29sdW1uTmFtZSkgewogICAgICAgICAgICAgICAgaWYgKGxpc3QubGVuZ3RoIDwgMSkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAwOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBzdW0gPSBzdW1Db2x1bW5WYWx1ZXMobGlzdCwgY29sdW1uTmFtZSk7CiAgICAgICAgICAgICAgICB2YXIgYXZlcmFnZSA9IHN1bSAvIGxpc3QubGVuZ3RoOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfV0pCgogICAgLmZhY3RvcnkoJ2Nvc21vcy5jYWNoZScsIFsnJGh0dHAnLCBmdW5jdGlvbiAoJGh0dHApIHsKICAgICAgICByZXR1cm57CiAgICAgICAgICAgIHN0b3JlOiB7fSwKICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoaWQsIHZhbHVlKSB7CiAgICAgICAgICAgICAgICB0aGlzLnN0b3JlW2lkXSA9IHZhbHVlOwogICAgICAgICAgICB9LAogICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChpZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmVbaWRdOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfV0pOwo=')
},
{
'name': '/app/lib/cosmos/js/services/cachedloader.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKc2VydmljZXMuZmFjdG9yeSgnY29zbW9zLmNhY2hlZGxvYWRlcicsIFsnQ29zbW9zU2VydmljZScsIGZ1bmN0aW9uIChDb3Ntb3NTZXJ2aWNlKSB7CiAgICByZXR1cm57CiAgICAgICAgc3RvcmU6IHt9LAogICAgICAgIGNsZWFyQ2FjaGU6IGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICBkZWxldGUgdGhpcy5zdG9yZVtuYW1lXTsKICAgICAgICB9LAogICAgICAgIGdldDogZnVuY3Rpb24gKG5hbWUsIHVyaSwgY2FsbGJhY2ssIGVycm9yX2NhbGxiYWNrLCByZWZyZXNoKSB7CgogICAgICAgICAgICBpZiAoIXJlZnJlc2gpIHsKICAgICAgICAgICAgICAgIHZhciByZXR1cm5lZF9kYXRhID0gdGhpcy5zdG9yZVtuYW1lXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmV0dXJuZWRfZGF0YSkgewogICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmV0dXJuZWRfZGF0YSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmksCiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcmVbbmFtZV0gPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSkuYmluZCh0aGlzKSwKICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JfY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yX2NhbGxiYWNrKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KS5iaW5kKHRoaXMpCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBnZXRGcm9tQ2FjaGU6IGZ1bmN0aW9uKG5hbWUpewogICAgICAgICAgICByZXR1cm4gdGhpcy5zdG9yZVtuYW1lXTsKICAgICAgICB9CiAgICB9Cn1dKTs=')
},
{
'name': '/app/lib/cosmos/js/services/constants.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTIvMTMvMTQuCiAqLwoKc2VydmljZXMuY29uc3RhbnQoCiAgICAiY29zbW9zLmNvbmZpZ05hbWVzIix7CiAgICAgICAgIk1FTlUiOiAibWVudSIsCiAgICAgICAgIkZPUk0iOiJmb3JtIiwKICAgICAgICAiUEFHRSI6InBhZ2UiLAogICAgICAgICJMSVNUIjogImxpc3QiLAogICAgICAgICJDSEFSVCI6ICJjaGFydCIsCiAgICAgICAgIldJREdFVCI6ICJ3aWRnZXQiLAogICAgICAgICJBUFAiOiAiYXBwIiwKICAgICAgICAiU0lOR0xFX09CSkVDVCI6ICJzaW5nbGVvYmplY3QiLAogICAgICAgICJTT1VSQ0VGSUxFUyI6ICJzb3VyY2VmaWxlcyIKICAgIH0KKTs=')
},
{
'name': '/app/lib/cosmos/js/directives/field.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/js/directives/filter.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMS8xLzE1LgogKi8KCgpkaXJlY3RpdmVzLmRpcmVjdGl2ZSgnZmlsdGVyJywgZnVuY3Rpb24gKCRjb21waWxlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgc2NvcGU6IHsKICAgICAgICAgICAgICAgIGNvbHVtbnM6ICc9JywKICAgICAgICAgICAgICAgIGZpbHRlcnM6ICc9PycKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICckcm91dGVQYXJhbXMnLCAnbWVzc2FnZScsICdDb3Ntb3NTZXJ2aWNlJywgJ2Nvc21vcy5zZXR0aW5ncycsCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkbG9jYXRpb24sICRyb3V0ZVBhcmFtcywgbWVzc2FnZSwgQ29zbW9zU2VydmljZSwgc2V0dGluZ3MpIHsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJvdXRlUGFyYW1zID0gJHJvdXRlUGFyYW1zOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5vcGVyYXRvcnMgPSBbCiAgICAgICAgICAgICAgICAgICAgICAgIHsidGl0bGUiOiJFcXVhbHMiLCAibmFtZSI6ImVxIn0KICAgICAgICAgICAgICAgICAgICBdOwoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRmlsdGVyID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcnMucHVzaCh7ImNvbHVtbiI6JHNjb3BlLmNvbHVtbk5hbWUsICJvcCI6ICRzY29wZS5vcGVyYXRvciwgImZpcnN0T3BlcmFuZCI6ICRzY29wZS5maXJzdE9wZXJhbmR9KQogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVGaWx0ZXIgPSBmdW5jdGlvbiAoZmlsdGVycywgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVycy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXF1aXJlU2Vjb25kT3BlcmFuZCA9IGZ1bmN0aW9uKG9wKXsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wID09PSAiYmV0d2VlbiI7CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0ic2hvdy1oaWRlLWZpbHRlciI+PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0icm93Ij4nKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0iY29sdW1uTmFtZSIgJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduZy1vcHRpb25zPSJjb2x1bW4ubmFtZSBhcyBjb2x1bW4udGl0bGUgZm9yIGNvbHVtbiBpbiBjb2x1bW5zIiAvPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxkaXYgY2xhc3M9ImNvbC1sZy0yIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPHNlbGVjdCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0ib3BlcmF0b3IiICcgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmctb3B0aW9ucz0ib3BlcmF0b3IubmFtZSBhcyBvcGVyYXRvci50aXRsZSBmb3Igb3BlcmF0b3IgaW4gb3BlcmF0b3JzIiAvPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxkaXYgY2xhc3M9ImNvbC1sZy0zIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPGlucHV0IGNsYXNzPSJmb3JtLWNvbnRyb2wiIG5nLW1vZGVsPSJmaXJzdE9wZXJhbmQiIC8+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICA8ZGl2IG5nLWlmPSJyZXF1aXJlU2Vjb25kT3BlcmFuZChvcGVyYXRvcikiIGNsYXNzPSJjb2wtbGctMyI+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgIDxpbnB1dCBjbGFzcz0iZm9ybS1jb250cm9sIiBuZy1tb2RlbD0ic2Vjb25kT3BlcmFuZCIgLz4nKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDxkaXYgY2xhc3M9ImNvbC1sZy0xIj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPGJ1dHRvbiBuZy1jbGljaz0iYWRkRmlsdGVyKCkiIGNsYXNzPSJnbHlwaGljb24gZ2x5cGhpY29uLXBsdXMiPjwvYnV0dG9uPicrCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0icm93Ij4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgPHVsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgPGxpIG5nLXJlcGVhdD0iZmlsdGVyIGluIGZpbHRlcnMiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgICAgICAgIHt7ZmlsdGVyLmNvbHVtbn19IHt7ZmlsdGVyLm9wfX0ge3tmaWx0ZXIuZmlyc3RPcGVyYW5kfX0nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgICAgICAgICAgICA8c3BhbiBuZy1pZj0icmVxdWlyZVNlY29uZE9wZXJhbmQoZmlsdGVyLm9wKSI+IGFuZCB7e2ZpbHRlci5zZWNvbmRPcGVyYW5kfX08L3NwYW4+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iZ2x5cGhpY29uIGdseXBoaWNvbi1yZW1vdmUiIG5nLWNsaWNrPSJyZW1vdmVGaWx0ZXIoZmlsdGVycywgJGluZGV4KSI+PC9idXR0b24+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgICAgICA8L2xpPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICAgICA8L3VsPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgIDwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH1dLAoKICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQ3JlYXRpbmcgZmlsdGVyIGVsZW1lbnQiKTsKICAgICAgICAgICAgICAgIHNjb3BlLmVsZW1lbnQgPSBlbGVtZW50OwoKICAgICAgICAgICAgICAgIGlmKCFzY29wZS5maWx0ZXJzKXsKICAgICAgICAgICAgICAgICAgICBzY29wZS5maWx0ZXJzID0gW107CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gc2NvcGUuZ2V0VGVtcGxhdGUoKTsKCiAgICAgICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCh0ZW1wbGF0ZSk7CiAgICAgICAgICAgICAgICBlbGVtZW50LnJlcGxhY2VXaXRoKG5ld0VsZW1lbnQpOwogICAgICAgICAgICAgICAgJGNvbXBpbGUobmV3RWxlbWVudCkoc2NvcGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7')
},
{
'name': '/app/lib/cosmos/js/directives/directives.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogRGlyZWN0aXZlcyAqLwoKCnZhciBkaXJlY3RpdmVzID0gYW5ndWxhci5tb2R1bGUoJ2Nvc21vc1VJLmRpcmVjdGl2ZXMnLCBbXSkuCiAgICBkaXJlY3RpdmUoJ2FwcFZlcnNpb24nLCBbJ3ZlcnNpb24nLCBmdW5jdGlvbiAodmVyc2lvbikgewogICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0cnMpIHsKICAgICAgICAgICAgZWxtLnRleHQodmVyc2lvbik7CiAgICAgICAgfTsKICAgIH1dKQoKICAgIC5kaXJlY3RpdmUoJ2Vycm9yQmFubmVyJywgZnVuY3Rpb24gKCRjb21waWxlKSB7CiAgICAgICAgLy9UT0RPOiBjcmVhdGUgc3ViLXNjb3BlIHdpdGggaXRzIG93biBkYXRhIGF0dHJpYnV0ZSBhbmQgY2xlYXJFcnJvcigpIG1ldGhvZAogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgcmVzdHJpY3Q6ICJFIiwKICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBuZy1zaG93PSJoYXNFcnJvciIgY2xhc3M9ImJnLXdhcm5pbmciPicgKwogICAgICAgICAgICAgICAgICAgICcgICAgPGJ1dHRvbiBjbGFzcz0iYnRuIGJ0bi14cyBidG4tZGFuZ2VyIGdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIHB1bGwtcmlnaHQiIG5nLWNsaWNrPSJjbGVhckVycm9yKCk7Ij48L2J1dHRvbj4nICsKICAgICAgICAgICAgICAgICAgICAnICAgIDxkaXY+JyArCiAgICAgICAgICAgICAgICAgICAgJyAgICAgICAgPGxhYmVsPkVycm9yIGNvZGU6PC9sYWJlbD4nICsKICAgICAgICAgICAgICAgICAgICAnICAgICAgICA8c3BhbiBuZy1iaW5kPSJzdGF0dXMiIC8+JyArCiAgICAgICAgICAgICAgICAgICAgJyAgICA8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAnICAgPGRpdiBuZy1iaW5kPSJzdGF0dXNfZGF0YSI+PC9kaXY+JyArCiAgICAgICAgICAgICAgICAgICAgJzwvZGl2PicKICAgICAgICAgICAgfQogICAgfSkKCiAgICAuZGlyZWN0aXZlKCdwYWdlJywgZnVuY3Rpb24gKCRjb21waWxlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgc2NvcGU6IHsKICAgICAgICAgICAgICAgIHBhZ2VJZDogJz1wYWdlaWQnICAvLyBiZWNhdXNlIHBhZ2VJZCB3aWxsIHRyYW5zbGF0ZSB0byBwYWdlLWlkCiAgICAgICAgICAgIH0sCgogICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckbG9jYXRpb24nLCAnJHJvdXRlUGFyYW1zJywgJ21lc3NhZ2UnLCAnQ29zbW9zU2VydmljZScsICdjb3Ntb3Muc2V0dGluZ3MnLAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkcm91dGVQYXJhbXMsIG1lc3NhZ2UsIENvc21vc1NlcnZpY2UsIHNldHRpbmdzKSB7CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5yb3V0ZVBhcmFtcyA9ICRyb3V0ZVBhcmFtczsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb25CeVVybCA9IGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJsLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmxvZ2luUmVxdWlyZWQgJiYgIWxvZ2dlZEluKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1clVybCA9ICRsb2NhdGlvbi51cmwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnVybCgiL2xvZ2luLz9yZWRpcmVjdD0iICsgY3VyVXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdlZGVmID0gZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHN0YXR1cyA9PSA0MDEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyVXJsID0gJGxvY2F0aW9uLnVybCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24udXJsKCIvbG9naW4vP3JlZGlyZWN0PSIgKyBjdXJVcmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUucGFnZUlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBQYXRoID0gJHJvdXRlUGFyYW1zLmFwcFBhdGg7CgogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBTZXR0aW5ncygkc2NvcGUuYXBwUGF0aCwgInBhZ2Vjb25maWdvYmplY3QiLCBmdW5jdGlvbiAob2JqZWN0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJyArIG9iamVjdE5hbWUgKyAnLycgKyAkc2NvcGUucGFnZUlkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwodXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RhdHVzLCBkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS9jb3Ntb3MucGFnZXMvJyArICRzY29wZS5wYWdlSWQgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb25CeVVybCh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICA8ZGl2IG5nLXJlcGVhdD0iZmllbGQgaW4gcGFnZWRlZi5maWVsZHMiPlxuJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgICA8ZmllbGQgaXRlbT0iZmllbGQiPjwvZmllbGQ+XG4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgPC9kaXY+XG4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICd7e3BhZ2V9fScgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9XSwKCiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNyZWF0aW5nIHBhZ2UiKTsKICAgICAgICAgICAgICAgIHNjb3BlLnBhZ2VkZWYgPSB7fTsKICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IHNjb3BlLmdldFRlbXBsYXRlKCk7CiAgICAgICAgICAgICAgICBpZiAoIXRlbXBsYXRlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNjb3BlLmdldENvbmZpZ3VyYXRpb24oKTsKCiAgICAgICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCh0ZW1wbGF0ZSk7CiAgICAgICAgICAgICAgICAkY29tcGlsZShuZXdFbGVtZW50KShzY29wZSk7CiAgICAgICAgICAgICAgICBlbGVtZW50LnJlcGxhY2VXaXRoKG5ld0VsZW1lbnQpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSkKCiAgICAuZGlyZWN0aXZlKCdvYmplY3R2aWV3JywgZnVuY3Rpb24gKCRjb21waWxlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgc2NvcGU6IHsKICAgICAgICAgICAgICAgIGl0ZW1JZDogJz0nLAogICAgICAgICAgICAgICAgY29uZmlnSWQ6ICc9JwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICdtZXNzYWdlJywgJ0Nvc21vc1NlcnZpY2UnLCAnY29zbW9zLnNldHRpbmdzJywKICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBtZXNzYWdlLCBDb3Ntb3NTZXJ2aWNlLCBzZXR0aW5ncykgewoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm91dGVQYXJhbXMgPSAkcm91dGVQYXJhbXM7CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRQYWdlQ29uZmlndXJhdGlvbkJ5VXJsID0gZnVuY3Rpb24gKHVybCkgewogICAgICAgICAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubG9naW5SZXF1aXJlZCAmJiAhbG9nZ2VkSW4oKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VyVXJsID0gJGxvY2F0aW9uLnVybCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24udXJsKCIvbG9naW4vP3JlZGlyZWN0PSIgKyBjdXJVcmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2VkZWYgPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RhdHVzID09IDQwMSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJVcmwgPSAkbG9jYXRpb24udXJsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi51cmwoIi9sb2dpbi8/cmVkaXJlY3Q9IiArIGN1clVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRQYWdlQ29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUucGFnZUlkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBQYXRoID0gJHJvdXRlUGFyYW1zLmFwcFBhdGg7CgogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBTZXR0aW5ncygkc2NvcGUuYXBwUGF0aCwgInBhZ2Vjb25maWdvYmplY3QiLCBmdW5jdGlvbiAob2JqZWN0TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJyArIG9iamVjdE5hbWUgKyAnLycgKyAkc2NvcGUucGFnZUlkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRQYWdlQ29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXR1cywgZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLnBhZ2VzLycgKyAkc2NvcGUucGFnZUlkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRQYWdlQ29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb25CeVVybCA9IGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJsLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb25maWcgPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCRzY29wZS5jb25maWcucGFnZUlkKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2VJZCA9ICRzY29wZS5jb25maWcucGFnZUlkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0UGFnZUNvbmZpZ3VyYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoJHNjb3BlLmNvbmZpZy5wYWdlZGVmKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2VkZWYgPSAkc2NvcGUuY29uZmlnLnBhZ2VkZWY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2FkU2luZ2xlSXRlbSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9OwoKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBQYXRoID0gJHJvdXRlUGFyYW1zLmFwcFBhdGg7CgogICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBTZXR0aW5ncygkc2NvcGUuYXBwUGF0aCwgInNpbmdsZWl0ZW1jb25maWdvYmplY3QiLCBmdW5jdGlvbihvYmplY3ROYW1lKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS8nK29iamVjdE5hbWUrJy8nICsgJHNjb3BlLmNvbmZpZ0lkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwodXJsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihzdGF0dXMsIGRhdGEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLnNpbmdsZWl0ZW1jb25maWcvJyArICRzY29wZS5jb25maWdJZCArICcvJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxvYWRTaW5nbGVJdGVtID0gZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iamVjdE5hbWUgPSAkc2NvcGUuY29uZmlnLm9iamVjdE5hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW5zID0gJHNjb3BlLmNvbmZpZy5jb2x1bW5zOwoKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbnNDc3YgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4sIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zQ3N2ICs9IGNvbHVtbi5uYW1lICsgIiwiOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJyArIG9iamVjdE5hbWUgKyAnLycgKyAkc2NvcGUuaXRlbUlkICsgJy8/Y29sdW1ucz0nICsgY29sdW1uc0NzdjsKCiAgICAgICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vVE9ETzogJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gJycgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJyAgICA8ZGl2IG5nLXJlcGVhdD0iZmllbGQgaW4gcGFnZWRlZi5maWVsZHMiPlxuJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgICAgICA8ZmllbGQgaXRlbT0iZmllbGQiIHZhbD0iJHBhcmVudC5kYXRhIj48L2ZpZWxkPlxuJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIDwvZGl2PlxuJyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9XSwKCiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coIkNyZWF0aW5nIHBhZ2UiKTsKICAgICAgICAgICAgICAgIHNjb3BlLnBhZ2VkZWYgPSB7fTsKICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9IHNjb3BlLmdldFRlbXBsYXRlKCk7CiAgICAgICAgICAgICAgICBpZiAoIXRlbXBsYXRlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHNjb3BlLmdldENvbmZpZ3VyYXRpb24oKTsKCiAgICAgICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCh0ZW1wbGF0ZSk7CiAgICAgICAgICAgICAgICBlbGVtZW50LnJlcGxhY2VXaXRoKG5ld0VsZW1lbnQpOwogICAgICAgICAgICAgICAgJGNvbXBpbGUobmV3RWxlbWVudCkoc2NvcGUpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSkKCiAgICAuZGlyZWN0aXZlKCdyYXdodG1sJywgZnVuY3Rpb24gKCRjb21waWxlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgc2NvcGU6IHsKICAgICAgICAgICAgICAgIGh0bWxVcmw6ICc9JwogICAgICAgICAgICB9LAoKICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJGxvY2F0aW9uJywgJyRyb3V0ZVBhcmFtcycsICdtZXNzYWdlJywgJ0Nvc21vc1NlcnZpY2UnLCAnY29zbW9zLnNldHRpbmdzJywKICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRsb2NhdGlvbiwgJHJvdXRlUGFyYW1zLCBtZXNzYWdlLCBDb3Ntb3NTZXJ2aWNlLCBzZXR0aW5ncykgewoKICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm91dGVQYXJhbXMgPSAkcm91dGVQYXJhbXM7CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRIdG1sID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsPSAkc2NvcGUuaHRtbFVybDsKCiAgICAgICAgICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHRtbEJsb2NrID0gZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3RWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudCgkc2NvcGUuaHRtbEJsb2NrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWxlbWVudC5yZXBsYWNlV2l0aChuZXdFbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29tcGlsZShuZXdFbGVtZW50KSgkc2NvcGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfV0sCgogICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJDcmVhdGluZyByYXdodG1sIGVsZW1lbnQiKTsKICAgICAgICAgICAgICAgIHNjb3BlLmVsZW1lbnQgPSBlbGVtZW50OwogICAgICAgICAgICAgICAgc2NvcGUuZ2V0SHRtbCgpOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSkKCiAgICAuZGlyZWN0aXZlKCdvYmplY3RwaWNrZXInLCBmdW5jdGlvbiAoJGNvbXBpbGUpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICByZXN0cmljdDogJ0UnLAogICAgICAgICAgICBzY29wZTogewogICAgICAgICAgICAgICAgZW5kcG9pbnQ6ICc9PycsCiAgICAgICAgICAgICAgICBpdGVtczogJz0/JywKICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPScsCiAgICAgICAgICAgICAgICBkZXRhaWx0ZW1wbGF0ZTonPScsCiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJz0nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlcXVpcmU6ICJuZ01vZGVsIiwKCiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR0aW1lb3V0JywgJ0Nvc21vc1NlcnZpY2UnLAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHRpbWVvdXQsIENvc21vc1NlcnZpY2UpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVmcmVzaERhdGEgPSBmdW5jdGlvbiAocSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUuZW5kcG9pbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7cTogcX07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLnNlYXJjaCgkc2NvcGUuZW5kcG9pbnQsIHtwYXJhbXM6IHBhcmFtc30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLml0ZW1zID0gZGF0YTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldFRlbXBsYXRlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9ICIiOwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5lbmRwb2ludCAmJiAkc2NvcGUuZW5kcG9pbnQubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2g9ICdyZWZyZXNoPSJyZWZyZXNoRGF0YSgkc2VsZWN0LnNlYXJjaCkiIHJlZnJlc2gtZGVsYXk9IjEwMDAiJzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWktc2VsZWN0IG5nLW1vZGVsPSJzZWxlY3RlZERhdGEuc2VsZWN0ZWQiXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZW1lPSJib290c3RyYXAiIFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZy1kaXNhYmxlZD0iZGlzYWJsZWQiIFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldC1zZWFyY2gtaW5wdXQ9ImZhbHNlIiBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU9IndpZHRoOiAzMDBweDsiPiBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHVpLXNlbGVjdC1tYXRjaCBwbGFjZWhvbGRlcj0iJyArICRzY29wZS5wbGFjZWhvbGRlciArICciPicgKyAkc2NvcGUudGVtcGxhdGUgKyAnPC91aS1zZWxlY3QtbWF0Y2g+IFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWktc2VsZWN0LWNob2ljZXMgcmVwZWF0PSJkYXRhIGluIGl0ZW1zIHRyYWNrIGJ5ICRpbmRleCIgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcrcmVmcmVzaCsnID4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGV0YWlsdGVtcGxhdGUgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8L3VpLXNlbGVjdC1jaG9pY2VzPiBcCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWktc2VsZWN0Pic7CgogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGVtcGxhdGU7CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXJ0V2F0Y2ggPSBmdW5jdGlvbihuZ01vZGVsKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goInNlbGVjdGVkRGF0YS5zZWxlY3RlZCIsIGZ1bmN0aW9uKG5ld1ZhbCwgb2xkVmFsKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG5ld1ZhbCB8fCBvbGRWYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dCggZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5nTW9kZWwuJHNldFZpZXdWYWx1ZShuZXdWYWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH1dLAoKICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBuZ01vZGVsKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygiQ3JlYXRpbmcgb2JqZWN0cGlja2VyIGVsZW1lbnQiKTsKICAgICAgICAgICAgICAgIHNjb3BlLmVsZW1lbnQgPSBlbGVtZW50OwoKCiAgICAgICAgICAgICAgICBpZighc2NvcGUuaXRlbXMpewogICAgICAgICAgICAgICAgICAgIHNjb3BlLml0ZW1zID0gW107CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc2NvcGUuc2VsZWN0ZWREYXRhID0ge307CgogICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gc2NvcGUuZ2V0VGVtcGxhdGUoKTsKICAgICAgICAgICAgICAgIHZhciBuZXdFbGVtZW50ID0gYW5ndWxhci5lbGVtZW50KHRlbXBsYXRlKTsKICAgICAgICAgICAgICAgIHNjb3BlLmVsZW1lbnQucmVwbGFjZVdpdGgobmV3RWxlbWVudCk7CiAgICAgICAgICAgICAgICAkY29tcGlsZShuZXdFbGVtZW50KShzY29wZSk7CgogICAgICAgICAgICAgICAgc2NvcGUuc3RhcnRXYXRjaChuZ01vZGVsKTsKCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KQoKICAgIC5kaXJlY3RpdmUoJ2ZpbGVjdHJsJywgZnVuY3Rpb24gKCRjb21waWxlKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgcmVzdHJpY3Q6ICdFJywKICAgICAgICAgICAgc2NvcGU6IHsKICAgICAgICAgICAgICAgIGxhYmVsOiAnPScsCiAgICAgICAgICAgICAgICBvYmplY3ROYW1lOiAnPScsCiAgICAgICAgICAgICAgICB2YWw6ICc9JywKICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAnPScKICAgICAgICAgICAgfSwKCiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRsb2NhdGlvbicsICckcm91dGVQYXJhbXMnLCAnJG1vZGFsJywgJ21lc3NhZ2UnLCAnQ29zbW9zU2VydmljZScsICdjb3Ntb3Muc2V0dGluZ3MnLAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGxvY2F0aW9uLCAkcm91dGVQYXJhbXMsICRtb2RhbCwgbWVzc2FnZSwgQ29zbW9zU2VydmljZSwgc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm91dGVQYXJhbXMgPSAkcm91dGVQYXJhbXM7CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5icm93c2VGaWxlID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvYnJvd3NlZmlsZS5odG1sJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICJCcm93c2VGaWxlQ29udHJvbGxlciIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdE5hbWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5vYmplY3ROYW1lOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHNlbGVjdGVkRmlsZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlTmFtZSA9ICcvZ3JpZGZzLycrc2VsZWN0ZWRGaWxlLmNvbGxlY3Rpb25fbmFtZSArICcvJytzZWxlY3RlZEZpbGUuZmlsZV9pZCArJyBbJytzZWxlY3RlZEZpbGUuZmlsZW5hbWUrJ10nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZEZpbGUgPSBzZWxlY3RlZEZpbGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZhbCA9ICcvZ3JpZGZzLycrc2VsZWN0ZWRGaWxlLmNvbGxlY3Rpb25fbmFtZSArICcvJytzZWxlY3RlZEZpbGUuZmlsZV9pZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kbG9nLmluZm8oJ01vZGFsIGRpc21pc3NlZCBhdDogJyArIG5ldyBEYXRlKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICApOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRUZW1wbGF0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICc8bGFiZWw+e3tsYWJlbH19PHNwYW4gbmctaWY9InJlcXVpcmVkIj4mbmJzcDsqJm5ic3A7PC9zcGFuPjwvbGFiZWw+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCByZWFkb25seSBjbGFzcz0iZm9ybS1jb250cm9sIiB0eXBlPSJcJ3RleHRcJ319IiBuZy1tb2RlbD0idmFsIiB0aXRsZT0ie3tmaWxlTmFtZX19Ii8+JysKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBuZy1jbGljaz0iYnJvd3NlRmlsZSgpIiBjbGFzcz0iYnRuIGJ0bi1zbSBidG4tcHJpbWFyeSI+QnJ3b3NlPC9idXR0b24+JzsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAoKICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7CiAgICAgICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSBzY29wZS5nZXRUZW1wbGF0ZSgpOwoKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJGaWxlIGN0cmwgdGVtcGxhdGUiICsgdGVtcGxhdGUpOwogICAgICAgICAgICAgICAgdmFyIG5ld0VsZW1lbnQgPSBhbmd1bGFyLmVsZW1lbnQodGVtcGxhdGUpOwogICAgICAgICAgICAgICAgZWxlbWVudC5yZXBsYWNlV2l0aChuZXdFbGVtZW50KTsKICAgICAgICAgICAgICAgICRjb21waWxlKG5ld0VsZW1lbnQpKHNjb3BlKTsKICAgICAgICAgICAgfQoKICAgICAgICB9CiAgICB9KTsKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ0Jyb3dzZUZpbGVDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJG1vZGFsSW5zdGFuY2UnLCAnQ29zbW9zU2VydmljZScsICdvYmplY3ROYW1lJywKICAgIGZ1bmN0aW9uICgkc2NvcGUsICRtb2RhbEluc3RhbmNlLCBDb3Ntb3NTZXJ2aWNlLCBvYmplY3ROYW1lKSB7CiAgICAkc2NvcGUuZmlsZU9iamVjdE5hbWUgPSBvYmplY3ROYW1lOwoKICAgICRzY29wZS51cGxvYWRlZF9maWxlcyA9IFtdOwoKICAgICRzY29wZS5zZXRBY3Rpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgZG9jdW1lbnQudXBsb2FkRm9ybS5hY3Rpb24gPSAiL2dyaWRmcy8iICsgJHNjb3BlLmZpbGVPYmplY3ROYW1lICsgIi8iOwogICAgICAgICRzY29wZS5nZXRGaWxlcygpOwogICAgfTsKCiAgICAkc2NvcGUuc2VsZWN0RmlsZSA9IGZ1bmN0aW9uKGZpbGUpewogICAgICAgICRzY29wZS5zZWxlY3RlZEZpbGUgPSBmaWxlOwogICAgfTsKCiAgICAkc2NvcGUuZ2V0RmlsZXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgQ29zbW9zU2VydmljZS5nZXQoJy9ncmlkZnMvJyArICRzY29wZS5maWxlT2JqZWN0TmFtZSArICcvJywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICRzY29wZS51cGxvYWRlZF9maWxlcyA9IGRhdGE7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgfQogICAgICAgICk7CiAgICB9OwoKICAgICRzY29wZS5vbkZpbGVVcGxvYWRMb2FkZWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHJlc3BvbnNlVGV4dCA9IHRoaXMuY29udGVudERvY3VtZW50LmJvZHkuaW5uZXJUZXh0OwoKICAgICAgICBpZiAocmVzcG9uc2VUZXh0KSB7CiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBKU09OLnBhcnNlKEpTT04ucGFyc2UocmVzcG9uc2VUZXh0KS5fZCk7CiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uIChkYXRhLCBpbmRleCkgewogICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZGVkX2ZpbGVzLnB1c2goZGF0YSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7CiAgICAgICAgfQogICAgICAgIC8vIENsZWFyIHRoZSBpZnJhbWUgY29udHJvbAogICAgICAgICQoJyNzdWJtaXQtaWZyYW1lJykucmVtb3ZlKCk7CiAgICAgICAgalF1ZXJ5KCIjZmlsZUxpc3QiKS5lbXB0eSgpOwogICAgICAgIGpRdWVyeSgiI2ZpbGVMaXN0IikuYXBwZW5kKGpRdWVyeSgnPGlucHV0IGNsYXNzPSJmaWxlLXNlbGVjdG9yIiBuYW1lPSJ1cGxvYWRlZGZpbGUiIHR5cGU9ImZpbGUiIG9uY2hhbmdlPSJhbmd1bGFyLmVsZW1lbnQodGhpcykuc2NvcGUoKS5maWxlTmFtZUNoYW5nZWQoKSIgLz4nKSk7CiAgICB9OwoKICAgICRzY29wZS51cGxvYWRGaWxlID0gZnVuY3Rpb24gKCkgewogICAgICAgIGpRdWVyeSgiI2lGcmFtZVBsYWNlaG9sZGVyIikuaHRtbCgiPGlmcmFtZSBuYW1lPSdzdWJtaXQtaWZyYW1lJyBpZD0nc3VibWl0LWlmcmFtZScgc3R5bGU9J2Rpc3BsYXk6IG5vbmU7Jz48L2lmcmFtZT4iKTsKCiAgICAgICAgalF1ZXJ5KCIjc3VibWl0LWlmcmFtZSIpLmxvYWQoJHNjb3BlLm9uRmlsZVVwbG9hZExvYWRlZCk7CiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInVwbG9hZEZvcm0iKS5zdWJtaXQoKTsKICAgIH07CgogICAgJHNjb3BlLmZpbGVOYW1lQ2hhbmdlZCA9IGZ1bmN0aW9uIChmaWxlSW5wdXQpIHsKICAgICAgICB2YXIgZW1wdHlGb3VuZCA9IGZhbHNlOwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChqUXVlcnkoIiNmaWxlTGlzdCIpLmNoaWxkcmVuKCksIGZ1bmN0aW9uIChkYXRhLCBpbmRleCkgewogICAgICAgICAgICBpZiAoIWRhdGEudmFsdWUpIHsKICAgICAgICAgICAgICAgIGVtcHR5Rm91bmQgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIGlmICghZW1wdHlGb3VuZCkgewogICAgICAgICAgICBqUXVlcnkoIiNmaWxlTGlzdCIpLmFwcGVuZChqUXVlcnkoJzxpbnB1dCBjbGFzcz0iZmlsZS1zZWxlY3RvciIgbmFtZT0idXBsb2FkZWRmaWxlIiB0eXBlPSJmaWxlIiBvbmNoYW5nZT0iYW5ndWxhci5lbGVtZW50KHRoaXMpLnNjb3BlKCkuZmlsZU5hbWVDaGFuZ2VkKCkiIC8+JykpOwogICAgICAgIH0KICAgIH07CgogICAgJHNjb3BlLnJlbW92ZUZpbGUgPSBmdW5jdGlvbiAoaW5kZXgpIHsKICAgICAgICB2YXIgZmlsZSA9ICRzY29wZS51cGxvYWRlZF9maWxlc1tpbmRleF07CiAgICAgICAgaWYgKGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIGZpbGUgJyArIGZpbGUuZmlsZW5hbWUgKyAnPycpKSB7CiAgICAgICAgICAgIHZhciBmaWxlX2lkID0gZmlsZS5maWxlX2lkOwogICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmRlbGV0ZSgnL2dyaWRmcy8nICsgJHNjb3BlLmZpbGVPYmplY3ROYW1lICsgJy8nICsgZmlsZV9pZCArICcvJywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBsb2FkZWRfZmlsZXMuc3BsaWNlKGluZGV4LCAxKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH07CgogICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkgewogICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCRzY29wZS5zZWxlY3RlZEZpbGUpOwogICAgfTsKCiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkgewogICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpOwogICAgfTsKCn1dKTsKCgo=')
},
{
'name': '/app/lib/cosmos/js/controllers/ListCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignTGlzdEN0cmwnLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJG1vZGFsJywgJ0Nvc21vc1NlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRtb2RhbCwgQ29zbW9zU2VydmljZSkgewoKICAgICRzY29wZS5zZXJ2aWNlTmFtZSA9ICJsaXN0cyI7CgogICAgJHNjb3BlLmNsZWFyRXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gZmFsc2U7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICIiOwogICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwogICAgfTsKCiAgICAkc2NvcGUucHJvY2Vzc0Vycm9yID0gZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICRzY29wZS5oYXNFcnJvciA9IHRydWU7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTsKICAgIH07CgogICAgJHNjb3BlLmdldERhdGEgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS9jb3Ntb3MubGlzdGNvbmZpZ3VyYXRpb25zLyc7CgogICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICRzY29wZS5saXN0cyA9IGRhdGE7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgfQogICAgICAgICk7CiAgICB9OwoKICAgICRzY29wZS5nZXREYXRhKCk7Cn1dKTs=')
},
{
'name': '/app/lib/cosmos/js/controllers/IndexCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ0luZGV4Q3RybCcsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnQ29zbW9zU2VydmljZScsICdtZXNzYWdlJywKICAgICdjb3Ntb3MuY2FjaGVkbG9hZGVyJywnY29zbW9zLnV0aWxzJywKICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb3V0ZVBhcmFtcywgJGxvY2F0aW9uLCBDb3Ntb3NTZXJ2aWNlLCBtZXNzYWdlLCBjYWNoZWRsb2FkZXIsIHV0aWxzKSB7CgogICAgICAgICRzY29wZS5wYWdlUmVmcyA9IFtdOwogICAgICAgICRzY29wZS5hcHBQYXRoID0gJHJvdXRlUGFyYW1zLmFwcFBhdGg7CgogICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IgPSBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvYXBwc3R1ZGlvLycpOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoJHNjb3BlLmFwcFBhdGggJiYgJHNjb3BlLmFwcFBhdGgubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdldEFwcENvbmZpZ3VyYXRpb24oKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLmdsb2JhbHNldHRpbmdzLyc7CgogICAgICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJsLCBmdW5jdGlvbiAocmV0dXJuZWREYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmV0dXJuZWREYXRhIHx8IHJldHVybmVkRGF0YS5sZW5ndGggIT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hcHBzdHVkaW8vJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnbG9iYWxTZXR0aW5ncyA9IHJldHVybmVkRGF0YVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcElkID0gZ2xvYmFsU2V0dGluZ3MuZGVmYXVsdGFwcGlkOwogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0QXBwQ29uZmlndXJhdGlvbigpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICRzY29wZS5nZXRBcHBDb25maWd1cmF0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdXJsOwogICAgICAgICAgICBpZiAoJHNjb3BlLmFwcElkKSB7CiAgICAgICAgICAgICAgICB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLmFwcGxpY2F0aW9ucy8/ZmlsdGVyPXsiaWQiOiInICsgJHNjb3BlLmFwcElkICsgJyJ9JzsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICgkc2NvcGUuYXBwUGF0aCkgewogICAgICAgICAgICAgICAgdXJsID0gJy9zZXJ2aWNlL2Nvc21vcy5hcHBsaWNhdGlvbnMvP2ZpbHRlcj17InBhdGgiOiInICsgJHNjb3BlLmFwcFBhdGggKyAnIn0nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hcHBsaXN0LycpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgYXBwQ2FjaGUgPSAiQXBwbGljYXRpb24uIiArICgkc2NvcGUuYXBwUGF0aCB8fCAkc2NvcGUuYXBwSWQpOwoKICAgICAgICAgICAgY2FjaGVkbG9hZGVyLmdldChhcHBDYWNoZSwgdXJsLCBmdW5jdGlvbiAocmV0dXJuZWREYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXR1cm5lZERhdGEgfHwgcmV0dXJuZWREYXRhLmxlbmd0aCAhPSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIG1zZyA9ICJFeGFjdGx5IG9uZSBhcHBsaWNhdGlvbiBpcyBleHBlY3RlZCBmb3IgcGF0aCA9ICIKICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgKyAkc2NvcGUuYXBwUGF0aCArICIuIEZvdW5kID0gIiArICgoIXJldHVybmVkRGF0YSkgPyAwIDogcmV0dXJuZWREYXRhLmxlbmd0aCk7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWVzc2FnZS5wdXNoKHsibWVzc2FnZSI6IG1zZywgInRpdGxlIjogIkludmFsaWQgYXBwbGljYXRpb24gbmFtZSIsICJkYXRhIjogIiJ9KTsKICAgICAgICAgICAgICAgICAgICAgICAgLy8kbG9jYXRpb24ucGF0aCgnL21lc3NhZ2UnKTsKICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9hcHBzdHVkaW8vJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBTZXR0aW5ncyA9IHJldHVybmVkRGF0YVswXTsKICAgICAgICAgICAgICAgICAgICBpZighJHNjb3BlLmFwcFBhdGgpewogICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2EvJyskc2NvcGUuYXBwU2V0dGluZ3MucGF0aCsnLycpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGx5U2V0dGluZ3MoJHNjb3BlLmFwcFNldHRpbmdzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuYXBwbHlTZXR0aW5ncyA9IGZ1bmN0aW9uIChhcHApIHsKICAgICAgICAgICAgaWYoIWFwcCl7CiAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKDQwNCwgIkFwcGxpY2F0aW9uIG5vdCBmb3VuZCBhdCB0aGUgcGF0aCIpOwoKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGlmIChhcHAuc2V0dGluZ3MgJiYgYXBwLnNldHRpbmdzLmluZGV4UGFnZUlkKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2VSZWZzID0gWwogICAgICAgICAgICAgICAgICAgICAgICB7InR5cGUiOiAicGFnZXJlZiIsICJuYW1lIjogIkluZGV4IiwgInBhZ2VJZCI6IGFwcC5zZXR0aW5ncy5pbmRleFBhZ2VJZH0KICAgICAgICAgICAgICAgICAgICBdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdXRpbHMuZ2V0QWxsUGFnZXMoYXBwLCBmdW5jdGlvbiAocGFnZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdlcyA9IHBhZ2VzOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yCiAgICAgICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uKCk7CiAgICB9XSkKOw==')
},
{
'name': '/app/lib/cosmos/js/controllers/AppStudioCtrl.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/js/controllers/FormDesignCtrl.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/js/controllers/FileUploadCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignRmlsZVVwbG9hZEN0cmwnLCBbJyRzY29wZScsICckbW9kYWwnLCAnJHJvdXRlUGFyYW1zJywgJ0Nvc21vc1NlcnZpY2UnLAogICAgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsLCAkcm91dGVQYXJhbXMsIENvc21vc1NlcnZpY2UpIHsKCiAgICAgICAgJHNjb3BlLmZpbGVPYmplY3ROYW1lID0gJHJvdXRlUGFyYW1zLmZpbGVPYmplY3ROYW1lOwoKICAgICAgICAkc2NvcGUuc2V0QWN0aW9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGRvY3VtZW50LnVwbG9hZEZvcm0uYWN0aW9uID0gIi9ncmlkZnMvIiArICRzY29wZS5maWxlT2JqZWN0TmFtZSArICIvIjsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuY2xlYXJFcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gZmFsc2U7CiAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSAiIjsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1c19kYXRhID0gIiI7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvciA9IGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gdHJ1ZTsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1c19kYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnVwbG9hZGVkX2ZpbGVzID0gWwogICAgICAgICAgICB7ImZpbGVfaWQiOiAidGVzdCJ9CiAgICAgICAgXTsKCiAgICAgICAgJHNjb3BlLm9uRmlsZVVwbG9hZExvYWRlZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlc3BvbnNlVGV4dCA9IHRoaXMuY29udGVudERvY3VtZW50LmJvZHkuaW5uZXJUZXh0OwoKICAgICAgICAgICAgaWYgKHJlc3BvbnNlVGV4dCkgewogICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IEpTT04ucGFyc2UoSlNPTi5wYXJzZShyZXNwb25zZVRleHQpLl9kKTsKICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2YWx1ZXMsIGZ1bmN0aW9uIChkYXRhLCBpbmRleCkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS51cGxvYWRlZF9maWxlcy5wdXNoKGRhdGEpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGlmcmFtZSBjb250cm9sCiAgICAgICAgICAgICQoJyNzdWJtaXQtaWZyYW1lJykucmVtb3ZlKCk7CiAgICAgICAgICAgIGpRdWVyeSgiI2ZpbGVMaXN0IikuZW1wdHkoKTsKICAgICAgICAgICAgalF1ZXJ5KCIjZmlsZUxpc3QiKS5hcHBlbmQoalF1ZXJ5KCc8aW5wdXQgY2xhc3M9ImZpbGUtc2VsZWN0b3IiIG5hbWU9InVwbG9hZGVkZmlsZSIgdHlwZT0iZmlsZSIgb25jaGFuZ2U9ImFuZ3VsYXIuZWxlbWVudCh0aGlzKS5zY29wZSgpLmZpbGVOYW1lQ2hhbmdlZCgpIiAvPicpKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUudXBsb2FkRmlsZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgalF1ZXJ5KCIjaUZyYW1lUGxhY2Vob2xkZXIiKS5odG1sKCI8aWZyYW1lIG5hbWU9J3N1Ym1pdC1pZnJhbWUnIGlkPSdzdWJtaXQtaWZyYW1lJyBzdHlsZT0nZGlzcGxheTogbm9uZTsnPjwvaWZyYW1lPiIpOwoKICAgICAgICAgICAgalF1ZXJ5KCIjc3VibWl0LWlmcmFtZSIpLmxvYWQoJHNjb3BlLm9uRmlsZVVwbG9hZExvYWRlZCk7CiAgICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ1cGxvYWRGb3JtIikuc3VibWl0KCk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmZpbGVOYW1lQ2hhbmdlZCA9IGZ1bmN0aW9uIChmaWxlSW5wdXQpIHsKICAgICAgICAgICAgdmFyIGVtcHR5Rm91bmQgPSBmYWxzZTsKICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGpRdWVyeSgiI2ZpbGVMaXN0IikuY2hpbGRyZW4oKSwgZnVuY3Rpb24gKGRhdGEsIGluZGV4KSB7CiAgICAgICAgICAgICAgICBpZiAoIWRhdGEudmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICBlbXB0eUZvdW5kID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBpZiAoIWVtcHR5Rm91bmQpIHsKICAgICAgICAgICAgICAgIGpRdWVyeSgiI2ZpbGVMaXN0IikuYXBwZW5kKGpRdWVyeSgnPGlucHV0IGNsYXNzPSJmaWxlLXNlbGVjdG9yIiBuYW1lPSJ1cGxvYWRlZGZpbGUiIHR5cGU9ImZpbGUiIG9uY2hhbmdlPSJhbmd1bGFyLmVsZW1lbnQodGhpcykuc2NvcGUoKS5maWxlTmFtZUNoYW5nZWQoKSIgLz4nKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2NvcGUucmVtb3ZlRmlsZSA9IGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICAgICB2YXIgZmlsZSA9ICRzY29wZS51cGxvYWRlZF9maWxlc1tpbmRleF07CiAgICAgICAgICAgIGlmIChjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSBmaWxlICcgKyBmaWxlLmZpbGVuYW1lICsgJz8nKSkgewogICAgICAgICAgICAgICAgdmFyIGZpbGVfaWQgPSBmaWxlLmZpbGVfaWQ7CiAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmRlbGV0ZSgnL2dyaWRmcy8nICsgJHNjb3BlLmZpbGVPYmplY3ROYW1lICsgJy8nICsgZmlsZV9pZCArICcvJywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZGVkX2ZpbGVzLnNwbGljZShpbmRleCwgMSk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmdldEZpbGVzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCgnL2dyaWRmcy8nICsgJHNjb3BlLmZpbGVPYmplY3ROYW1lICsgJy8nLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS51cGxvYWRlZF9maWxlcyA9IGRhdGE7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0RmlsZXMoKTsKICAgIH1dKTs=')
},
{
'name': '/app/lib/cosmos/js/controllers/TerminalCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignVGVybWluYWxDdHJsJywgWyckc2NvcGUnLCAnJG1vZGFsJywgJyRyb3V0ZVBhcmFtcycsICdDb3Ntb3NTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsLCAkcm91dGVQYXJhbXMsIENvc21vc1NlcnZpY2UpIHsKICAgICRzY29wZS5zZXJ2aWNlID0gIi9zZXJ2aWNlLyI7CiAgICAkc2NvcGUuY29sdW1ucyA9ICIiOwogICAgJHNjb3BlLmZpbHRlciA9ICIiOwogICAgJHNjb3BlLmRhdGEgPSAiIjsKICAgICRzY29wZS5yZXN1bHQgPSAiIjsKICAgICRzY29wZS5zdGF0dXMgPSAiIjsKICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwoKICAgICRzY29wZS5jbGVhckVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICRzY29wZS5oYXNFcnJvciA9IGZhbHNlOwogICAgICAgICRzY29wZS5zdGF0dXMgPSAiIjsKICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSAiIjsKICAgIH07CgogICAgJHNjb3BlLnByb2Nlc3NSZXN1bHQgPSBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICRzY29wZS5yZXN1bHQgPSBKU09OLnN0cmluZ2lmeShkYXRhLCB1bmRlZmluZWQsIDQpCiAgICB9OwoKICAgICRzY29wZS5jbGVhclJlc3VsdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAkc2NvcGUucmVzdWx0ID0gIiI7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICIiOwogICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwogICAgfTsKCiAgICAkc2NvcGUucHJvY2Vzc0Vycm9yID0gZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICRzY29wZS5oYXNFcnJvciA9IHRydWU7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTsKICAgIH07CgogICAgJHNjb3BlLmdldCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuY2xlYXJSZXN1bHQoKTsKICAgICAgICB2YXIgdXJsID0gJHNjb3BlLnNlcnZpY2U7CiAgICAgICAgdmFyIHF1ZXJ5U3RhcnRlZCA9IGZhbHNlOwogICAgICAgIGlmICgkc2NvcGUuY29sdW1ucyAmJiAkc2NvcGUuY29sdW1ucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHVybCA9IHVybCArICI/Y29sdW1ucz0iICsgJHNjb3BlLmNvbHVtbnM7CiAgICAgICAgICAgIHF1ZXJ5U3RhcnRlZCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICgkc2NvcGUuZmlsdGVyICYmICRzY29wZS5maWx0ZXIubGVuZ3RoID4gMCkgewogICAgICAgICAgICBpZiAocXVlcnlTdGFydGVkKSB7CiAgICAgICAgICAgICAgICB1cmwgPSB1cmwgKyAiJmZpbHRlcj0iICsgJHNjb3BlLmZpbHRlcjsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHVybCA9IHVybCArICI/ZmlsdGVyPSIgKyAkc2NvcGUuZmlsdGVyOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCh1cmwsIGZ1bmN0aW9uIChyZXR1cm5lZERhdGEpIHsKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzUmVzdWx0KHJldHVybmVkRGF0YSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgfQogICAgICAgICk7CiAgICB9OwoKICAgICRzY29wZS5wb3N0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICRzY29wZS5jbGVhclJlc3VsdCgpOwogICAgICAgIHZhciB1cmwgPSAkc2NvcGUuc2VydmljZTsKICAgICAgICBDb3Ntb3NTZXJ2aWNlLnBvc3QodXJsLCAkc2NvcGUuZGF0YSwgZnVuY3Rpb24gKHJldHVybmVkRGF0YSkgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NSZXN1bHQocmV0dXJuZWREYXRhKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICB9CiAgICAgICAgKTsKICAgIH07CgogICAgJHNjb3BlLnB1dCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuY2xlYXJSZXN1bHQoKTsKICAgICAgICB2YXIgdXJsID0gJHNjb3BlLnNlcnZpY2U7CiAgICAgICAgQ29zbW9zU2VydmljZS5wdXQodXJsLCAkc2NvcGUuZGF0YSwgZnVuY3Rpb24gKHJldHVybmVkRGF0YSkgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NSZXN1bHQocmV0dXJuZWREYXRhKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICB9CiAgICAgICAgKTsKICAgIH07CgogICAgJHNjb3BlLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuY2xlYXJSZXN1bHQoKTsKICAgICAgICB2YXIgdXJsID0gJHNjb3BlLnNlcnZpY2U7CiAgICAgICAgQ29zbW9zU2VydmljZS5kZWxldGUodXJsLCBmdW5jdGlvbiAocmV0dXJuZWREYXRhKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc1Jlc3VsdChyZXR1cm5lZERhdGEpOwogICAgICAgICAgICB9LAogICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgIH0KICAgICAgICApOwogICAgfTsKfV0pCjs=')
},
{
'name': '/app/lib/cosmos/js/controllers/ItemDesignCtrl.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/cosmos/js/controllers/PageDesignCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTEvMTEvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignUGFnZURlc2lnbkN0cmwnLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJG1vZGFsJywgJ0Nvc21vc1NlcnZpY2UnLCdjb3Ntb3Muc2V0dGluZ3MnLCAnZ2xvYmFsaGFzaHRhYmxlJywKICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb3V0ZVBhcmFtcywgJHRlbXBsYXRlQ2FjaGUsICRtb2RhbCwgQ29zbW9zU2VydmljZSwgc2V0dGluZ3MsIGhhc2h0YWJsZSkgewoKICAgICAgICAkc2NvcGUuaGFzaHRhYmxlID0gaGFzaHRhYmxlOwogICAgICAgICRzY29wZS5jb3Ntb3NDdXJyZW50QXBwbGljYXRpb25SZWYgPSAiX0Nvc21vc19DdXJyZW50X0FwcGxpY2F0aW9uXyI7CgoKICAgICAgICAkc2NvcGUuZGVzaWduTW9kZSA9IHRydWU7CiAgICAgICAgJHNjb3BlLmFjdGl2ZVRhYiA9ICJ0b29scyI7CgogICAgICAgICRzY29wZS5zZWxlY3RlZEFwcGxpY2F0aW9uID0gdW5kZWZpbmVkOwoKICAgICAgICAkc2NvcGUub25zdWNjZXNzX3R5cGVzID0gWwogICAgICAgICAgICB7J25hbWUnOiAnbWVzc2FnZScsICd0aXRsZSc6ICdNZXNzYWdlJ30sCiAgICAgICAgICAgIHsnbmFtZSc6ICd1cmwnLCAnbGFiZWwnOiAnUmVkaXJlY3QnfQogICAgICAgIF07CgogICAgICAgICRzY29wZS5pbml0ID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgJCggIiN0b29sYmFyIiApLmRpYWxvZyh7IHBvc2l0aW9uOiB7IG15OiAibGVmdC0yMDAgdG9wIiwgYXQ6ImxlZnQtMjAwIHRvcCIsIG9mOiIifSwgY2xvc2VUZXh0OiAieCJ9KTsKCiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmluaXRTZXR0aW5ncyA9IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICQoICIjc2V0dGluZ3MiICkuZGlhbG9nKHsgcG9zaXRpb246IHsgbXk6ICJyaWdodC0yMDAgdG9wIiwgYXQ6InJpZ2h0LTIwMCB0b3AiLCBvZjoiIn0sIGNsb3NlVGV4dDogIngifSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnNlbGVjdEl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRJdGVtID0gaXRlbTsKICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZVRhYiA9ICJzZXR0aW5ncyI7CiAgICAgICAgICAgIHZhciBvcHRpb25Gb3JtID0gJHNjb3BlLm9wdGlvbkZvcm1CeVR5cGVbaXRlbS50eXBlXTsKICAgICAgICAgICAgaWYgKG9wdGlvbkZvcm0pIHsKICAgICAgICAgICAgICAgICRzY29wZS5vcHRpb25zZm9ybSA9IG9wdGlvbkZvcm07CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkc2NvcGUub3B0aW9uc2Zvcm0gPSAkc2NvcGUub3B0aW9uRm9ybUJ5VHlwZVsiZGVmYXVsdCJdOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnRvb2xzQWN0aXZlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFjdGl2ZVRhYiA9PT0gInRvb2xzIjsKICAgICAgICB9OwogICAgICAgICRzY29wZS5zZXR0aW5nc0FjdGl2ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hY3RpdmVUYWIgPT09ICJzZXR0aW5ncyI7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLm9wdGlvbnNmb3JtID0gewogICAgICAgIH07CgogICAgICAgICRzY29wZS5vcHRpb25Gb3JtQnlUeXBlID0gewogICAgICAgICAgICAicGFnZSI6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogImlucHV0IiwgIm5hbWUiOiJ0aXRsZSIsICJsYWJlbCI6ICJUaXRsZSJ9LAogICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJjaGVja2JveCIsICJuYW1lIjoibG9naW5SZXF1aXJlZCIsICJsYWJlbCI6ICJMb2dpbiByZXF1aXJlZCJ9CgogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAibWVudXJlZiI6IHsKICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogImNvbXBvc2l0ZSIsICJsYWJlbCI6ICJTZXR0aW5ncyIsICJuYW1lIjogInZhbHVlIiwgZmllbGRzOlsKICAgICAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogImlucHV0IiwgImxhYmVsIjogIk1lbnUgSWQiLCAibmFtZSI6ICJtZW51SWQifQogICAgICAgICAgICAgICAgICAgIF19CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJmb3JtcmVmIjogewogICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgICB7InR5cGUiOiAiY29tcG9zaXRlIiwgImxhYmVsIjogIlNldHRpbmdzIiwgIm5hbWUiOiAidmFsdWUiLCBmaWVsZHM6WwogICAgICAgICAgICAgICAgICAgICAgICB7InR5cGUiOiAiaW5wdXQiLCAibGFiZWwiOiAiRm9ybSBJZCIsICJuYW1lIjogImZvcm1JZCJ9CiAgICAgICAgICAgICAgICAgICAgXX0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImxpc3RyZWYiOiB7CiAgICAgICAgICAgICAgICAiZmllbGRzIjogWwogICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJjb21wb3NpdGUiLCAibGFiZWwiOiAiU2V0dGluZ3MiLCAibmFtZSI6ICJ2YWx1ZSIsIGZpZWxkczpbCiAgICAgICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJpbnB1dCIsICJsYWJlbCI6ICJMaXN0IElkIiwgIm5hbWUiOiAibGlzdElkIn0KICAgICAgICAgICAgICAgICAgICBdfQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY2hhcnRyZWYiOiB7CiAgICAgICAgICAgICAgICAiZmllbGRzIjogWwogICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJjb21wb3NpdGUiLCAibGFiZWwiOiAiU2V0dGluZ3MiLCAibmFtZSI6ICJ2YWx1ZSIsIGZpZWxkczpbCiAgICAgICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJpbnB1dCIsICJsYWJlbCI6ICJDaGFydCBJZCIsICJuYW1lIjogImNoYXJ0SWQifQogICAgICAgICAgICAgICAgICAgIF19CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjc3NyZWYiOiB7CiAgICAgICAgICAgICAgICAiZmllbGRzIjogWwogICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJpbnB1dCIsICJsYWJlbCI6ICJocmVmIiwgIm5hbWUiOiAiaHJlZiJ9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJqc3JlZiI6IHsKICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogImlucHV0IiwgImxhYmVsIjogInNyYyIsICJuYW1lIjogInNyYyJ9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJleHRqc3JlZiI6IHsKICAgICAgICAgICAgICAgICJmaWVsZHMiOiBbCiAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogImlucHV0IiwgImxhYmVsIjogInNyYyIsICJuYW1lIjogInNyYyJ9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJ3aWRnZXRob3N0IjogewogICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogImlucHV0IiwgImxhYmVsIjogIldpZGdldCBOYW1lIiwgIm5hbWUiOiAidmFsdWUifQogICAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICAiY29uZGl0aW9uIjp7CiAgICAgICAgICAgICAgICAibGFiZWwiOiAiQ29uZGl0aW9uIG9wdGlvbnMiLCAidHlwZSI6ImNvbmRpdGlvbiIsICJuYW1lIjoiY29uZGl0aW9uIiwgImZpZWxkcyI6WwogICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJpbnB1dCIsICJsYWJlbCI6ICJMYWJlbCIsICJuYW1lIjogImxhYmVsIn0sCiAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogImlucHV0IiwgImxhYmVsIjogIk5hbWUiLCAibmFtZSI6ICJuYW1lIn0sCiAgICAgICAgICAgICAgICAgICAgeyJ0eXBlIjogImlucHV0IiwgImxhYmVsIjogIkV4cHJlc3Npb24iLCAibmFtZSI6ICJleHByZXNzaW9uIn0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgImh0bWxibG9jayI6ewogICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgICB7IGxhYmVsOiAnVHlwZScsIG5hbWU6ImJsb2NrdHlwZSIsIHR5cGU6ICdzZWxlY3QnLCBvcHRpb25zOiB7IGNob2ljZXM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgeyd2YWx1ZSc6ICdoMScsICdsYWJlbCc6ICdoMSd9LAogICAgICAgICAgICAgICAgICAgICAgICB7J3ZhbHVlJzogJ2gyJywgJ2xhYmVsJzogJ2gyJ30sCiAgICAgICAgICAgICAgICAgICAgICAgIHsndmFsdWUnOiAnaDMnLCAnbGFiZWwnOiAnaDMnfSwKICAgICAgICAgICAgICAgICAgICAgICAgeyd2YWx1ZSc6ICdoNCcsICdsYWJlbCc6ICdoNCd9LAogICAgICAgICAgICAgICAgICAgICAgICB7J3ZhbHVlJzogJ2g1JywgJ2xhYmVsJzogJ2g1J30sCiAgICAgICAgICAgICAgICAgICAgICAgIHsndmFsdWUnOiAncCcsICdsYWJlbCc6ICdwJ30KICAgICAgICAgICAgICAgICAgICBdfX0sCgogICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJjb2RlZWRpdG9yIiwgImxhYmVsIjogIkh0bWwiLCAibmFtZSI6ICJ2YWx1ZSJ9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJkZWZhdWx0IjogewogICAgICAgICAgICAgICAgImZpZWxkcyI6IFsKICAgICAgICAgICAgICAgICAgICB7InR5cGUiOiAiaW5wdXQiLCAibGFiZWwiOiAiTGFiZWwiLCAibmFtZSI6ICJsYWJlbCJ9LAogICAgICAgICAgICAgICAgICAgIHsidHlwZSI6ICJpbnB1dCIsICJsYWJlbCI6ICJOYW1lIiwgIm5hbWUiOiAibmFtZSJ9CiAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2NvcGUudG9vbHNMaXN0ID0gWwogICAgICAgICAgICB7bGFiZWw6ICdNZW51JywgdHlwZTogIm1lbnVyZWYifSwKICAgICAgICAgICAge2xhYmVsOiAnRm9ybScsIHR5cGU6ICJmb3JtcmVmIiwgb3B0aW9uczogeyJ2YWx1ZSI6ICIifX0sCiAgICAgICAgICAgIHtsYWJlbDogJ1BhZ2UnLCB0eXBlOiAicGFnZXJlZiIsIG9wdGlvbnM6IHt9fSwKICAgICAgICAgICAge2xhYmVsOiAnTGlzdCcsIHR5cGU6ICJsaXN0cmVmIiwgb3B0aW9uczoge319LAogICAgICAgICAgICB7bGFiZWw6ICdIdG1sJywgdHlwZTogImh0bWxibG9jayIsIG9wdGlvbnM6IHt9fSwKICAgICAgICAgICAge2xhYmVsOiAnMiBDb2x1bW5zJywgdHlwZTogInR3b2NvbHVtbiJ9LAogICAgICAgICAgICB7bGFiZWw6ICczIENvbHVtbnMnLCB0eXBlOiAidGhyZWVjb2x1bW4ifSwKICAgICAgICAgICAge2xhYmVsOiAnQ2hhcnQnLCB0eXBlOiAiY2hhcnRyZWYifSwKICAgICAgICAgICAge2xhYmVsOiAiV2lkZ2V0IiwgdHlwZTogIndpZGdldGhvc3QifSwKICAgICAgICAgICAge2xhYmVsOiAiQ1NTIEZpbGUiLCB0eXBlOiAiY3NzcmVmIn0sCiAgICAgICAgICAgIHtsYWJlbDogIkpTIEZpbGUiLCB0eXBlOiAianNyZWYifSwKICAgICAgICAgICAge2xhYmVsOiAiRXh0ZXJuYWwgSlMgRmlsZSIsIHR5cGU6ICJleHRqc3JlZiJ9CiAgICAgICAgXTsKCiAgICAgICAgJHNjb3BlLmNvbXBvbmVudHMgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIFtdLCAkc2NvcGUudG9vbHNMaXN0KTsKCiAgICAgICAgJHNjb3BlLnBhZ2UgPSB7CiAgICAgICAgICAgICJ0aXRsZSI6ICJVbnRpdGxlZCBwYWdlIiwKICAgICAgICAgICAgInR5cGUiOiAicGFnZSIsCiAgICAgICAgICAgICJvbnN1Y2Nlc3MiOiB7InR5cGUiOiAibWVzc2FnZSIsICJ2YWx1ZSI6ICJUaGFuayB5b3UifSwKICAgICAgICAgICAgImZpZWxkcyI6IFtdCiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnBhZ2VJZCA9ICRyb3V0ZVBhcmFtcy5wYWdlSWQ7CiAgICAgICAgJHNjb3BlLmFwcFBhdGggPSAkcm91dGVQYXJhbXMuYXBwUGF0aDsKCiAgICAgICAgJHNjb3BlLmNsZWFyRXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICRzY29wZS5oYXNFcnJvciA9IGZhbHNlOwogICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gIiI7CiAgICAgICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IgPSBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICRzY29wZS5oYXNFcnJvciA9IHRydWU7CiAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSBzdGF0dXM7CiAgICAgICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5wcm9jZXNzUGFnZSA9IGZ1bmN0aW9uIChwYWdlKSB7CiAgICAgICAgICAgIGlmICghcGFnZS5vbnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgIHBhZ2Uub25zdWNjZXNzID0ge307CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYoIXBhZ2UudHlwZSl7CiAgICAgICAgICAgICAgICBwYWdlLnR5cGUgPSAicGFnZSI7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJHNjb3BlLnBhZ2UgPSBwYWdlOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwgPSBmdW5jdGlvbih1cmwpIHsKICAgICAgICAgICAgQ29zbW9zU2VydmljZS5nZXQodXJsLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzUGFnZShkYXRhKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5nZXRQYWdlQ29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCgkc2NvcGUuYXBwUGF0aCB8fCAkc2NvcGUuc2VsZWN0ZWRBcHBsaWNhdGlvbikgJiYgJHNjb3BlLnBhZ2VJZCkgewoKICAgICAgICAgICAgICAgIHZhciBhcHBQYXRoID0gJHNjb3BlLmFwcFBhdGggfHwgJHNjb3BlLnNlbGVjdGVkQXBwbGljYXRpb24ucGF0aDsKCiAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBTZXR0aW5ncyhhcHBQYXRoLCAicGFnZWNvbmZpZ29iamVjdCIsIGZ1bmN0aW9uIChvYmplY3ROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJyArIG9iamVjdE5hbWUgKyAnLycgKyAkc2NvcGUucGFnZUlkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoc3RhdHVzLCBkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLnBhZ2VzLycgKyAkc2NvcGUucGFnZUlkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmKCEkc2NvcGUucGFnZSl7CiAgICAgICAgICAgICAgICAkc2NvcGUucGFnZSA9IHsKICAgICAgICAgICAgICAgICAgICAidGl0bGUiOiAiVGVzdCBwYWdlIiwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJwYWdlIiwKICAgICAgICAgICAgICAgICAgICAiZmllbGRzIjogW10KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJHNjb3BlLmdldFBhZ2VDb25maWd1cmF0aW9uKCk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnNvcnRpbmdMb2cgPSBbXTsKCiAgICAgICAgJHNjb3BlLnNvcnRhYmxlT3B0aW9ucyA9IHsKICAgICAgICAgICAgY29ubmVjdFdpdGg6ICIuYXBwcy1jb250YWluZXIiLAogICAgICAgICAgICBwbGFjZWhvbGRlcjogImJlaW5nRHJhZ2dlZCIsCiAgICAgICAgICAgIHN0b3A6IGZ1bmN0aW9uIChlLCB1aSkgewogICAgICAgICAgICAgICAgLy8gaWYgdGhlIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSBmaXJzdCBjb250YWluZXIKICAgICAgICAgICAgICAgIGlmICgkKGUudGFyZ2V0KS5oYXNDbGFzcygnZmlyc3QnKSAmJgogICAgICAgICAgICAgICAgICAgIHVpLml0ZW0uc29ydGFibGUuZHJvcHRhcmdldCAmJgogICAgICAgICAgICAgICAgICAgIGUudGFyZ2V0ICE9IHVpLml0ZW0uc29ydGFibGUuZHJvcHRhcmdldFswXSkgewogICAgICAgICAgICAgICAgICAgIC8vIGNsb25lIHRoZSBvcmlnaW5hbCBtb2RlbCB0byByZXN0b3JlIHRoZSByZW1vdmVkIGl0ZW0KICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29tcG9uZW50cyA9IGpRdWVyeS5leHRlbmQodHJ1ZSwgW10sICRzY29wZS50b29sc0xpc3QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICB1cGRhdGU6IGZ1bmN0aW9uKGUsIHVpKXsKICAgICAgICAgICAgICAgIHZhciBzY29wZSA9IHVpLml0ZW0uc2NvcGUoKTsKICAgICAgICAgICAgICAgIGlmKHNjb3BlKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdEl0ZW0oc2NvcGUuY29tcCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuc29ydGFibGVUb29sc09wdGlvbnMgPSAkc2NvcGUuc29ydGFibGVPcHRpb25zOwoKICAgICAgICAkc2NvcGUucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChmaWVsZHMsIGluZGV4KSB7CiAgICAgICAgICAgIGZpZWxkcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgICAgIH07CgogICAgICAgICRzY29wZS5pbnNlcnRJdGVtID0gZnVuY3Rpb24gKGZpZWxkcywgaW5kZXgsIGRhdGEpIHsKICAgICAgICAgICAgZmllbGRzLnNwbGljZShpbmRleCwgMCwgZGF0YSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLnNlbGVjdFRhYiA9IGZ1bmN0aW9uICh0YWIpIHsKICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZVRhYiA9IHRhYjsKICAgICAgICB9OwoKICAgICAgICAvL1RPRE86IGhhdmUgYSBzZXJ2aWNlIHRvIHJlbW92ZSBzaW1pbGFyIGZ1bmN0aW9ucwogICAgICAgICRzY29wZS5zYXZlUGFnZVdpdGhVcmwgPSBmdW5jdGlvbih1cmwpewogICAgICAgICAgICAkc2NvcGUuY2xlYXJFcnJvcigpOwogICAgICAgICAgICAkc2NvcGUucmVzdWx0ID0gbnVsbDsKICAgICAgICAgICAgdmFyIHBhZ2VfaWQgPSAkc2NvcGUucGFnZS5faWQ7CgogICAgICAgICAgICBpZiAocGFnZV9pZCkgewogICAgICAgICAgICAgICAgdXJsID0gdXJsICsgcGFnZV9pZCArICcvJzsKICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucHV0KHVybCwgJHNjb3BlLnBhZ2UsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXN1bHQgPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICAkLm5vdGlmeSgiUGFnZSB1cGRhdGVkIiwgInN1Y2Nlc3MiKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLnBvc3QodXJsLCAkc2NvcGUucGFnZSwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlc3VsdCA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYWdlLl9pZCA9IEpTT04ucGFyc2UoZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICQubm90aWZ5KCJQYWdlIHNhdmVkIiwgInN1Y2Nlc3MiKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuc2F2ZVBhZ2UgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBTZXR0aW5ncygkc2NvcGUuYXBwUGF0aCwgInBhZ2Vjb25maWdvYmplY3QiLCBmdW5jdGlvbiAob2JqZWN0TmFtZSkgewogICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJyArIG9iamVjdE5hbWUgKyAnLyc7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVQYWdlV2l0aFVybCh1cmwpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChzdGF0dXMsIGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9zZXJ2aWNlL2Nvc21vcy5wYWdlcy8nOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5zYXZlUGFnZVdpdGhVcmwodXJsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbigpOwogICAgICAgIH0KICAgIH1dKTsKCgo=')
},
{
'name': '/app/lib/cosmos/js/controllers/UsersCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ1VzZXJzQ3RybCcsIFsnJHNjb3BlJywgJyRtb2RhbCcsICdDb3Ntb3NTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsLCBDb3Ntb3NTZXJ2aWNlKSB7CgogICAgJHNjb3BlLmNsZWFyRXJyb3IgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gZmFsc2U7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICIiOwogICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9ICIiOwogICAgfTsKCiAgICAkc2NvcGUucHJvY2Vzc0Vycm9yID0gZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICRzY29wZS5oYXNFcnJvciA9IHRydWU7CiAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTsKICAgIH07CgogICAgJHNjb3BlLmFkZFVzZXIgPSBmdW5jdGlvbiAoc2l6ZSwgY3VycmVudF91c2VyKSB7CiAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7CiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbGliL2Nvc21vcy9wYXJ0aWFscy9hZGR1c2VyLmh0bWwnLAogICAgICAgICAgICBjb250cm9sbGVyOiAiVXNlck1vZGFsSW5zdGFuY2VDdHJsIiwKICAgICAgICAgICAgc2l6ZTogc2l6ZSwKICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLAogICAgICAgICAgICByZXNvbHZlOiB7CiAgICAgICAgICAgICAgICB1c2VyOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRfdXNlcjsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByb2xlczogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUucm9sZXM7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAodXNlcikgewogICAgICAgICAgICBpZiAoIXVzZXIuX2lkKSB7CiAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLnBvc3QoJy9zZXJ2aWNlL2Nvc21vcy51c2Vycy8nLCB1c2VyLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0VXNlcnMoKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICB2YXIgdXNlcl9pZCA9IHVzZXIuX2lkOwogICAgICAgICAgICAgICAgZGVsZXRlIHVzZXIuX2lkOwogICAgICAgICAgICAgICAgZGVsZXRlIHVzZXIub3duZXI7CiAgICAgICAgICAgICAgICBkZWxldGUgdXNlci51c2VybmFtZTsKICAgICAgICAgICAgICAgIGRlbGV0ZSB1c2VyLmNyZWF0ZXRpbWU7CiAgICAgICAgICAgICAgICBpZiAoIXVzZXIucGFzc3dvcmQpIHsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgdXNlci5wYXNzd29yZDsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLnB1dCgnL3NlcnZpY2UvY29zbW9zLnVzZXJzLycgKyB1c2VyX2lkICsgJy8nLCB1c2VyLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0VXNlcnMoKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIC8vJGxvZy5pbmZvKCdNb2RhbCBkaXNtaXNzZWQgYXQ6ICcgKyBuZXcgRGF0ZSgpKTsKICAgICAgICB9KTsKICAgIH07CgogICAgJHNjb3BlLmVkaXRVc2VyID0gZnVuY3Rpb24gKHVzZXJJbmRleCkgewogICAgICAgICRzY29wZS5hZGRVc2VyKCdsZycsICRzY29wZS51c2Vyc1t1c2VySW5kZXhdKTsKICAgIH07CgogICAgJHNjb3BlLnJlbW92ZVVzZXIgPSBmdW5jdGlvbiAodXNlckluZGV4KSB7CiAgICAgICAgdmFyIHVzZXIgPSAkc2NvcGUudXNlcnNbdXNlckluZGV4XTsKCiAgICAgICAgaWYgKGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhlIHVzZXIgJyArIHVzZXIudXNlcm5hbWUgKyAnPycpKSB7CiAgICAgICAgICAgIHZhciB1c2VyX2lkID0gdXNlci5faWQ7CiAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZGVsZXRlKCcvc2VydmljZS9jb3Ntb3MudXNlcnMvJyArIHVzZXJfaWQgKyAnLycsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldFVzZXJzKCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9CiAgICB9OwoKICAgICRzY29wZS5nZXRSb2xlcyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCgnL3NlcnZpY2UvY29zbW9zLnJiYWMub2JqZWN0LnJvbGUvJywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICRzY29wZS5yb2xlcyA9IGRhdGE7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgfSk7CiAgICB9OwoKICAgICRzY29wZS5nZXRSb2xlcygpOwoKICAgICRzY29wZS5nZXRVc2VycyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBDb3Ntb3NTZXJ2aWNlLmdldCgnL3NlcnZpY2UvY29zbW9zLnVzZXJzLycsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUudXNlcnMgPSBkYXRhOwogICAgICAgICAgICB9LAogICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgIH0KICAgICAgICApOwogICAgfTsKCiAgICAkc2NvcGUuZ2V0VXNlcnMoKTsKfV0pOwoKY29udHJvbGxlcnMuY29udHJvbGxlcignVXNlck1vZGFsSW5zdGFuY2VDdHJsJywgWyckc2NvcGUnLCAnJG1vZGFsSW5zdGFuY2UnLCAncm9sZXMnLCAndXNlcicsIGZ1bmN0aW9uICgkc2NvcGUsICRtb2RhbEluc3RhbmNlLCByb2xlcywgdXNlcikgewogICAgJHNjb3BlLnVzZXIgPSB1c2VyIHx8IHsidXNlcm5hbWUiOiBudWxsLCAicGFzc3dvcmQiOiBudWxsLCAicGFzc3dvcmRfcmUiOiBudWxsLCAiZW1haWwiOiBudWxsLCAicm9sZXMiOiBbXX07CiAgICAkc2NvcGUudXNlci5wYXNzd29yZCA9IG51bGw7CiAgICAkc2NvcGUuaXNVcGRhdGluZyA9ICh1c2VyICYmIHVzZXIuX2lkICYmIHVzZXIuX2lkLmxlbmd0aCA+IDApOwogICAgJHNjb3BlLnJvbGVzID0gcm9sZXM7CgogICAgJHNjb3BlLmdldFJvbGVOYW1lID0gZnVuY3Rpb24gKHNpZCkgewogICAgICAgIHZhciBmb3VuZF9yb2xlID0gIltCdWlsdGluIFJvbGVdIjsKICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnJvbGVzLCBmdW5jdGlvbiAocm9sZSwga2V5KSB7CiAgICAgICAgICAgIGlmIChyb2xlLnNpZCA9PT0gc2lkKSB7CiAgICAgICAgICAgICAgICBmb3VuZF9yb2xlID0gcm9sZS5uYW1lOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBmb3VuZF9yb2xlOwogICAgfTsKCiAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCRzY29wZS51c2VyLnVzZXJuYW1lICYmICgkc2NvcGUudXNlci5wYXNzd29yZCB8fCAkc2NvcGUuaXNVcGRhdGluZykpIHsKICAgICAgICAgICAgaWYgKCRzY29wZS51c2VyLnBhc3N3b3JkID09ICRzY29wZS51c2VyLnBhc3N3b3JkX3JlKSB7CiAgICAgICAgICAgICAgICBkZWxldGUgJHNjb3BlLnVzZXIucGFzc3dvcmRfcmU7CiAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgkc2NvcGUudXNlcik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuaGFzZXJyb3IgPSB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJHNjb3BlLmhhc2Vycm9yID0gdHJ1ZTsKICAgICAgICB9CgogICAgfTsKCiAgICAkc2NvcGUucmVtb3ZlUm9sZSA9IGZ1bmN0aW9uIChpbmRleCkgewogICAgICAgICRzY29wZS51c2VyLnJvbGVzLnNwbGljZShpbmRleCwgMSk7CiAgICB9OwoKICAgICRzY29wZS5hZGRSb2xlID0gZnVuY3Rpb24gKHNlbGVjdGVkX3JvbGUpIHsKICAgICAgICBpZiAoIXNlbGVjdGVkX3JvbGUgfHwgc2VsZWN0ZWRfcm9sZS5sZW5ndGggPCAxKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgaWYgKCEkc2NvcGUudXNlci5yb2xlcykgewogICAgICAgICAgICAkc2NvcGUudXNlci5yb2xlcyA9IFtdOwogICAgICAgIH0KICAgICAgICB2YXIgZHVwID0gZmFsc2U7CiAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS51c2VyLnJvbGVzLCBmdW5jdGlvbiAocm9sZXNpZCwgaW5kZXgpIHsKICAgICAgICAgICAgaWYgKHJvbGVzaWQgPT09IHNlbGVjdGVkX3JvbGUpIHsKICAgICAgICAgICAgICAgIGR1cCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBpZiAoIWR1cCkgewogICAgICAgICAgICAkc2NvcGUudXNlci5yb2xlcy5wdXNoKHNlbGVjdGVkX3JvbGUpOwogICAgICAgIH0KICAgIH07CgogICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTsKICAgIH07Cn1dKQo7Cg==')
},
{
'name': '/app/lib/cosmos/js/controllers/controllers.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKLyogQ29udHJvbGxlcnMgKi8KdmFyIGNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ2Nvc21vc1VJLmNvbnRyb2xsZXJzJywgW10pCiAgICAuY29udHJvbGxlcignQWRtaW5NYWluQ3RybCcsIFsnJHNjb3BlJywgJyRtb2RhbCcsICdDb3Ntb3NTZXJ2aWNlJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsLCBDb3Ntb3NTZXJ2aWNlKSB7CiAgICAgICAgJHNjb3BlLnVzZXJOYW1lID0gZ2V0VXNlck5hbWUoIk5vIE5hbWUiKTsKICAgICAgICAkc2NvcGUubG9nZ2VkSW4gPSBsb2dnZWRJbjsKICAgIH1dKQoKICAgIC5jb250cm9sbGVyKCdNZXNzYWdlVmlld0N0cmwnLCBbJyRzY29wZScsICdDb3Ntb3NTZXJ2aWNlJywgJ21lc3NhZ2UnLCBmdW5jdGlvbiAoJHNjb3BlLCBDb3Ntb3NTZXJ2aWNlLCBtZXNzYWdlKSB7CiAgICAgICAgJHNjb3BlLm1lc3NhZ2UgPSBtZXNzYWdlLnBvcCgpOwogICAgfV0pCgogICAgLmNvbnRyb2xsZXIoJ1Nob3dKc29uRGF0YUN0cmwnLCBbJyRzY29wZScsICckbW9kYWxJbnN0YW5jZScsICdtb2RlbCcsIGZ1bmN0aW9uICgkc2NvcGUsICRtb2RhbEluc3RhbmNlLCBtb2RlbCkgewogICAgICAgICRzY29wZS5tb2RlbCA9IG1vZGVsOwogICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpOwogICAgICAgIH07CiAgICB9XSkKCiAgICAuY29udHJvbGxlcignU2luZ2xlSXRlbVZpZXdDdHJsJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlUGFyYW1zKSB7CiAgICAgICAgJHNjb3BlLmNvbmZpZ0lkID0gJHJvdXRlUGFyYW1zLmNvbmZpZ0lkOwogICAgICAgICRzY29wZS5pdGVtSWQgPSAkcm91dGVQYXJhbXMuaXRlbUlkOwogICAgfV0pCgogICAgLmNvbnRyb2xsZXIoJ0FwcExpc3RDdHJsJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywnQ29zbW9zU2VydmljZScsJ2Nvc21vcy5jYWNoZWRsb2FkZXInLCAnY29zbW9zLnNldHRpbmdzJywKICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsIENvc21vc1NlcnZpY2UsIGNhY2hlZGxvYWRlciwgc2V0dGluZ3MpIHsKICAgICAgICAgICAgJHNjb3BlLmFwcHMgPSBbXTsKCiAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IgPSBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAkc2NvcGUuaGFzRXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgJHNjb3BlLmluaXQ9ZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICBzZXR0aW5ncy5nZXRBcHBsaWNhdGlvbnMoZnVuY3Rpb24gKGFwcGxpY2F0aW9ucykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWFwcGxpY2F0aW9ucyB8fCBhcHBsaWNhdGlvbnMubGVuZ3RoPT0wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2FwcHN0dWRpby8nKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBzID0gYXBwbGljYXRpb25zOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICB9XSkKCgoKOwo=')
},
{
'name': '/app/lib/cosmos/js/controllers/PageViewCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ1BhZ2VWaWV3Q3RybCcsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnQ29zbW9zU2VydmljZScsICdjb3Ntb3Muc2V0dGluZ3MnLAogICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkbG9jYXRpb24sIENvc21vc1NlcnZpY2UsIHNldHRpbmdzKSB7CiAgICAgICAgJHNjb3BlLnBhZ2VJZCA9ICRyb3V0ZVBhcmFtcy5wYWdlSWQ7CiAgICAgICAgJHNjb3BlLmFwcFBhdGggPSAkcm91dGVQYXJhbXMuYXBwUGF0aDsKICAgICAgICAkc2NvcGUucm91dGVQYXJhbXMgPSAkcm91dGVQYXJhbXM7CgogICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwgPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5sb2dpblJlcXVpcmVkICYmICFsb2dnZWRJbigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJVcmwgPSAkbG9jYXRpb24udXJsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi51cmwoIi9sb2dpbi8/cmVkaXJlY3Q9IiArIGN1clVybCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnZSA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2V0dGluZ3MuZ2V0QXBwU2V0dGluZ3MoJHNjb3BlLmFwcFBhdGgsICJwYWdlY29uZmlnb2JqZWN0IiwgZnVuY3Rpb24gKG9iamVjdE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy9zZXJ2aWNlLycgKyBvYmplY3ROYW1lICsgJy8nICsgJHNjb3BlLnBhZ2VJZCArICcvJzsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbkJ5VXJsKHVybCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKHN0YXR1cywgZGF0YSkgewogICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLnBhZ2VzLycgKyAkc2NvcGUucGFnZUlkICsgJy8nOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRDb25maWd1cmF0aW9uQnlVcmwodXJsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgc2V0dGluZ3MuaW5pdFNldHRpbmdzKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb24oKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmluaXQoKTsKCgogICAgfV0pOwo=')
},
{
'name': '/app/lib/cosmos/js/controllers/RolesCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignUm9sZXNDdHJsJywgWyckc2NvcGUnLCAnJG1vZGFsJywgJ0Nvc21vc1NlcnZpY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbW9kYWwsIENvc21vc1NlcnZpY2UpIHsKCiAgICAkc2NvcGUuY2xlYXJFcnJvciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkc2NvcGUuaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAkc2NvcGUuc3RhdHVzID0gIiI7CiAgICAgICAgJHNjb3BlLnN0YXR1c19kYXRhID0gIiI7CiAgICB9OwoKICAgICRzY29wZS5wcm9jZXNzRXJyb3IgPSBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gdHJ1ZTsKICAgICAgICAkc2NvcGUuc3RhdHVzID0gc3RhdHVzOwogICAgICAgICRzY29wZS5zdGF0dXNfZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOwogICAgfTsKCiAgICAkc2NvcGUuYWRkUm9sZSA9IGZ1bmN0aW9uIChzaXplLCBjdXJyZW50X3JvbGUpIHsKICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHsKICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdsaWIvY29zbW9zL3BhcnRpYWxzL2FkZHJvbGUuaHRtbCcsCiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICJSb2xlTW9kYWxJbnN0YW5jZUN0cmwiLAogICAgICAgICAgICBzaXplOiBzaXplLAogICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsCiAgICAgICAgICAgIHJlc29sdmU6IHsKICAgICAgICAgICAgICAgIHJvbGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudF9yb2xlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJvbGUpIHsKICAgICAgICAgICAgJHNjb3BlLmN1cnJlbnRfcm9sZSA9IHJvbGU7CiAgICAgICAgICAgIGlmICghcm9sZS5faWQpIHsKICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucG9zdCgnL3NlcnZpY2UvY29zbW9zLnJiYWMub2JqZWN0LnJvbGUvJywgcm9sZSwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRSb2xlcygpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHZhciByb2xlX2lkID0gcm9sZS5faWQ7CiAgICAgICAgICAgICAgICBkZWxldGUgcm9sZS5faWQ7CiAgICAgICAgICAgICAgICBkZWxldGUgcm9sZS5zaWQ7CiAgICAgICAgICAgICAgICBDb3Ntb3NTZXJ2aWNlLnB1dCgnL3NlcnZpY2UvY29zbW9zLnJiYWMub2JqZWN0LnJvbGUvJyArIHJvbGVfaWQgKyAnLycsIHJvbGUsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXRSb2xlcygpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc0Vycm9yKGRhdGEsIHN0YXR1cyk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgLy8kbG9nLmluZm8oJ01vZGFsIGRpc21pc3NlZCBhdDogJyArIG5ldyBEYXRlKCkpOwogICAgICAgIH0pOwogICAgfTsKCiAgICAkc2NvcGUuZWRpdFJvbGUgPSBmdW5jdGlvbiAocm9sZUluZGV4KSB7CiAgICAgICAgJHNjb3BlLmFkZFJvbGUoJ2xnJywgJHNjb3BlLnJvbGVzW3JvbGVJbmRleF0pOwogICAgfTsKCiAgICAkc2NvcGUucmVtb3ZlUm9sZSA9IGZ1bmN0aW9uIChyb2xlSW5kZXgpIHsKICAgICAgICB2YXIgcm9sZSA9ICRzY29wZS5yb2xlc1tyb2xlSW5kZXhdOwogICAgICAgIGlmIChjb25maXJtKCdBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoZSByb2xlICcgKyByb2xlLm5hbWUgKyAnPycpKSB7CiAgICAgICAgICAgIHZhciByb2xlX2lkID0gcm9sZS5faWQ7CiAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZGVsZXRlKCcvc2VydmljZS9jb3Ntb3MucmJhYy5vYmplY3Qucm9sZS8nICsgcm9sZV9pZCArICcvJywgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0Um9sZXMoKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZGF0YSwgc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICApOwogICAgICAgIH0KICAgIH07CgogICAgJHNjb3BlLmdldFJvbGVzID0gZnVuY3Rpb24gKCkgewogICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KCcvc2VydmljZS9jb3Ntb3MucmJhYy5vYmplY3Qucm9sZS8nLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgICAgICAgICAgJHNjb3BlLnJvbGVzID0gZGF0YTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvcihkYXRhLCBzdGF0dXMpOwogICAgICAgICAgICB9CiAgICAgICAgKTsKICAgIH07CgogICAgJHNjb3BlLmdldFJvbGVzKCk7Cn1dKTsKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ1JvbGVNb2RhbEluc3RhbmNlQ3RybCcsIFsnJHNjb3BlJywgJyRtb2RhbEluc3RhbmNlJywgJ3JvbGUnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgcm9sZSkgewogICAgJHNjb3BlLnJvbGUgPSB7Im5hbWUiOiBudWxsLCAicm9sZV9pdGVtcyI6IFtdfTsKCiAgICAkc2NvcGUuYWNjZXNzX3R5cGVzID0gWwogICAgICAgIHtuYW1lOiAnYWNjZXNzJywgZGlzcGxheTogJ1JvbGUgYWNjZXNzJ30sCiAgICAgICAge25hbWU6ICdvd25lcl9hY2Nlc3MnLCBkaXNwbGF5OiAnT3duZXIgYWNjZXNzJ30KICAgIF07CgogICAgJHNjb3BlLnBvcHVsYXRlID0gZnVuY3Rpb24gKHJvbGUpIHsKICAgICAgICBpZiAoIXJvbGUpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICAkc2NvcGUuaXNVcGRhdGluZyA9IChyb2xlLl9pZCAmJiByb2xlLl9pZC5sZW5ndGggPiAwKTsKICAgICAgICAkc2NvcGUucm9sZS5faWQgPSByb2xlLl9pZDsKICAgICAgICAkc2NvcGUucm9sZS5uYW1lID0gcm9sZS5uYW1lOwogICAgICAgICRzY29wZS5yb2xlLnNpZCA9IHJvbGUuc2lkOwogICAgICAgIGFuZ3VsYXIuZm9yRWFjaChyb2xlLnJvbGVfaXRlbXMsIGZ1bmN0aW9uIChyb2xlX2l0ZW0sIGtleSkgewogICAgICAgICAgICByb2xlX2l0ZW0uYWNjZXNzX2JpdHMgPSBbXTsKICAgICAgICAgICAgaWYgKHJvbGVfaXRlbS5hY2Nlc3MgJiYgcm9sZV9pdGVtLmFjY2Vzcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICB2YXIgciA9IGpRdWVyeS5pbkFycmF5KCJSRUFEIiwgcm9sZV9pdGVtLmFjY2VzcykgPiAtMTsKICAgICAgICAgICAgICAgIHZhciBpID0galF1ZXJ5LmluQXJyYXkoIklOU0VSVCIsIHJvbGVfaXRlbS5hY2Nlc3MpID4gLTE7CiAgICAgICAgICAgICAgICB2YXIgdyA9IGpRdWVyeS5pbkFycmF5KCJXUklURSIsIHJvbGVfaXRlbS5hY2Nlc3MpID4gLTE7CiAgICAgICAgICAgICAgICB2YXIgZCA9IGpRdWVyeS5pbkFycmF5KCJERUxFVEUiLCByb2xlX2l0ZW0uYWNjZXNzKSA+IC0xOwoKICAgICAgICAgICAgICAgIHJvbGVfaXRlbS5hY2Nlc3NfYml0cy5yZWFkID0gcjsKICAgICAgICAgICAgICAgIHJvbGVfaXRlbS5hY2Nlc3NfYml0cy5pbnNlcnQgPSBpOwogICAgICAgICAgICAgICAgcm9sZV9pdGVtLmFjY2Vzc19iaXRzLndyaXRlID0gdzsKICAgICAgICAgICAgICAgIHJvbGVfaXRlbS5hY2Nlc3NfYml0cy5kZWxldGUgPSBkOwogICAgICAgICAgICAgICAgcm9sZV9pdGVtLnR5cGUgPSAkc2NvcGUuYWNjZXNzX3R5cGVzWzBdLm5hbWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAocm9sZV9pdGVtLm93bmVyX2FjY2VzcyAmJiByb2xlX2l0ZW0ub3duZXJfYWNjZXNzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHZhciByID0galF1ZXJ5LmluQXJyYXkoIlJFQUQiLCByb2xlX2l0ZW0ub3duZXJfYWNjZXNzKSA+IC0xOwogICAgICAgICAgICAgICAgdmFyIGkgPSBqUXVlcnkuaW5BcnJheSgiSU5TRVJUIiwgcm9sZV9pdGVtLm93bmVyX2FjY2VzcykgPiAtMTsKICAgICAgICAgICAgICAgIHZhciB3ID0galF1ZXJ5LmluQXJyYXkoIldSSVRFIiwgcm9sZV9pdGVtLm93bmVyX2FjY2VzcykgPiAtMTsKICAgICAgICAgICAgICAgIHZhciBkID0galF1ZXJ5LmluQXJyYXkoIkRFTEVURSIsIHJvbGVfaXRlbS5vd25lcl9hY2Nlc3MpID4gLTE7CgogICAgICAgICAgICAgICAgcm9sZV9pdGVtLmFjY2Vzc19iaXRzLnJlYWQgPSByOwogICAgICAgICAgICAgICAgcm9sZV9pdGVtLmFjY2Vzc19iaXRzLmluc2VydCA9IGk7CiAgICAgICAgICAgICAgICByb2xlX2l0ZW0uYWNjZXNzX2JpdHMud3JpdGUgPSB3OwogICAgICAgICAgICAgICAgcm9sZV9pdGVtLmFjY2Vzc19iaXRzLmRlbGV0ZSA9IGQ7CiAgICAgICAgICAgICAgICByb2xlX2l0ZW0udHlwZSA9ICRzY29wZS5hY2Nlc3NfdHlwZXNbMV0ubmFtZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgJHNjb3BlLnJvbGUucm9sZV9pdGVtcy5wdXNoKHJvbGVfaXRlbSk7CgogICAgICAgIH0pOwogICAgfTsKCiAgICAkc2NvcGUuYWRkUm9sZUl0ZW0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgJHNjb3BlLnJvbGUucm9sZV9pdGVtcy5wdXNoKHt9KTsKICAgIH07CgogICAgJHNjb3BlLnJlbW92ZVJvbGVJdGVtID0gZnVuY3Rpb24gKGluZGV4KSB7CiAgICAgICAgJHNjb3BlLnJvbGUucm9sZV9pdGVtcy5zcGxpY2UoaW5kZXgsIDEpOwogICAgfTsKCiAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKCRzY29wZS5yb2xlLm5hbWUgJiYgJHNjb3BlLnJvbGUucm9sZV9pdGVtcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgIHZhciBoYXNlcnJvciA9IGZhbHNlOwogICAgICAgICAgICB2YXIgcm9sZV9kYXRhID0gewogICAgICAgICAgICAgICAgIm5hbWUiOiAkc2NvcGUucm9sZS5uYW1lLAogICAgICAgICAgICAgICAgInR5cGUiOiAib2JqZWN0LlJvbGUiCiAgICAgICAgICAgIH07CgogICAgICAgICAgICBpZiAoJHNjb3BlLnJvbGUuc2lkKSB7CiAgICAgICAgICAgICAgICByb2xlX2RhdGFbInNpZCJdID0gJHNjb3BlLnJvbGUuc2lkOwogICAgICAgICAgICB9CgogICAgICAgICAgICByb2xlX2RhdGFbIl9pZCJdID0gJHNjb3BlLnJvbGUuX2lkOwoKICAgICAgICAgICAgcm9sZV9kYXRhWyJyb2xlX2l0ZW1zIl0gPSBbXTsKCiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUucm9sZS5yb2xlX2l0ZW1zLCBmdW5jdGlvbiAocm9sZV9pdGVtLCBrZXkpIHsKICAgICAgICAgICAgICAgIHZhciByb2xlX2l0ZW1fZGF0YSA9IHsKICAgICAgICAgICAgICAgICAgICAib2JqZWN0X25hbWUiOiByb2xlX2l0ZW0ub2JqZWN0X25hbWUsCiAgICAgICAgICAgICAgICAgICAgInByb3BlcnR5X25hbWUiOiByb2xlX2l0ZW0ucHJvcGVydHlfbmFtZSwKICAgICAgICAgICAgICAgICAgICAidHlwZSI6ICJvYmplY3QuUm9sZUl0ZW0iCiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIHJvbGVfaXRlbV9kYXRhW3JvbGVfaXRlbS50eXBlXSA9IFtdOwoKICAgICAgICAgICAgICAgIGlmIChyb2xlX2l0ZW0uYWNjZXNzX2JpdHMucmVhZCkgewogICAgICAgICAgICAgICAgICAgIHJvbGVfaXRlbV9kYXRhW3JvbGVfaXRlbS50eXBlXS5wdXNoKCJSRUFEIik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHJvbGVfaXRlbS5hY2Nlc3NfYml0cy5pbnNlcnQpIHsKICAgICAgICAgICAgICAgICAgICByb2xlX2l0ZW1fZGF0YVtyb2xlX2l0ZW0udHlwZV0ucHVzaCgiSU5TRVJUIik7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKHJvbGVfaXRlbS5hY2Nlc3NfYml0cy53cml0ZSkgewogICAgICAgICAgICAgICAgICAgIHJvbGVfaXRlbV9kYXRhW3JvbGVfaXRlbS50eXBlXS5wdXNoKCJXUklURSIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmIChyb2xlX2l0ZW0uYWNjZXNzX2JpdHMuZGVsZXRlKSB7CiAgICAgICAgICAgICAgICAgICAgcm9sZV9pdGVtX2RhdGFbcm9sZV9pdGVtLnR5cGVdLnB1c2goIkRFTEVURSIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJvbGVfZGF0YVsicm9sZV9pdGVtcyJdLnB1c2gocm9sZV9pdGVtX2RhdGEpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmICghaGFzZXJyb3IpIHsKICAgICAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKHJvbGVfZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAkc2NvcGUuaGFzZXJyb3IgPSB0cnVlOwogICAgICAgIH0KICAgIH07CgogICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTsKICAgIH07CgogICAgJHNjb3BlLnBvcHVsYXRlKHJvbGUpOwp9XSk7Cgo=')
},
{
'name': '/app/lib/cosmos/js/controllers/ListDetailCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKY29udHJvbGxlcnMuY29udHJvbGxlcignTGlzdERldGFpbEN0cmwnLCBbJyRzY29wZScsICckcm91dGVQYXJhbXMnLCAnJHRlbXBsYXRlQ2FjaGUnLCAnJG1vZGFsJywgJ0Nvc21vc1NlcnZpY2UnLAogICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvdXRlUGFyYW1zLCAkdGVtcGxhdGVDYWNoZSwgJG1vZGFsLCBDb3Ntb3NTZXJ2aWNlKSB7CgogICAgICAgICRzY29wZS5jbGVhckVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkc2NvcGUuaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9ICIiOwogICAgICAgICAgICAkc2NvcGUuc3RhdHVzX2RhdGEgPSAiIjsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUubGlzdElkID0gJHJvdXRlUGFyYW1zLmxpc3RJZDsKCiAgICAgICAgJHNjb3BlLnByb2Nlc3NFcnJvciA9IGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgJHNjb3BlLmhhc0Vycm9yID0gdHJ1ZTsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHN0YXR1czsKICAgICAgICAgICAgJHNjb3BlLnN0YXR1c19kYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7CiAgICAgICAgfTsKCiAgICAgICAgJHNjb3BlLmdldENvbmZpZ3VyYXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvY29zbW9zLmxpc3Rjb25maWd1cmF0aW9ucy8nICsgJHNjb3BlLmxpc3RJZCArICcvJzsKCiAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGlzdENvbmZpZ3VyYXRpb24gPSBkYXRhOwogICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXREYXRhKCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0RGF0YSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSAiIjsKICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5saXN0Q29uZmlndXJhdGlvbi5jb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uLCBpbmRleCkgewogICAgICAgICAgICAgICAgY29sdW1ucyArPSBjb2x1bW4ubmFtZSArICIsIjsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciB1cmwgPSAnL3NlcnZpY2UvJyArICRzY29wZS5saXN0Q29uZmlndXJhdGlvbi5vYmplY3ROYW1lICsgJy8/Y29sdW1ucz0nICsgY29sdW1uczsKCiAgICAgICAgICAgIENvc21vc1NlcnZpY2UuZ2V0KHVybCwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZnVuY3Rpb24gKGRhdGEsIHN0YXR1cykgewogICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzRXJyb3IoZGF0YSwgc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuc2hvd0xpc3RJdGVtRGV0YWlscyA9IGZ1bmN0aW9uIChkYXRhLCBsaXN0Q29uZmlndXJhdGlvbikgewogICAgICAgICAgICAgJHNjb3BlLnNob3dEZXRhaWxzKCdsZycsIGRhdGEsIGxpc3RDb25maWd1cmF0aW9uKTsKICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuc2hvd0RldGFpbHMgPSBmdW5jdGlvbiAoc2l6ZSwgZGF0YSwgbGlzdENvbmZpZ3VyYXRpb24pIHsKICAgICAgICAgICAgaWYgKGxpc3RDb25maWd1cmF0aW9uLmFsbG93RGV0YWlscykgewogICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7CiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9zaG93X2pzb24uaHRtbCcsCiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogIlNob3dKc29uRGF0YUN0cmwiLAogICAgICAgICAgICAgICAgICAgIHNpemU6IHNpemUsCiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLAogICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHsKICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAkc2NvcGUuZ2V0Q29uZmlndXJhdGlvbigpOwogICAgfV0pOw==')
},
{
'name': '/app/lib/cosmos/js/controllers/FormViewCtrl.js', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgb24gMTAvMjgvMTQuCiAqLwoKCmNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ0Zvcm1WaWV3Q3RybCcsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnJGluamVjdG9yJywgJ0Nvc21vc1NlcnZpY2UnLCAnbWVzc2FnZScsCiAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgJGluamVjdG9yLCBDb3Ntb3NTZXJ2aWNlLCBtZXNzYWdlKSB7CiAgICAgICAgJHNjb3BlLmZvcm0gPSB7fTsKICAgICAgICAkc2NvcGUuZGF0YSA9IHt9OwoKICAgICAgICAkc2NvcGUuZm9ybXJlZiA9IHsgInR5cGUiOiJmb3JtcmVmIiwgInZhbHVlIjp7ImZvcm1JZCI6ICRyb3V0ZVBhcmFtcy5mb3JtSWR9fTsKICAgICAgICAkc2NvcGUuZGF0YUlkID0gJHJvdXRlUGFyYW1zLmRhdGFJZDsKICAgIH1dKTsKCi8vVE9ETzogTWVyZ2Ugd2l0aCBhYm92ZQpjb250cm9sbGVycy5jb250cm9sbGVyKCdGb3JtVmlld01vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb3V0ZVBhcmFtcycsICckbG9jYXRpb24nLCAnJGluamVjdG9yJywgJ0Nvc21vc1NlcnZpY2UnLCAnbWVzc2FnZScsJ21vZGVsJywgJ2Zvcm1JZCcsCiAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgJGluamVjdG9yLCBDb3Ntb3NTZXJ2aWNlLCBtZXNzYWdlLCBtb2RlbCwgZm9ybUlkKSB7CiAgICAgICAgJHNjb3BlLmZvcm1yZWYgPSB7ICJ0eXBlIjoiZm9ybXJlZiIsICJ2YWx1ZSI6eyJmb3JtSWQiOiBmb3JtSWR8fCAkcm91dGVQYXJhbXMuZm9ybUlkfX07CiAgICAgICAgJHNjb3BlLmRhdGFJZCA9IG1vZGVsPyBtb2RlbC5faWQgOiAkcm91dGVQYXJhbXMuZGF0YUlkOwogICAgfV0pOw==')
},
{
'name': '/app/lib/cosmos/js/controllers/LoginCtrl.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKY29udHJvbGxlcnMuY29udHJvbGxlcignTG9naW5DdHJsJywgWyckc2NvcGUnLCAnJHJvdXRlUGFyYW1zJywgJyRsb2NhdGlvbicsICdDb3Ntb3NTZXJ2aWNlJywgJyRodHRwJywKICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm91dGVQYXJhbXMsICRsb2NhdGlvbiwgQ29zbW9zU2VydmljZSwgJGh0dHApIHsKICAgICAgICAgICAgJHNjb3BlLnJlZGlyZWN0VXJsID0gJHJvdXRlUGFyYW1zLnJlZGlyZWN0OwogICAgICAgICAgICAkc2NvcGUuaGF2ZUFjY291bnQgPSB0cnVlOwoKICAgICAgICAgICAgJHNjb3BlLmxvZ2luID0gZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLnVzZXJuYW1lIHx8ICRzY29wZS51c2VybmFtZS5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gIlVzZXJuYW1lIGlzIHJlcXVpcmVkLiI7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLnBhc3N3b3JkIHx8ICRzY29wZS5wYXNzd29yZC5sZW5ndGggPCA0KSB7CiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gIlBhc3N3b3JkIGlzIHJlcXVpcmVkIGFuZCBtdXN0IGJlIGF0IGxlYXN0IDQgY2hhcmFjdGVyIGxvbmcuIjsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgJGh0dHAucG9zdCgnL2xvZ2luLycsIHsidXNlcm5hbWUiOiRzY29wZS51c2VybmFtZSwgInBhc3N3b3JkIjokc2NvcGUucGFzc3dvcmQgfSkuCiAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24udXJsKCRzY29wZS5yZWRpcmVjdFVybCB8fCAnLycpOwogICAgICAgICAgICAgICAgICB9KS4KICAgICAgICAgICAgICAgICAgZXJyb3IoZnVuY3Rpb24oZGF0YSwgc3RhdHVzLCBoZWFkZXJzLCBjb25maWcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RhdHVzID09PSA0MDEpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gIlVzZXJuYW1lIG9yIHBhc3N3b3JkIGRpZCBub3QgbWF0Y2guIjsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICAkc2NvcGUuc2lnbnVwID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgLy9UT0RPOmNyZWF0ZSBhIHNlcnZpY2UgZm9yIGdsb2JhbCBzZXR0aW5ncwogICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUudXNlcm5hbWUgfHwgJHNjb3BlLnVzZXJuYW1lLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSAiVXNlcm5hbWUgaXMgcmVxdWlyZWQuIjsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYgKCEkc2NvcGUucGFzc3dvcmQgfHwgJHNjb3BlLnBhc3N3b3JkLmxlbmd0aCA8IDYpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSAiUGFzc3dvcmQgaXMgcmVxdWlyZWQgYW5kIG11c3QgYmUgYXQgbGVhc3QgNiBjaGFyYWN0ZXIgbG9uZy4iOwogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnBhc3N3b3JkICE9PSAkc2NvcGUucGFzc3dvcmRfcmUpIHsKICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSAiUGFzc3dvcmQgZG9lcyBub3QgbWF0Y2guIjsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdmFyIHVybCA9ICcvc2VydmljZS9jb3Ntb3MudXNlcnMvJzsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0geyAidXNlcm5hbWUiOiAkc2NvcGUudXNlcm5hbWUsICJwYXNzd29yZCI6ICRzY29wZS5wYXNzd29yZCB9OwoKICAgICAgICAgICAgICAgIENvc21vc1NlcnZpY2UucG9zdCh1cmwsIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKHJldHVybmVkRGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubG9naW4oKTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChkYXRhLCBzdGF0dXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYoc3RhdHVzID09PSA0MDkpewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gIlVzZXJuYW1lIGFscmVhZHkgdGFrZW4uIFBsZWFzZSB1c2UgYW5vdGhlciB1c2VybmFtZSBvciBsb2dpbiB1c2luZyB5b3VyIHBhc3N3b3JkLiIKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9ICJDb3VsZCBub3QgY3JlYXRlIHVzZXIuIEVycm9yIGNvZGU6ICIrIHN0YXR1cyArICIgRXJyb3I6ICIgKyBkYXRhOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfTsKICAgIH1dKQo7')
},
{
'name': '/app/lib/js/d3.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/js/jquery.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/js/bootstrap.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/js/lodash.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/js/notify.min.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/js/jquery-ui.js', 'data': base64.b64decode('')
},
{
'name': '/app/lib/fonts/glyphicons-halflings-regular.woff', 'data': base64.b64decode('')
},
{
'name': '/app/lib/fonts/glyphicons-halflings-regular.ttf', 'data': base64.b64decode('')
},
{
'name': '/app/data/components.json', 'data': base64.b64decode('LyoqCiAqIENyZWF0ZWQgYnkgbWFydWYgbWFuaXJ1enphbWFuIG9uIDgvMjEvMTQuCiAqLwpbCnsKICAgICJuYW1lIjoicGF5cGFsYnV0dG9uIiwKICAgICJ0aXRsZSI6ICJQYXlwYWwgQnV0dG9uIiwKICAgICJzZXR0aW5ncyI6WwogICAgICAgIHsKICAgICAgICAgICAgImVtYWlsIjogInRleHQiLAogICAgICAgICAgICAiaXRlbW5hbWUiOiJ0ZXh0IiwKICAgICAgICAgICAgIml0ZW1pZCI6InRleHQiLAogICAgICAgICAgICAicHJpY2UiOiJ0ZXh0IiwKICAgICAgICAgICAgImN1cnJlbmN5IjoiQ3VycmVuY3kiCiAgICAgICAgfQogICAgXQp9Cl0=')
},
{
'name': '/app/data/sample.css', 'data': base64.b64decode('LnByb2R1Y3QgewogICAgd2lkdGg6IDEwMCU7CiAgICBtYXgtd2lkdGg6IDMyMHB4OwogICAgbWluLWhlaWdodDogMjUwcHg7CiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgICBib3JkZXI6IDFweCBzb2xpZCAjRUZFRkVGOwogICAgbWFyZ2luOiA3cHg7CiAgICBwYWRkaW5nOiA3cHg7Cn0=')
},
{
'name': '/app/data/app_init.json', 'data': base64.b64decode('')
},
{
'name': '/app/js/app.js', 'data': base64.b64decode('J3VzZSBzdHJpY3QnOwoKCi8vIERlY2xhcmUgYXBwIGxldmVsIG1vZHVsZSB3aGljaCBkZXBlbmRzIG9uIGZpbHRlcnMsIGFuZCBzZXJ2aWNlcwp2YXIgY29zbW9zVUlEZW1vID0gYW5ndWxhci5tb2R1bGUoJ2Nvc21vc1VJRGVtbycsIFsKICAgICduZ1JvdXRlJywKICAgICd1aS5ib290c3RyYXAnLAogICAgJ3VpLnNvcnRhYmxlJywKICAgICd1aS5hY2UnLAogICAgJ3VpLnNlbGVjdCcsCiAgICAneWFydTIyLmpzb25IdW1hbicsCiAgICAnTG9jYWxTdG9yYWdlTW9kdWxlJywKICAgICdjb3Ntb3NVSS5maWx0ZXJzJywKICAgICdjb3Ntb3NVSS5zZXJ2aWNlcycsCiAgICAnY29zbW9zVUkuZGlyZWN0aXZlcycsCiAgICAnY29zbW9zVUkuY29udHJvbGxlcnMnCl0pLgpjb25maWcoWyckcm91dGVQcm92aWRlcicsIGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyKSB7CiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvdGVybWluYWwnLCB7dGVtcGxhdGVVcmw6ICdsaWIvY29zbW9zL3BhcnRpYWxzL3Rlcm1pbmFsLmh0bWwnLCBjb250cm9sbGVyOiAnVGVybWluYWxDdHJsJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9pbnN0YWxsJywge3RlbXBsYXRlVXJsOiAnbGliL2Nvc21vcy9wYXJ0aWFscy9pbnN0YWxsLmh0bWwnLCBjb250cm9sbGVyOiAnVGVybWluYWxDdHJsJ30pOwogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL21lc3NhZ2UnLCB7dGVtcGxhdGVVcmw6ICdsaWIvY29zbW9zL3BhcnRpYWxzL21lc3NhZ2UuaHRtbCcsIGNvbnRyb2xsZXI6ICdNZXNzYWdlVmlld0N0cmwnfSk7CgogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL3VzZXJzJywge3RlbXBsYXRlVXJsOiAnbGliL2Nvc21vcy9wYXJ0aWFscy91c2Vycy5odG1sJywgY29udHJvbGxlcjogJ1VzZXJzQ3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9yb2xlcycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvcm9sZXMuaHRtbCcsIGNvbnRyb2xsZXI6ICdSb2xlc0N0cmwnfSk7CiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvbGlzdHMvJywge3RlbXBsYXRlVXJsOiAnbGliL2Nvc21vcy9wYXJ0aWFscy9saXN0Lmh0bWwnLCBjb250cm9sbGVyOiAnTGlzdEN0cmwnfSk7CiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvbG9naW4vJywge3RlbXBsYXRlVXJsOiAnbGliL2Nvc21vcy9wYXJ0aWFscy9sb2dpbi5odG1sJywgY29udHJvbGxlcjogJ0xvZ2luQ3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYXBwc3R1ZGlvLzphcHBQYXRoPycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvYXBwc3R1ZGlvLmh0bWwnLCBjb250cm9sbGVyOiAnQXBwU3R1ZGlvQ3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hcHBzdHVkaW8vcGFnZS86YXBwUGF0aC86cGFnZUlkPycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvcGFnZS1kZXNpZ24uaHRtbCcsIGNvbnRyb2xsZXI6ICdQYWdlRGVzaWduQ3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hcHBzdHVkaW8vZm9ybS86YXBwUGF0aC86Zm9ybUlkPycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvZm9ybS1kZXNpZ24uaHRtbCcsIGNvbnRyb2xsZXI6ICdGb3JtRGVzaWduQ29udHJvbGxlcid9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYXBwc3R1ZGlvLzppdGVtVHlwZS86YXBwUGF0aC86aXRlbUlkPycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvaXRlbS1kZXNpZ24uaHRtbCcsIGNvbnRyb2xsZXI6ICdJdGVtRGVzaWduQ3RybCd9KTsKCiAgICAkcm91dGVQcm92aWRlci53aGVuKCcvYS86YXBwUGF0aC9mb3JtZGVzaWduLzpmb3JtSWQ/Jywge3RlbXBsYXRlVXJsOiAnbGliL2Nvc21vcy9wYXJ0aWFscy9mb3JtLWRlc2lnbi5odG1sJywgY29udHJvbGxlcjogJ0Zvcm1EZXNpZ25Db250cm9sbGVyJ30pOwogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2EvOmFwcFBhdGgvcGFnZWRlc2lnbi86cGFnZUlkPycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvcGFnZS1kZXNpZ24uaHRtbCcsIGNvbnRyb2xsZXI6ICdQYWdlRGVzaWduQ3RybCd9KTsKCgogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2EvOmFwcFBhdGg/LycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvcGFnZWhvbGRlci5odG1sJywgY29udHJvbGxlcjogJ0luZGV4Q3RybCd9KTsKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL2xpc3RzLzpsaXN0SWQvJywge3RlbXBsYXRlVXJsOiAnbGliL2Nvc21vcy9wYXJ0aWFscy93aWRnZXQtaG9zdC5odG1sJywgY29udHJvbGxlcjogJ0xpc3REZXRhaWxDdHJsJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL2NvbnRlbnQvOmZpbGVPYmplY3ROYW1lLycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvdXBsb2FkZmlsZS5odG1sJywgY29udHJvbGxlcjogJ0ZpbGVVcGxvYWRDdHJsJ30pOwogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2EvOmFwcFBhdGgvZm9ybXMvOmZvcm1JZD8vOmRhdGFJZD8nLCB7dGVtcGxhdGVVcmw6ICdsaWIvY29zbW9zL3BhcnRpYWxzL2Zvcm12aWV3Lmh0bWwnLCBjb250cm9sbGVyOiAnRm9ybVZpZXdDdHJsJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hLzphcHBQYXRoL3BhZ2UvOnBhZ2VJZD8nLCB7dGVtcGxhdGVVcmw6ICdsaWIvY29zbW9zL3BhcnRpYWxzL3BhZ2UuaHRtbCcsIGNvbnRyb2xsZXI6ICdQYWdlVmlld0N0cmwnfSk7CgogICAgJHJvdXRlUHJvdmlkZXIud2hlbignL2EvOmFwcFBhdGgvdmlldy86Y29uZmlnSWQvOml0ZW1JZC8nLCB7dGVtcGxhdGVVcmw6ICdsaWIvY29zbW9zL3BhcnRpYWxzL3NpbmdsZWl0ZW12aWV3Lmh0bWwnLCBjb250cm9sbGVyOiAnU2luZ2xlSXRlbVZpZXdDdHJsJ30pOwoKICAgICRyb3V0ZVByb3ZpZGVyLndoZW4oJy9hcHBsaXN0LycsIHt0ZW1wbGF0ZVVybDogJ2xpYi9jb3Ntb3MvcGFydGlhbHMvYXBwbGlzdC5odG1sJywgY29udHJvbGxlcjogJ0FwcExpc3RDdHJsJ30pOwoKCiAgICAkcm91dGVQcm92aWRlci5vdGhlcndpc2Uoe3JlZGlyZWN0VG86ICcvYS8nfSk7Cn1dKTsKCmNvc21vc1VJRGVtby5jb25maWcoZnVuY3Rpb24gKGxvY2FsU3RvcmFnZVNlcnZpY2VQcm92aWRlcikgewogIGxvY2FsU3RvcmFnZVNlcnZpY2VQcm92aWRlci5zZXRQcmVmaXgoJ2Nvc21vc1VJJyk7Cn0pOwoKY29zbW9zVUlEZW1vLmZhY3RvcnkoJyR0ZW1wbGF0ZUNhY2hlJywgZnVuY3Rpb24oJGNhY2hlRmFjdG9yeSwgJGh0dHAsICRpbmplY3RvcikgewogICAgdmFyIGNhY2hlID0gJGNhY2hlRmFjdG9yeSgndGVtcGxhdGVzJyk7CiAgICB2YXIgd2lkZ2V0UHJvbWlzZTsKCiAgICByZXR1cm4gewogICAgICAgIGdldDogZnVuY3Rpb24odXJsKSB7CiAgICAgICAgICAgIHZhciBjYWNoZWQgPSBjYWNoZS5nZXQodXJsKTsKCiAgICAgICAgICAgIGlmIChjYWNoZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmICghd2lkZ2V0UHJvbWlzZSkgewogICAgICAgICAgICAgICAgdmFyIHVyaT0nL3NlcnZpY2UvY29zbW9zLndpZGdldHMvJzsKCiAgICAgICAgICAgICAgICB3aWRnZXRQcm9taXNlID0gJGh0dHAuZ2V0KHVyaSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZV9kYXRhID0gSlNPTi5wYXJzZShyZXNwb25zZS5kYXRhLl9kKTsKICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godGVtcGxhdGVfZGF0YSwgZnVuY3Rpb24gKGRhdGEsIGluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICc8c2NyaXB0IHR5cGU9InRleHQvbmctdGVtcGxhdGUiIGlkPSInICsgZGF0YS5uYW1lICsgJyI+JyArIGRhdGEudGVtcGxhdGUgKyAnPC9zY3JpcHQ+JzsKICAgICAgICAgICAgICAgICAgICAgICAgJGluamVjdG9yLmdldCgnJGNvbXBpbGUnKSh0ZW1wbGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIHZhciBjYWNoZWQgPSBjYWNoZS5nZXQodXJsKTsKICAgICAgICAgICAgICAgICAgICBpZiAoY2FjaGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmdldCh1cmwpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gd2lkZ2V0UHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXsKICAgICAgICAgICAgICAgIHZhciBjYWNoZWQgPSBjYWNoZS5nZXQodXJsKTsKICAgICAgICAgICAgICAgIGlmIChjYWNoZWQpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FjaGVkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgLy9GYWxsYmFjayB0byByZXF1ZXN0IHRoZSBzZXJ2ZXIKICAgICAgICAgICAgICAgIHJldHVybiAkaHR0cC5nZXQodXJsKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2U7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSkKICAgICAgICB9LAoKICAgICAgICBwdXQ6IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgY2FjaGUucHV0KGtleSwgdmFsdWUpOwogICAgICAgIH0KICAgIH07Cn0pOwo=')
}]
