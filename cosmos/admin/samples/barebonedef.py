# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/settings.py', 'data': base64.b64decode(b'aW1wb3J0IG9zCmltcG9ydCBsb2dnaW5nCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUKCmZyb20gdG9ybmFkbyBpbXBvcnQgZ2VuCmZyb20gdG9ybmFkbyBpbXBvcnQgY29uY3VycmVudApmcm9tIGNvc21vcy5yYmFjLm9iamVjdCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlIGltcG9ydCBPQlNFUlZFUl9QUk9DRVNTT1IKCkRFQlVHID0gVHJ1ZQpEQl9IT1NUID0gIjEyNy4wLjAuMSIKREJfTkFNRSA9ICJjb3Ntb3MiCkRCX1BPUlQgPSAyNzAxNwoKREJfVVNFUl9OQU1FID0gTm9uZQpEQl9VU0VSX1BBU1NXT1JEID0gTm9uZQoKCkxPR19EQl9IT1NUID0gIjEyNy4wLjAuMSIKTE9HX0RCX05BTUUgPSAiY29zbW9zIgpMT0dfQ09MX05BTUUgPSAibG9nIgpMT0dfREJfUE9SVCA9IDI3MDE3CkxPR19MRVZFTCA9IGxvZ2dpbmcuREVCVUcKCkxPR19EQl9VU0VSX05BTUUgPSBOb25lCkxPR19EQl9VU0VSX1BBU1NXT1JEID0gTm9uZQoKU1RBVElDX1BBVEggPSBvcy5wYXRoLmpvaW4ob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSwgImFwcCIpClRFTVBMQVRFX1BBVEggPSBvcy5wYXRoLmpvaW4ob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSwgInRlbXBsYXRlcyIpCklOREVYX0hUTUxfUEFUSCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpLCAiYXBwL2luZGV4Lmh0bWwiKQoKV0VCX1NFUlZFUl9MSVNURU5fUE9SVCA9IDgwODAKCkRCX0NIQU5HRV9QUk9DRVNTT1JfRU5EUE9JTlRfRk9STUFUID0gImh0dHA6Ly9sb2NhbGhvc3Q6ezB9L2hhbmRsZWNoYW5nZSIKCiNUT0RPOiBZb3UgTVVTVCBjaGFuZ2UgdGhlIGZvbGxvd2luZyB2YWx1ZXMKQ09PS0lFX1NFQ1JFVCA9ICIrOC9ZcXRFVVFmaVlMVWRPMmlKMk95ekhIRlNBREV1S3ZLWXdGcWVtRmFzPSIKSE1BQ19LRVkgPSAiKzgvWXF0RVVRZmlZTFVkTzJpSjJPeXpISUZTQUtFdUt2S1l3RnFlbUZhcz0iCgpmYWNlYm9va19jbGllbnRfaWQ9JzAwMDAwMDAwMDAwMDAwMCcKZmFjZWJvb2tfY2xpZW50X3NlY3JldD0nMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnCmZhY2Vib29rX3Njb3BlID0gICJlbWFpbCxwdWJsaWNfcHJvZmlsZSx1c2VyX2ZyaWVuZHMiCmZhY2Vib29rX3JlZGlyZWN0X3VyaSA9IE5vbmUKREVGQVVMVF9MT0dJTl9ORVhUX1VSSSA9ICIvIgoKIiIiCiMgcGlwIGluc3RhbGwgcHljcnlwdG8gZm9yIENyeXB0bwojIHRoZW4gZnJvbSBweXRob24gY29uc29sZSBnZW5lcmF0ZSBwcml2YXRlX3BlbSBhbmQgcHVibGljX3BlbiBhbmQgYXNzaWduIHRvIFNFUlZJQ0VfUFJJVkFURV9LRVkgYW5kIFNFUlZJQ0VfUFVCTElDX0tFWQppbXBvcnQgIENyeXB0by5QdWJsaWNLZXkuUlNBIGFzIFJTQQprZXkgPSBSU0EuZ2VuZXJhdGUoMjA0OCkKcHJpdmF0ZV9wZW0gPSBrZXkuZXhwb3J0S2V5KCkKcHVibGljX3BlbSA9IGtleS5wdWJsaWNrZXkoKS5leHBvcnRLZXkoKQoKIiIiCiMgVE9ETzogc2V0IGJvdGgga2V5cyBiZWxvdy4gUHJpdmF0ZSBrZXkgYmFja3VwIG11c3QgYmUga2VwdCBpbiBhIHNlY3VyZSBwbGFjZSBhbmQgc2hvdWxkIG5ldmVyIGJlIHNoYXJlZAojIElmIHByaXZhdGUga2V5IGlzIGNvbXByb21pc2VkLCB0aGlzIHNlcnZpY2UgYW5kIGFsbCBvdGhlciBzZXJ2aWNlcyB0aGF0IHRydXN0IHRoaXMgd2lsbCBiZSBjb21wcm9taXNlZAojIFB1YmxpYyBrZXkgaXMgdG8gc2hhcmUgcHVibGljbHkgZm9yIHZlcmlmaWNhdGlvbgoKU0VSVklDRV9QUklWQVRFX0tFWSA9IE5vbmUKU0VSVklDRV9QVUJMSUNfS0VZID0gTm9uZQoKZGlyZWN0b3J5X2xpc3RpbmdfYWxsb3dlZCA9IFRydWUKCkNPTkZJR1VSRV9MT0cgPSBGYWxzZQpTVEFSVF9XRUJfU0VSVkVSID0gVHJ1ZQpTVEFSVF9PQkpFQ1RfQ0hBTkdFX01PTklUT1IgPSBGYWxzZQoKR09PR0xFX09BVVRIMl9DTElFTlRfSUQgPSBOb25lCkdPT0dMRV9PQVVUSDJfQ0xJRU5UX1NFQ1JFVCA9IE5vbmUKR09PR0xFX09BVVRIMl9SRURJUkVDVF9VUkkgPSBOb25lCgpHSVRIVUJfQ0xJRU5UX0lEID0gTm9uZQpHSVRIVUJfQ0xJRU5UX1NFQ1JFVCA9IE5vbmUKR0lUSFVCX09BVVRIMl9DQUxMQkFDS19VUkkgPSBOb25lCgpVU0VSU19JREVOVElUWV9DT0xfTkFNRSA9ICJjb3Ntb3MudXNlcnMuaWRlbnRpdHkiClVTRVJTX1BST0ZJTEVfRkJfQ09MX05BTUUgPSAiY29zbW9zLnVzZXJzLnByb2ZpbGUuZmFjZWJvb2siClVTRVJTX0ZCX0ZSSUVORFNfQ09MX05BTUUgPSAiY29zbW9zLnVzZXJzLmZhY2Vib29rLmZyaWVuZHMiCgpsb2dpbl91cmwgPSAiL2xvZ2luLyIKCmRlZiB0ZXN0X29ic2VydmVyKHVzZXIsIG9iamVjdF9zZXJ2aWNlLCBvYmplY3RfbmFtZSwgZGF0YSwgYWNjZXNzX3R5cGUsIGNvbHVtbnMgPSBOb25lLCAqYXJncywgKiprd2FyZ3MpOgogICAgYXNzZXJ0IG9iamVjdF9uYW1lID09ICJ0ZXN0IgogICAgYXNzZXJ0IGFjY2Vzc190eXBlID09IEFjY2Vzc1R5cGUuUkVBRCBvciBhY2Nlc3NfdHlwZSA9PSBBY2Nlc3NUeXBlLklOU0VSVCBvciBhY2Nlc3NfdHlwZSA9PSBBY2Nlc3NUeXBlLlVQREFURSBvciBhY2Nlc3NfdHlwZSA9PSBBY2Nlc3NUeXBlLkRFTEVURQogICAgbG9nZ2luZy5pbmZvKCJUZXN0IG9iamVjdCBvYnNlcnZlciBpcyBjYWxsZWQgd2l0aCBbe30sIHt9LCB7fSwge30sIHt9LCB7fV0uIi5mb3JtYXQodXNlciwgb2JqZWN0X3NlcnZpY2UsIG9iamVjdF9uYW1lLCBkYXRhLCBhY2Nlc3NfdHlwZSwgY29sdW1ucykpCgogICAgaWYgQWNjZXNzVHlwZS5JTlNFUlQgPT0gYWNjZXNzX3R5cGU6CiAgICAgICAgdmFsID0gY29uY3VycmVudC5GdXR1cmUoKQogICAgICAgIHZhbC5zZXRfcmVzdWx0KGRhdGEpCiAgICAgICAgcmV0dXJuICh2YWwpCgogICAgaWYgQWNjZXNzVHlwZS5VUERBVEUgPT0gYWNjZXNzX3R5cGUgb3IgQWNjZXNzVHlwZS5ERUxFVEUgPT0gYWNjZXNzX3R5cGU6CiAgICAgICAgciA9ICh7ImVycm9yIjogTm9uZSwgIm4iOiAxLCAib2siOiAxLCAidXBkYXRlZEV4aXN0aW5nIjogMX0pCiAgICAgICAgdmFsID0gY29uY3VycmVudC5GdXR1cmUoKQogICAgICAgIHZhbC5zZXRfcmVzdWx0KHsiX2lkIjpyfSkKICAgICAgICByZXR1cm4gKHZhbCkKCiAgICBmaW5kX29uZSA9IGt3YXJncy5nZXQoImZpbmRfb25lIiwgRmFsc2UpCiAgICBpZiBmaW5kX29uZToKICAgICAgICB2YWwgPSBjb25jdXJyZW50LkZ1dHVyZSgpCiAgICAgICAgdmFsLnNldF9yZXN1bHQoeyJfaWQiOmRhdGF9KQogICAgICAgIHJldHVybiAodmFsKQogICAgZWxzZToKICAgICAgICBSZXN1bHQgPSBuYW1lZHR1cGxlKCJDb3Ntb3NFbXB0eVJlc3VsdFNldCIsICJmZXRjaF9uZXh0IikKICAgICAgICB2YWwgPSBjb25jdXJyZW50LkZ1dHVyZSgpCiAgICAgICAgdmFsLnNldF9yZXN1bHQoRmFsc2UpCiAgICAgICAgcmV0dXJuIChSZXN1bHQoZmV0Y2hfbmV4dD12YWwpKQoKb2JzZXJ2ZXJzID0gWwogICAgewogICAgICAgICJvYmplY3RfbmFtZSI6ICJ0ZXN0IiwKICAgICAgICAiZnVuY3Rpb24iOiB0ZXN0X29ic2VydmVyLAogICAgICAgICJhY2Nlc3MiOiBbQWNjZXNzVHlwZS5SRUFELCBBY2Nlc3NUeXBlLklOU0VSVCwgQWNjZXNzVHlwZS5VUERBVEUsIEFjY2Vzc1R5cGUuREVMRVRFXSwKICAgICAgICAidHlwZSI6IE9CU0VSVkVSX1BST0NFU1NPUgogICAgfQpdCgp0cnk6CiAgICBmcm9tIGxvY2FsX3NldHRpbmdzIGltcG9ydCAqCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHBhc3MKCmlmIERCX1VTRVJfTkFNRSBhbmQgREJfVVNFUl9QQVNTV09SRDoKICAgIERBVEFCQVNFX1VSSSA9ICJtb25nb2RiOi8vIisgREJfVVNFUl9OQU1FICsgIjoiKyBEQl9VU0VSX1BBU1NXT1JEICsiQCIrIERCX0hPU1QrIjoiK3N0cihEQl9QT1JUKSsiLyIrREJfTkFNRQplbHNlOgogICAgREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iK0RCX0hPU1QrIjoiK3N0cihEQl9QT1JUKQoKaWYgTE9HX0RCX1VTRVJfTkFNRSBhbmQgTE9HX0RCX1VTRVJfUEFTU1dPUkQ6CiAgICBMT0dfREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iKyBMT0dfREJfVVNFUl9OQU1FICsgIjoiKyBMT0dfREJfVVNFUl9QQVNTV09SRCArIkAiKyBMT0dfREJfSE9TVCsiOiIrc3RyKExPR19EQl9QT1JUKSsiLyIrTE9HX0RCX05BTUUKZWxzZToKICAgIExPR19EQVRBQkFTRV9VUkkgPSAibW9uZ29kYjovLyIrIExPR19EQl9IT1NUKyI6IitzdHIoTE9HX0RCX1BPUlQpCgoKR09PR0xFX09BVVRIMl9TRVRUSU5HUyA9IHsia2V5IjogR09PR0xFX09BVVRIMl9DTElFTlRfSUQsICJzZWNyZXQiOiBHT09HTEVfT0FVVEgyX0NMSUVOVF9TRUNSRVQsICJyZWRpcmVjdF91cmkiOiBHT09HTEVfT0FVVEgyX1JFRElSRUNUX1VSSX0KCkdJVEhVQl9PQVVUSF9TRVRUSU5HUyA9IHsiY2xpZW50X2lkIjogR0lUSFVCX0NMSUVOVF9JRCwgInNlY3JldCI6IEdJVEhVQl9DTElFTlRfU0VDUkVULCAicmVkaXJlY3RfdXJpIjogR0lUSFVCX09BVVRIMl9DQUxMQkFDS19VUkl9Cg==')
},
{
'name': '/endpoints.py', 'data': base64.b64decode(b'aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLnNlYXJjaCBpbXBvcnQgU2VhcmNoSGFuZGxlcgpmcm9tIGNvc21vcy5zZXJ2aWNlLnNlcnZpY2VoYW5kbGVyIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuZ3JpZGZzc2VydmljZSBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLmFwcHNlcnZpY2UgaW1wb3J0ICoKZnJvbSB2aWV3cyBpbXBvcnQgSW5kZXhIYW5kbGVyCmltcG9ydCBzZXR0aW5ncwoKCkVORF9QT0lOVFMgPSBbCiAgICAociIvbG9naW4vZ29vZ2xlLyIsIEdvb2dsZU9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vb3BlbmlkLyIsIE9wZW5pZExvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vZmFjZWJvb2tncmFwaC8iLCBGYWNlYm9va0dyYXBoTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9naXRodWIvIiwgR2l0aHViT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi8iLCBMb2dpbkhhbmRsZXIpLAogICAgKHIiL2xvZ291dC8iLCBMb2dvdXRIYW5kbGVyKSwKICAgIChyIi9zZXJ2aWNlLyguKikiLCBTZXJ2aWNlSGFuZGxlciksCiAgICAociIvc2VhcmNoLyguKikvIiwgU2VhcmNoSGFuZGxlciksCiAgICAociIvZ3JpZGZzLyguKikiLCBHcmlkRlNTZXJ2aWNlSGFuZGxlciksCiAgICAociIvYXBwbGljYXRpb24vaW5zdGFsbC8iLCBBcHBJbnN0YWxsSGFuZGxlciksCiAgICAociIvYXBwbGljYXRpb24vcGFja2FnZS8oLiopIiwgQXBwUGFja2FnZUhhbmRsZXIpLAogICAgI1RPRE86IGF1dGhlbnRpY2Fpb24gYW5kIGF1dGhvcml6YXRpb24gcmVxdWlyZWQgZm9yIGNoYW5nZSBtb25pdG9yIGFuZCBoYW5kbGVyLgogICAgKHIiL2NoYW5nZW1vbml0b3IiLCBDaGFuZ2VNb25pdG9yKSwKICAgIChyIi9oYW5kbGVjaGFuZ2UiLCBDaGFuZ2VSZXF1ZXN0SGFuZGxlciksCiAgICAociIvIiwgIEluZGV4SGFuZGxlciksCiAgICAocicvKC4qKScsIHRvcm5hZG8ud2ViLlN0YXRpY0ZpbGVIYW5kbGVyLCB7J3BhdGgnOiBzZXR0aW5ncy5TVEFUSUNfUEFUSH0pLApd')
},
{
'name': '/__init__.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
},
{
'name': '/views.py', 'data': base64.b64decode(b'aW1wb3J0IHNldHRpbmdzCgpfX2F1dGhvcl9fID0gJ01hcnVmIE1hbmlydXp6YW1hbicKCmltcG9ydCB0b3JuYWRvCmZyb20gdG9ybmFkbyBpbXBvcnQgZ2VuCgpmcm9tIGNvc21vcy5zZXJ2aWNlLnJlcXVlc3RoYW5kbGVyIGltcG9ydCBSZXF1ZXN0SGFuZGxlcgoKCmNsYXNzIEluZGV4SGFuZGxlcihSZXF1ZXN0SGFuZGxlcik6CiAgICBAZ2VuLmNvcm91dGluZQogICAgZGVmIGdldChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihzZXR0aW5ncy5JTkRFWF9IVE1MX1BBVEgpIGFzIGY6CiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKGYucmVhZCgpKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgo=')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKCnRyeToKICAgIGltcG9ydCBlbmRwb2ludHMKICAgIGltcG9ydCBzZXR0aW5ncwpleGNlcHQgSW1wb3J0RXJyb3IgYXMgaWU6CiAgICBzeXMucGF0aC5hcHBlbmQob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSkKICAgIGltcG9ydCBzZXR0aW5ncwogICAgaW1wb3J0IGVuZHBvaW50cwoKaW1wb3J0IGltcG9ydGxpYgoKaW1wb3J0IHNpZ25hbAppbXBvcnQgaW1wCmltcG9ydCBtb3Rvcgpmcm9tIHB5bW9uZ28gaW1wb3J0IE1vbmdvQ2xpZW50CmltcG9ydCBncmlkZnMKCmZyb20gY29zbW9zLmFkbWluLmNvbW1hbmRzIGltcG9ydCBDb21tYW5kSGFuZGxlcgpmcm9tIGNvc21vcy5jb21tb24uY29uc3RhbnRzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvcgpmcm9tIGNvc21vcy5yYmFjLnNlcnZpY2UgaW1wb3J0IFJiYWNTZXJ2aWNlCmltcG9ydCBjb3Ntb3Muc2VydmljZS5zZXJ2aWNlbWFpbgoKZnJvbSBjb3Ntb3Muc2VydmljZSBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLnV0aWxzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvciBhcyBtb25pdG9yCgoKbW9uaXRvcl93b3JrZXIgPSBOb25lCmRiID0gTm9uZQoKCmRlZiBpbml0X2RhdGFiYXNlKG9wdGlvbnMpOgogICAgY2xpZW50ID0gbW90b3IuTW90b3JDbGllbnQob3B0aW9ucy5kYl91cmkpCiAgICBkYiA9IGNsaWVudFtvcHRpb25zLmRiX25hbWVdCgogICAgbG9hZGVyID0gY29zbW9zLnNlcnZpY2UuQm9vdExvYWRlcigpCgogICAgaWYgb3B0aW9ucy5jb25maWdfbG9nOgogICAgICAgIGxvYWRlci5jb25maWdfbW9uZ29sb2cob3B0aW9ucy5sb2dfZGJfdXJpLCBvcHRpb25zLmxvZ19kYl9uYW1lLCBvcHRpb25zLmxvZ19jb2xfbmFtZSwgIG9wdGlvbnMubG9nX2xldmVsKQogICAgZWxzZToKICAgICAgICBsb2dnaW5nLmdldExvZ2dlcigpLnNldExldmVsKG9wdGlvbnMubG9nX2xldmVsKQoKICAgIHJldHVybiBkYgoKCmRlZiBjbGVhbnVwKCk6CiAgICBtb25pdG9yLmNvbnRpbnVlX21vbml0b3IgPSBGYWxzZQoKZGVmIGludF9zaWduYWxfaGFuZGxlcihzaWduYWwsIGZyYW1lKToKICAgIGxvZ2dpbmcuaW5mbygnRXhpdGluZy4uLicpCiAgICBjbGVhbnVwKCkKICAgIHN5cy5leGl0KDApCgoKIyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGluIHRoZSBjb250ZXh0IG9mIG1vbml0b3Igd29ya2VyIHRocmVhZCwgTk9UIGZyb20gdGhlIHRocmVhZCBfX21haW5fXyBiZWxvdyBpcyBydW5uaW5nLgpkZWYgZW5kX21vbml0b3JfY2FsbGJhY2socmVhc29uPU5vbmUpOgogICAgcGFzcwoKCmRlZiBzdGFydF9tb25pdG9yKG9wdGlvbnMpOgogICAgbW9uaXRvci5jb250aW51ZV9tb25pdG9yID0gVHJ1ZQogICAgbW9uaXRvci5zdGFydF9vYmplY3RfY2hhbmdlX21vbml0b3Iob3B0aW9ucy5kYl9wcm9jZXNzb3JfZW5kcG9pbnQsIG9wdGlvbnMuZGJfdXJpLCBlbmRfbW9uaXRvcl9jYWxsYmFjaykKCgpkZWYgc3RhcnRfc2VydmljZShvcHRpb25zKToKICAgIGNvc21vcy5zZXJ2aWNlLnNlcnZpY2VtYWluLnN0YXJ0X3dlYl9zZXJ2aWNlKG9wdGlvbnMpCgoKZGVmIGxvYWRfcHl0aG9uX21vZHVsZShmdWxsbmFtZSwgY29kZSk6CiAgICBweV9tb2R1bGUgPSBpbXAubmV3X21vZHVsZShmdWxsbmFtZSkKICAgIGV4ZWMoY29kZSBpbiBweV9tb2R1bGUuX19kaWN0X18pCiAgICBzeXMubW9kdWxlc1tmdWxsbmFtZV0gPSBweV9tb2R1bGUKICAgIHJldHVybiBweV9tb2R1bGUKCmRlZiBnZXRfZ3JpZF9maWxlX2NvbnRlbnQoZGIsIGZpbGVfaWQpOgogICAgZnMgPSBncmlkZnMuR3JpZEZTKGRiKQogICAgX2lkID0gT2JqZWN0SWQoZmlsZV9pZCkKICAgIHJldHVybiBmcy5nZXQoX2lkKS5yZWFkKCkKCiNUT0RPOiBhZGQgc2lnbmluZyBtZWNoYW5pc20gdG8gYXZvaWQgbG9hZGluZyB1bnRydXN0ZWQgY29kZQpkZWYgbG9hZF9zb3VyY2VfbW9kdWxlKGRiLCBzb3VyY2VfbW9kdWxlKToKICAgIG1vZHVsZV9uYW1lID0gc291cmNlX21vZHVsZS5nZXQoImZ1bGxuYW1lIikKICAgIG1vZHVsZV90eXBlID0gc291cmNlX21vZHVsZS5nZXQoInR5cGUiKQogICAgdHJ5OgogICAgICAgIHByaW50KCJMb2FkaW5nIHNvdXJjZSBtb2R1bGUgIiArIG1vZHVsZV9uYW1lICsgIiAiICsgbW9kdWxlX3R5cGUgKyAiXG4iKQogICAgICAgIHByaW50KCAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiIpCiAgICAgICAgc291cmNlX2NvZGUgPSBOb25lCgogICAgICAgIGlmIG1vZHVsZV90eXBlID09IENPU01PU19TT1VSQ0VfTU9EVUxFU19UWVBFX0VNQkVEREVEOgogICAgICAgICAgICBzb3VyY2VfY29kZSA9IHNvdXJjZV9tb2R1bGUuZ2V0KCJjb2RlIikKCiAgICAgICAgaWYgbW9kdWxlX3R5cGUgPT0gQ09TTU9TX1NPVVJDRV9NT0RVTEVTX1RZUEVfR1JJREZJTEU6CiAgICAgICAgICAgIGZpbGVfaWQgPSBzb3VyY2VfbW9kdWxlLmdldCgiZmlsZV9pZCIpCiAgICAgICAgICAgIHNvdXJjZV9jb2RlID0gZ2V0X2dyaWRfZmlsZV9jb250ZW50KGRiLCBmaWxlX2lkKQoKICAgICAgICBpZihzb3VyY2VfY29kZSk6CiAgICAgICAgICAgIHByaW50KHNvdXJjZV9jb2RlKQogICAgICAgICAgICBsb2FkX3B5dGhvbl9tb2R1bGUobW9kdWxlX25hbWUsIHNvdXJjZV9jb2RlKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoKICAgICAgICBwcmludCgiQ291bGQgbm90IGxvYWQgc291cmNlIG1vZHVsZSAiICsgc3RyKG1vZHVsZV9uYW1lKSArIjogIiArIHN0cihleCkpCgogICAgcHJpbnQoIi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4iKQoKCmRlZiBsb2FkX3NvdXJjZV9tb2R1bGVzKGRiKToKICAgIGNvbGxlY3Rpb25fbmFtZSA9IENPU01PU19TT1VSQ0VfTU9EVUxFU19PQkpFQ1RfTkFNRQogICAgc291cmNlX21vZHVsZXMgPSBbXQoKICAgIGN1cnNvciA9IGRiW2NvbGxlY3Rpb25fbmFtZV0uZmluZCgpCiAgICBmb3Igc291cmNlX21vZHVsZSBpbiBjdXJzb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBzb3VyY2VfbW9kdWxlcy5hcHBlbmQoc291cmNlX21vZHVsZSkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4OgogICAgICAgICAgICBwcmludCgiVW5hYmxlIHRvIGxvYWQgYXBwIHJlcXVlc3QgaGFuZGxlci4iICsgc3RyKGV4KSkKCiAgICByZXR1cm4gc291cmNlX21vZHVsZXMKCgpkZWYgZ2V0X3N5bmNfZGIoZGJfdXJpLCBkYl9uYW1lKToKICAgIGNsaWVudCA9IE1vbmdvQ2xpZW50KGRiX3VyaSkKICAgIHJldHVybiBjbGllbnRbZGJfbmFtZV0KCgpkZWYgbG9hZF9hcHBfZW5kcG9pbnRzKGRiKToKICAgIGNvbGxlY3Rpb25fbmFtZSA9IENPU01PU19BUFBMSUNBVElPTl9FTkRQT0lOVF9MSVNUX09CSkVDVF9OQU1FCiAgICBhcHBfZW5mcG9pbnRzID0gW10KCiAgICBjdXJzb3IgPSBkYltjb2xsZWN0aW9uX25hbWVdLmZpbmQoKQogICAgZm9yIGVuZHBvaW50X2RlZiBpbiBjdXJzb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBwcmludCgiTG9hZGluZyAiICsgZW5kcG9pbnRfZGVmWyJoYW5kbGVyX21vZHVsZSJdICsgIi4iICtlbmRwb2ludF9kZWZbImhhbmRsZXJfbmFtZSJdKQogICAgICAgICAgICBhcHBfbW9kdWxlID0gaW1wb3J0bGliLmltcG9ydF9tb2R1bGUoZW5kcG9pbnRfZGVmWyJoYW5kbGVyX21vZHVsZSJdKQogICAgICAgICAgICBnbG9iYWxzKCkudXBkYXRlKGFwcF9tb2R1bGUuX19kaWN0X18pCiAgICAgICAgICAgIGhhbmRsZXJfZnVuYyA9IGdldGF0dHIoYXBwX21vZHVsZSwgZW5kcG9pbnRfZGVmWyJoYW5kbGVyX25hbWUiXSkKICAgICAgICAgICAgYXBwX2VuZnBvaW50cy5hcHBlbmQoKHN0cihlbmRwb2ludF9kZWZbInVyaV9wYXR0ZXJuIl0pLCBoYW5kbGVyX2Z1bmMpKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXg6CiAgICAgICAgICAgIHByaW50KCJVbmFibGUgdG8gbG9hZCBhcHAgcmVxdWVzdCBoYW5kbGVyLiIgKyBzdHIoZXgpKQoKICAgIHJldHVybiBhcHBfZW5mcG9pbnRzCgoKZGVmIGxvYWRfaW50ZXJjZXB0b3JzKGRiKToKICAgIGNvbGxlY3Rpb25fbmFtZSA9IENPU01PU19JTlRFUkNFUFRPUl9PQkpFQ1RfTkFNRQogICAgaW50ZXJjZXB0b3JzID0gW10KCiAgICBjdXJzb3IgPSBkYltjb2xsZWN0aW9uX25hbWVdLmZpbmQoKQogICAgZm9yIGludGVyY2VwdG9yX2RlZiBpbiBjdXJzb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBwcmludCgiTG9hZGluZyBpbnRlcmNlcHRvciIgKyBpbnRlcmNlcHRvcl9kZWZbImludGVyY2VwdG9yX21vZHVsZSJdICsgIi4iICsgaW50ZXJjZXB0b3JfZGVmWyJpbnRlcmNlcHRvcl9uYW1lIl0pCgogICAgICAgICAgICBhcHBfbW9kdWxlID0gaW1wb3J0bGliLmltcG9ydF9tb2R1bGUoaW50ZXJjZXB0b3JfZGVmWyJpbnRlcmNlcHRvcl9tb2R1bGUiXSkKICAgICAgICAgICAgaW50ZXJjZXB0b3JfZnVuYyA9IGdldGF0dHIoYXBwX21vZHVsZSwgaW50ZXJjZXB0b3JfZGVmWyJpbnRlcmNlcHRvcl9uYW1lIl0pCgogICAgICAgICAgICBhY2Nlc3MgPSBpbnRlcmNlcHRvcl9kZWZbImFjY2VzcyJdCiAgICAgICAgICAgIGludGVyY2VwdG9yX3R5cGUgPSBpbnRlcmNlcHRvcl9kZWZbImludGVyY2VwdG9yX3R5cGUiXQogICAgICAgICAgICBvYmplY3RfbmFtZSA9IGludGVyY2VwdG9yX2RlZlsib2JqZWN0X25hbWUiXQoKICAgICAgICAgICAgaW50ZXJjZXB0b3JzLmFwcGVuZCgKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAib2JqZWN0X25hbWUiOiBvYmplY3RfbmFtZSwKICAgICAgICAgICAgICAgICAgICAiZnVuY3Rpb24iOiBpbnRlcmNlcHRvcl9mdW5jLAogICAgICAgICAgICAgICAgICAgICJhY2Nlc3MiOiBhY2Nlc3MsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiBpbnRlcmNlcHRvcl90eXBlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4OgogICAgICAgICAgICBwcmludCgiVW5hYmxlIHRvIGxvYWQgaW50ZXJjZXB0b3IuIiArIHN0cihleCkpCgogICAgcmV0dXJuIGludGVyY2VwdG9ycwoKCmRlZiBnZXRfb3B0aW9ucyhzeW5jX2RiLCBwb3J0KToKICAgIHNvdXJjZV9yb290ID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKQogICAgb3B0aW9ucyA9IE9wdGlvbnMoKipkaWN0KAogICAgICAgIGRiX3VyaT1zZXR0aW5ncy5EQVRBQkFTRV9VUkksCiAgICAgICAgZGJfbmFtZT1zZXR0aW5ncy5EQl9OQU1FLAogICAgICAgIGxvZ19kYl91cmk9c2V0dGluZ3MuTE9HX0RBVEFCQVNFX1VSSSwKICAgICAgICBsb2dfZGJfbmFtZT1zZXR0aW5ncy5MT0dfREJfTkFNRSwKICAgICAgICBsb2dfY29sX25hbWU9c2V0dGluZ3MuTE9HX0NPTF9OQU1FLAogICAgICAgIGxvZ19sZXZlbD1zZXR0aW5ncy5MT0dfTEVWRUwsCiAgICAgICAgY29uZmlnX2xvZz1zZXR0aW5ncy5DT05GSUdVUkVfTE9HLAogICAgICAgIGRiX3Byb2Nlc3Nvcl9lbmRwb2ludD1zZXR0aW5ncy5EQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVC5mb3JtYXQocG9ydCksCiAgICAgICAgb2JzZXJ2ZXJzPXNldHRpbmdzLm9ic2VydmVycywKICAgICAgICB3ZWJfc2VydmljZV9wb3J0PXBvcnQsCiAgICAgICAgbG9naW5fdXJsPXNldHRpbmdzLmxvZ2luX3VybCwKICAgICAgICBjb29raWVfc2VjcmV0PXNldHRpbmdzLkNPT0tJRV9TRUNSRVQsCiAgICAgICAgaG1hY19rZXk9c2V0dGluZ3MuSE1BQ19LRVksCiAgICAgICAgeGhlYWRlcnM9VHJ1ZSwKICAgICAgICB0ZW1wbGF0ZV9wYXRoPXNldHRpbmdzLlRFTVBMQVRFX1BBVEgsCiAgICAgICAgZGVidWc9c2V0dGluZ3MuREVCVUcsCiAgICAgICAgZGVmYXVsdF9sb2dpbl9uZXh0X3VyaT1zZXR0aW5ncy5ERUZBVUxUX0xPR0lOX05FWFRfVVJJLAogICAgICAgIGZhY2Vib29rX2FwaV9rZXk9c2V0dGluZ3MuZmFjZWJvb2tfY2xpZW50X2lkLAogICAgICAgIGZhY2Vib29rX3NlY3JldD1zZXR0aW5ncy5mYWNlYm9va19jbGllbnRfc2VjcmV0LAogICAgICAgIGZhY2Vib29rX3Njb3BlPXNldHRpbmdzLmZhY2Vib29rX3Njb3BlLAogICAgICAgIGZhY2Vib29rX3JlZGlyZWN0X3VyaT1zZXR0aW5ncy5mYWNlYm9va19yZWRpcmVjdF91cmksCiAgICAgICAgZ29vZ2xlX29hdXRoPXNldHRpbmdzLkdPT0dMRV9PQVVUSDJfU0VUVElOR1MsCiAgICAgICAgZ2l0aHViX29hdXRoPXNldHRpbmdzLkdJVEhVQl9PQVVUSF9TRVRUSU5HUywKICAgICAgICBzdGFydF9kYl9tb25pdG9yPXNldHRpbmdzLlNUQVJUX09CSkVDVF9DSEFOR0VfTU9OSVRPUiwKICAgICAgICBzdGFydF93ZWJfc2VydmljZT1zZXR0aW5ncy5TVEFSVF9XRUJfU0VSVkVSLAogICAgICAgIGRpcmVjdG9yeV9saXN0aW5nX2FsbG93ZWQ9c2V0dGluZ3MuZGlyZWN0b3J5X2xpc3RpbmdfYWxsb3dlZCwKICAgICAgICBzb3VyY2Vfcm9vdD1zb3VyY2Vfcm9vdAogICAgKSkKCiAgICBvcHRpb25zLmRiID0gaW5pdF9kYXRhYmFzZShvcHRpb25zKQoKICAgIGFwcF9lbmZwb2ludHMgPSBsb2FkX2FwcF9lbmRwb2ludHMoc3luY19kYikKICAgIG9wdGlvbnMuZW5kcG9pbnRzID0gYXBwX2VuZnBvaW50cyArIGVuZHBvaW50cy5FTkRfUE9JTlRTCgogICAgcmV0dXJuIG9wdGlvbnMKCgpkZWYgcHJlcGFyZShwb3J0KToKICAgICAgICBzeW5jX2RiID0gZ2V0X3N5bmNfZGIoc2V0dGluZ3MuREFUQUJBU0VfVVJJLCBzZXR0aW5ncy5EQl9OQU1FKQoKICAgICAgICBwcmludCgiTG9hZGluZyBzb3VyY2UgbW9kdWxlcyIpCiAgICAgICAgc291cmNlX21vZHVsZXMgPSBsb2FkX3NvdXJjZV9tb2R1bGVzKHN5bmNfZGIpCiAgICAgICAgZm9yIHNvdXJjZV9tb2R1bGUgaW4gc291cmNlX21vZHVsZXM6CiAgICAgICAgICAgIGxvYWRfc291cmNlX21vZHVsZShzeW5jX2RiLCBzb3VyY2VfbW9kdWxlKQoKICAgICAgICBvcHRpb25zID0gZ2V0X29wdGlvbnMoc3luY19kYiwgcG9ydCkKCiAgICAgICAgZGJfb2JzZXJ2ZXJzID0gbG9hZF9pbnRlcmNlcHRvcnMoc3luY19kYikKCiAgICAgICAgb3B0aW9ucy5vYnNlcnZlcnMgPSBkYl9vYnNlcnZlcnMgKyBzZXR0aW5ncy5vYnNlcnZlcnMKCiAgICAgICAgcmV0dXJuIG9wdGlvbnMKCgpkZWYgbWFpbigpOgogICAgY3VycmVudF9kaXJlY3RvcnkgPSBvcy5nZXRjd2QoKQogICAgcHJpbnQgKCJQeXRob24gdmVyc2lvbjogIiArIHN0cihzeXMudmVyc2lvbl9pbmZvKSkKICAgIHByaW50ICgiUnVubmluZyBmcm9tIGRpcmVjdG9yeTogIiArIGN1cnJlbnRfZGlyZWN0b3J5KQoKICAgIHBvcnQgPSBzZXR0aW5ncy5XRUJfU0VSVkVSX0xJU1RFTl9QT1JUCgogICAgaWYgbGVuKHN5cy5hcmd2KSA8IDI6CiAgICAgICAgY29tbWFuZCA9ICJzdGFydC1zZXJ2aWNlIgogICAgZWxzZToKICAgICAgICBjb21tYW5kID0gc3lzLmFyZ3ZbMV0uc3RyaXAoKQoKICAgIGlmIGxlbihzeXMuYXJndikgPj0gMzoKICAgICAgICBwb3J0ID0gaW50KHN5cy5hcmd2WzJdLnN0cmlwKCkpCgogICAgb3B0aW9ucyA9IHByZXBhcmUocG9ydCkKCiAgICBpZiBjb21tYW5kID09ICJzdGFydC1zZXJ2aWNlIjoKCiAgICAgICAgaWYgb3B0aW9ucy5zdGFydF93ZWJfc2VydmljZToKICAgICAgICAgICAgc3RhcnRfc2VydmljZShvcHRpb25zKQogICAgICAgIGlmIG9wdGlvbnMuc3RhcnRfZGJfbW9uaXRvcjoKICAgICAgICAgICBzdGFydF9tb25pdG9yKG9wdGlvbnMpCgogICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW50X3NpZ25hbF9oYW5kbGVyKQogICAgICAgIHRvcm5hZG8uaW9sb29wLklPTG9vcC5pbnN0YW5jZSgpLnN0YXJ0KCkKICAgIGVsc2U6CiAgICAgICAgY29zbW9zLmFkbWluLmNvbW1hbmRzLmFkbWluX21haW4oKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=')
}]
