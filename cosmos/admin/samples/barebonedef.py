# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/settings.py', 'data': base64.b64decode(b'aW1wb3J0IG9zCmltcG9ydCBsb2dnaW5nCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUKCmZyb20gQ3J5cHRvLlB1YmxpY0tleSBpbXBvcnQgUlNBCmZyb20gdG9ybmFkbyBpbXBvcnQgZ2VuCmZyb20gdG9ybmFkbyBpbXBvcnQgY29uY3VycmVudApmcm9tIGNvc21vcy5yYmFjLm9iamVjdCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlIGltcG9ydCBPQlNFUlZFUl9QUk9DRVNTT1IKCkRFQlVHID0gVHJ1ZQpEQl9IT1NUID0gIjEyNy4wLjAuMSIKREJfTkFNRSA9ICJjb3Ntb3MiCkRCX1BPUlQgPSAyNzAxNwoKREJfVVNFUl9OQU1FID0gTm9uZQpEQl9VU0VSX1BBU1NXT1JEID0gTm9uZQoKTE9HX0RCX0hPU1QgPSAiMTI3LjAuMC4xIgpMT0dfREJfTkFNRSA9ICJjb3Ntb3MiCkxPR19DT0xfTkFNRSA9ICJsb2ciCkxPR19EQl9QT1JUID0gMjcwMTcKTE9HX0xFVkVMID0gbG9nZ2luZy5ERUJVRwoKTE9HX0RCX1VTRVJfTkFNRSA9IE5vbmUKTE9HX0RCX1VTRVJfUEFTU1dPUkQgPSBOb25lCgpTVEFUSUNfUEFUSCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpLCAiYXBwIikKVEVNUExBVEVfUEFUSCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpLCAidGVtcGxhdGVzIikKSU5ERVhfSFRNTF9QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJhcHAvaW5kZXguaHRtbCIpCkxPR0lOX0hUTUxfUEFUSCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpLCAidGVtcGxhdGVzL2xvZ2luLmh0bWwiKQpTWVNURU1fU0VUVVBfSFRNTF9QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJ0ZW1wbGF0ZXMvc2V0dXAuaHRtbCIpCldFQl9TRVJWRVJfTElTVEVOX1BPUlQgPSA4MDgwCgpEQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVCA9ICJodHRwOi8vbG9jYWxob3N0OnswfS9oYW5kbGVjaGFuZ2UiCgojIFRPRE86IFlvdSBNVVNUIGNoYW5nZSB0aGUgZm9sbG93aW5nIHZhbHVlcwpDT09LSUVfU0VDUkVUID0gIis4L1lxdEVVUWZpWUxVZE8yaUoyT3l6SEhGU0FERXVLdktZd0ZxZW1GYXM9IgpITUFDX0tFWSA9ICIrOC9ZcXRFVVFmaVlMVWRPMmlKMk95ekhJRlNBS0V1S3ZLWXdGcWVtRmFzPSIKCmZhY2Vib29rX2NsaWVudF9pZCA9ICcwMDAwMDAwMDAwMDAwMDAnCmZhY2Vib29rX2NsaWVudF9zZWNyZXQgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnCmZhY2Vib29rX3Njb3BlID0gImVtYWlsLHB1YmxpY19wcm9maWxlLHVzZXJfZnJpZW5kcyIKZmFjZWJvb2tfcmVkaXJlY3RfdXJpID0gTm9uZQpERUZBVUxUX0xPR0lOX05FWFRfVVJJID0gIi8iCgojIFRPRE86IHNldCBib3RoIGtleXMgYmVsb3cuIFByaXZhdGUga2V5IGJhY2t1cCBtdXN0IGJlIGtlcHQgaW4gYSBzZWN1cmUgcGxhY2UgYW5kIHNob3VsZCBuZXZlciBiZSBzaGFyZWQKIyBJZiBwcml2YXRlIGtleSBpcyBjb21wcm9taXNlZCwgdGhpcyBzZXJ2aWNlIGFuZCBhbGwgb3RoZXIgc2VydmljZXMgdGhhdCB0cnVzdCB0aGlzIHdpbGwgYmUgY29tcHJvbWlzZWQKIyBQdWJsaWMga2V5IGlzIHRvIHNoYXJlIHB1YmxpY2x5IGZvciB2ZXJpZmljYXRpb24KClNFUlZJQ0VfUFJJVkFURV9LRVkgPSBOb25lClNFUlZJQ0VfUFVCTElDX0tFWSA9IE5vbmUKCmRpcmVjdG9yeV9saXN0aW5nX2FsbG93ZWQgPSBUcnVlCgpDT05GSUdVUkVfTE9HID0gRmFsc2UKU1RBUlRfV0VCX1NFUlZFUiA9IFRydWUKU1RBUlRfT0JKRUNUX0NIQU5HRV9NT05JVE9SID0gRmFsc2UKCkdPT0dMRV9PQVVUSDJfQ0xJRU5UX0lEID0gTm9uZQpHT09HTEVfT0FVVEgyX0NMSUVOVF9TRUNSRVQgPSBOb25lCkdPT0dMRV9PQVVUSDJfUkVESVJFQ1RfVVJJID0gTm9uZQoKR0lUSFVCX0NMSUVOVF9JRCA9IE5vbmUKR0lUSFVCX0NMSUVOVF9TRUNSRVQgPSBOb25lCkdJVEhVQl9PQVVUSDJfQ0FMTEJBQ0tfVVJJID0gTm9uZQoKVVNFUlNfSURFTlRJVFlfQ09MX05BTUUgPSAiY29zbW9zLnVzZXJzLmlkZW50aXR5IgpVU0VSU19QUk9GSUxFX0ZCX0NPTF9OQU1FID0gImNvc21vcy51c2Vycy5wcm9maWxlLmZhY2Vib29rIgpVU0VSU19GQl9GUklFTkRTX0NPTF9OQU1FID0gImNvc21vcy51c2Vycy5mYWNlYm9vay5mcmllbmRzIgoKbG9naW5fdXJsID0gIi9sb2dpbi8iCgpPQVVUSDJfUFJJVkFURV9LRVlfUEVNID0gTm9uZQpPQVVUSDJfUFVCTElDX0tFWV9QRU0gPSBOb25lCk9BVVRIMl9UT0tFTl9FWFBJUllfU0VDT05EUyA9IDYwMAoKVEVOQU5UX0lEID0gJ2Nvc21vc2ZyYW1ld29yay5jb20nCgpPQVVUSDJfVFJVU1RFRF9SRURJUkVDVF9VUkxTID0gWydodHRwOi8vbG9jYWxob3N0OjgwODAvb2F1dGgyY2xpZW50L2F1dGhvcml6ZS8nXQpPQVVUSDJfU0VSVklDRV9VUkwgPSAiaHR0cDovL2xvY2FsaG9zdDo4MDgwLyIKCiIiIgpzdWRvIHJhYmJpdG1xY3RsIGFkZF91c2VyIHdvcmtmbG93X3VzZXIgd29ya2Zsb3dfcGFzc3dvcmQKc3VkbyByYWJiaXRtcWN0bCBhZGRfdmhvc3Qgd29ya2Zsb3dfdmhvc3QKc3VkbyByYWJiaXRtcWN0bCBzZXRfdXNlcl90YWdzIHdvcmtmbG93X3VzZXIgd29ya2Zsb3dfdGFnCnN1ZG8gcmFiYml0bXFjdGwgc2V0X3Blcm1pc3Npb25zIC1wIHdvcmtmbG93X3Zob3N0IHdvcmtmbG93X3VzZXIgIi4qIiAiLioiICIuKiIKIiIiCgpFTkFCTEVfV09SS0ZMT1dfRU5HSU5FUyA9IEZhbHNlCgpXT1JLRkxPV19FTkdJTkVTID0gWwogICAgewogICAgICAgICJlbmFibGVkIjogVHJ1ZSwKICAgICAgICAiZW5naW5lX3R5cGUiOiAiY2VsZXJ5IiwKICAgICAgICAibmFtZSI6ICJ3b3JrZmxvd19lbmdpbmUiLAogICAgICAgICJwYXJhbWV0ZXJzIjoKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgInVzZXJuYW1lIjogIndvcmtmbG93X3VzZXIiLAogICAgICAgICAgICAgICAgInBhc3N3b3JkIjogIndvcmtmbG93X3Bhc3N3b3JkIiwKICAgICAgICAgICAgICAgICJ2aG9zdCI6ICJ3b3JrZmxvd192aG9zdCIsCiAgICAgICAgICAgICAgICAidGFnIjogIndvcmtmbG93X3RhZyIsCiAgICAgICAgICAgICAgICAiYnJva2VyX3VybHMiOiBbJ2FtcXA6Ly93b3JrZmxvd191c2VyOndvcmtmbG93X3Bhc3N3b3JkQGxvY2FsaG9zdDo1NjcyL3dvcmtmbG93X3Zob3N0J10KICAgICAgICAgICAgfQogICAgfQpdCgoKIyBUT0RPOiBZb3Ugc2hvdWxkIHJlbW92ZSB0aGlzIHByb2Nlc3NvbiBpbiBwcm9kdWN0aW9uIGVudmlyb25tZW50CmRlZiB0ZXN0X29ic2VydmVyKHVzZXIsIG9iamVjdF9zZXJ2aWNlLCBvYmplY3RfbmFtZSwgZGF0YSwgYWNjZXNzX3R5cGUsIGNvbHVtbnM9Tm9uZSwgKmFyZ3MsICoqa3dhcmdzKToKICAgIGFzc2VydCBvYmplY3RfbmFtZSA9PSAidGVzdCIKICAgIGFzc2VydCBhY2Nlc3NfdHlwZSA9PSBBY2Nlc3NUeXBlLlJFQUQgb3IgYWNjZXNzX3R5cGUgPT0gQWNjZXNzVHlwZS5JTlNFUlQgb3IgYWNjZXNzX3R5cGUgPT0gQWNjZXNzVHlwZS5VUERBVEUgb3IgYWNjZXNzX3R5cGUgPT0gQWNjZXNzVHlwZS5ERUxFVEUKICAgIGxvZ2dpbmcuaW5mbygKICAgICAgICAiVGVzdCBvYmplY3Qgb2JzZXJ2ZXIgaXMgY2FsbGVkIHdpdGggW3t9LCB7fSwge30sIHt9LCB7fSwge31dLiIuZm9ybWF0KHVzZXIsIG9iamVjdF9zZXJ2aWNlLCBvYmplY3RfbmFtZSwgZGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc190eXBlLCBjb2x1bW5zKSkKCiAgICBpZiBBY2Nlc3NUeXBlLklOU0VSVCA9PSBhY2Nlc3NfdHlwZToKICAgICAgICB2YWwgPSBjb25jdXJyZW50LkZ1dHVyZSgpCiAgICAgICAgdmFsLnNldF9yZXN1bHQoZGF0YSkKICAgICAgICByZXR1cm4gKHZhbCkKCiAgICBpZiBBY2Nlc3NUeXBlLlVQREFURSA9PSBhY2Nlc3NfdHlwZSBvciBBY2Nlc3NUeXBlLkRFTEVURSA9PSBhY2Nlc3NfdHlwZToKICAgICAgICByID0gKHsiZXJyb3IiOiBOb25lLCAibiI6IDEsICJvayI6IDEsICJ1cGRhdGVkRXhpc3RpbmciOiAxfSkKICAgICAgICB2YWwgPSBjb25jdXJyZW50LkZ1dHVyZSgpCiAgICAgICAgdmFsLnNldF9yZXN1bHQoeyJfaWQiOiByfSkKICAgICAgICByZXR1cm4gKHZhbCkKCiAgICBmaW5kX29uZSA9IGt3YXJncy5nZXQoImZpbmRfb25lIiwgRmFsc2UpCiAgICBpZiBmaW5kX29uZToKICAgICAgICB2YWwgPSBjb25jdXJyZW50LkZ1dHVyZSgpCiAgICAgICAgdmFsLnNldF9yZXN1bHQoeyJfaWQiOiBkYXRhfSkKICAgICAgICByZXR1cm4gKHZhbCkKICAgIGVsc2U6CiAgICAgICAgUmVzdWx0ID0gbmFtZWR0dXBsZSgiQ29zbW9zRW1wdHlSZXN1bHRTZXQiLCAiZmV0Y2hfbmV4dCIpCiAgICAgICAgdmFsID0gY29uY3VycmVudC5GdXR1cmUoKQogICAgICAgIHZhbC5zZXRfcmVzdWx0KEZhbHNlKQogICAgICAgIHJldHVybiAoUmVzdWx0KGZldGNoX25leHQ9dmFsKSkKCgpvYnNlcnZlcnMgPSBbCiAgICB7CiAgICAgICAgIm9iamVjdF9uYW1lIjogInRlc3QiLAogICAgICAgICJmdW5jdGlvbiI6IHRlc3Rfb2JzZXJ2ZXIsCiAgICAgICAgImFjY2VzcyI6IFtBY2Nlc3NUeXBlLlJFQUQsIEFjY2Vzc1R5cGUuSU5TRVJULCBBY2Nlc3NUeXBlLlVQREFURSwgQWNjZXNzVHlwZS5ERUxFVEVdLAogICAgICAgICJ0eXBlIjogT0JTRVJWRVJfUFJPQ0VTU09SCiAgICB9Cl0KCnRyeToKICAgIGZyb20gbG9jYWxfc2V0dGluZ3MgaW1wb3J0ICoKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcGFzcwoKaWYgREJfVVNFUl9OQU1FIGFuZCBEQl9VU0VSX1BBU1NXT1JEOgogICAgREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iICsgREJfVVNFUl9OQU1FICsgIjoiICsgREJfVVNFUl9QQVNTV09SRCArICJAIiArIERCX0hPU1QgKyAiOiIgKyBzdHIoCiAgICAgICAgREJfUE9SVCkgKyAiLyIgKyBEQl9OQU1FCmVsc2U6CiAgICBEQVRBQkFTRV9VUkkgPSAibW9uZ29kYjovLyIgKyBEQl9IT1NUICsgIjoiICsgc3RyKERCX1BPUlQpCgppZiBMT0dfREJfVVNFUl9OQU1FIGFuZCBMT0dfREJfVVNFUl9QQVNTV09SRDoKICAgIExPR19EQVRBQkFTRV9VUkkgPSAibW9uZ29kYjovLyIgKyBMT0dfREJfVVNFUl9OQU1FICsgIjoiICsgTE9HX0RCX1VTRVJfUEFTU1dPUkQgKyAiQCIgKyBMT0dfREJfSE9TVCArICI6IiArIHN0cigKICAgICAgICBMT0dfREJfUE9SVCkgKyAiLyIgKyBMT0dfREJfTkFNRQplbHNlOgogICAgTE9HX0RBVEFCQVNFX1VSSSA9ICJtb25nb2RiOi8vIiArIExPR19EQl9IT1NUICsgIjoiICsgc3RyKExPR19EQl9QT1JUKQoKR09PR0xFX09BVVRIMl9TRVRUSU5HUyA9IHsia2V5IjogR09PR0xFX09BVVRIMl9DTElFTlRfSUQsICJzZWNyZXQiOiBHT09HTEVfT0FVVEgyX0NMSUVOVF9TRUNSRVQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgInJlZGlyZWN0X3VyaSI6IEdPT0dMRV9PQVVUSDJfUkVESVJFQ1RfVVJJfQoKR0lUSFVCX09BVVRIX1NFVFRJTkdTID0geyJjbGllbnRfaWQiOiBHSVRIVUJfQ0xJRU5UX0lELCAic2VjcmV0IjogR0lUSFVCX0NMSUVOVF9TRUNSRVQsCiAgICAgICAgICAgICAgICAgICAgICAgICAicmVkaXJlY3RfdXJpIjogR0lUSFVCX09BVVRIMl9DQUxMQkFDS19VUkl9CgoiIiIKIyBwaXAgaW5zdGFsbCBweWNyeXB0byBmb3IgQ3J5cHRvCiMgdGhlbiBmcm9tIHB5dGhvbiBjb25zb2xlIGdlbmVyYXRlIHByaXZhdGVfcGVtIGFuZCBwdWJsaWNfcGVuIGFuZCBhc3NpZ24gdG8gU0VSVklDRV9QUklWQVRFX0tFWSBhbmQgU0VSVklDRV9QVUJMSUNfS0VZCgoiIiIKCmlmIG5vdCBPQVVUSDJfUFJJVkFURV9LRVlfUEVNIG9yIG5vdCBPQVVUSDJfUFVCTElDX0tFWV9QRU06CiAgICBsb2dnaW5nLndhcm5pbmcoIk9BdXRoMiBwcml2YXRlIGtlciBhbmQgcHVibGljIGtleSBpcyBub3Qgc2V0LiBPQXV0aDIgbWF5IG5vdCB3b3JrLiBHZW5lcmF0aW5nIHRlbXBvcmFyeSBrZXlzLiIpCgogICAgaW1wb3J0IENyeXB0by5QdWJsaWNLZXkuUlNBIGFzIFJTQQogICAga2V5ID0gUlNBLmdlbmVyYXRlKDIwNDgpCiAgICBwcml2YXRlX3BlbSA9IGtleS5leHBvcnRLZXkoKQogICAgcHVibGljX3BlbSA9IGtleS5wdWJsaWNrZXkoKS5leHBvcnRLZXkoKQoKICAgIE9BVVRIMl9QUklWQVRFX0tFWV9QRU0gPSBwcml2YXRlX3BlbS5kZWNvZGUoKQogICAgT0FVVEgyX1BVQkxJQ19LRVlfUEVNID0gcHVibGljX3BlbS5kZWNvZGUoKQoKCiMgVGhpcyBtdXN0IGJlIHRoZSBsYXN0IGl0ZW0gaW4gc2V0dGluZ3MgZmlsZSBmb3IgdGhlIHNldHRpbmdzIHBhZ2UgdG8gd29yayBwb3JvcGVybHkKQ09ORklHVVJBQkxFX1NFVFRJTkdTID0gWwogICAgeyJuYW1lIjogJ0RFQlVHJywgInZhbHVlIjogREVCVUcsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJib29sZWFuIiwgInF1b3RlZCI6IEZhbHNlfX0sCgogICAgeyJuYW1lIjogJ1dFQl9TRVJWRVJfTElTVEVOX1BPUlQnLCAidmFsdWUiOiBXRUJfU0VSVkVSX0xJU1RFTl9QT1JULCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBGYWxzZX19LAoKICAgIHsibmFtZSI6ICdDT09LSUVfU0VDUkVUJywgICJ2YWx1ZSI6IENPT0tJRV9TRUNSRVQsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdITUFDX0tFWScsICAidmFsdWUiOiBITUFDX0tFWSwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAoKICAgIHsibmFtZSI6ICdEQl9IT1NUJywgICJ2YWx1ZSI6IERCX0hPU1QsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdEQl9QT1JUJywgInZhbHVlIjogREJfUE9SVCwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogRmFsc2V9fSwKICAgIHsibmFtZSI6ICdEQl9OQU1FJywgInZhbHVlIjogREJfTkFNRSwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAogICAgeyJuYW1lIjogJ0xPR19EQl9QT1JUJywgInZhbHVlIjogTE9HX0RCX1BPUlQsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IEZhbHNlfX0sCiAgICB7Im5hbWUiOiAnTE9HX0RCX0hPU1QnLCAidmFsdWUiOiBMT0dfREJfSE9TVCwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAogICAgeyJuYW1lIjogJ0xPR19EQl9OQU1FJywgICJ2YWx1ZSI6IExPR19EQl9OQU1FLCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCgogICAgeyJuYW1lIjogJ0VOQUJMRV9XT1JLRkxPV19FTkdJTkVTJywgICJ2YWx1ZSI6IEVOQUJMRV9XT1JLRkxPV19FTkdJTkVTLCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBGYWxzZX19LAoKICAgIHsibmFtZSI6ICdPQVVUSDJfUFJJVkFURV9LRVlfUEVNJywgInZhbHVlIjogT0FVVEgyX1BSSVZBVEVfS0VZX1BFTSwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHRhcmVhIiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdPQVVUSDJfUFVCTElDX0tFWV9QRU0nLCAidmFsdWUiOiBPQVVUSDJfUFVCTElDX0tFWV9QRU0sICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0YXJlYSIsICJxdW90ZWQiOiBUcnVlfX0sCiAgICB7Im5hbWUiOiAnT0FVVEgyX1NFUlZJQ0VfVVJMJywgICJ2YWx1ZSI6IE9BVVRIMl9TRVJWSUNFX1VSTCwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAogICAgeyJuYW1lIjogJ09BVVRIMl9UUlVTVEVEX1JFRElSRUNUX1VSTFMnLCAidmFsdWUiOiBPQVVUSDJfVFJVU1RFRF9SRURJUkVDVF9VUkxTLCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dGFyZWEiLCAicXVvdGVkIjogRmFsc2V9fSwKCiAgICB7Im5hbWUiOiAnSU5ERVhfSFRNTF9QQVRIJywgInZhbHVlIjogSU5ERVhfSFRNTF9QQVRILCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCiAgICB7Im5hbWUiOiAnU1RBVElDX1BBVEgnLCAgInZhbHVlIjogU1RBVElDX1BBVEgsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKCiAgICB7Im5hbWUiOiAnbG9naW5fdXJsJywgICJ2YWx1ZSI6IGxvZ2luX3VybCwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAogICAgeyJuYW1lIjogJ0RFRkFVTFRfTE9HSU5fTkVYVF9VUkknLCAgInZhbHVlIjogREVGQVVMVF9MT0dJTl9ORVhUX1VSSSwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAoKICAgIHsibmFtZSI6ICdmYWNlYm9va19jbGllbnRfaWQnLCAgInZhbHVlIjogZmFjZWJvb2tfY2xpZW50X2lkLCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCiAgICB7Im5hbWUiOiAnZmFjZWJvb2tfY2xpZW50X3NlY3JldCcsICAidmFsdWUiOiBmYWNlYm9va19jbGllbnRfc2VjcmV0LCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCiAgICB7Im5hbWUiOiAnZmFjZWJvb2tfc2NvcGUnLCAgInZhbHVlIjogZmFjZWJvb2tfc2NvcGUsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdmYWNlYm9va19yZWRpcmVjdF91cmknLCAgInZhbHVlIjogZmFjZWJvb2tfcmVkaXJlY3RfdXJpLCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCgogICAgeyJuYW1lIjogJ0dPT0dMRV9PQVVUSDJfQ0xJRU5UX0lEJywgInZhbHVlIjogR09PR0xFX09BVVRIMl9DTElFTlRfSUQsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdHT09HTEVfT0FVVEgyX0NMSUVOVF9TRUNSRVQnLCAgInZhbHVlIjogR09PR0xFX09BVVRIMl9DTElFTlRfU0VDUkVULCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCiAgICB7Im5hbWUiOiAnR09PR0xFX09BVVRIMl9SRURJUkVDVF9VUkknLCAgInZhbHVlIjogR09PR0xFX09BVVRIMl9SRURJUkVDVF9VUkksICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKCiAgICB7Im5hbWUiOiAnR0lUSFVCX0NMSUVOVF9JRCcsICAidmFsdWUiOiBHSVRIVUJfQ0xJRU5UX0lELCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCiAgICB7Im5hbWUiOiAnR0lUSFVCX0NMSUVOVF9TRUNSRVQnLCAgInZhbHVlIjogR0lUSFVCX0NMSUVOVF9TRUNSRVQsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdHSVRIVUJfT0FVVEgyX0NBTExCQUNLX1VSSScsICAidmFsdWUiOiBHSVRIVUJfT0FVVEgyX0NBTExCQUNLX1VSSSwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAoKXQ==')
},
{
'name': '/endpoints.py', 'data': base64.b64decode(b'aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLmNlcnRzZXJ2aWNlIGltcG9ydCBDZXJ0aWZpY2F0ZVZhdWx0SGFuZGxlcgpmcm9tIGNvc21vcy5zZXJ2aWNlLm9hdXRoMnNlcnZpY2UgaW1wb3J0IE9BdXRoMlNlcnZpY2VIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VhcmNoIGltcG9ydCBTZWFyY2hIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VydmljZWhhbmRsZXIgaW1wb3J0ICoKZnJvbSBjb3Ntb3Muc2VydmljZS5ncmlkZnNzZXJ2aWNlIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuYXBwc2VydmljZSBpbXBvcnQgKgppbXBvcnQgc2V0dGluZ3MKZnJvbSB2aWV3cyBpbXBvcnQgKgpmcm9tIHN5c3RlbXZpZXdzIGltcG9ydCBTeXN0ZW1TZXR1cEhhbmRsZXIKCkVORF9QT0lOVFMgPSBbCiAgICAociIvbG9naW4vZ29vZ2xlLyIsIEdvb2dsZU9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vb3BlbmlkLyIsIE9wZW5pZExvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vZmFjZWJvb2tncmFwaC8iLCBGYWNlYm9va0dyYXBoTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9naXRodWIvIiwgR2l0aHViT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9hdXRocC8iLCBBdXRocE9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vIiwgTG9naW5IYW5kbGVyKSwKICAgIChyIi91c2VyL2NoYW5nZXBhc3N3b3JkLyIsIENoYW5nZVBhc3N3b3JkSGFuZGxlciksCiAgICAociIvbG9nb3V0LyIsIExvZ291dEhhbmRsZXIpLAogICAgKHIiLyg/UDx0ZW5hbnRfaWQ+W15cL10rKS9vYXV0aDIvKD9QPGZ1bmN0aW9uPlteXC9dKykvIiwgT0F1dGgyU2VydmljZUhhbmRsZXIpLAogICAgKHIiLyg/UDx0ZW5hbnRfaWQ+W15cL10rKS9hdXRoL2tleS8iLCBBdXRoUHVibGljS2V5SGFuZGxlciksCiAgICAociIvb2F1dGgyY2xpZW50Lyg/UDxmdW5jdGlvbj5bXlwvXSspLyIsIE9BdXRoMkR1bW15Q2xpZW50SGFuZGxlciksCiAgICAociIvc2VydmljZS8oLiopIiwgU2VydmljZUhhbmRsZXIpLAogICAgKHIiL3ZhdWx0L2NlcnRpZmljYXRlLyg/UDxvcGVyYXRpb24+W15cL10rKSIsIENlcnRpZmljYXRlVmF1bHRIYW5kbGVyKSwKICAgIChyIi9zZWFyY2gvKC4qKS8iLCBTZWFyY2hIYW5kbGVyKSwKICAgIChyIi9ncmlkZnMvKC4qKSIsIEdyaWRGU1NlcnZpY2VIYW5kbGVyKSwKICAgIChyIi9hcHBsaWNhdGlvbi9pbnN0YWxsLyIsIEFwcEluc3RhbGxIYW5kbGVyKSwKICAgIChyIi9hcHBsaWNhdGlvbi9wYWNrYWdlLyguKikiLCBBcHBQYWNrYWdlSGFuZGxlciksCiAgICAjVE9ETzogYXV0aGVudGljYWlvbiBhbmQgYXV0aG9yaXphdGlvbiByZXF1aXJlZCBmb3IgY2hhbmdlIG1vbml0b3IgYW5kIGhhbmRsZXIuCiAgICAociIvY2hhbmdlbW9uaXRvciIsIENoYW5nZU1vbml0b3IpLAogICAgKHIiL2hhbmRsZWNoYW5nZSIsIENoYW5nZVJlcXVlc3RIYW5kbGVyKSwKICAgIChyIi9zeXN0ZW0vc2V0dXAvIiwgU3lzdGVtU2V0dXBIYW5kbGVyKSwKICAgIChyIi8iLCAgSW5kZXhIYW5kbGVyKSwKICAgIChyJy8oLiopJywgdG9ybmFkby53ZWIuU3RhdGljRmlsZUhhbmRsZXIsIHsncGF0aCc6IHNldHRpbmdzLlNUQVRJQ19QQVRIfSksCl0=')
},
{
'name': '/__init__.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
},
{
'name': '/startuphelpers.py', 'data': base64.b64decode(b'')
},
{
'name': '/systemviews.py', 'data': base64.b64decode(b'')
},
{
'name': '/views.py', 'data': base64.b64decode(b'aW1wb3J0IGxvZ2dpbmcKCmltcG9ydCBzZXR0aW5ncwpmcm9tIHRvcm5hZG8uaHR0cGNsaWVudCBpbXBvcnQgQXN5bmNIVFRQQ2xpZW50CgppbXBvcnQgY29zbW9zCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgQmFzaWNMb2dpbkhhbmRsZXIKCl9fYXV0aG9yX18gPSAnTWFydWYgTWFuaXJ1enphbWFuJwoKaW1wb3J0IHRvcm5hZG8KZnJvbSB0b3JuYWRvIGltcG9ydCBnZW4KaW1wb3J0IGpzb24KCmZyb20gY29zbW9zLnNlcnZpY2UucmVxdWVzdGhhbmRsZXIgaW1wb3J0IFJlcXVlc3RIYW5kbGVyCgoKY2xhc3MgSW5kZXhIYW5kbGVyKFJlcXVlc3RIYW5kbGVyKToKICAgIEBnZW4uY29yb3V0aW5lCiAgICBkZWYgZ2V0KHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLklOREVYX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIHNlbGYud3JpdGUoZi5yZWFkKCkpCiAgICAgICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICAgICAgcmFpc2UgdG9ybmFkby53ZWIuSFRUUEVycm9yKDQwNCwgIkZpbGUgbm90IGZvdW5kIikKCgpjbGFzcyBMb2dpbkhhbmRsZXIoQmFzaWNMb2dpbkhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZik6CiAgICAgICAgbmV4dCA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJuZXh0IiwgJy8nKQogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLkxPR0lOX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIGxvZ2luX3RlbXBsYXRlID0gZi5yZWFkKCkKICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dfbG9naW5fd2luZG93KG5leHQsIGxvZ2luX3RlbXBsYXRlPWxvZ2luX3RlbXBsYXRlKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgoKY2xhc3MgQXV0aFB1YmxpY0tleUhhbmRsZXIoUmVxdWVzdEhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZiwgdGVuYW50X2lkKToKICAgICAgICBzZWxmLnNldF9oZWFkZXIoIkNvbnRlbnQtVHlwZSIsICdhcHBsaWNhdGlvbi94LXBlbS1maWxlJykKICAgICAgICBzZWxmLnNldF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDsgZmlsZW5hbWU9JXNfcHViLnBlbScgJSB0ZW5hbnRfaWQpCiAgICAgICAgc2VsZi53cml0ZShzZXR0aW5ncy5PQVVUSDJfUFVCTElDX0tFWV9QRU0pCgpjbGFzcyBPQXV0aDJEdW1teUNsaWVudEhhbmRsZXIoUmVxdWVzdEhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZiwgZnVuY3Rpb24pOgogICAgICAgIHByb3RvY29sID0gc2VsZi5yZXF1ZXN0LnByb3RvY29sCiAgICAgICAgaG9zdCA9IHNlbGYucmVxdWVzdC5ob3N0CiAgICAgICAgI29hdXRoMl9zZXJ2aWNlX2hvc3QgPSBwcm90b2NvbCArICI6Ly8iKyBob3N0CiAgICAgICAgb2F1dGgyX3NlcnZpY2VfaG9zdCA9IHNldHRpbmdzLk9BVVRIMl9TRVJWSUNFX1VSTAoKICAgICAgICB0ZW5hbnRfaWQgPSBzZXR0aW5ncy5URU5BTlRfSUQKICAgICAgICBzZWxmLndyaXRlKHNlbGYucmVxdWVzdC51cmkgKyAiIDxiciAvPiIgKyBmdW5jdGlvbiArICI8YnIgLz4iKQogICAgICAgIHBhcmFtcyA9IGpzb24uZHVtcHMoe2s6IHNlbGYuZ2V0X2FyZ3VtZW50KGspIGZvciBrIGluIHNlbGYucmVxdWVzdC5hcmd1bWVudHN9KQogICAgICAgIHNlbGYud3JpdGUocGFyYW1zKQogICAgICAgIGNvZGUgPSBzZWxmLmdldF9hcmd1bWVudCgiY29kZSIsICJ0ZW1wIikKICAgICAgICB0b2tlbiA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJhY2Nlc3NfdG9rZW4iLCBkZWZhdWx0PU5vbmUpCiAgICAgICAgaWYgdG9rZW46CiAgICAgICAgICAgIGh0dHBfY2xpZW50ID0gQXN5bmNIVFRQQ2xpZW50KCkKICAgICAgICAgICAgdXJsID0gInswfS97MX0vYXV0aC9rZXkvIi5mb3JtYXQob2F1dGgyX3NlcnZpY2VfaG9zdCwgdGVuYW50X2lkKQogICAgICAgICAgICBsb2dnaW5nLmRlYnVnKCJGZXRjaGluZyBwdWJsaWMga2V5IGZyb20gezB9Ii5mb3JtYXQodXJsKSkKICAgICAgICAgICAgcmVzcCA9IHlpZWxkIGh0dHBfY2xpZW50LmZldGNoKHVybCkKCiAgICAgICAgICAgIGlmIG5vdCByZXNwIG9yIG5vdCByZXNwLmNvZGUgPT0gMjAwIG9yIHJlc3AuYm9keSBpcyBOb25lOgogICAgICAgICAgICAgICAgc2VsZi53cml0ZSgiQ291bGQgbm90IGdldCBhdXRoIHNlcnZlciBwdWJsaWMga2V5IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHB1Yl9wZW0gPSByZXNwLmJvZHkKICAgICAgICAgICAgICAgIGxvZ2dpbmcuZGVidWcoIlB1YmxpYyBrZXk6IHswfSIuZm9ybWF0KHB1Yl9wZW0pKQogICAgICAgICAgICAgICAgaGVhZGVyLCBjbGFpbXMgPSBjb3Ntb3MuYXV0aC5vYXV0aDIudmVyaWZ5X3Rva2VuKHRva2VuLCBwdWJfcGVtLCBbJ1JTMjU2J10pCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKCI8YnIgLz48aHIgLz4iKQogICAgICAgICAgICAgICAgc2VsZi53cml0ZShqc29uLmR1bXBzKGhlYWRlcikpCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKCI8YnIgLz48aHIgLz4iKQogICAgICAgICAgICAgICAgc2VsZi53cml0ZShqc29uLmR1bXBzKGNsYWltcykpCgogICAgICAgIHNlbGYud3JpdGUoIjxiciAvPjxociAvPiIpCiAgICAgICAgc2VsZi53cml0ZSgiPGEgaHJlZj0ne30ve30vb2F1dGgyL2F1dGhvcml6ZS8/cmVzcG9uc2VfdHlwZT1jb2RlJnN0YXRlPW15c3RhdGUmcmVzb3VyY2U9bXlyZXNvdXJjZS5jb20vdGVzdCZyZWRpcmVjdF91cmk9e306Ly97fS9vYXV0aDJjbGllbnQvYXV0aG9yaXplLz90YWc9Mic+UmVxdWVzdCBDb2RlPC9hPjxiciAvPiIuZm9ybWF0KG9hdXRoMl9zZXJ2aWNlX2hvc3QsIHNldHRpbmdzLlRFTkFOVF9JRCwgcHJvdG9jb2wsIGhvc3QpKQogICAgICAgIHNlbGYud3JpdGUoIjxhIGhyZWY9J3t9L3t9L29hdXRoMi90b2tlbi8/Y29kZT17fSZzdGF0ZT1teXN0YXRlJmdyYW50X3R5cGU9Y29kZSZyZWRpcmVjdF91cmk9e306Ly97fS9vYXV0aDJjbGllbnQvYXV0aG9yaXplLz90YWc9Mic+UmVxdWVzdCBUb2tlbjwvYT48YnIgLz4iLmZvcm1hdChvYXV0aDJfc2VydmljZV9ob3N0LCB0ZW5hbnRfaWQsIGNvZGUsIHByb3RvY29sLCBob3N0KSkKCiAgICAgICAgc2VsZi5maW5pc2goKQo=')
},
{
'name': '/hivemain.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTYgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IG9zCmltcG9ydCBzeXMKCnRyeToKICAgIGltcG9ydCBzZXR0aW5ncwpleGNlcHQgSW1wb3J0RXJyb3IgYXMgaWU6CiAgICBzeXMucGF0aC5hcHBlbmQob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSkKICAgIGltcG9ydCBzZXR0aW5ncwoKZnJvbSBjb3Ntb3MuYmVlcy5jZWxlcnkud29ya2Zsb3cgaW1wb3J0IGNyZWF0ZV9hcHAKaW1wb3J0IGxvZ2dpbmcKCmZyb20gc3RhcnR1cGhlbHBlcnMgaW1wb3J0ICoKCmRlZiBleGVjdXRlX3dvcmtmbG93KG5hbWUsIHBhcmFtcyk6CiAgICBwcmludCgiUmVjZWl2ZWQgZXhlY3V0ZSB3b3JrZmxvdyByZXF1ZXN0OiIpCiAgICBwcmludChuYW1lKQogICAgcHJpbnQocGFyYW1zKQoKCmRlZiBtYWluKCk6CiAgICBjdXJyZW50X2RpcmVjdG9yeSA9IG9zLmdldGN3ZCgpCiAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKICAgIHByaW50KCJQeXRob24gdmVyc2lvbjogIiArIHN0cihzeXMudmVyc2lvbl9pbmZvKSkKICAgIHByaW50KCJSdW5uaW5nIGZyb20gZGlyZWN0b3J5OiAiICsgY3VycmVudF9kaXJlY3RvcnkpCiAgICBwcmludCgiRmlsZTogIisgX19maWxlX18pCiAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKCiAgICBsb2dnaW5nLmdldExvZ2dlcigpLnNldExldmVsKHNldHRpbmdzLkxPR19MRVZFTCkKCiAgICBvcHRpb25zID0gZ2V0X29wdGlvbnMoKQogICAgaW5pdF9sb2dnaW5nKG9wdGlvbnMpCgogICAgbG9nZ2luZy5pbmZvKCJQeXRob24gdmVyc2lvbjogIiArIHN0cihzeXMudmVyc2lvbl9pbmZvKSkKICAgIGxvZ2dpbmcuaW5mbygiUnVubmluZyBmcm9tIGRpcmVjdG9yeTogIiArIGN1cnJlbnRfZGlyZWN0b3J5KQogICAgbG9nZ2luZy5pbmZvKCJGaWxlOiAiKyBfX2ZpbGVfXykKCiAgICBpZiBub3Qgc2V0dGluZ3MuRU5BQkxFX1dPUktGTE9XX0VOR0lORVM6CiAgICAgICAgbG9nZ2luZy5jcml0aWNhbCgiV29ya2Zsb3cgZW5naW5lcyBhcmUgZGlzYWJsZWQuIFNldCBFTkFCTEVfV09SS0ZMT1dfRU5HSU5FUyB2YWx1ZSBpbiBzZXR0aW5ncy4iKQogICAgICAgIHJldHVybgoKICAgIHN5bmNfZGIgPSBnZXRfc3luY19kYihzZXR0aW5ncy5EQVRBQkFTRV9VUkksIHNldHRpbmdzLkRCX05BTUUpCiAgICBpbml0X3NvdXJjZV9tb2R1bGVzKHN5bmNfZGIpCgogICAgZW5naW5lcyA9IGluaXRfd29ya2Zsb3dfZW5naW5lcygpCgogICAgZm9yIGVuZ2luZV9uYW1lIGluIGVuZ2luZXMua2V5cygpOgogICAgICAgIGVuZ2luZV9kZWYgPSBlbmdpbmVzLmdldChlbmdpbmVfbmFtZSkKICAgICAgICBhcHAgPSBlbmdpbmVfZGVmLmdldCgiZW5naW5lIikKICAgICAgICBsb2dnaW5nLmRlYnVnKGFwcC50YXNrcy5rZXlzKCkpCiAgICAgICAgYXBwLndvcmtlcl9tYWluKCkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigp')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKCnRyeToKICAgIGltcG9ydCBlbmRwb2ludHMKICAgIGltcG9ydCBzZXR0aW5ncwpleGNlcHQgSW1wb3J0RXJyb3IgYXMgaWU6CiAgICBzeXMucGF0aC5hcHBlbmQob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSkKICAgIGltcG9ydCBzZXR0aW5ncwogICAgaW1wb3J0IGVuZHBvaW50cwoKaW1wb3J0IGltcG9ydGxpYgppbXBvcnQgbG9nZ2luZwoKaW1wb3J0IHNpZ25hbAppbXBvcnQgaW1wCmltcG9ydCBtb3Rvcgpmcm9tIHB5bW9uZ28gaW1wb3J0IE1vbmdvQ2xpZW50CmltcG9ydCBncmlkZnMKCmZyb20gY29zbW9zLmFkbWluLmNvbW1hbmRzIGltcG9ydCBDb21tYW5kSGFuZGxlcgpmcm9tIGNvc21vcy5jb21tb24uY29uc3RhbnRzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvcgpmcm9tIGNvc21vcy5yYmFjLnNlcnZpY2UgaW1wb3J0IFJiYWNTZXJ2aWNlCmltcG9ydCBjb3Ntb3Muc2VydmljZS5zZXJ2aWNlbWFpbgoKZnJvbSBjb3Ntb3Muc2VydmljZSBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLnV0aWxzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvciBhcyBtb25pdG9yCgpmcm9tIHN0YXJ0dXBoZWxwZXJzIGltcG9ydCAqCgptb25pdG9yX3dvcmtlciA9IE5vbmUKCgpkZWYgaW5pdF9kYXRhYmFzZShvcHRpb25zKToKICAgIGNsaWVudCA9IG1vdG9yLk1vdG9yQ2xpZW50KG9wdGlvbnMuZGJfdXJpKQogICAgZGIgPSBjbGllbnRbb3B0aW9ucy5kYl9uYW1lXQogICAgcmV0dXJuIGRiCgoKZGVmIGNsZWFudXAoKToKICAgIG1vbml0b3IuY29udGludWVfbW9uaXRvciA9IEZhbHNlCgpkZWYgaW50X3NpZ25hbF9oYW5kbGVyKHNpZ25hbCwgZnJhbWUpOgogICAgbG9nZ2luZy5pbmZvKCdFeGl0aW5nLi4uJykKICAgIGNsZWFudXAoKQogICAgc3lzLmV4aXQoMCkKCgojIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgbW9uaXRvciB3b3JrZXIgdGhyZWFkLCBOT1QgZnJvbSB0aGUgdGhyZWFkIF9fbWFpbl9fIGJlbG93IGlzIHJ1bm5pbmcuCmRlZiBlbmRfbW9uaXRvcl9jYWxsYmFjayhyZWFzb249Tm9uZSk6CiAgICBwYXNzCgoKZGVmIHN0YXJ0X21vbml0b3Iob3B0aW9ucyk6CiAgICBtb25pdG9yLmNvbnRpbnVlX21vbml0b3IgPSBUcnVlCiAgICBtb25pdG9yLnN0YXJ0X29iamVjdF9jaGFuZ2VfbW9uaXRvcihvcHRpb25zLmRiX3Byb2Nlc3Nvcl9lbmRwb2ludCwgb3B0aW9ucy5kYl91cmksIGVuZF9tb25pdG9yX2NhbGxiYWNrKQoKCmRlZiBzdGFydF9zZXJ2aWNlKG9wdGlvbnMpOgogICAgY29zbW9zLnNlcnZpY2Uuc2VydmljZW1haW4uc3RhcnRfd2ViX3NlcnZpY2Uob3B0aW9ucykKCgpkZWYgaW5pdF93ZWJzZXJ2aWNlX29wdGlvbnMoc3luY19kYiwgcG9ydCk6CiAgICBvcHRpb25zID0gZ2V0X29wdGlvbnMoKQogICAgb3B0aW9ucy53ZWJfc2VydmljZV9wb3J0ID0gcG9ydAogICAgb3B0aW9ucy5kYl9wcm9jZXNzb3JfZW5kcG9pbnQgPSBzZXR0aW5ncy5EQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVC5mb3JtYXQocG9ydCkKICAgIG9wdGlvbnMuZGIgPSBpbml0X2RhdGFiYXNlKG9wdGlvbnMpCiAgICBpbml0X2xvZ2dpbmcob3B0aW9ucykKCiAgICBhcHBfZW5kcG9pbnRzID0gW10KICAgIGlmIHN5bmNfZGI6CiAgICAgICAgYXBwX2VuZHBvaW50cyA9IGxvYWRfYXBwX2VuZHBvaW50cyhzeW5jX2RiKQoKICAgIG9wdGlvbnMuZW5kcG9pbnRzID0gYXBwX2VuZHBvaW50cyArIGVuZHBvaW50cy5FTkRfUE9JTlRTCgogICAgcmV0dXJuIG9wdGlvbnMKCgpkZWYgcHJlcGFyZShwb3J0KToKICAgICAgICBzeW5jX2RiID0gZ2V0X3N5bmNfZGIoc2V0dGluZ3MuREFUQUJBU0VfVVJJLCBzZXR0aW5ncy5EQl9OQU1FKQogICAgICAgIGRiX29ic2VydmVycyA9IFtdCgogICAgICAgIGlmIHN5bmNfZGI6CiAgICAgICAgICAgIGluaXRfc291cmNlX21vZHVsZXMoc3luY19kYikKICAgICAgICAgICAgZGJfb2JzZXJ2ZXJzID0gbG9hZF9pbnRlcmNlcHRvcnMoc3luY19kYikKCiAgICAgICAgb3B0aW9ucyA9IGluaXRfd2Vic2VydmljZV9vcHRpb25zKHN5bmNfZGIsIHBvcnQpCgogICAgICAgIG9wdGlvbnMub2JzZXJ2ZXJzID0gZGJfb2JzZXJ2ZXJzICsgc2V0dGluZ3Mub2JzZXJ2ZXJzCgogICAgICAgIHJldHVybiBvcHRpb25zCgpkZWYgbWFpbigpOgogICAgY3VycmVudF9kaXJlY3RvcnkgPSBvcy5nZXRjd2QoKQogICAgcHJpbnQoIlB5dGhvbiB2ZXJzaW9uOiAiICsgc3RyKHN5cy52ZXJzaW9uX2luZm8pKQogICAgcHJpbnQoIlJ1bm5pbmcgZnJvbSBkaXJlY3Rvcnk6ICIgKyBjdXJyZW50X2RpcmVjdG9yeSkKCiAgICBsb2dnaW5nLmdldExvZ2dlcigpLnNldExldmVsKHNldHRpbmdzLkxPR19MRVZFTCkKCiAgICBwb3J0ID0gc2V0dGluZ3MuV0VCX1NFUlZFUl9MSVNURU5fUE9SVAoKICAgIGlmIGxlbihzeXMuYXJndikgPCAyOgogICAgICAgIGNvbW1hbmQgPSAic3RhcnQtc2VydmljZSIKICAgIGVsc2U6CiAgICAgICAgY29tbWFuZCA9IHN5cy5hcmd2WzFdLnN0cmlwKCkKCiAgICBpZiBsZW4oc3lzLmFyZ3YpID49IDM6CiAgICAgICAgcG9ydCA9IGludChzeXMuYXJndlsyXS5zdHJpcCgpKQoKICAgIG9wdGlvbnMgPSBwcmVwYXJlKHBvcnQpCgogICAgaWYgY29tbWFuZCA9PSAic3RhcnQtc2VydmljZSI6CgogICAgICAgIGlmIG9wdGlvbnMuc3RhcnRfd2ViX3NlcnZpY2U6CiAgICAgICAgICAgIHN0YXJ0X3NlcnZpY2Uob3B0aW9ucykKICAgICAgICBpZiBvcHRpb25zLnN0YXJ0X2RiX21vbml0b3I6CiAgICAgICAgICAgc3RhcnRfbW9uaXRvcihvcHRpb25zKQoKICAgICAgICBpZiBzZXR0aW5ncy5FTkFCTEVfV09SS0ZMT1dfRU5HSU5FUzoKICAgICAgICAgICAgZW5naW5lcyA9IGluaXRfd29ya2Zsb3dfZW5naW5lcygpCiAgICAgICAgICAgIGFwcF9kZWY9ZW5naW5lc1sid29ya2Zsb3dfZW5naW5lIl0KICAgICAgICAgICAgZm4gPSBhcHBfZGVmLmdldCgiZXhlY3V0ZV93b3JrZmxvdyIpCiAgICAgICAgICAgIGZuLmRlbGF5KCJ0ZXN0IiwgeyJuYW1lIjoidGVzdCJ9KQoKICAgICAgICBzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdJTlQsIGludF9zaWduYWxfaGFuZGxlcikKICAgICAgICB0b3JuYWRvLmlvbG9vcC5JT0xvb3AuaW5zdGFuY2UoKS5zdGFydCgpCiAgICBlbHNlOgogICAgICAgIGNvc21vcy5hZG1pbi5jb21tYW5kcy5hZG1pbl9tYWluKCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK')
},
{
'name': '/templates/login.html', 'data': base64.b64decode(b'')
},
{
'name': '/templates/setup.html', 'data': base64.b64decode(b'PCFET0NUWVBFIGh0bWw+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDx0aXRsZT5TeXN0ZW08L3RpdGxlPgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcl9tYXRlcmlhbC8xLjAuMC9hbmd1bGFyLW1hdGVyaWFsLm1pbi5jc3MiPgogICAgPHN0eWxlPgogICAgICAgIGh0bWwsCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICB9CgogICAgICAgIGh0bWwgewogICAgICAgICAgICBtYXJnaW46IGF1dG87CiAgICAgICAgfQoKICAgICAgICAubG9naW5pY29uIHsKICAgICAgICAgICAgaGVpZ2h0OiAzMnB4OwogICAgICAgICAgICB3aWR0aDogMzJweDsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5IG5nLWFwcD0ic2V0dXBBcHAiIG5nLWNsb2FrPgo8bWQtdGFicyBtZC1hbGlnbi10YWJzPSJ0b3AiIGZsZXggbGF5b3V0PSJjb2x1bW4iIGxheW91dC1maWxsPgogICAgeyUgIGlmIHNob3dfY3JlYXRlX2FkbWluX2Zvcm0gJX0KICAgIDxtZC10YWIgaWQ9InRhYkNyZWF0ZUFkbWluIj4KICAgICAgICA8bWQtdGFiLWxhYmVsPkNyZWF0ZSBhZG1pbjwvbWQtdGFiLWxhYmVsPgogICAgICAgIDxtZC10YWItYm9keT4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIuIiBtZXRob2Q9IlBPU1QiPgogICAgICAgICAgICAgICAgPG1kLWNvbnRlbnQgbGF5b3V0PSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkPgogICAgICAgICAgICAgICAgICAgICAgICA8bWQtY2FyZC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgbWVzc2FnZSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgbWVzc2FnZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZCAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibmV4dCIgdmFsdWU9Int7IG5leHQgfX0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9Im1kLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlcm5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCByZXF1aXJlZCBpZD0idXNlcm5hbWUiIHR5cGU9InRleHQiIG5hbWU9InVzZXJuYW1lIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9Im1kLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UGFzc3dvcmQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCByZXF1aXJlZCB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgbmFtZT0iY29tbWFuZCIgdmFsdWU9Im5ldy1hZG1pbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQtYnV0dG9uIG1kLXJhaXNlZCBtZC1wcmltYXJ5Ij5DcmVhdGUgbmV3IGFkbWluCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZD4KICAgICAgICAgICAgICAgIDwvbWQtY29udGVudD4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvbWQtdGFiLWJvZHk+CiAgICA8L21kLXRhYj4KICAgIHslIGVuZCAlfQogICAgPC9tZC10YWI+CiAgICA8bWQtdGFiIGlkPSJ0YWJTeXN0ZW0iPgogICAgICAgIDxtZC10YWItbGFiZWw+U3lzdGVtPC9tZC10YWItbGFiZWw+CiAgICAgICAgPG1kLXRhYi1ib2R5PgogICAgICAgICAgICB7JSAgaWYgc2hvd19zeXN0ZW1fZm9ybSAlfQogICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii4iIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBuYW1lPSJjb21tYW5kIiB2YWx1ZT0icmVzdGFydF9zZXJ2aWNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kLWJ1dHRvbiBtZC1yYWlzZWQgbWQtcHJpbWFyeSI+UmVzdGFydCBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICA8cD5QbGVhc2UgbG9naW4gYXMgYWRtaW4gdG8gdmlldyBzeXN0ZW0gY29tbWFuZHMuPC9wPgogICAgICAgICAgICB7JSBlbmQgJX0KICAgICAgICA8L21kLXRhYi1ib2R5PgogICAgPC9tZC10YWI+CiAgICA8bWQtdGFiIGlkPSJ0YWJTZXR0aW5ncyI+CiAgICAgICAgPG1kLXRhYi1sYWJlbD5TZXR0aW5nczwvbWQtdGFiLWxhYmVsPgogICAgICAgIDxtZC10YWItYm9keT4KICAgICAgICAgICAgeyUgIGlmIHNob3dfc2V0dGluZ3NfZm9ybSAlfQogICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii4iIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIHslIGlmIG1lc3NhZ2UgJX0KICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyBtZXNzYWdlIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIHslIGVuZCAlfQogICAgICAgICAgICAgICAgICAgIHslIGZvciBjb25maWcgaW4gY29uZmlndXJhYmxlX3NldHRpbmdzICV9CiAgICAgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz0ibWQtYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+e3sgY29uZmlnWyduYW1lJ10gfX08L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBjb25maWdbInNldHRpbmdzIl1bInR5cGUiXSA9PSAidGV4dGFyZWEiICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9Int7IGNvbmZpZ1snbmFtZSddIH19IiB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9Int7IGNvbmZpZ1snbmFtZSddIH19Ij57eyBjb25maWdbJ3ZhbHVlJ10gfX08L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ie3sgY29uZmlnWyduYW1lJ10gfX0iIHR5cGU9InRleHQiIG5hbWU9Int7IGNvbmZpZ1snbmFtZSddIH19IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9Int7IGNvbmZpZ1sndmFsdWUnXSB9fSIvPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmQgJX0KICAgICAgICAgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgICB7JSBlbmQgJX0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgbmFtZT0iY29tbWFuZCIgdmFsdWU9ImFwcGx5X3NldHRpbmdzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kLWJ1dHRvbiBtZC1yYWlzZWQgbWQtcHJpbWFyeSI+QXBwbHkgc2V0dGluZ3MKICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgIDxwPlBsZWFzZSBsb2dpbiBhcyBhZG1pbiB0byBlZGl0IHNldHRpbmdzLjwvcD4KICAgICAgICAgICAgeyUgZW5kICV9CiAgICAgICAgPC9tZC10YWItYm9keT4KICAgIDwvbWQtdGFiPgo8L21kLXRhYnM+CgoKCjxzY3JpcHQgc3JjPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcmpzLzEuNC44L2FuZ3VsYXIubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyanMvMS40LjgvYW5ndWxhci1hbmltYXRlLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcmpzLzEuNC44L2FuZ3VsYXItYXJpYS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cDovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2FuZ3VsYXJqcy8xLjQuOC9hbmd1bGFyLW1lc3NhZ2VzLm1pbi5qcyI+PC9zY3JpcHQ+Cgo8IS0tIEFuZ3VsYXIgTWF0ZXJpYWwgTGlicmFyeSAtLT4KPHNjcmlwdCBzcmM9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyX21hdGVyaWFsLzEuMC4wL2FuZ3VsYXItbWF0ZXJpYWwubWluLmpzIj48L3NjcmlwdD4KCjwhLS0gWW91ciBhcHBsaWNhdGlvbiBib290c3RyYXAgIC0tPgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBhbmd1bGFyLm1vZHVsZSgnc2V0dXBBcHAnLCBbJ25nTWF0ZXJpYWwnXSk7Cjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K')
}]
