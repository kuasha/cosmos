# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/views.py', 'data': base64.b64decode('aW1wb3J0IHNldHRpbmdzCgpfX2F1dGhvcl9fID0gJ01hcnVmIE1hbmlydXp6YW1hbicKCmltcG9ydCB0b3JuYWRvCmZyb20gdG9ybmFkbyBpbXBvcnQgZ2VuCgpmcm9tIGNvc21vcy5zZXJ2aWNlLnJlcXVlc3RoYW5kbGVyIGltcG9ydCBSZXF1ZXN0SGFuZGxlcgoKCmNsYXNzIEluZGV4SGFuZGxlcihSZXF1ZXN0SGFuZGxlcik6CiAgICBAZ2VuLmNvcm91dGluZQogICAgZGVmIGdldChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihzZXR0aW5ncy5JTkRFWF9IVE1MX1BBVEgpIGFzIGY6CiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKGYucmVhZCgpKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgo=')
},
{
'name': '/settings.py', 'data': base64.b64decode('aW1wb3J0IG9zCmltcG9ydCBsb2dnaW5nCgpERUJVRyA9IFRydWUKREJfSE9TVCA9ICIxMjcuMC4wLjEiCkRCX05BTUUgPSAiY29zbW9zIgpEQl9QT1JUID0gMjcwMTcKCkRCX1VTRVJfTkFNRSA9IE5vbmUKREJfVVNFUl9QQVNTV09SRCA9IE5vbmUKCgpMT0dfREJfSE9TVCA9ICIxMjcuMC4wLjEiCkxPR19EQl9OQU1FID0gImNvc21vcyIKTE9HX0NPTF9OQU1FID0gImxvZyIKTE9HX0RCX1BPUlQgPSAyNzAxNwpMT0dfTEVWRUwgPSBsb2dnaW5nLkRFQlVHCgpMT0dfREJfVVNFUl9OQU1FID0gTm9uZQpMT0dfREJfVVNFUl9QQVNTV09SRCA9IE5vbmUKClNUQVRJQ19QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJhcHAiKQpURU1QTEFURV9QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJ0ZW1wbGF0ZXMiKQpJTkRFWF9IVE1MX1BBVEggPSBvcy5wYXRoLmpvaW4ob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSwgImFwcC9pbmRleC5odG1sIikKCldFQl9TRVJWRVJfTElTVEVOX1BPUlQgPSA4MDgwCgpEQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVCA9ICJodHRwOi8vbG9jYWxob3N0OnswfS9oYW5kbGVjaGFuZ2UiCgojVE9ETzogWW91IE1VU1QgY2hhbmdlIHRoZSBmb2xsb3dpbmcgdmFsdWVzCkNPT0tJRV9TRUNSRVQgPSAiKzgvWXF0RVVRZmlZTFVkTzJpSjJPeXpISEZTQURFdUt2S1l3RnFlbUZhcz0iCkhNQUNfS0VZID0gIis4L1lxdEVVUWZpWUxVZE8yaUoyT3l6SElGU0FLRXVLdktZd0ZxZW1GYXM9IgoKZmFjZWJvb2tfY2xpZW50X2lkPScwMDAwMDAwMDAwMDAwMDAnCmZhY2Vib29rX2NsaWVudF9zZWNyZXQ9JzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJwpmYWNlYm9va19zY29wZSA9ICAiZW1haWwscmVhZF9zdHJlYW0sb2ZmbGluZV9hY2Nlc3MiCgpkaXJlY3RvcnlfbGlzdGluZ19hbGxvd2VkID0gVHJ1ZQoKQ09ORklHVVJFX0xPRyA9IEZhbHNlClNUQVJUX1dFQl9TRVJWRVIgPSBUcnVlClNUQVJUX09CSkVDVF9DSEFOR0VfTU9OSVRPUiA9IEZhbHNlCgpHT09HTEVfT0FVVEgyX0NMSUVOVF9JRCA9IE5vbmUKR09PR0xFX09BVVRIMl9DTElFTlRfU0VDUkVUID0gTm9uZQpHT09HTEVfT0FVVEgyX1JFRElSRUNUX1VSSSA9IE5vbmUKCkdJVEhVQl9DTElFTlRfSUQgPSBOb25lCkdJVEhVQl9DTElFTlRfU0VDUkVUID0gTm9uZQpHSVRIVUJfT0FVVEgyX0NBTExCQUNLX1VSSSA9IE5vbmUKCmxvZ2luX3VybCA9ICIvbG9naW4vIgoKb2JzZXJ2ZXJzID0gW10KCnRyeToKICAgIGZyb20gbG9jYWxfc2V0dGluZ3MgaW1wb3J0ICoKZXhjZXB0IEltcG9ydEVycm9yOgogICAgcGFzcwoKaWYgREJfVVNFUl9OQU1FIGFuZCBEQl9VU0VSX1BBU1NXT1JEOgogICAgREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iKyBEQl9VU0VSX05BTUUgKyAiOiIrIERCX1VTRVJfUEFTU1dPUkQgKyJAIisgREJfSE9TVCsiOiIrc3RyKERCX1BPUlQpKyIvIitEQl9OQU1FCmVsc2U6CiAgICBEQVRBQkFTRV9VUkkgPSAibW9uZ29kYjovLyIrREJfSE9TVCsiOiIrc3RyKERCX1BPUlQpCgppZiBEQl9VU0VSX05BTUUgYW5kIERCX1VTRVJfUEFTU1dPUkQ6CiAgICBMT0dfREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iKyBMT0dfREJfVVNFUl9OQU1FICsgIjoiKyBMT0dfREJfVVNFUl9QQVNTV09SRCArIkAiKyBMT0dfREJfSE9TVCsiOiIrc3RyKExPR19EQl9QT1JUKSsiLyIrTE9HX0RCX05BTUUKZWxzZToKICAgIExPR19EQVRBQkFTRV9VUkkgPSAibW9uZ29kYjovLyIrIExPR19EQl9IT1NUKyI6IitzdHIoTE9HX0RCX1BPUlQpCgoKR09PR0xFX09BVVRIMl9TRVRUSU5HUyA9IHsia2V5IjogR09PR0xFX09BVVRIMl9DTElFTlRfSUQsICJzZWNyZXQiOiBHT09HTEVfT0FVVEgyX0NMSUVOVF9TRUNSRVQsICJyZWRpcmVjdF91cmkiOiBHT09HTEVfT0FVVEgyX1JFRElSRUNUX1VSSX0KCkdJVEhVQl9PQVVUSF9TRVRUSU5HUyA9IHsiY2xpZW50X2lkIjogR0lUSFVCX0NMSUVOVF9JRCwgInNlY3JldCI6IEdJVEhVQl9DTElFTlRfU0VDUkVULCAicmVkaXJlY3RfdXJpIjogR0lUSFVCX09BVVRIMl9DQUxMQkFDS19VUkl9')
},
{
'name': '/endpoints.py', 'data': base64.b64decode('aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLnNlYXJjaCBpbXBvcnQgU2VhcmNoSGFuZGxlcgpmcm9tIGNvc21vcy5zZXJ2aWNlLnNlcnZpY2VoYW5kbGVyIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuZ3JpZGZzc2VydmljZSBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLmFwcHNlcnZpY2UgaW1wb3J0ICoKZnJvbSB2aWV3cyBpbXBvcnQgSW5kZXhIYW5kbGVyCmltcG9ydCBzZXR0aW5ncwoKCkVORF9QT0lOVFMgPSBbCiAgICAociIvbG9naW4vZ29vZ2xlLyIsIEdvb2dsZU9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vb3BlbmlkLyIsIE9wZW5pZExvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vZmFjZWJvb2tncmFwaC8iLCBGYWNlYm9va0dyYXBoTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9naXRodWIvIiwgR2l0aHViT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi8iLCBMb2dpbkhhbmRsZXIpLAogICAgKHIiL2xvZ291dC8iLCBMb2dvdXRIYW5kbGVyKSwKICAgIChyIi9zZXJ2aWNlLyguKikiLCBTZXJ2aWNlSGFuZGxlciksCiAgICAociIvc2VhcmNoLyguKikvIiwgU2VhcmNoSGFuZGxlciksCiAgICAociIvZ3JpZGZzLyguKikiLCBHcmlkRlNTZXJ2aWNlSGFuZGxlciksCiAgICAociIvYXBwbGljYXRpb24vaW5zdGFsbC8iLCBBcHBJbnN0YWxsSGFuZGxlciksCiAgICAociIvYXBwbGljYXRpb24vcGFja2FnZS8oLiopIiwgQXBwUGFja2FnZUhhbmRsZXIpLAogICAgI1RPRE86IGF1dGhlbnRpY2Fpb24gYW5kIGF1dGhvcml6YXRpb24gcmVxdWlyZWQgZm9yIGNoYW5nZSBtb25pdG9yIGFuZCBoYW5kbGVyLgogICAgKHIiL2NoYW5nZW1vbml0b3IiLCBDaGFuZ2VNb25pdG9yKSwKICAgIChyIi9oYW5kbGVjaGFuZ2UiLCBDaGFuZ2VSZXF1ZXN0SGFuZGxlciksCiAgICAociIvIiwgIEluZGV4SGFuZGxlciksCiAgICAocicvKC4qKScsIHRvcm5hZG8ud2ViLlN0YXRpY0ZpbGVIYW5kbGVyLCB7J3BhdGgnOiBzZXR0aW5ncy5TVEFUSUNfUEFUSH0pLApd')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode('')
},
{
'name': '/__init__.py', 'data': base64.b64decode('IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
}]
