# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/settings.py', 'data': base64.b64decode(b'aW1wb3J0IG9zCmltcG9ydCBsb2dnaW5nCmZyb20gY29sbGVjdGlvbnMgaW1wb3J0IG5hbWVkdHVwbGUKCmZyb20gQ3J5cHRvLlB1YmxpY0tleSBpbXBvcnQgUlNBCmZyb20gdG9ybmFkbyBpbXBvcnQgZ2VuCmZyb20gdG9ybmFkbyBpbXBvcnQgY29uY3VycmVudApmcm9tIGNvc21vcy5yYmFjLm9iamVjdCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlIGltcG9ydCBPQlNFUlZFUl9QUk9DRVNTT1IKCkRFQlVHID0gVHJ1ZQpEQl9IT1NUID0gIjEyNy4wLjAuMSIKREJfTkFNRSA9ICJjb3Ntb3MiCkRCX1BPUlQgPSAyNzAxNwoKREJfVVNFUl9OQU1FID0gTm9uZQpEQl9VU0VSX1BBU1NXT1JEID0gTm9uZQoKTE9HX0RCX0hPU1QgPSAiMTI3LjAuMC4xIgpMT0dfREJfTkFNRSA9ICJjb3Ntb3MiCkxPR19DT0xfTkFNRSA9ICJsb2ciCkxPR19EQl9QT1JUID0gMjcwMTcKTE9HX0xFVkVMID0gbG9nZ2luZy5ERUJVRwoKTE9HX0RCX1VTRVJfTkFNRSA9IE5vbmUKTE9HX0RCX1VTRVJfUEFTU1dPUkQgPSBOb25lCgpTVEFUSUNfUEFUSCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpLCAiYXBwIikKVEVNUExBVEVfUEFUSCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpLCAidGVtcGxhdGVzIikKSU5ERVhfSFRNTF9QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJhcHAvaW5kZXguaHRtbCIpCkxPR0lOX0hUTUxfUEFUSCA9IG9zLnBhdGguam9pbihvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpLCAidGVtcGxhdGVzL2xvZ2luLmh0bWwiKQpTWVNURU1fU0VUVVBfSFRNTF9QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJ0ZW1wbGF0ZXMvc2V0dXAuaHRtbCIpCldFQl9TRVJWRVJfTElTVEVOX1BPUlQgPSA4MDgwCgpEQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVCA9ICJodHRwOi8vbG9jYWxob3N0OnswfS9oYW5kbGVjaGFuZ2UiCgojIFRPRE86IFlvdSBNVVNUIGNoYW5nZSB0aGUgZm9sbG93aW5nIHZhbHVlcwpDT09LSUVfU0VDUkVUID0gIis4L1lxdEVVUWZpWUxVZE8yaUoyT3l6SEhGU0FERXVLdktZd0ZxZW1GYXM9IgpITUFDX0tFWSA9ICIrOC9ZcXRFVVFmaVlMVWRPMmlKMk95ekhJRlNBS0V1S3ZLWXdGcWVtRmFzPSIKCmZhY2Vib29rX2NsaWVudF9pZCA9ICcwMDAwMDAwMDAwMDAwMDAnCmZhY2Vib29rX2NsaWVudF9zZWNyZXQgPSAnMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnCmZhY2Vib29rX3Njb3BlID0gImVtYWlsLHB1YmxpY19wcm9maWxlLHVzZXJfZnJpZW5kcyIKZmFjZWJvb2tfcmVkaXJlY3RfdXJpID0gTm9uZQpERUZBVUxUX0xPR0lOX05FWFRfVVJJID0gIi8iCgoiIiIKIyBwaXAgaW5zdGFsbCBweWNyeXB0byBmb3IgQ3J5cHRvCiMgdGhlbiBmcm9tIHB5dGhvbiBjb25zb2xlIGdlbmVyYXRlIHByaXZhdGVfcGVtIGFuZCBwdWJsaWNfcGVuIGFuZCBhc3NpZ24gdG8gU0VSVklDRV9QUklWQVRFX0tFWSBhbmQgU0VSVklDRV9QVUJMSUNfS0VZCmltcG9ydCAgQ3J5cHRvLlB1YmxpY0tleS5SU0EgYXMgUlNBCmtleSA9IFJTQS5nZW5lcmF0ZSgyMDQ4KQpwcml2YXRlX3BlbSA9IGtleS5leHBvcnRLZXkoKQpwdWJsaWNfcGVtID0ga2V5LnB1YmxpY2tleSgpLmV4cG9ydEtleSgpCgoiIiIKIyBUT0RPOiBzZXQgYm90aCBrZXlzIGJlbG93LiBQcml2YXRlIGtleSBiYWNrdXAgbXVzdCBiZSBrZXB0IGluIGEgc2VjdXJlIHBsYWNlIGFuZCBzaG91bGQgbmV2ZXIgYmUgc2hhcmVkCiMgSWYgcHJpdmF0ZSBrZXkgaXMgY29tcHJvbWlzZWQsIHRoaXMgc2VydmljZSBhbmQgYWxsIG90aGVyIHNlcnZpY2VzIHRoYXQgdHJ1c3QgdGhpcyB3aWxsIGJlIGNvbXByb21pc2VkCiMgUHVibGljIGtleSBpcyB0byBzaGFyZSBwdWJsaWNseSBmb3IgdmVyaWZpY2F0aW9uCgpTRVJWSUNFX1BSSVZBVEVfS0VZID0gTm9uZQpTRVJWSUNFX1BVQkxJQ19LRVkgPSBOb25lCgpkaXJlY3RvcnlfbGlzdGluZ19hbGxvd2VkID0gVHJ1ZQoKQ09ORklHVVJFX0xPRyA9IEZhbHNlClNUQVJUX1dFQl9TRVJWRVIgPSBUcnVlClNUQVJUX09CSkVDVF9DSEFOR0VfTU9OSVRPUiA9IEZhbHNlCgpHT09HTEVfT0FVVEgyX0NMSUVOVF9JRCA9IE5vbmUKR09PR0xFX09BVVRIMl9DTElFTlRfU0VDUkVUID0gTm9uZQpHT09HTEVfT0FVVEgyX1JFRElSRUNUX1VSSSA9IE5vbmUKCkdJVEhVQl9DTElFTlRfSUQgPSBOb25lCkdJVEhVQl9DTElFTlRfU0VDUkVUID0gTm9uZQpHSVRIVUJfT0FVVEgyX0NBTExCQUNLX1VSSSA9IE5vbmUKClVTRVJTX0lERU5USVRZX0NPTF9OQU1FID0gImNvc21vcy51c2Vycy5pZGVudGl0eSIKVVNFUlNfUFJPRklMRV9GQl9DT0xfTkFNRSA9ICJjb3Ntb3MudXNlcnMucHJvZmlsZS5mYWNlYm9vayIKVVNFUlNfRkJfRlJJRU5EU19DT0xfTkFNRSA9ICJjb3Ntb3MudXNlcnMuZmFjZWJvb2suZnJpZW5kcyIKCmxvZ2luX3VybCA9ICIvbG9naW4vIgoKT0FVVEgyX1BSSVZBVEVfS0VZX1BFTSA9IE5vbmUKT0FVVEgyX1BVQkxJQ19LRVlfUEVNID0gTm9uZQpPQVVUSDJfVE9LRU5fRVhQSVJZX1NFQ09ORFMgPSA2MDAKClRFTkFOVF9JRCA9ICdjb3Ntb3NmcmFtZXdvcmsuY29tJwoKT0FVVEgyX1RSVVNURURfUkVESVJFQ1RfVVJMUyA9IFsnaHR0cDovL2xvY2FsaG9zdDo4MDgwL29hdXRoMmNsaWVudC9hdXRob3JpemUvJ10KT0FVVEgyX1NFUlZJQ0VfVVJMID0gImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC8iCgoiIiIKc3VkbyByYWJiaXRtcWN0bCBhZGRfdXNlciB3b3JrZmxvd191c2VyIHdvcmtmbG93X3Bhc3N3b3JkCnN1ZG8gcmFiYml0bXFjdGwgYWRkX3Zob3N0IHdvcmtmbG93X3Zob3N0CnN1ZG8gcmFiYml0bXFjdGwgc2V0X3VzZXJfdGFncyB3b3JrZmxvd191c2VyIHdvcmtmbG93X3RhZwpzdWRvIHJhYmJpdG1xY3RsIHNldF9wZXJtaXNzaW9ucyAtcCB3b3JrZmxvd192aG9zdCB3b3JrZmxvd191c2VyICIuKiIgIi4qIiAiLioiCiIiIgoKRU5BQkxFX1dPUktGTE9XX0VOR0lORVMgPSBGYWxzZQoKV09SS0ZMT1dfRU5HSU5FUyA9IFsKICAgIHsKICAgICAgICAiZW5hYmxlZCI6IFRydWUsCiAgICAgICAgImVuZ2luZV90eXBlIjogImNlbGVyeSIsCiAgICAgICAgIm5hbWUiOiAid29ya2Zsb3dfZW5naW5lIiwKICAgICAgICAicGFyYW1ldGVycyI6CiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJ1c2VybmFtZSI6ICJ3b3JrZmxvd191c2VyIiwKICAgICAgICAgICAgICAgICJwYXNzd29yZCI6ICJ3b3JrZmxvd19wYXNzd29yZCIsCiAgICAgICAgICAgICAgICAidmhvc3QiOiAid29ya2Zsb3dfdmhvc3QiLAogICAgICAgICAgICAgICAgInRhZyI6ICJ3b3JrZmxvd190YWciLAogICAgICAgICAgICAgICAgImJyb2tlcl91cmxzIjogWydhbXFwOi8vd29ya2Zsb3dfdXNlcjp3b3JrZmxvd19wYXNzd29yZEBsb2NhbGhvc3Q6NTY3Mi93b3JrZmxvd192aG9zdCddCiAgICAgICAgICAgIH0KICAgIH0KXQoKCiMgVE9ETzogWW91IHNob3VsZCByZW1vdmUgdGhpcyBwcm9jZXNzb24gaW4gcHJvZHVjdGlvbiBlbnZpcm9ubWVudApkZWYgdGVzdF9vYnNlcnZlcih1c2VyLCBvYmplY3Rfc2VydmljZSwgb2JqZWN0X25hbWUsIGRhdGEsIGFjY2Vzc190eXBlLCBjb2x1bW5zPU5vbmUsICphcmdzLCAqKmt3YXJncyk6CiAgICBhc3NlcnQgb2JqZWN0X25hbWUgPT0gInRlc3QiCiAgICBhc3NlcnQgYWNjZXNzX3R5cGUgPT0gQWNjZXNzVHlwZS5SRUFEIG9yIGFjY2Vzc190eXBlID09IEFjY2Vzc1R5cGUuSU5TRVJUIG9yIGFjY2Vzc190eXBlID09IEFjY2Vzc1R5cGUuVVBEQVRFIG9yIGFjY2Vzc190eXBlID09IEFjY2Vzc1R5cGUuREVMRVRFCiAgICBsb2dnaW5nLmluZm8oCiAgICAgICAgIlRlc3Qgb2JqZWN0IG9ic2VydmVyIGlzIGNhbGxlZCB3aXRoIFt7fSwge30sIHt9LCB7fSwge30sIHt9XS4iLmZvcm1hdCh1c2VyLCBvYmplY3Rfc2VydmljZSwgb2JqZWN0X25hbWUsIGRhdGEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2Nlc3NfdHlwZSwgY29sdW1ucykpCgogICAgaWYgQWNjZXNzVHlwZS5JTlNFUlQgPT0gYWNjZXNzX3R5cGU6CiAgICAgICAgdmFsID0gY29uY3VycmVudC5GdXR1cmUoKQogICAgICAgIHZhbC5zZXRfcmVzdWx0KGRhdGEpCiAgICAgICAgcmV0dXJuICh2YWwpCgogICAgaWYgQWNjZXNzVHlwZS5VUERBVEUgPT0gYWNjZXNzX3R5cGUgb3IgQWNjZXNzVHlwZS5ERUxFVEUgPT0gYWNjZXNzX3R5cGU6CiAgICAgICAgciA9ICh7ImVycm9yIjogTm9uZSwgIm4iOiAxLCAib2siOiAxLCAidXBkYXRlZEV4aXN0aW5nIjogMX0pCiAgICAgICAgdmFsID0gY29uY3VycmVudC5GdXR1cmUoKQogICAgICAgIHZhbC5zZXRfcmVzdWx0KHsiX2lkIjogcn0pCiAgICAgICAgcmV0dXJuICh2YWwpCgogICAgZmluZF9vbmUgPSBrd2FyZ3MuZ2V0KCJmaW5kX29uZSIsIEZhbHNlKQogICAgaWYgZmluZF9vbmU6CiAgICAgICAgdmFsID0gY29uY3VycmVudC5GdXR1cmUoKQogICAgICAgIHZhbC5zZXRfcmVzdWx0KHsiX2lkIjogZGF0YX0pCiAgICAgICAgcmV0dXJuICh2YWwpCiAgICBlbHNlOgogICAgICAgIFJlc3VsdCA9IG5hbWVkdHVwbGUoIkNvc21vc0VtcHR5UmVzdWx0U2V0IiwgImZldGNoX25leHQiKQogICAgICAgIHZhbCA9IGNvbmN1cnJlbnQuRnV0dXJlKCkKICAgICAgICB2YWwuc2V0X3Jlc3VsdChGYWxzZSkKICAgICAgICByZXR1cm4gKFJlc3VsdChmZXRjaF9uZXh0PXZhbCkpCgoKb2JzZXJ2ZXJzID0gWwogICAgewogICAgICAgICJvYmplY3RfbmFtZSI6ICJ0ZXN0IiwKICAgICAgICAiZnVuY3Rpb24iOiB0ZXN0X29ic2VydmVyLAogICAgICAgICJhY2Nlc3MiOiBbQWNjZXNzVHlwZS5SRUFELCBBY2Nlc3NUeXBlLklOU0VSVCwgQWNjZXNzVHlwZS5VUERBVEUsIEFjY2Vzc1R5cGUuREVMRVRFXSwKICAgICAgICAidHlwZSI6IE9CU0VSVkVSX1BST0NFU1NPUgogICAgfQpdCgp0cnk6CiAgICBmcm9tIGxvY2FsX3NldHRpbmdzIGltcG9ydCAqCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHBhc3MKCmlmIERCX1VTRVJfTkFNRSBhbmQgREJfVVNFUl9QQVNTV09SRDoKICAgIERBVEFCQVNFX1VSSSA9ICJtb25nb2RiOi8vIiArIERCX1VTRVJfTkFNRSArICI6IiArIERCX1VTRVJfUEFTU1dPUkQgKyAiQCIgKyBEQl9IT1NUICsgIjoiICsgc3RyKAogICAgICAgIERCX1BPUlQpICsgIi8iICsgREJfTkFNRQplbHNlOgogICAgREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iICsgREJfSE9TVCArICI6IiArIHN0cihEQl9QT1JUKQoKaWYgTE9HX0RCX1VTRVJfTkFNRSBhbmQgTE9HX0RCX1VTRVJfUEFTU1dPUkQ6CiAgICBMT0dfREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iICsgTE9HX0RCX1VTRVJfTkFNRSArICI6IiArIExPR19EQl9VU0VSX1BBU1NXT1JEICsgIkAiICsgTE9HX0RCX0hPU1QgKyAiOiIgKyBzdHIoCiAgICAgICAgTE9HX0RCX1BPUlQpICsgIi8iICsgTE9HX0RCX05BTUUKZWxzZToKICAgIExPR19EQVRBQkFTRV9VUkkgPSAibW9uZ29kYjovLyIgKyBMT0dfREJfSE9TVCArICI6IiArIHN0cihMT0dfREJfUE9SVCkKCkdPT0dMRV9PQVVUSDJfU0VUVElOR1MgPSB7ImtleSI6IEdPT0dMRV9PQVVUSDJfQ0xJRU5UX0lELCAic2VjcmV0IjogR09PR0xFX09BVVRIMl9DTElFTlRfU0VDUkVULAogICAgICAgICAgICAgICAgICAgICAgICAgICJyZWRpcmVjdF91cmkiOiBHT09HTEVfT0FVVEgyX1JFRElSRUNUX1VSSX0KCkdJVEhVQl9PQVVUSF9TRVRUSU5HUyA9IHsiY2xpZW50X2lkIjogR0lUSFVCX0NMSUVOVF9JRCwgInNlY3JldCI6IEdJVEhVQl9DTElFTlRfU0VDUkVULAogICAgICAgICAgICAgICAgICAgICAgICAgInJlZGlyZWN0X3VyaSI6IEdJVEhVQl9PQVVUSDJfQ0FMTEJBQ0tfVVJJfQoKaWYgbm90IE9BVVRIMl9QUklWQVRFX0tFWV9QRU0gb3Igbm90IE9BVVRIMl9QVUJMSUNfS0VZX1BFTToKICAgIGxvZ2dpbmcud2FybmluZygiT0F1dGgyIHByaXZhdGUga2VyIGFuZCBwdWJsaWMga2V5IGlzIG5vdCBzZXQuIE9BdXRoMiBzZXJ2aWNlIG1heSBub3Qgd29yay4gRXhpdGluZy4iKQogICAgZXhpdCgwKQoKCiMgVGhpcyBtdXN0IGJlIHRoZSBsYXN0IGl0ZW0gaW4gc2V0dGluZ3MgZmlsZSBmb3IgdGhlIHNldHRpbmdzIHBhZ2UgdG8gd29yayBwb3JvcGVybHkKQ09ORklHVVJBQkxFX1NFVFRJTkdTID0gWwogICAgeyJuYW1lIjogJ0RFQlVHJywgInZhbHVlIjogREVCVUcsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJib29sZWFuIiwgInF1b3RlZCI6IEZhbHNlfX0sCgogICAgeyJuYW1lIjogJ1dFQl9TRVJWRVJfTElTVEVOX1BPUlQnLCAidmFsdWUiOiBXRUJfU0VSVkVSX0xJU1RFTl9QT1JULCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBGYWxzZX19LAoKICAgIHsibmFtZSI6ICdDT09LSUVfU0VDUkVUJywgICJ2YWx1ZSI6IENPT0tJRV9TRUNSRVQsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdITUFDX0tFWScsICAidmFsdWUiOiBITUFDX0tFWSwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAoKICAgIHsibmFtZSI6ICdEQl9IT1NUJywgICJ2YWx1ZSI6IERCX0hPU1QsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdEQl9QT1JUJywgInZhbHVlIjogREJfUE9SVCwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogRmFsc2V9fSwKICAgIHsibmFtZSI6ICdEQl9OQU1FJywgInZhbHVlIjogREJfTkFNRSwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAogICAgeyJuYW1lIjogJ0xPR19EQl9QT1JUJywgInZhbHVlIjogTE9HX0RCX1BPUlQsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IEZhbHNlfX0sCiAgICB7Im5hbWUiOiAnTE9HX0RCX0hPU1QnLCAidmFsdWUiOiBMT0dfREJfSE9TVCwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAogICAgeyJuYW1lIjogJ0xPR19EQl9OQU1FJywgICJ2YWx1ZSI6IExPR19EQl9OQU1FLCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCgogICAgeyJuYW1lIjogJ0VOQUJMRV9XT1JLRkxPV19FTkdJTkVTJywgICJ2YWx1ZSI6IEVOQUJMRV9XT1JLRkxPV19FTkdJTkVTLCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBGYWxzZX19LAoKICAgIHsibmFtZSI6ICdPQVVUSDJfUFJJVkFURV9LRVlfUEVNJywgInZhbHVlIjogT0FVVEgyX1BSSVZBVEVfS0VZX1BFTSwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHRhcmVhIiwgInF1b3RlZCI6IFRydWV9fSwKICAgIHsibmFtZSI6ICdPQVVUSDJfUFVCTElDX0tFWV9QRU0nLCAidmFsdWUiOiBPQVVUSDJfUFVCTElDX0tFWV9QRU0sICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0YXJlYSIsICJxdW90ZWQiOiBUcnVlfX0sCiAgICB7Im5hbWUiOiAnT0FVVEgyX1NFUlZJQ0VfVVJMJywgICJ2YWx1ZSI6IE9BVVRIMl9TRVJWSUNFX1VSTCwgInNldHRpbmdzIjogeyJ0eXBlIjogInRleHQiLCAicXVvdGVkIjogVHJ1ZX19LAogICAgeyJuYW1lIjogJ09BVVRIMl9UUlVTVEVEX1JFRElSRUNUX1VSTFMnLCAidmFsdWUiOiBPQVVUSDJfVFJVU1RFRF9SRURJUkVDVF9VUkxTLCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dGFyZWEiLCAicXVvdGVkIjogRmFsc2V9fSwKCiAgICB7Im5hbWUiOiAnSU5ERVhfSFRNTF9QQVRIJywgInZhbHVlIjogSU5ERVhfSFRNTF9QQVRILCAic2V0dGluZ3MiOiB7InR5cGUiOiAidGV4dCIsICJxdW90ZWQiOiBUcnVlfX0sCiAgICB7Im5hbWUiOiAnU1RBVElDX1BBVEgnLCAgInZhbHVlIjogU1RBVElDX1BBVEgsICJzZXR0aW5ncyI6IHsidHlwZSI6ICJ0ZXh0IiwgInF1b3RlZCI6IFRydWV9fSwKXQo=')
},
{
'name': '/endpoints.py', 'data': base64.b64decode(b'aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLm9hdXRoMnNlcnZpY2UgaW1wb3J0IE9BdXRoMlNlcnZpY2VIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VhcmNoIGltcG9ydCBTZWFyY2hIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VydmljZWhhbmRsZXIgaW1wb3J0ICoKZnJvbSBjb3Ntb3Muc2VydmljZS5ncmlkZnNzZXJ2aWNlIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuYXBwc2VydmljZSBpbXBvcnQgKgppbXBvcnQgc2V0dGluZ3MKZnJvbSB2aWV3cyBpbXBvcnQgKgpmcm9tIHN5c3RlbXZpZXdzIGltcG9ydCBTeXN0ZW1TZXR1cEhhbmRsZXIKCkVORF9QT0lOVFMgPSBbCiAgICAociIvbG9naW4vZ29vZ2xlLyIsIEdvb2dsZU9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vb3BlbmlkLyIsIE9wZW5pZExvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vZmFjZWJvb2tncmFwaC8iLCBGYWNlYm9va0dyYXBoTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9naXRodWIvIiwgR2l0aHViT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9hdXRocC8iLCBBdXRocE9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vIiwgTG9naW5IYW5kbGVyKSwKICAgIChyIi91c2VyL2NoYW5nZXBhc3N3b3JkLyIsIENoYW5nZVBhc3N3b3JkSGFuZGxlciksCiAgICAociIvbG9nb3V0LyIsIExvZ291dEhhbmRsZXIpLAogICAgKHIiLyg/UDx0ZW5hbnRfaWQ+W15cL10rKS9vYXV0aDIvKD9QPGZ1bmN0aW9uPlteXC9dKykvIiwgT0F1dGgyU2VydmljZUhhbmRsZXIpLAogICAgKHIiLyg/UDx0ZW5hbnRfaWQ+W15cL10rKS9hdXRoL2tleS8iLCBBdXRoUHVibGljS2V5SGFuZGxlciksCiAgICAociIvb2F1dGgyY2xpZW50Lyg/UDxmdW5jdGlvbj5bXlwvXSspLyIsIE9BdXRoMkR1bW15Q2xpZW50SGFuZGxlciksCiAgICAociIvc2VydmljZS8oLiopIiwgU2VydmljZUhhbmRsZXIpLAogICAgKHIiL3NlYXJjaC8oLiopLyIsIFNlYXJjaEhhbmRsZXIpLAogICAgKHIiL2dyaWRmcy8oLiopIiwgR3JpZEZTU2VydmljZUhhbmRsZXIpLAogICAgKHIiL2FwcGxpY2F0aW9uL2luc3RhbGwvIiwgQXBwSW5zdGFsbEhhbmRsZXIpLAogICAgKHIiL2FwcGxpY2F0aW9uL3BhY2thZ2UvKC4qKSIsIEFwcFBhY2thZ2VIYW5kbGVyKSwKICAgICNUT0RPOiBhdXRoZW50aWNhaW9uIGFuZCBhdXRob3JpemF0aW9uIHJlcXVpcmVkIGZvciBjaGFuZ2UgbW9uaXRvciBhbmQgaGFuZGxlci4KICAgIChyIi9jaGFuZ2Vtb25pdG9yIiwgQ2hhbmdlTW9uaXRvciksCiAgICAociIvaGFuZGxlY2hhbmdlIiwgQ2hhbmdlUmVxdWVzdEhhbmRsZXIpLAogICAgKHIiL3N5c3RlbS9zZXR1cC8iLCBTeXN0ZW1TZXR1cEhhbmRsZXIpLAogICAgKHIiLyIsICBJbmRleEhhbmRsZXIpLAogICAgKHInLyguKiknLCB0b3JuYWRvLndlYi5TdGF0aWNGaWxlSGFuZGxlciwgeydwYXRoJzogc2V0dGluZ3MuU1RBVElDX1BBVEh9KSwKXQ==')
},
{
'name': '/__init__.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
},
{
'name': '/startuphelpers.py', 'data': base64.b64decode(b'')
},
{
'name': '/systemviews.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTYgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IGxvZ2dpbmcKZnJvbSB0b3JuYWRvLnRlbXBsYXRlIGltcG9ydCBUZW1wbGF0ZQppbXBvcnQgdG9ybmFkbwpmcm9tIHRvcm5hZG8gaW1wb3J0IGdlbgoKZnJvbSBjb3Ntb3MuY29tbW9uLmNvbnN0YW50cyBpbXBvcnQgQ09TTU9TX1NZU1RFTV9TRVRUSU5HU19PQkpFQ1RfTkFNRQpmcm9tIGNvc21vcy5yYmFjLm9iamVjdCBpbXBvcnQgQ09TTU9TX1VTRVJTX09CSkVDVF9OQU1FLCBTWVNURU1fVVNFUiwgQURNSU5fVVNFUl9ST0xFX1NJRCwgQWNjZXNzVHlwZQpmcm9tIGNvc21vcy5zZXJ2aWNlLnJlcXVlc3RoYW5kbGVyIGltcG9ydCBSZXF1ZXN0SGFuZGxlcgppbXBvcnQgc2V0dGluZ3MKCmNsYXNzIFN5c3RlbVNldHVwSGFuZGxlcihSZXF1ZXN0SGFuZGxlcik6CiAgICBAZ2VuLmNvcm91dGluZQogICAgZGVmIGdldChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIG1lc3NhZ2UgPSBOb25lCiAgICAgICAgICAgIHdpdGggb3BlbihzZXR0aW5ncy5TWVNURU1fU0VUVVBfSFRNTF9QQVRIKSBhcyBmOgogICAgICAgICAgICAgICAgbG9naW5fdGVtcGxhdGUgPSBmLnJlYWQoKQogICAgICAgICAgICAgICAgdCA9IFRlbXBsYXRlKGxvZ2luX3RlbXBsYXRlKQogICAgICAgICAgICAgICAgc2hvd19jcmVhdGVfYWRtaW5fZm9ybSA9IFRydWUKICAgICAgICAgICAgICAgIHVzZXIgPSBzZWxmLmdldF9jdXJyZW50X3VzZXIoKQogICAgICAgICAgICAgICAgaWYgdXNlcjoKICAgICAgICAgICAgICAgICAgICBzaG93X3NldHRpbmdzX2Zvcm0gPSBzZWxmLmhhc19hY2Nlc3MoQ09TTU9TX1NZU1RFTV9TRVRUSU5HU19PQkpFQ1RfTkFNRSwgW10sIEFjY2Vzc1R5cGUuUkVBRCkKICAgICAgICAgICAgICAgICAgICBzaG93X2NyZWF0ZV9hZG1pbl9mb3JtID0gRmFsc2UKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2hvd19zZXR0aW5nc19mb3JtID0gRmFsc2UKICAgICAgICAgICAgICAgIHNob3dfc3lzdGVtX2Zvcm0gPSBzaG93X3NldHRpbmdzX2Zvcm0KCiAgICAgICAgICAgICAgICBodG1sID0gdC5nZW5lcmF0ZShtZXNzYWdlPW1lc3NhZ2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGVfc2V0dGluZ3M9c2V0dGluZ3MuQ09ORklHVVJBQkxFX1NFVFRJTkdTLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd19jcmVhdGVfYWRtaW5fZm9ybT1zaG93X2NyZWF0ZV9hZG1pbl9mb3JtLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd19zZXR0aW5nc19mb3JtPXNob3dfc2V0dGluZ3NfZm9ybSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dfc3lzdGVtX2Zvcm09c2hvd19zeXN0ZW1fZm9ybSkKICAgICAgICAgICAgICAgIHNlbGYud3JpdGUoaHRtbCkKICAgICAgICAgICAgICAgIHNlbGYuZmluaXNoKCkKICAgICAgICBleGNlcHQgSU9FcnJvciBhcyBlOgogICAgICAgICAgICByYWlzZSB0b3JuYWRvLndlYi5IVFRQRXJyb3IoNDA0LCAiRmlsZSBub3QgZm91bmQiKQoKICAgIEBnZW4uY29yb3V0aW5lCiAgICBkZWYgcG9zdChzZWxmKToKICAgICAgICBwYXJhbXMgPSB7azogc2VsZi5nZXRfYXJndW1lbnQoaykgZm9yIGsgaW4gc2VsZi5yZXF1ZXN0LmFyZ3VtZW50c30KICAgICAgICBwYXJhbXNbInJlcXVlc3RfcHJvdG9jb2wiXSA9IHNlbGYucmVxdWVzdC5wcm90b2NvbAogICAgICAgIHBhcmFtc1sicmVxdWVzdF9ob3N0Il0gPSBzZWxmLnJlcXVlc3QuaG9zdAogICAgICAgIHBhcmFtc1sicmVxdWVzdF91cmkiXSA9IHNlbGYucmVxdWVzdC51cmkKICAgICAgICBwYXJhbXNbImNvbW1hbmQiXSA9IHNlbGYucmVxdWVzdC5ib2R5LmRlY29kZSgpCiAgICAgICAgI3NlbGYud3JpdGUoanNvbi5kdW1wcyhwYXJhbXMpKQoKICAgICAgICBjb21tYW5kID0gc2VsZi5nZXRfYXJndW1lbnQoImNvbW1hbmQiLCBkZWZhdWx0PU5vbmUpCgogICAgICAgIGlmIGNvbW1hbmQgPT0gIm5ldy1hZG1pbiI6CiAgICAgICAgICAgIHlpZWxkIHNlbGYuZXhlY3V0ZV9uZXdfYWRtaW4oKQoKICAgICAgICBpZiBjb21tYW5kID09ICJhcHBseV9zZXR0aW5ncyI6CiAgICAgICAgICAgIHNlbGYuZXhlY3V0ZV9hcHBseV9zZXR0aW5ncygpCiAgICAgICAgaWYgY29tbWFuZCA9PSAicmVzdGFydF9zZXJ2aWNlIjoKICAgICAgICAgICAgc2VsZi5yZXN0YXJ0X3NlcnZpY2UoKQoKICAgIGRlZiByZXN0YXJ0X3NlcnZpY2Uoc2VsZik6CiAgICAgICAgdXNlciA9IHNlbGYuZ2V0X2N1cnJlbnRfdXNlcigpCiAgICAgICAgaWYgdXNlcjoKICAgICAgICAgICAgc2VsZi5jaGVja19hY2Nlc3ModXNlciwgQ09TTU9TX1NZU1RFTV9TRVRUSU5HU19PQkpFQ1RfTkFNRSwgW10sIEFjY2Vzc1R5cGUuVVBEQVRFKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDEsICJVbmF1dGhvcml6ZWQiKQoKICAgICAgICBzZWxmLndyaXRlKCJTeXN0ZW0gaXMgbm93IHJlc3RhcnRpbmcuIikKICAgICAgICBzZWxmLmZpbmlzaCgpCiAgICAgICAgY3VyX2RpciA9IG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSkKICAgICAgICBleGVjdXRhYmxlID0gc3lzLmV4ZWN1dGFibGUKICAgICAgICBhcmcgPSBzeXMuYXJndgogICAgICAgIGxvZ2dpbmcud2FybmluZygiUmVzdGFydGluZyBzZXJ2aWNlLiIpCiAgICAgICAgbG9nZ2luZy5pbmZvKCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKICAgICAgICBsb2dnaW5nLmluZm8oIkNvbW1hbmQ6IHswfSB7MX1cblBhdGg6IHsyfS4iLmZvcm1hdCgKICAgICAgICAgICAgZXhlY3V0YWJsZSwgc3RyKGFyZyksIGN1cl9kaXIpKQogICAgICAgIGxvZ2dpbmcuaW5mbygiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSIpCiAgICAgICAgb3MuZXhlY2woZXhlY3V0YWJsZSwgZXhlY3V0YWJsZSwgKmFyZykKCiAgICBkZWYgZXhlY3V0ZV9hcHBseV9zZXR0aW5ncyhzZWxmKToKICAgICAgICB1c2VyID0gc2VsZi5nZXRfY3VycmVudF91c2VyKCkKICAgICAgICBpZiB1c2VyOgogICAgICAgICAgICBzZWxmLmNoZWNrX2FjY2Vzcyh1c2VyLCBDT1NNT1NfU1lTVEVNX1NFVFRJTkdTX09CSkVDVF9OQU1FLCBbXSwgQWNjZXNzVHlwZS5VUERBVEUpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgdG9ybmFkby53ZWIuSFRUUEVycm9yKDQwMSwgIlVuYXV0aG9yaXplZCIpCgogICAgICAgIGN1cl9kaXIgPSBvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpCiAgICAgICAgbG9jYWxfc2V0dGluZ3NfZmlsZW5hbWUgPSBvcy5wYXRoLmpvaW4oY3VyX2RpciwgImxvY2FsX3NldHRpbmdzLnB5IikKICAgICAgICBzZiA9IG9wZW4obG9jYWxfc2V0dGluZ3NfZmlsZW5hbWUsICd3JykKICAgICAgICBmb3IgY29uZmlnIGluIHNldHRpbmdzLkNPTkZJR1VSQUJMRV9TRVRUSU5HUzoKICAgICAgICAgICAgayA9IGNvbmZpZy5nZXQoIm5hbWUiKQogICAgICAgICAgICBhdHRyID0gY29uZmlnLmdldCgic2V0dGluZ3MiKQogICAgICAgICAgICBxdW90ZWQgPSBhdHRyLmdldCgicXVvdGVkIiwgVHJ1ZSkKICAgICAgICAgICAgaWYgazoKICAgICAgICAgICAgICAgIHYgPSBzZWxmLmdldF9hcmd1bWVudChrLCBkZWZhdWx0PWdldGF0dHIoc2V0dGluZ3MsIGssIE5vbmUpKQoKICAgICAgICAgICAgICAgIGlmIHY6CiAgICAgICAgICAgICAgICAgICAgaWYgcXVvdGVkOgogICAgICAgICAgICAgICAgICAgICAgICBzZi53cml0ZSgnezB9PSIiInsxfSIiIlxuJy5mb3JtYXQoaywgdikpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgc2Yud3JpdGUoJ3swfSA9IHsxfVxuJy5mb3JtYXQoaywgdikpCiAgICAgICAgc2YuY2xvc2UoKQogICAgICAgIHNlbGYud3JpdGUoIlNldHRpbmdzIHNhdmVkLiBQbGVhc2UgcmVzdGFydCBzZXJ2aWNlLiIpCgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBleGVjdXRlX25ld19hZG1pbihzZWxmKToKICAgICAgICB1c2VybmFtZSA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJ1c2VybmFtZSIsIGRlZmF1bHQ9Tm9uZSkKICAgICAgICBwYXNzd29yZCA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJwYXNzd29yZCIsIGRlZmF1bHQ9Tm9uZSkKICAgICAgICBvYmplY3RfbmFtZSA9IENPU01PU19VU0VSU19PQkpFQ1RfTkFNRQogICAgICAgIG9ial9zZXJ2ID0gc2VsZi5zZXR0aW5nc1snb2JqZWN0X3NlcnZpY2UnXQogICAgICAgICMgVGhlcmUgc2hvdWxkIG5vdCBiZSBhbnkgZXhpc3RpbmcgdXNlciBvZiBhbnkgdHlwZQogICAgICAgIHByb21pc2UgPSBvYmpfc2Vydi5maW5kKFNZU1RFTV9VU0VSLCBvYmplY3RfbmFtZSwge30sIFtdKQogICAgICAgIGlmICh5aWVsZCBwcm9taXNlLmZldGNoX25leHQpOgogICAgICAgICAgICByYWlzZSB0b3JuYWRvLndlYi5IVFRQRXJyb3IoNDAxLCAiVW5hdXRob3JpemVkLiBTeXN0ZW0gaGFzIGV4aXN0aW5nIHVzZXJzLiIpCiAgICAgICAgY29sdW1ucyA9IFsidXNlcm5hbWUiLCAicGFzc3dvcmQiLCAicm9sZXMiXQogICAgICAgIHF1ZXJ5ID0geyJ1c2VybmFtZSI6IHVzZXJuYW1lfQogICAgICAgIGN1cnNvciA9IG9ial9zZXJ2LmZpbmQoU1lTVEVNX1VTRVIsIG9iamVjdF9uYW1lLCBxdWVyeSwgY29sdW1ucykKICAgICAgICBmb3VuZCA9IHlpZWxkIGN1cnNvci5mZXRjaF9uZXh0CiAgICAgICAgaWYgZm91bmQ6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDEsICJVbmF1dGhvcml6ZWQuIikKICAgICAgICBlbHNlOgogICAgICAgICAgICBkYXRhID0gcXVlcnkKICAgICAgICAgICAgZGF0YS51cGRhdGUoeyJwYXNzd29yZCI6IHBhc3N3b3JkLCAicm9sZXMiOiBbQURNSU5fVVNFUl9ST0xFX1NJRF19KQoKICAgICAgICAgICAgIyBUT0RPOiBtYWtlIGZ1bmN0aW9uIGFuZCB1c2UgYXQgYm90aCBoZXJlIGFuZCBpbiByZXF1ZXN0aGFuZGxlciBhbmQgdGhlbiBnbyB0aHJvdWdoIGVudGlyZSBwcm9qZWN0CiAgICAgICAgICAgIHByZXByb2Nlc3Nvcl9saXN0ID0gb2JqX3NlcnYuZ2V0X29wZXJhdGlvbl9wcmVwcm9jZXNzb3Iob2JqZWN0X25hbWUsIEFjY2Vzc1R5cGUuSU5TRVJUKQogICAgICAgICAgICBmb3IgcHJlcHJvY2Vzc29yIGluIHByZXByb2Nlc3Nvcl9saXN0OgogICAgICAgICAgICAgICAgeWllbGQgcHJlcHJvY2Vzc29yKG9ial9zZXJ2LCBvYmplY3RfbmFtZSwgZGF0YSwgQWNjZXNzVHlwZS5JTlNFUlQpCgogICAgICAgICAgICBwcm9taXNlID0gb2JqX3NlcnYuaW5zZXJ0KFNZU1RFTV9VU0VSLCBvYmplY3RfbmFtZSwgZGF0YSkKICAgICAgICAgICAgcmVzdWx0ID0geWllbGQgcHJvbWlzZQogICAgICAgICAgICBkYXRhID0gc2VsZi5qc29uX2VuY29kZV9yZXN1bHQocmVzdWx0KQogICAgICAgICAgICBzZWxmLndyaXRlKGRhdGEpCg==')
},
{
'name': '/views.py', 'data': base64.b64decode(b'aW1wb3J0IGxvZ2dpbmcKCmltcG9ydCBzZXR0aW5ncwpmcm9tIHRvcm5hZG8uaHR0cGNsaWVudCBpbXBvcnQgQXN5bmNIVFRQQ2xpZW50CgppbXBvcnQgY29zbW9zCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgQmFzaWNMb2dpbkhhbmRsZXIKCl9fYXV0aG9yX18gPSAnTWFydWYgTWFuaXJ1enphbWFuJwoKaW1wb3J0IHRvcm5hZG8KZnJvbSB0b3JuYWRvIGltcG9ydCBnZW4KaW1wb3J0IGpzb24KCmZyb20gY29zbW9zLnNlcnZpY2UucmVxdWVzdGhhbmRsZXIgaW1wb3J0IFJlcXVlc3RIYW5kbGVyCgoKY2xhc3MgSW5kZXhIYW5kbGVyKFJlcXVlc3RIYW5kbGVyKToKICAgIEBnZW4uY29yb3V0aW5lCiAgICBkZWYgZ2V0KHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLklOREVYX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIHNlbGYud3JpdGUoZi5yZWFkKCkpCiAgICAgICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICAgICAgcmFpc2UgdG9ybmFkby53ZWIuSFRUUEVycm9yKDQwNCwgIkZpbGUgbm90IGZvdW5kIikKCgpjbGFzcyBMb2dpbkhhbmRsZXIoQmFzaWNMb2dpbkhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZik6CiAgICAgICAgbmV4dCA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJuZXh0IiwgJy8nKQogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLkxPR0lOX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIGxvZ2luX3RlbXBsYXRlID0gZi5yZWFkKCkKICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dfbG9naW5fd2luZG93KG5leHQsIGxvZ2luX3RlbXBsYXRlPWxvZ2luX3RlbXBsYXRlKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgoKY2xhc3MgQXV0aFB1YmxpY0tleUhhbmRsZXIoUmVxdWVzdEhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZiwgdGVuYW50X2lkKToKICAgICAgICBzZWxmLnNldF9oZWFkZXIoIkNvbnRlbnQtVHlwZSIsICdhcHBsaWNhdGlvbi94LXBlbS1maWxlJykKICAgICAgICBzZWxmLnNldF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDsgZmlsZW5hbWU9JXNfcHViLnBlbScgJSB0ZW5hbnRfaWQpCiAgICAgICAgc2VsZi53cml0ZShzZXR0aW5ncy5PQVVUSDJfUFVCTElDX0tFWV9QRU0pCgpjbGFzcyBPQXV0aDJEdW1teUNsaWVudEhhbmRsZXIoUmVxdWVzdEhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZiwgZnVuY3Rpb24pOgogICAgICAgIHByb3RvY29sID0gc2VsZi5yZXF1ZXN0LnByb3RvY29sCiAgICAgICAgaG9zdCA9IHNlbGYucmVxdWVzdC5ob3N0CiAgICAgICAgI29hdXRoMl9zZXJ2aWNlX2hvc3QgPSBwcm90b2NvbCArICI6Ly8iKyBob3N0CiAgICAgICAgb2F1dGgyX3NlcnZpY2VfaG9zdCA9IHNldHRpbmdzLk9BVVRIMl9TRVJWSUNFX1VSTAoKICAgICAgICB0ZW5hbnRfaWQgPSBzZXR0aW5ncy5URU5BTlRfSUQKICAgICAgICBzZWxmLndyaXRlKHNlbGYucmVxdWVzdC51cmkgKyAiIDxiciAvPiIgKyBmdW5jdGlvbiArICI8YnIgLz4iKQogICAgICAgIHBhcmFtcyA9IGpzb24uZHVtcHMoe2s6IHNlbGYuZ2V0X2FyZ3VtZW50KGspIGZvciBrIGluIHNlbGYucmVxdWVzdC5hcmd1bWVudHN9KQogICAgICAgIHNlbGYud3JpdGUocGFyYW1zKQogICAgICAgIGNvZGUgPSBzZWxmLmdldF9hcmd1bWVudCgiY29kZSIsICJ0ZW1wIikKICAgICAgICB0b2tlbiA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJhY2Nlc3NfdG9rZW4iLCBkZWZhdWx0PU5vbmUpCiAgICAgICAgaWYgdG9rZW46CiAgICAgICAgICAgIGh0dHBfY2xpZW50ID0gQXN5bmNIVFRQQ2xpZW50KCkKICAgICAgICAgICAgdXJsID0gInswfS97MX0vYXV0aC9rZXkvIi5mb3JtYXQob2F1dGgyX3NlcnZpY2VfaG9zdCwgdGVuYW50X2lkKQogICAgICAgICAgICBsb2dnaW5nLmRlYnVnKCJGZXRjaGluZyBwdWJsaWMga2V5IGZyb20gezB9Ii5mb3JtYXQodXJsKSkKICAgICAgICAgICAgcmVzcCA9IHlpZWxkIGh0dHBfY2xpZW50LmZldGNoKHVybCkKCiAgICAgICAgICAgIGlmIG5vdCByZXNwIG9yIG5vdCByZXNwLmNvZGUgPT0gMjAwIG9yIHJlc3AuYm9keSBpcyBOb25lOgogICAgICAgICAgICAgICAgc2VsZi53cml0ZSgiQ291bGQgbm90IGdldCBhdXRoIHNlcnZlciBwdWJsaWMga2V5IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHB1Yl9wZW0gPSByZXNwLmJvZHkKICAgICAgICAgICAgICAgIGxvZ2dpbmcuZGVidWcoIlB1YmxpYyBrZXk6IHswfSIuZm9ybWF0KHB1Yl9wZW0pKQogICAgICAgICAgICAgICAgaGVhZGVyLCBjbGFpbXMgPSBjb3Ntb3MuYXV0aC5vYXV0aDIudmVyaWZ5X3Rva2VuKHRva2VuLCBwdWJfcGVtLCBbJ1JTMjU2J10pCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKCI8YnIgLz48aHIgLz4iKQogICAgICAgICAgICAgICAgc2VsZi53cml0ZShqc29uLmR1bXBzKGhlYWRlcikpCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKCI8YnIgLz48aHIgLz4iKQogICAgICAgICAgICAgICAgc2VsZi53cml0ZShqc29uLmR1bXBzKGNsYWltcykpCgogICAgICAgIHNlbGYud3JpdGUoIjxiciAvPjxociAvPiIpCiAgICAgICAgc2VsZi53cml0ZSgiPGEgaHJlZj0ne30ve30vb2F1dGgyL2F1dGhvcml6ZS8/cmVzcG9uc2VfdHlwZT1jb2RlJnN0YXRlPW15c3RhdGUmcmVzb3VyY2U9bXlyZXNvdXJjZS5jb20vdGVzdCZyZWRpcmVjdF91cmk9e306Ly97fS9vYXV0aDJjbGllbnQvYXV0aG9yaXplLz90YWc9Mic+UmVxdWVzdCBDb2RlPC9hPjxiciAvPiIuZm9ybWF0KG9hdXRoMl9zZXJ2aWNlX2hvc3QsIHNldHRpbmdzLlRFTkFOVF9JRCwgcHJvdG9jb2wsIGhvc3QpKQogICAgICAgIHNlbGYud3JpdGUoIjxhIGhyZWY9J3t9L3t9L29hdXRoMi90b2tlbi8/Y29kZT17fSZzdGF0ZT1teXN0YXRlJmdyYW50X3R5cGU9Y29kZSZyZWRpcmVjdF91cmk9e306Ly97fS9vYXV0aDJjbGllbnQvYXV0aG9yaXplLz90YWc9Mic+UmVxdWVzdCBUb2tlbjwvYT48YnIgLz4iLmZvcm1hdChvYXV0aDJfc2VydmljZV9ob3N0LCB0ZW5hbnRfaWQsIGNvZGUsIHByb3RvY29sLCBob3N0KSkKCiAgICAgICAgc2VsZi5maW5pc2goKQo=')
},
{
'name': '/hivemain.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTYgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IG9zCmltcG9ydCBzeXMKCnRyeToKICAgIGltcG9ydCBzZXR0aW5ncwpleGNlcHQgSW1wb3J0RXJyb3IgYXMgaWU6CiAgICBzeXMucGF0aC5hcHBlbmQob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSkKICAgIGltcG9ydCBzZXR0aW5ncwoKZnJvbSBjb3Ntb3MuYmVlcy5jZWxlcnkud29ya2Zsb3cgaW1wb3J0IGNyZWF0ZV9hcHAKaW1wb3J0IGxvZ2dpbmcKCmZyb20gc3RhcnR1cGhlbHBlcnMgaW1wb3J0ICoKCmRlZiBleGVjdXRlX3dvcmtmbG93KG5hbWUsIHBhcmFtcyk6CiAgICBwcmludCgiUmVjZWl2ZWQgZXhlY3V0ZSB3b3JrZmxvdyByZXF1ZXN0OiIpCiAgICBwcmludChuYW1lKQogICAgcHJpbnQocGFyYW1zKQoKCmRlZiBtYWluKCk6CiAgICBjdXJyZW50X2RpcmVjdG9yeSA9IG9zLmdldGN3ZCgpCiAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKICAgIHByaW50KCJQeXRob24gdmVyc2lvbjogIiArIHN0cihzeXMudmVyc2lvbl9pbmZvKSkKICAgIHByaW50KCJSdW5uaW5nIGZyb20gZGlyZWN0b3J5OiAiICsgY3VycmVudF9kaXJlY3RvcnkpCiAgICBwcmludCgiRmlsZTogIisgX19maWxlX18pCiAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKCiAgICBsb2dnaW5nLmdldExvZ2dlcigpLnNldExldmVsKHNldHRpbmdzLkxPR19MRVZFTCkKCiAgICBvcHRpb25zID0gZ2V0X29wdGlvbnMoKQogICAgaW5pdF9sb2dnaW5nKG9wdGlvbnMpCgogICAgbG9nZ2luZy5pbmZvKCJQeXRob24gdmVyc2lvbjogIiArIHN0cihzeXMudmVyc2lvbl9pbmZvKSkKICAgIGxvZ2dpbmcuaW5mbygiUnVubmluZyBmcm9tIGRpcmVjdG9yeTogIiArIGN1cnJlbnRfZGlyZWN0b3J5KQogICAgbG9nZ2luZy5pbmZvKCJGaWxlOiAiKyBfX2ZpbGVfXykKCiAgICBpZiBub3Qgc2V0dGluZ3MuRU5BQkxFX1dPUktGTE9XX0VOR0lORVM6CiAgICAgICAgbG9nZ2luZy5jcml0aWNhbCgiV29ya2Zsb3cgZW5naW5lcyBhcmUgZGlzYWJsZWQuIFNldCBFTkFCTEVfV09SS0ZMT1dfRU5HSU5FUyB2YWx1ZSBpbiBzZXR0aW5ncy4iKQogICAgICAgIHJldHVybgoKICAgIHN5bmNfZGIgPSBnZXRfc3luY19kYihzZXR0aW5ncy5EQVRBQkFTRV9VUkksIHNldHRpbmdzLkRCX05BTUUpCiAgICBpbml0X3NvdXJjZV9tb2R1bGVzKHN5bmNfZGIpCgogICAgZW5naW5lcyA9IGluaXRfd29ya2Zsb3dfZW5naW5lcygpCgogICAgZm9yIGVuZ2luZV9uYW1lIGluIGVuZ2luZXMua2V5cygpOgogICAgICAgIGVuZ2luZV9kZWYgPSBlbmdpbmVzLmdldChlbmdpbmVfbmFtZSkKICAgICAgICBhcHAgPSBlbmdpbmVfZGVmLmdldCgiZW5naW5lIikKICAgICAgICBsb2dnaW5nLmRlYnVnKGFwcC50YXNrcy5rZXlzKCkpCiAgICAgICAgYXBwLndvcmtlcl9tYWluKCkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigp')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKCnRyeToKICAgIGltcG9ydCBlbmRwb2ludHMKICAgIGltcG9ydCBzZXR0aW5ncwpleGNlcHQgSW1wb3J0RXJyb3IgYXMgaWU6CiAgICBzeXMucGF0aC5hcHBlbmQob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSkKICAgIGltcG9ydCBzZXR0aW5ncwogICAgaW1wb3J0IGVuZHBvaW50cwoKaW1wb3J0IGltcG9ydGxpYgppbXBvcnQgbG9nZ2luZwoKaW1wb3J0IHNpZ25hbAppbXBvcnQgaW1wCmltcG9ydCBtb3Rvcgpmcm9tIHB5bW9uZ28gaW1wb3J0IE1vbmdvQ2xpZW50CmltcG9ydCBncmlkZnMKCmZyb20gY29zbW9zLmFkbWluLmNvbW1hbmRzIGltcG9ydCBDb21tYW5kSGFuZGxlcgpmcm9tIGNvc21vcy5jb21tb24uY29uc3RhbnRzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvcgpmcm9tIGNvc21vcy5yYmFjLnNlcnZpY2UgaW1wb3J0IFJiYWNTZXJ2aWNlCmltcG9ydCBjb3Ntb3Muc2VydmljZS5zZXJ2aWNlbWFpbgoKZnJvbSBjb3Ntb3Muc2VydmljZSBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLnV0aWxzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvciBhcyBtb25pdG9yCgpmcm9tIHN0YXJ0dXBoZWxwZXJzIGltcG9ydCAqCgptb25pdG9yX3dvcmtlciA9IE5vbmUKCgpkZWYgaW5pdF9kYXRhYmFzZShvcHRpb25zKToKICAgIGNsaWVudCA9IG1vdG9yLk1vdG9yQ2xpZW50KG9wdGlvbnMuZGJfdXJpKQogICAgZGIgPSBjbGllbnRbb3B0aW9ucy5kYl9uYW1lXQogICAgcmV0dXJuIGRiCgoKZGVmIGNsZWFudXAoKToKICAgIG1vbml0b3IuY29udGludWVfbW9uaXRvciA9IEZhbHNlCgpkZWYgaW50X3NpZ25hbF9oYW5kbGVyKHNpZ25hbCwgZnJhbWUpOgogICAgbG9nZ2luZy5pbmZvKCdFeGl0aW5nLi4uJykKICAgIGNsZWFudXAoKQogICAgc3lzLmV4aXQoMCkKCgojIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgbW9uaXRvciB3b3JrZXIgdGhyZWFkLCBOT1QgZnJvbSB0aGUgdGhyZWFkIF9fbWFpbl9fIGJlbG93IGlzIHJ1bm5pbmcuCmRlZiBlbmRfbW9uaXRvcl9jYWxsYmFjayhyZWFzb249Tm9uZSk6CiAgICBwYXNzCgoKZGVmIHN0YXJ0X21vbml0b3Iob3B0aW9ucyk6CiAgICBtb25pdG9yLmNvbnRpbnVlX21vbml0b3IgPSBUcnVlCiAgICBtb25pdG9yLnN0YXJ0X29iamVjdF9jaGFuZ2VfbW9uaXRvcihvcHRpb25zLmRiX3Byb2Nlc3Nvcl9lbmRwb2ludCwgb3B0aW9ucy5kYl91cmksIGVuZF9tb25pdG9yX2NhbGxiYWNrKQoKCmRlZiBzdGFydF9zZXJ2aWNlKG9wdGlvbnMpOgogICAgY29zbW9zLnNlcnZpY2Uuc2VydmljZW1haW4uc3RhcnRfd2ViX3NlcnZpY2Uob3B0aW9ucykKCgpkZWYgaW5pdF93ZWJzZXJ2aWNlX29wdGlvbnMoc3luY19kYiwgcG9ydCk6CiAgICBvcHRpb25zID0gZ2V0X29wdGlvbnMoKQogICAgb3B0aW9ucy53ZWJfc2VydmljZV9wb3J0ID0gcG9ydAogICAgb3B0aW9ucy5kYl9wcm9jZXNzb3JfZW5kcG9pbnQgPSBzZXR0aW5ncy5EQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVC5mb3JtYXQocG9ydCkKICAgIG9wdGlvbnMuZGIgPSBpbml0X2RhdGFiYXNlKG9wdGlvbnMpCiAgICBpbml0X2xvZ2dpbmcob3B0aW9ucykKCgogICAgYXBwX2VuZHBvaW50cyA9IGxvYWRfYXBwX2VuZHBvaW50cyhzeW5jX2RiKQogICAgb3B0aW9ucy5lbmRwb2ludHMgPSBhcHBfZW5kcG9pbnRzICsgZW5kcG9pbnRzLkVORF9QT0lOVFMKCiAgICByZXR1cm4gb3B0aW9ucwoKCmRlZiBwcmVwYXJlKHBvcnQpOgogICAgICAgIHN5bmNfZGIgPSBnZXRfc3luY19kYihzZXR0aW5ncy5EQVRBQkFTRV9VUkksIHNldHRpbmdzLkRCX05BTUUpCiAgICAgICAgaW5pdF9zb3VyY2VfbW9kdWxlcyhzeW5jX2RiKQoKICAgICAgICBvcHRpb25zID0gaW5pdF93ZWJzZXJ2aWNlX29wdGlvbnMoc3luY19kYiwgcG9ydCkKCiAgICAgICAgZGJfb2JzZXJ2ZXJzID0gbG9hZF9pbnRlcmNlcHRvcnMoc3luY19kYikKCiAgICAgICAgb3B0aW9ucy5vYnNlcnZlcnMgPSBkYl9vYnNlcnZlcnMgKyBzZXR0aW5ncy5vYnNlcnZlcnMKCiAgICAgICAgcmV0dXJuIG9wdGlvbnMKCmRlZiBtYWluKCk6CiAgICBjdXJyZW50X2RpcmVjdG9yeSA9IG9zLmdldGN3ZCgpCiAgICBwcmludCgiUHl0aG9uIHZlcnNpb246ICIgKyBzdHIoc3lzLnZlcnNpb25faW5mbykpCiAgICBwcmludCgiUnVubmluZyBmcm9tIGRpcmVjdG9yeTogIiArIGN1cnJlbnRfZGlyZWN0b3J5KQoKICAgIGxvZ2dpbmcuZ2V0TG9nZ2VyKCkuc2V0TGV2ZWwoc2V0dGluZ3MuTE9HX0xFVkVMKQoKICAgIHBvcnQgPSBzZXR0aW5ncy5XRUJfU0VSVkVSX0xJU1RFTl9QT1JUCgogICAgaWYgbGVuKHN5cy5hcmd2KSA8IDI6CiAgICAgICAgY29tbWFuZCA9ICJzdGFydC1zZXJ2aWNlIgogICAgZWxzZToKICAgICAgICBjb21tYW5kID0gc3lzLmFyZ3ZbMV0uc3RyaXAoKQoKICAgIGlmIGxlbihzeXMuYXJndikgPj0gMzoKICAgICAgICBwb3J0ID0gaW50KHN5cy5hcmd2WzJdLnN0cmlwKCkpCgogICAgb3B0aW9ucyA9IHByZXBhcmUocG9ydCkKCiAgICBpZiBjb21tYW5kID09ICJzdGFydC1zZXJ2aWNlIjoKCiAgICAgICAgaWYgb3B0aW9ucy5zdGFydF93ZWJfc2VydmljZToKICAgICAgICAgICAgc3RhcnRfc2VydmljZShvcHRpb25zKQogICAgICAgIGlmIG9wdGlvbnMuc3RhcnRfZGJfbW9uaXRvcjoKICAgICAgICAgICBzdGFydF9tb25pdG9yKG9wdGlvbnMpCgogICAgICAgIGlmIHNldHRpbmdzLkVOQUJMRV9XT1JLRkxPV19FTkdJTkVTOgogICAgICAgICAgICBlbmdpbmVzID0gaW5pdF93b3JrZmxvd19lbmdpbmVzKCkKICAgICAgICAgICAgYXBwX2RlZj1lbmdpbmVzWyJ3b3JrZmxvd19lbmdpbmUiXQogICAgICAgICAgICBmbiA9IGFwcF9kZWYuZ2V0KCJleGVjdXRlX3dvcmtmbG93IikKICAgICAgICAgICAgZm4uZGVsYXkoInRlc3QiLCB7Im5hbWUiOiJ0ZXN0In0pCgogICAgICAgIHNpZ25hbC5zaWduYWwoc2lnbmFsLlNJR0lOVCwgaW50X3NpZ25hbF9oYW5kbGVyKQogICAgICAgIHRvcm5hZG8uaW9sb29wLklPTG9vcC5pbnN0YW5jZSgpLnN0YXJ0KCkKICAgIGVsc2U6CiAgICAgICAgY29zbW9zLmFkbWluLmNvbW1hbmRzLmFkbWluX21haW4oKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=')
},
{
'name': '/templates/login.html', 'data': base64.b64decode(b'')
},
{
'name': '/templates/setup.html', 'data': base64.b64decode(b'PCFET0NUWVBFIGh0bWw+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDx0aXRsZT5Mb2dpbjwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyX21hdGVyaWFsLzEuMC4wL2FuZ3VsYXItbWF0ZXJpYWwubWluLmNzcyI+CiAgICA8c3R5bGU+CiAgICAgICAgaHRtbCwKICAgICAgICBib2R5IHsKICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIH0KCiAgICAgICAgaHRtbCB7CiAgICAgICAgICAgIG1hcmdpbjogYXV0bzsKICAgICAgICB9CgogICAgICAgIC5sb2dpbmljb24gewogICAgICAgICAgICBoZWlnaHQ6IDMycHg7CiAgICAgICAgICAgIHdpZHRoOiAzMnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHkgbmctYXBwPSJzZXR1cEFwcCIgbmctY2xvYWs+CjxtZC10YWJzIG1kLWFsaWduLXRhYnM9InRvcCIgZmxleCBsYXlvdXQ9ImNvbHVtbiIgbGF5b3V0LWZpbGw+CiAgICB7JSAgaWYgc2hvd19jcmVhdGVfYWRtaW5fZm9ybSAlfQogICAgPG1kLXRhYiBpZD0idGFiQ3JlYXRlQWRtaW4iPgogICAgICAgIDxtZC10YWItbGFiZWw+Q3JlYXRlIGFkbWluPC9tZC10YWItbGFiZWw+CiAgICAgICAgPG1kLXRhYi1ib2R5PgogICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii4iIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgICAgICAgICA8bWQtY29udGVudCBsYXlvdXQ9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPG1kLWNhcmQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBtZXNzYWdlICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyBtZXNzYWdlIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJuZXh0IiB2YWx1ZT0ie3sgbmV4dCB9fSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz0ibWQtYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5Vc2VybmFtZTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHJlcXVpcmVkIGlkPSJ1c2VybmFtZSIgdHlwZT0idGV4dCIgbmFtZT0idXNlcm5hbWUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz0ibWQtYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QYXNzd29yZDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHJlcXVpcmVkIHR5cGU9InBhc3N3b3JkIiBpZD0icGFzc3dvcmQiIG5hbWU9InBhc3N3b3JkIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBuYW1lPSJjb21tYW5kIiB2YWx1ZT0ibmV3LWFkbWluIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtZC1idXR0b24gbWQtcmFpc2VkIG1kLXByaW1hcnkiPkNyZWF0ZSBuZXcgYWRtaW4KICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkPgogICAgICAgICAgICAgICAgPC9tZC1jb250ZW50PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgPC9tZC10YWItYm9keT4KICAgIDwvbWQtdGFiPgogICAgeyUgZW5kICV9CiAgICA8L21kLXRhYj4KICAgIDxtZC10YWIgaWQ9InRhYlN5c3RlbSI+CiAgICAgICAgPG1kLXRhYi1sYWJlbD5TeXN0ZW08L21kLXRhYi1sYWJlbD4KICAgICAgICA8bWQtdGFiLWJvZHk+CiAgICAgICAgICAgIHslICBpZiBzaG93X3N5c3RlbV9mb3JtICV9CiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iLiIgbWV0aG9kPSJQT1NUIj4KICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPSJzdWJtaXQiIG5hbWU9ImNvbW1hbmQiIHZhbHVlPSJyZXN0YXJ0X3NlcnZpY2UiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQtYnV0dG9uIG1kLXJhaXNlZCBtZC1wcmltYXJ5Ij5SZXN0YXJ0IHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgIDxwPlBsZWFzZSBsb2dpbiBhcyBhZG1pbiB0byB2aWV3IHN5c3RlbSBjb21tYW5kcy48L3A+CiAgICAgICAgICAgIHslIGVuZCAlfQogICAgICAgIDwvbWQtdGFiLWJvZHk+CiAgICA8L21kLXRhYj4KICAgIDxtZC10YWIgaWQ9InRhYlNldHRpbmdzIj4KICAgICAgICA8bWQtdGFiLWxhYmVsPlNldHRpbmdzPC9tZC10YWItbGFiZWw+CiAgICAgICAgPG1kLXRhYi1ib2R5PgogICAgICAgICAgICB7JSAgaWYgc2hvd19zZXR0aW5nc19mb3JtICV9CiAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iLiIgbWV0aG9kPSJQT1NUIj4KICAgICAgICAgICAgICAgIDxkaXY+CiAgICAgICAgICAgICAgICAgICAgeyUgaWYgbWVzc2FnZSAlfQogICAgICAgICAgICAgICAgICAgIDxzcGFuPnt7IG1lc3NhZ2UgfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgeyUgZW5kICV9CiAgICAgICAgICAgICAgICAgICAgeyUgZm9yIGNvbmZpZyBpbiBjb25maWd1cmFibGVfc2V0dGluZ3MgJX0KICAgICAgICAgICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPSJtZC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD57eyBjb25maWdbJ25hbWUnXSB9fTwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGNvbmZpZ1sic2V0dGluZ3MiXVsidHlwZSJdID09ICJ0ZXh0YXJlYSIgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZXh0YXJlYSBpZD0ie3sgY29uZmlnWyduYW1lJ10gfX0iIHR5cGU9InRleHQiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT0ie3sgY29uZmlnWyduYW1lJ10gfX0iPnt7IGNvbmZpZ1sndmFsdWUnXSB9fTwvdGV4dGFyZWE+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJ7eyBjb25maWdbJ25hbWUnXSB9fSIgdHlwZT0idGV4dCIgbmFtZT0ie3sgY29uZmlnWyduYW1lJ10gfX0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT0ie3sgY29uZmlnWyd2YWx1ZSddIH19Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZCAlfQogICAgICAgICAgICAgICAgICAgIDwvbWQtaW5wdXQtY29udGFpbmVyPgogICAgICAgICAgICAgICAgICAgIHslIGVuZCAlfQogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBuYW1lPSJjb21tYW5kIiB2YWx1ZT0iYXBwbHlfc2V0dGluZ3MiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQtYnV0dG9uIG1kLXJhaXNlZCBtZC1wcmltYXJ5Ij5BcHBseSBzZXR0aW5ncwogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgeyUgZWxzZSAlfQogICAgICAgICAgICAgICAgPHA+UGxlYXNlIGxvZ2luIGFzIGFkbWluIHRvIGVkaXQgc2V0dGluZ3MuPC9wPgogICAgICAgICAgICB7JSBlbmQgJX0KICAgICAgICA8L21kLXRhYi1ib2R5PgogICAgPC9tZC10YWI+CjwvbWQtdGFicz4KCgoKPHNjcmlwdCBzcmM9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyanMvMS40LjgvYW5ndWxhci5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cDovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2FuZ3VsYXJqcy8xLjQuOC9hbmd1bGFyLWFuaW1hdGUubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyanMvMS40LjgvYW5ndWxhci1hcmlhLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcmpzLzEuNC44L2FuZ3VsYXItbWVzc2FnZXMubWluLmpzIj48L3NjcmlwdD4KCjwhLS0gQW5ndWxhciBNYXRlcmlhbCBMaWJyYXJ5IC0tPgo8c2NyaXB0IHNyYz0iaHR0cDovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2FuZ3VsYXJfbWF0ZXJpYWwvMS4wLjAvYW5ndWxhci1tYXRlcmlhbC5taW4uanMiPjwvc2NyaXB0PgoKPCEtLSBZb3VyIGFwcGxpY2F0aW9uIGJvb3RzdHJhcCAgLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KICAgIGFuZ3VsYXIubW9kdWxlKCdzZXR1cEFwcCcsIFsnbmdNYXRlcmlhbCddKTsKPC9zY3JpcHQ+CjwvYm9keT4KPC9odG1sPgo=')
}]
