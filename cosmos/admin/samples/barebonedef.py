# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/settings.py', 'data': base64.b64decode(b'')
},
{
'name': '/endpoints.py', 'data': base64.b64decode(b'aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLm9hdXRoMnNlcnZpY2UgaW1wb3J0IE9BdXRoMlNlcnZpY2VIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VhcmNoIGltcG9ydCBTZWFyY2hIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VydmljZWhhbmRsZXIgaW1wb3J0ICoKZnJvbSBjb3Ntb3Muc2VydmljZS5ncmlkZnNzZXJ2aWNlIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuYXBwc2VydmljZSBpbXBvcnQgKgppbXBvcnQgc2V0dGluZ3MKZnJvbSB2aWV3cyBpbXBvcnQgKgoKRU5EX1BPSU5UUyA9IFsKICAgIChyIi9sb2dpbi9nb29nbGUvIiwgR29vZ2xlT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9vcGVuaWQvIiwgT3BlbmlkTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9mYWNlYm9va2dyYXBoLyIsIEZhY2Vib29rR3JhcGhMb2dpbkhhbmRsZXIpLAogICAgKHIiL2xvZ2luL2dpdGh1Yi8iLCBHaXRodWJPQXV0aDJMb2dpbkhhbmRsZXIpLAogICAgKHIiL2xvZ2luLyIsIExvZ2luSGFuZGxlciksCiAgICAociIvbG9nb3V0LyIsIExvZ291dEhhbmRsZXIpLAogICAgKHNldHRpbmdzLk9BVVRIMl9TRVJWSUNFX1VSTCwgT0F1dGgyU2VydmljZUhhbmRsZXIpLAogICAgKHNldHRpbmdzLkFVVEhfUFVCTElDX0tFWV9QRU1fVVJMLCBBdXRoUHVibGljS2V5SGFuZGxlciksCiAgICAociIvb2F1dGgyY2xpZW50Lyg/UDxmdW5jdGlvbj5bXlwvXSspLyIsIE9BdXRoMkR1bW15Q2xpZW50SGFuZGxlciksCiAgICAociIvc2VydmljZS8oLiopIiwgU2VydmljZUhhbmRsZXIpLAogICAgKHIiL3NlYXJjaC8oLiopLyIsIFNlYXJjaEhhbmRsZXIpLAogICAgKHIiL2dyaWRmcy8oLiopIiwgR3JpZEZTU2VydmljZUhhbmRsZXIpLAogICAgKHIiL2FwcGxpY2F0aW9uL2luc3RhbGwvIiwgQXBwSW5zdGFsbEhhbmRsZXIpLAogICAgKHIiL2FwcGxpY2F0aW9uL3BhY2thZ2UvKC4qKSIsIEFwcFBhY2thZ2VIYW5kbGVyKSwKICAgICNUT0RPOiBhdXRoZW50aWNhaW9uIGFuZCBhdXRob3JpemF0aW9uIHJlcXVpcmVkIGZvciBjaGFuZ2UgbW9uaXRvciBhbmQgaGFuZGxlci4KICAgIChyIi9jaGFuZ2Vtb25pdG9yIiwgQ2hhbmdlTW9uaXRvciksCiAgICAociIvaGFuZGxlY2hhbmdlIiwgQ2hhbmdlUmVxdWVzdEhhbmRsZXIpLAogICAgKHIiLyIsICBJbmRleEhhbmRsZXIpLAogICAgKHInLyguKiknLCB0b3JuYWRvLndlYi5TdGF0aWNGaWxlSGFuZGxlciwgeydwYXRoJzogc2V0dGluZ3MuU1RBVElDX1BBVEh9KSwKXQ==')
},
{
'name': '/__init__.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
},
{
'name': '/views.py', 'data': base64.b64decode(b'aW1wb3J0IGxvZ2dpbmcKCmltcG9ydCBzZXR0aW5ncwpmcm9tIHRvcm5hZG8uaHR0cGNsaWVudCBpbXBvcnQgQXN5bmNIVFRQQ2xpZW50CgppbXBvcnQgY29zbW9zCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgQmFzaWNMb2dpbkhhbmRsZXIKCl9fYXV0aG9yX18gPSAnTWFydWYgTWFuaXJ1enphbWFuJwoKaW1wb3J0IHRvcm5hZG8KZnJvbSB0b3JuYWRvIGltcG9ydCBnZW4KaW1wb3J0IGpzb24KCmZyb20gY29zbW9zLnNlcnZpY2UucmVxdWVzdGhhbmRsZXIgaW1wb3J0IFJlcXVlc3RIYW5kbGVyCgoKY2xhc3MgSW5kZXhIYW5kbGVyKFJlcXVlc3RIYW5kbGVyKToKICAgIEBnZW4uY29yb3V0aW5lCiAgICBkZWYgZ2V0KHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLklOREVYX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIHNlbGYud3JpdGUoZi5yZWFkKCkpCiAgICAgICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICAgICAgcmFpc2UgdG9ybmFkby53ZWIuSFRUUEVycm9yKDQwNCwgIkZpbGUgbm90IGZvdW5kIikKCgpjbGFzcyBMb2dpbkhhbmRsZXIoQmFzaWNMb2dpbkhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZik6CiAgICAgICAgbmV4dCA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJuZXh0IiwgJy8nKQogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLkxPR0lOX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIGxvZ2luX3RlbXBsYXRlID0gZi5yZWFkKCkKICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dfbG9naW5fd2luZG93KG5leHQsIGxvZ2luX3RlbXBsYXRlPWxvZ2luX3RlbXBsYXRlKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgoKY2xhc3MgQXV0aFB1YmxpY0tleUhhbmRsZXIoUmVxdWVzdEhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZiwgdGVuYW50X2lkKToKICAgICAgICBzZWxmLnNldF9oZWFkZXIoIkNvbnRlbnQtVHlwZSIsICdhcHBsaWNhdGlvbi94LXBlbS1maWxlJykKICAgICAgICBzZWxmLnNldF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDsgZmlsZW5hbWU9JXNfcHViLnBlbScgJSB0ZW5hbnRfaWQpCiAgICAgICAgc2VsZi53cml0ZShzZXR0aW5ncy5PQVVUSDJfUFVCTElDX0tFWV9QRU0pCgpjbGFzcyBPQXV0aDJEdW1teUNsaWVudEhhbmRsZXIoUmVxdWVzdEhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZiwgZnVuY3Rpb24pOgogICAgICAgIHRlbmFudF9pZCA9IHNldHRpbmdzLlRFTkFOVF9JRAogICAgICAgIHNlbGYud3JpdGUoc2VsZi5yZXF1ZXN0LnVyaSArICIgPGJyIC8+IiArIGZ1bmN0aW9uICsgIjxiciAvPiIpCiAgICAgICAgcGFyYW1zID0ganNvbi5kdW1wcyh7azogc2VsZi5nZXRfYXJndW1lbnQoaykgZm9yIGsgaW4gc2VsZi5yZXF1ZXN0LmFyZ3VtZW50c30pCiAgICAgICAgc2VsZi53cml0ZShwYXJhbXMpCiAgICAgICAgY29kZSA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJjb2RlIiwgInRlbXAiKQogICAgICAgIHRva2VuID0gc2VsZi5nZXRfYXJndW1lbnQoImFjY2Vzc190b2tlbiIsIGRlZmF1bHQ9Tm9uZSkKICAgICAgICBpZiB0b2tlbjoKICAgICAgICAgICAgaHR0cF9jbGllbnQgPSBBc3luY0hUVFBDbGllbnQoKQogICAgICAgICAgICByZXNwID0geWllbGQgaHR0cF9jbGllbnQuZmV0Y2goInswfTovL3sxfS97Mn0vYXV0aC9rZXkvIi5mb3JtYXQoc2VsZi5yZXF1ZXN0LnByb3RvY29sLCBzZWxmLnJlcXVlc3QuaG9zdCx0ZW5hbnRfaWQpKQoKICAgICAgICAgICAgaWYgbm90IHJlc3Agb3Igbm90IHJlc3AuY29kZSA9PSAyMDAgb3IgcmVzcC5ib2R5IGlzIE5vbmU6CiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKCJDb3VsZCBub3QgZ2V0IGF1dGggc2VydmVyIHB1YmxpYyBrZXkiKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHViX3BlbSA9IHJlc3AuYm9keQogICAgICAgICAgICAgICAgbG9nZ2luZy5kZWJ1ZygiUHVibGljIGtleTogezB9Ii5mb3JtYXQocHViX3BlbSkpCiAgICAgICAgICAgICAgICBoZWFkZXIsIGNsYWltcyA9IGNvc21vcy5hdXRoLm9hdXRoMi52ZXJpZnlfdG9rZW4odG9rZW4sIHB1Yl9wZW0sIFsnUlMyNTYnXSkKICAgICAgICAgICAgICAgIHNlbGYud3JpdGUoIjxiciAvPjxociAvPiIpCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKGpzb24uZHVtcHMoaGVhZGVyKSkKICAgICAgICAgICAgICAgIHNlbGYud3JpdGUoIjxiciAvPjxociAvPiIpCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKGpzb24uZHVtcHMoY2xhaW1zKSkKCiAgICAgICAgc2VsZi53cml0ZSgiPGJyIC8+PGhyIC8+IikKICAgICAgICBzZWxmLndyaXRlKCI8YSBocmVmPScve30vb2F1dGgyL2F1dGhvcml6ZS8/cmVzcG9uc2VfdHlwZT1jb2RlJnN0YXRlPW15c3RhdGUmcmVzb3VyY2U9bXlyZXNvdXJjZS5jb20vdGVzdCZyZWRpcmVjdF91cmk9e306Ly97fS9vYXV0aDJjbGllbnQvYXV0aG9yaXplLz90YWc9Mic+UmVxdWVzdCBDb2RlPC9hPjxiciAvPiIuZm9ybWF0KHNldHRpbmdzLlRFTkFOVF9JRCwgc2VsZi5yZXF1ZXN0LnByb3RvY29sLCBzZWxmLnJlcXVlc3QuaG9zdCkpCiAgICAgICAgc2VsZi53cml0ZSgiPGEgaHJlZj0nL3t9L29hdXRoMi90b2tlbi8/Y29kZT17fSZzdGF0ZT1teXN0YXRlJmdyYW50X3R5cGU9Y29kZSZyZWRpcmVjdF91cmk9e306Ly97fS9vYXV0aDJjbGllbnQvYXV0aG9yaXplLz90YWc9Mic+UmVxdWVzdCBUb2tlbjwvYT48YnIgLz4iLmZvcm1hdCh0ZW5hbnRfaWQsIGNvZGUsIHNlbGYucmVxdWVzdC5wcm90b2NvbCwgc2VsZi5yZXF1ZXN0Lmhvc3QpKQoKICAgICAgICBzZWxmLmZpbmlzaCgpCg==')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode(b'')
},
{
'name': '/templates/login.html', 'data': base64.b64decode(b'')
}]
