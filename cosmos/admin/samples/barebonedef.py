# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/settings.py', 'data': base64.b64decode('aW1wb3J0IG9zCmltcG9ydCBsb2dnaW5nCgpERUJVRyA9IFRydWUKREJfSE9TVCA9ICIxMjcuMC4wLjEiCkRCX05BTUUgPSAiY29zbW9zIgpEQl9QT1JUID0gMjcwMTcKCkRCX1VTRVJfTkFNRSA9IE5vbmUKREJfVVNFUl9QQVNTV09SRCA9IE5vbmUKCgpMT0dfREJfSE9TVCA9ICIxMjcuMC4wLjEiCkxPR19EQl9OQU1FID0gImNvc21vcyIKTE9HX0NPTF9OQU1FID0gImxvZyIKTE9HX0RCX1BPUlQgPSAyNzAxNwpMT0dfTEVWRUwgPSBsb2dnaW5nLkRFQlVHCgpMT0dfREJfVVNFUl9OQU1FID0gTm9uZQpMT0dfREJfVVNFUl9QQVNTV09SRCA9IE5vbmUKClNUQVRJQ19QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJhcHAiKQpURU1QTEFURV9QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJ0ZW1wbGF0ZXMiKQpJTkRFWF9IVE1MX1BBVEggPSBvcy5wYXRoLmpvaW4ob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSwgImFwcC9pbmRleC5odG1sIikKCldFQl9TRVJWRVJfTElTVEVOX1BPUlQgPSA4MDgwCgpEQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVCA9ICJodHRwOi8vbG9jYWxob3N0OnswfS9oYW5kbGVjaGFuZ2UiCgojVE9ETzogWW91IE1VU1QgY2hhbmdlIHRoZSBmb2xsb3dpbmcgdmFsdWVzCkNPT0tJRV9TRUNSRVQgPSAiKzgvWXF0RVVRZmlZTFVkTzJpSjJPeXpISEZTQURFdUt2S1l3RnFlbUZhcz0iCkhNQUNfS0VZID0gIis4L1lxdEVVUWZpWUxVZE8yaUoyT3l6SElGU0FLRXVLdktZd0ZxZW1GYXM9IgoKZmFjZWJvb2tfY2xpZW50X2lkPScwMDAwMDAwMDAwMDAwMDAnCmZhY2Vib29rX2NsaWVudF9zZWNyZXQ9JzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJwpmYWNlYm9va19zY29wZSA9ICAiZW1haWwscHVibGljX3Byb2ZpbGUsdXNlcl9mcmllbmRzIgpmYWNlYm9va19yZWRpcmVjdF91cmkgPSBOb25lCgoKIiIiCiMgcGlwIGluc3RhbGwgcHljcnlwdG8gZm9yIENyeXB0bwojIHRoZW4gZnJvbSBweXRob24gY29uc29sZSBnZW5lcmF0ZSBwcml2YXRlX3BlbSBhbmQgcHVibGljX3BlbiBhbmQgYXNzaWduIHRvIFNFUlZJQ0VfUFJJVkFURV9LRVkgYW5kIFNFUlZJQ0VfUFVCTElDX0tFWQppbXBvcnQgIENyeXB0by5QdWJsaWNLZXkuUlNBIGFzIFJTQQprZXkgPSBSU0EuZ2VuZXJhdGUoMjA0OCkKcHJpdmF0ZV9wZW0gPSBrZXkuZXhwb3J0S2V5KCkKcHVibGljX3BlbSA9IGtleS5wdWJsaWNrZXkoKS5leHBvcnRLZXkoKQoKIiIiCiMgVE9ETzogc2V0IGJvdGgga2V5cyBiZWxvdy4gUHJpdmF0ZSBrZXkgYmFja3VwIG11c3QgYmUga2VwdCBpbiBhIHNlY3VyZSBwbGFjZSBhbmQgc2hvdWxkIG5ldmVyIGJlIHNoYXJlZAojIElmIHByaXZhdGUga2V5IGlzIGNvbXByb21pc2VkLCB0aGlzIHNlcnZpY2UgYW5kIGFsbCBvdGhlciBzZXJ2aWNlcyB0aGF0IHRydXN0IHRoaXMgd2lsbCBiZSBjb21wcm9taXNlZAojIFB1YmxpYyBrZXkgaXMgdG8gc2hhcmUgcHVibGljbHkgZm9yIHZlcmlmaWNhdGlvbgoKU0VSVklDRV9QUklWQVRFX0tFWSA9IE5vbmUKU0VSVklDRV9QVUJMSUNfS0VZID0gTm9uZQoKZGlyZWN0b3J5X2xpc3RpbmdfYWxsb3dlZCA9IFRydWUKCkNPTkZJR1VSRV9MT0cgPSBGYWxzZQpTVEFSVF9XRUJfU0VSVkVSID0gVHJ1ZQpTVEFSVF9PQkpFQ1RfQ0hBTkdFX01PTklUT1IgPSBGYWxzZQoKR09PR0xFX09BVVRIMl9DTElFTlRfSUQgPSBOb25lCkdPT0dMRV9PQVVUSDJfQ0xJRU5UX1NFQ1JFVCA9IE5vbmUKR09PR0xFX09BVVRIMl9SRURJUkVDVF9VUkkgPSBOb25lCgpHSVRIVUJfQ0xJRU5UX0lEID0gTm9uZQpHSVRIVUJfQ0xJRU5UX1NFQ1JFVCA9IE5vbmUKR0lUSFVCX09BVVRIMl9DQUxMQkFDS19VUkkgPSBOb25lCgpVU0VSU19JREVOVElUWV9DT0xfTkFNRSA9ICJjb3Ntb3MudXNlcnMuaWRlbnRpdHkiClVTRVJTX1BST0ZJTEVfRkJfQ09MX05BTUUgPSAiY29zbW9zLnVzZXJzLnByb2ZpbGUuZmFjZWJvb2siClVTRVJTX0ZCX0ZSSUVORFNfQ09MX05BTUUgPSAiY29zbW9zLnVzZXJzLmZhY2Vib29rLmZyaWVuZHMiCgpsb2dpbl91cmwgPSAiL2xvZ2luLyIKCm9ic2VydmVycyA9IFtdCgp0cnk6CiAgICBmcm9tIGxvY2FsX3NldHRpbmdzIGltcG9ydCAqCmV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgIHBhc3MKCmlmIERCX1VTRVJfTkFNRSBhbmQgREJfVVNFUl9QQVNTV09SRDoKICAgIERBVEFCQVNFX1VSSSA9ICJtb25nb2RiOi8vIisgREJfVVNFUl9OQU1FICsgIjoiKyBEQl9VU0VSX1BBU1NXT1JEICsiQCIrIERCX0hPU1QrIjoiK3N0cihEQl9QT1JUKSsiLyIrREJfTkFNRQplbHNlOgogICAgREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iK0RCX0hPU1QrIjoiK3N0cihEQl9QT1JUKQoKaWYgTE9HX0RCX1VTRVJfTkFNRSBhbmQgTE9HX0RCX1VTRVJfUEFTU1dPUkQ6CiAgICBMT0dfREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iKyBMT0dfREJfVVNFUl9OQU1FICsgIjoiKyBMT0dfREJfVVNFUl9QQVNTV09SRCArIkAiKyBMT0dfREJfSE9TVCsiOiIrc3RyKExPR19EQl9QT1JUKSsiLyIrTE9HX0RCX05BTUUKZWxzZToKICAgIExPR19EQVRBQkFTRV9VUkkgPSAibW9uZ29kYjovLyIrIExPR19EQl9IT1NUKyI6IitzdHIoTE9HX0RCX1BPUlQpCgoKR09PR0xFX09BVVRIMl9TRVRUSU5HUyA9IHsia2V5IjogR09PR0xFX09BVVRIMl9DTElFTlRfSUQsICJzZWNyZXQiOiBHT09HTEVfT0FVVEgyX0NMSUVOVF9TRUNSRVQsICJyZWRpcmVjdF91cmkiOiBHT09HTEVfT0FVVEgyX1JFRElSRUNUX1VSSX0KCkdJVEhVQl9PQVVUSF9TRVRUSU5HUyA9IHsiY2xpZW50X2lkIjogR0lUSFVCX0NMSUVOVF9JRCwgInNlY3JldCI6IEdJVEhVQl9DTElFTlRfU0VDUkVULCAicmVkaXJlY3RfdXJpIjogR0lUSFVCX09BVVRIMl9DQUxMQkFDS19VUkl9Cg==')
},
{
'name': '/endpoints.py', 'data': base64.b64decode('aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLnNlYXJjaCBpbXBvcnQgU2VhcmNoSGFuZGxlcgpmcm9tIGNvc21vcy5zZXJ2aWNlLnNlcnZpY2VoYW5kbGVyIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuZ3JpZGZzc2VydmljZSBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLmFwcHNlcnZpY2UgaW1wb3J0ICoKZnJvbSB2aWV3cyBpbXBvcnQgSW5kZXhIYW5kbGVyCmltcG9ydCBzZXR0aW5ncwoKCkVORF9QT0lOVFMgPSBbCiAgICAociIvbG9naW4vZ29vZ2xlLyIsIEdvb2dsZU9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vb3BlbmlkLyIsIE9wZW5pZExvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vZmFjZWJvb2tncmFwaC8iLCBGYWNlYm9va0dyYXBoTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9naXRodWIvIiwgR2l0aHViT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi8iLCBMb2dpbkhhbmRsZXIpLAogICAgKHIiL2xvZ291dC8iLCBMb2dvdXRIYW5kbGVyKSwKICAgIChyIi9zZXJ2aWNlLyguKikiLCBTZXJ2aWNlSGFuZGxlciksCiAgICAociIvc2VhcmNoLyguKikvIiwgU2VhcmNoSGFuZGxlciksCiAgICAociIvZ3JpZGZzLyguKikiLCBHcmlkRlNTZXJ2aWNlSGFuZGxlciksCiAgICAociIvYXBwbGljYXRpb24vaW5zdGFsbC8iLCBBcHBJbnN0YWxsSGFuZGxlciksCiAgICAociIvYXBwbGljYXRpb24vcGFja2FnZS8oLiopIiwgQXBwUGFja2FnZUhhbmRsZXIpLAogICAgI1RPRE86IGF1dGhlbnRpY2Fpb24gYW5kIGF1dGhvcml6YXRpb24gcmVxdWlyZWQgZm9yIGNoYW5nZSBtb25pdG9yIGFuZCBoYW5kbGVyLgogICAgKHIiL2NoYW5nZW1vbml0b3IiLCBDaGFuZ2VNb25pdG9yKSwKICAgIChyIi9oYW5kbGVjaGFuZ2UiLCBDaGFuZ2VSZXF1ZXN0SGFuZGxlciksCiAgICAociIvIiwgIEluZGV4SGFuZGxlciksCiAgICAocicvKC4qKScsIHRvcm5hZG8ud2ViLlN0YXRpY0ZpbGVIYW5kbGVyLCB7J3BhdGgnOiBzZXR0aW5ncy5TVEFUSUNfUEFUSH0pLApd')
},
{
'name': '/__init__.py', 'data': base64.b64decode('IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
},
{
'name': '/views.py', 'data': base64.b64decode('aW1wb3J0IHNldHRpbmdzCgpfX2F1dGhvcl9fID0gJ01hcnVmIE1hbmlydXp6YW1hbicKCmltcG9ydCB0b3JuYWRvCmZyb20gdG9ybmFkbyBpbXBvcnQgZ2VuCgpmcm9tIGNvc21vcy5zZXJ2aWNlLnJlcXVlc3RoYW5kbGVyIGltcG9ydCBSZXF1ZXN0SGFuZGxlcgoKCmNsYXNzIEluZGV4SGFuZGxlcihSZXF1ZXN0SGFuZGxlcik6CiAgICBAZ2VuLmNvcm91dGluZQogICAgZGVmIGdldChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihzZXR0aW5ncy5JTkRFWF9IVE1MX1BBVEgpIGFzIGY6CiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKGYucmVhZCgpKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgo=')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode('IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IGltcG9ydGxpYgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IHNpZ25hbAppbXBvcnQgaW1wCmltcG9ydCBtb3Rvcgpmcm9tIHB5bW9uZ28gaW1wb3J0IE1vbmdvQ2xpZW50CmltcG9ydCBncmlkZnMKCmZyb20gY29zbW9zLmFkbWluLmNvbW1hbmRzIGltcG9ydCBDb21tYW5kSGFuZGxlcgpmcm9tIGNvc21vcy5jb21tb24uY29uc3RhbnRzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvcgpmcm9tIGNvc21vcy5yYmFjLnNlcnZpY2UgaW1wb3J0IFJiYWNTZXJ2aWNlCmltcG9ydCBzZXR0aW5ncwppbXBvcnQgY29zbW9zLnNlcnZpY2Uuc2VydmljZW1haW4KaW1wb3J0IGVuZHBvaW50cwpmcm9tIGNvc21vcy5zZXJ2aWNlIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UudXRpbHMgaW1wb3J0ICoKaW1wb3J0IGNvc21vcy5kYXRhbW9uaXRvci5tb25pdG9yIGFzIG1vbml0b3IKCgptb25pdG9yX3dvcmtlciA9IE5vbmUKZGIgPSBOb25lCgoKZGVmIGluaXRfZGF0YWJhc2Uob3B0aW9ucyk6CiAgICBjbGllbnQgPSBtb3Rvci5Nb3RvckNsaWVudChvcHRpb25zLmRiX3VyaSkKICAgIGRiID0gY2xpZW50W29wdGlvbnMuZGJfbmFtZV0KCiAgICBsb2FkZXIgPSBjb3Ntb3Muc2VydmljZS5Cb290TG9hZGVyKCkKCiAgICBpZiBvcHRpb25zLmNvbmZpZ19sb2c6CiAgICAgICAgbG9hZGVyLmNvbmZpZ19tb25nb2xvZyhvcHRpb25zLmxvZ19kYl91cmksIG9wdGlvbnMubG9nX2RiX25hbWUsIG9wdGlvbnMubG9nX2NvbF9uYW1lLCAgb3B0aW9ucy5sb2dfbGV2ZWwpCiAgICBlbHNlOgogICAgICAgIGxvZ2dpbmcuZ2V0TG9nZ2VyKCkuc2V0TGV2ZWwob3B0aW9ucy5sb2dfbGV2ZWwpCgogICAgcmV0dXJuIGRiCgoKZGVmIGNsZWFudXAoKToKICAgIG1vbml0b3IuY29udGludWVfbW9uaXRvciA9IEZhbHNlCgpkZWYgaW50X3NpZ25hbF9oYW5kbGVyKHNpZ25hbCwgZnJhbWUpOgogICAgbG9nZ2luZy5pbmZvKCdFeGl0aW5nLi4uJykKICAgIGNsZWFudXAoKQogICAgc3lzLmV4aXQoMCkKCgojIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgbW9uaXRvciB3b3JrZXIgdGhyZWFkLCBOT1QgZnJvbSB0aGUgdGhyZWFkIF9fbWFpbl9fIGJlbG93IGlzIHJ1bm5pbmcuCmRlZiBlbmRfbW9uaXRvcl9jYWxsYmFjayhyZWFzb249Tm9uZSk6CiAgICBwYXNzCgoKZGVmIHN0YXJ0X21vbml0b3Iob3B0aW9ucyk6CiAgICBtb25pdG9yLmNvbnRpbnVlX21vbml0b3IgPSBUcnVlCiAgICBtb25pdG9yLnN0YXJ0X29iamVjdF9jaGFuZ2VfbW9uaXRvcihvcHRpb25zLmRiX3Byb2Nlc3Nvcl9lbmRwb2ludCwgb3B0aW9ucy5kYl91cmksIGVuZF9tb25pdG9yX2NhbGxiYWNrKQoKCmRlZiBzdGFydF9zZXJ2aWNlKG9wdGlvbnMpOgogICAgY29zbW9zLnNlcnZpY2Uuc2VydmljZW1haW4uc3RhcnRfd2ViX3NlcnZpY2Uob3B0aW9ucykKCgpkZWYgbG9hZF9weXRob25fbW9kdWxlKGZ1bGxuYW1lLCBjb2RlKToKICAgIHB5X21vZHVsZSA9IGltcC5uZXdfbW9kdWxlKGZ1bGxuYW1lKQogICAgZXhlYyBjb2RlIGluIHB5X21vZHVsZS5fX2RpY3RfXwogICAgc3lzLm1vZHVsZXNbZnVsbG5hbWVdID0gcHlfbW9kdWxlCiAgICByZXR1cm4gcHlfbW9kdWxlCgpkZWYgZ2V0X2dyaWRfZmlsZV9jb250ZW50KGRiLCBmaWxlX2lkKToKICAgIGZzID0gZ3JpZGZzLkdyaWRGUyhkYikKICAgIF9pZCA9IE9iamVjdElkKGZpbGVfaWQpCiAgICByZXR1cm4gZnMuZ2V0KF9pZCkucmVhZCgpCgojVE9ETzogYWRkIHNpZ25pbmcgbWVjaGFuaXNtIHRvIGF2b2lkIGxvYWRpbmcgdW50cnVzdGVkIGNvZGUKZGVmIGxvYWRfc291cmNlX21vZHVsZShkYiwgc291cmNlX21vZHVsZSk6CiAgICBtb2R1bGVfbmFtZSA9IHNvdXJjZV9tb2R1bGUuZ2V0KCJmdWxsbmFtZSIpCiAgICBtb2R1bGVfdHlwZSA9IHNvdXJjZV9tb2R1bGUuZ2V0KCJ0eXBlIikKICAgIHRyeToKICAgICAgICBwcmludCAiTG9hZGluZyBzb3VyY2UgbW9kdWxlICIgKyBtb2R1bGVfbmFtZSArICIgIiArIG1vZHVsZV90eXBlICsgIlxuIgogICAgICAgIHByaW50ICItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIgogICAgICAgIHNvdXJjZV9jb2RlID0gTm9uZQoKICAgICAgICBpZiBtb2R1bGVfdHlwZSA9PSBDT1NNT1NfU09VUkNFX01PRFVMRVNfVFlQRV9FTUJFRERFRDoKICAgICAgICAgICAgc291cmNlX2NvZGUgPSBzb3VyY2VfbW9kdWxlLmdldCgiY29kZSIpCgogICAgICAgIGlmIG1vZHVsZV90eXBlID09IENPU01PU19TT1VSQ0VfTU9EVUxFU19UWVBFX0dSSURGSUxFOgogICAgICAgICAgICBmaWxlX2lkID0gc291cmNlX21vZHVsZS5nZXQoImZpbGVfaWQiKQogICAgICAgICAgICBzb3VyY2VfY29kZSA9IGdldF9ncmlkX2ZpbGVfY29udGVudChkYiwgZmlsZV9pZCkKCiAgICAgICAgaWYoc291cmNlX2NvZGUpOgogICAgICAgICAgICBwcmludCBzb3VyY2VfY29kZQogICAgICAgICAgICBsb2FkX3B5dGhvbl9tb2R1bGUobW9kdWxlX25hbWUsIHNvdXJjZV9jb2RlKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoKICAgICAgICBwcmludCAiQ291bGQgbm90IGxvYWQgc291cmNlIG1vZHVsZSAiICsgc3RyKG1vZHVsZV9uYW1lKSArIjogIiArIHN0cihleCkKCiAgICBwcmludCAiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiIKCgpkZWYgbG9hZF9zb3VyY2VfbW9kdWxlcyhkYik6CiAgICBjb2xsZWN0aW9uX25hbWUgPSBDT1NNT1NfU09VUkNFX01PRFVMRVNfT0JKRUNUX05BTUUKICAgIHNvdXJjZV9tb2R1bGVzID0gW10KCiAgICBjdXJzb3IgPSBkYltjb2xsZWN0aW9uX25hbWVdLmZpbmQoKQogICAgZm9yIHNvdXJjZV9tb2R1bGUgaW4gY3Vyc29yOgogICAgICAgIHRyeToKICAgICAgICAgICAgc291cmNlX21vZHVsZXMuYXBwZW5kKHNvdXJjZV9tb2R1bGUpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoKICAgICAgICAgICAgcHJpbnQgIlVuYWJsZSB0byBsb2FkIGFwcCByZXF1ZXN0IGhhbmRsZXIuIiArIHN0cihleCkKCiAgICByZXR1cm4gc291cmNlX21vZHVsZXMKCgpkZWYgZ2V0X3N5bmNfZGIoZGJfdXJpLCBkYl9uYW1lKToKICAgIGNsaWVudCA9IE1vbmdvQ2xpZW50KGRiX3VyaSkKICAgIHJldHVybiBjbGllbnRbZGJfbmFtZV0KCgpkZWYgbG9hZF9hcHBfZW5kcG9pbnRzKGRiKToKICAgIGNvbGxlY3Rpb25fbmFtZSA9IENPU01PU19BUFBMSUNBVElPTl9FTkRQT0lOVF9MSVNUX09CSkVDVF9OQU1FCiAgICBhcHBfZW5mcG9pbnRzID0gW10KCiAgICBjdXJzb3IgPSBkYltjb2xsZWN0aW9uX25hbWVdLmZpbmQoKQogICAgZm9yIGVuZHBvaW50X2RlZiBpbiBjdXJzb3I6CiAgICAgICAgdHJ5OgogICAgICAgICAgICBwcmludCAiTG9hZGluZyAiICsgZW5kcG9pbnRfZGVmWyJoYW5kbGVyX21vZHVsZSJdICsgIi4iICtlbmRwb2ludF9kZWZbImhhbmRsZXJfbmFtZSJdCiAgICAgICAgICAgIGFwcF9tb2R1bGUgPSBpbXBvcnRsaWIuaW1wb3J0X21vZHVsZShlbmRwb2ludF9kZWZbImhhbmRsZXJfbW9kdWxlIl0pCiAgICAgICAgICAgIGdsb2JhbHMoKS51cGRhdGUoYXBwX21vZHVsZS5fX2RpY3RfXykKICAgICAgICAgICAgaGFuZGxlcl9mdW5jID0gZ2V0YXR0cihhcHBfbW9kdWxlLCBlbmRwb2ludF9kZWZbImhhbmRsZXJfbmFtZSJdKQogICAgICAgICAgICBhcHBfZW5mcG9pbnRzLmFwcGVuZCgoc3RyKGVuZHBvaW50X2RlZlsidXJpX3BhdHRlcm4iXSksIGhhbmRsZXJfZnVuYykpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBleDoKICAgICAgICAgICAgcHJpbnQgIlVuYWJsZSB0byBsb2FkIGFwcCByZXF1ZXN0IGhhbmRsZXIuIiArIHN0cihleCkKCiAgICByZXR1cm4gYXBwX2VuZnBvaW50cwoKCmRlZiBsb2FkX2ludGVyY2VwdG9ycyhkYik6CiAgICBjb2xsZWN0aW9uX25hbWUgPSBDT1NNT1NfSU5URVJDRVBUT1JfT0JKRUNUX05BTUUKICAgIGludGVyY2VwdG9ycyA9IFtdCgogICAgY3Vyc29yID0gZGJbY29sbGVjdGlvbl9uYW1lXS5maW5kKCkKICAgIGZvciBpbnRlcmNlcHRvcl9kZWYgaW4gY3Vyc29yOgogICAgICAgIHRyeToKICAgICAgICAgICAgcHJpbnQgIkxvYWRpbmcgaW50ZXJjZXB0b3IiICsgaW50ZXJjZXB0b3JfZGVmWyJpbnRlcmNlcHRvcl9tb2R1bGUiXSArICIuIiArIGludGVyY2VwdG9yX2RlZlsiaW50ZXJjZXB0b3JfbmFtZSJdCgogICAgICAgICAgICBhcHBfbW9kdWxlID0gaW1wb3J0bGliLmltcG9ydF9tb2R1bGUoaW50ZXJjZXB0b3JfZGVmWyJpbnRlcmNlcHRvcl9tb2R1bGUiXSkKICAgICAgICAgICAgaW50ZXJjZXB0b3JfZnVuYyA9IGdldGF0dHIoYXBwX21vZHVsZSwgaW50ZXJjZXB0b3JfZGVmWyJpbnRlcmNlcHRvcl9uYW1lIl0pCgogICAgICAgICAgICBhY2Nlc3MgPSBpbnRlcmNlcHRvcl9kZWZbImFjY2VzcyJdCiAgICAgICAgICAgIGludGVyY2VwdG9yX3R5cGUgPSBpbnRlcmNlcHRvcl9kZWZbImludGVyY2VwdG9yX3R5cGUiXQogICAgICAgICAgICBvYmplY3RfbmFtZSA9IGludGVyY2VwdG9yX2RlZlsib2JqZWN0X25hbWUiXQoKICAgICAgICAgICAgaW50ZXJjZXB0b3JzLmFwcGVuZCgKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAib2JqZWN0X25hbWUiOiBvYmplY3RfbmFtZSwKICAgICAgICAgICAgICAgICAgICAiZnVuY3Rpb24iOiBpbnRlcmNlcHRvcl9mdW5jLAogICAgICAgICAgICAgICAgICAgICJhY2Nlc3MiOiBhY2Nlc3MsCiAgICAgICAgICAgICAgICAgICAgInR5cGUiOiBpbnRlcmNlcHRvcl90eXBlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGV4OgogICAgICAgICAgICBwcmludCAiVW5hYmxlIHRvIGxvYWQgaW50ZXJjZXB0b3IuIiArIHN0cihleCkKCiAgICByZXR1cm4gaW50ZXJjZXB0b3JzCgoKZGVmIGdldF9vcHRpb25zKHN5bmNfZGIsIHBvcnQpOgogICAgc291cmNlX3Jvb3QgPSBvcy5wYXRoLmRpcm5hbWUob3MucGF0aC5yZWFscGF0aChfX2ZpbGVfXykpCiAgICBvcHRpb25zID0gT3B0aW9ucygqKmRpY3QoCiAgICAgICAgZGJfdXJpPXNldHRpbmdzLkRBVEFCQVNFX1VSSSwKICAgICAgICBkYl9uYW1lPXNldHRpbmdzLkRCX05BTUUsCiAgICAgICAgbG9nX2RiX3VyaT1zZXR0aW5ncy5MT0dfREFUQUJBU0VfVVJJLAogICAgICAgIGxvZ19kYl9uYW1lPXNldHRpbmdzLkxPR19EQl9OQU1FLAogICAgICAgIGxvZ19jb2xfbmFtZT1zZXR0aW5ncy5MT0dfQ09MX05BTUUsCiAgICAgICAgbG9nX2xldmVsPXNldHRpbmdzLkxPR19MRVZFTCwKICAgICAgICBjb25maWdfbG9nPXNldHRpbmdzLkNPTkZJR1VSRV9MT0csCiAgICAgICAgZGJfcHJvY2Vzc29yX2VuZHBvaW50PXNldHRpbmdzLkRCX0NIQU5HRV9QUk9DRVNTT1JfRU5EUE9JTlRfRk9STUFULmZvcm1hdChwb3J0KSwKICAgICAgICBvYnNlcnZlcnM9c2V0dGluZ3Mub2JzZXJ2ZXJzLAogICAgICAgIHdlYl9zZXJ2aWNlX3BvcnQ9cG9ydCwKICAgICAgICBsb2dpbl91cmw9c2V0dGluZ3MubG9naW5fdXJsLAogICAgICAgIGNvb2tpZV9zZWNyZXQ9c2V0dGluZ3MuQ09PS0lFX1NFQ1JFVCwKICAgICAgICBobWFjX2tleT1zZXR0aW5ncy5ITUFDX0tFWSwKICAgICAgICB4aGVhZGVycz1UcnVlLAogICAgICAgIHRlbXBsYXRlX3BhdGg9c2V0dGluZ3MuVEVNUExBVEVfUEFUSCwKICAgICAgICBkZWJ1Zz1zZXR0aW5ncy5ERUJVRywKICAgICAgICBmYWNlYm9va19hcGlfa2V5PXNldHRpbmdzLmZhY2Vib29rX2NsaWVudF9pZCwKICAgICAgICBmYWNlYm9va19zZWNyZXQ9c2V0dGluZ3MuZmFjZWJvb2tfY2xpZW50X3NlY3JldCwKICAgICAgICBmYWNlYm9va19zY29wZT1zZXR0aW5ncy5mYWNlYm9va19zY29wZSwKICAgICAgICBmYWNlYm9va19yZWRpcmVjdF91cmk9c2V0dGluZ3MuZmFjZWJvb2tfcmVkaXJlY3RfdXJpLAogICAgICAgIGdvb2dsZV9vYXV0aD1zZXR0aW5ncy5HT09HTEVfT0FVVEgyX1NFVFRJTkdTLAogICAgICAgIGdpdGh1Yl9vYXV0aD1zZXR0aW5ncy5HSVRIVUJfT0FVVEhfU0VUVElOR1MsCiAgICAgICAgc3RhcnRfZGJfbW9uaXRvcj1zZXR0aW5ncy5TVEFSVF9PQkpFQ1RfQ0hBTkdFX01PTklUT1IsCiAgICAgICAgc3RhcnRfd2ViX3NlcnZpY2U9c2V0dGluZ3MuU1RBUlRfV0VCX1NFUlZFUiwKICAgICAgICBkaXJlY3RvcnlfbGlzdGluZ19hbGxvd2VkPXNldHRpbmdzLmRpcmVjdG9yeV9saXN0aW5nX2FsbG93ZWQsCiAgICAgICAgc291cmNlX3Jvb3Q9c291cmNlX3Jvb3QKICAgICkpCgogICAgb3B0aW9ucy5kYiA9IGluaXRfZGF0YWJhc2Uob3B0aW9ucykKCiAgICBhcHBfZW5mcG9pbnRzID0gbG9hZF9hcHBfZW5kcG9pbnRzKHN5bmNfZGIpCiAgICBvcHRpb25zLmVuZHBvaW50cyA9IGFwcF9lbmZwb2ludHMgKyBlbmRwb2ludHMuRU5EX1BPSU5UUwoKICAgIHJldHVybiBvcHRpb25zCgoKZGVmIHByZXBhcmUocG9ydCk6CiAgICAgICAgc3luY19kYiA9IGdldF9zeW5jX2RiKHNldHRpbmdzLkRBVEFCQVNFX1VSSSwgc2V0dGluZ3MuREJfTkFNRSkKCiAgICAgICAgcHJpbnQgIkxvYWRpbmcgc291cmNlIG1vZHVsZXMiCiAgICAgICAgc291cmNlX21vZHVsZXMgPSBsb2FkX3NvdXJjZV9tb2R1bGVzKHN5bmNfZGIpCiAgICAgICAgZm9yIHNvdXJjZV9tb2R1bGUgaW4gc291cmNlX21vZHVsZXM6CiAgICAgICAgICAgIGxvYWRfc291cmNlX21vZHVsZShzeW5jX2RiLCBzb3VyY2VfbW9kdWxlKQoKICAgICAgICBvcHRpb25zID0gZ2V0X29wdGlvbnMoc3luY19kYiwgcG9ydCkKCiAgICAgICAgZGJfb2JzZXJ2ZXJzID0gbG9hZF9pbnRlcmNlcHRvcnMoc3luY19kYikKCiAgICAgICAgb3B0aW9ucy5vYnNlcnZlcnMgPSBkYl9vYnNlcnZlcnMgKyBzZXR0aW5ncy5vYnNlcnZlcnMKCiAgICAgICAgcmV0dXJuIG9wdGlvbnMKCmRlZiBtYWluKCk6CiAgICBjdXJyZW50X2RpcmVjdG9yeSA9IG9zLmdldGN3ZCgpCgogICAgcG9ydCA9IHNldHRpbmdzLldFQl9TRVJWRVJfTElTVEVOX1BPUlQKCiAgICBpZiBsZW4oc3lzLmFyZ3YpIDwgMjoKICAgICAgICBjb21tYW5kID0gInN0YXJ0LXNlcnZpY2UiCiAgICBlbHNlOgogICAgICAgIGNvbW1hbmQgPSBzeXMuYXJndlsxXS5zdHJpcCgpCgogICAgaWYgbGVuKHN5cy5hcmd2KSA+PSAzOgogICAgICAgIHBvcnQgPSBpbnQoc3lzLmFyZ3ZbMl0uc3RyaXAoKSkKCiAgICBvcHRpb25zID0gcHJlcGFyZShwb3J0KQoKICAgIGlmIGNvbW1hbmQgPT0gInN0YXJ0LXNlcnZpY2UiOgogICAgICAgIGlmIG9wdGlvbnMuc3RhcnRfd2ViX3NlcnZpY2U6CiAgICAgICAgICAgIHN0YXJ0X3NlcnZpY2Uob3B0aW9ucykKICAgICAgICBpZiBvcHRpb25zLnN0YXJ0X2RiX21vbml0b3I6CiAgICAgICAgICAgIHN0YXJ0X21vbml0b3Iob3B0aW9ucykKICAgIGVsc2U6CiAgICAgICAgYXJnMCA9IE5vbmUKICAgICAgICBhcmcxID0gTm9uZQogICAgICAgIGFyZzIgPSBOb25lCiAgICAgICAgdHJ5OgogICAgICAgICAgICBhcmcwID0gc3lzLmFyZ3ZbMl0KICAgICAgICAgICAgYXJnMSA9IHN5cy5hcmd2WzNdCiAgICAgICAgICAgIGFyZzIgPSBzeXMuYXJndls0XQogICAgICAgIGV4Y2VwdDoKICAgICAgICAgICAgcGFzcwoKICAgICAgICBoYW5kbGVyID0gQ29tbWFuZEhhbmRsZXIoZGI9b3B0aW9ucy5kYikKICAgICAgICBoYW5kbGVyLmhhbmRsZV9jb21tYW5kKGN1cnJlbnRfZGlyZWN0b3J5LCBjb21tYW5kLCB7ImFyZzAiOiBhcmcwLCAiYXJnMSI6IGFyZzEsICJhcmcyIjogYXJnMn0pCgogICAgc2lnbmFsLnNpZ25hbChzaWduYWwuU0lHSU5ULCBpbnRfc2lnbmFsX2hhbmRsZXIpCiAgICB0b3JuYWRvLmlvbG9vcC5JT0xvb3AuaW5zdGFuY2UoKS5zdGFydCgpCgoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo=')
}]
