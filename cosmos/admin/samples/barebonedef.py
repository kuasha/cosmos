# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/settings.py', 'data': base64.b64decode('aW1wb3J0IG9zCmltcG9ydCBsb2dnaW5nCgpERUJVRyA9IFRydWUKREJfSE9TVCA9ICIxMjcuMC4wLjEiCkRCX05BTUUgPSAiY29zbW9zIgpEQl9QT1JUID0gMjcwMTcKCkRCX1VTRVJfTkFNRSA9IE5vbmUKREJfVVNFUl9QQVNTV09SRCA9IE5vbmUKCgpMT0dfREJfSE9TVCA9ICIxMjcuMC4wLjEiCkxPR19EQl9OQU1FID0gImNvc21vcyIKTE9HX0NPTF9OQU1FID0gImxvZyIKTE9HX0RCX1BPUlQgPSAyNzAxNwpMT0dfTEVWRUwgPSBsb2dnaW5nLkRFQlVHCgpMT0dfREJfVVNFUl9OQU1FID0gTm9uZQpMT0dfREJfVVNFUl9QQVNTV09SRCA9IE5vbmUKClNUQVRJQ19QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJhcHAiKQpURU1QTEFURV9QQVRIID0gb3MucGF0aC5qb2luKG9zLnBhdGguZGlybmFtZShvcy5wYXRoLnJlYWxwYXRoKF9fZmlsZV9fKSksICJ0ZW1wbGF0ZXMiKQpJTkRFWF9IVE1MX1BBVEggPSBvcy5wYXRoLmpvaW4ob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSwgImFwcC9pbmRleC5odG1sIikKCldFQl9TRVJWRVJfTElTVEVOX1BPUlQgPSA4MDgwCgpEQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVCA9ICJodHRwOi8vbG9jYWxob3N0OnswfS9oYW5kbGVjaGFuZ2UiCgojVE9ETzogWW91IE1VU1QgY2hhbmdlIHRoZSBmb2xsb3dpbmcgdmFsdWVzCkNPT0tJRV9TRUNSRVQgPSAiKzgvWXF0RVVRZmlZTFVkTzJpSjJPeXpISEZTQURFdUt2S1l3RnFlbUZhcz0iCkhNQUNfS0VZID0gIis4L1lxdEVVUWZpWUxVZE8yaUoyT3l6SElGU0FLRXVLdktZd0ZxZW1GYXM9IgoKZmFjZWJvb2tfY2xpZW50X2lkPScwMDAwMDAwMDAwMDAwMDAnCmZhY2Vib29rX2NsaWVudF9zZWNyZXQ9JzAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJwpmYWNlYm9va19zY29wZSA9ICAiZW1haWwscHVibGljX3Byb2ZpbGUsdXNlcl9mcmllbmRzIgpmYWNlYm9va19yZWRpcmVjdF91cmkgPSBOb25lCkRFRkFVTFRfTE9HSU5fTkVYVF9VUkkgPSAiLyIKCiIiIgojIHBpcCBpbnN0YWxsIHB5Y3J5cHRvIGZvciBDcnlwdG8KIyB0aGVuIGZyb20gcHl0aG9uIGNvbnNvbGUgZ2VuZXJhdGUgcHJpdmF0ZV9wZW0gYW5kIHB1YmxpY19wZW4gYW5kIGFzc2lnbiB0byBTRVJWSUNFX1BSSVZBVEVfS0VZIGFuZCBTRVJWSUNFX1BVQkxJQ19LRVkKaW1wb3J0ICBDcnlwdG8uUHVibGljS2V5LlJTQSBhcyBSU0EKa2V5ID0gUlNBLmdlbmVyYXRlKDIwNDgpCnByaXZhdGVfcGVtID0ga2V5LmV4cG9ydEtleSgpCnB1YmxpY19wZW0gPSBrZXkucHVibGlja2V5KCkuZXhwb3J0S2V5KCkKCiIiIgojIFRPRE86IHNldCBib3RoIGtleXMgYmVsb3cuIFByaXZhdGUga2V5IGJhY2t1cCBtdXN0IGJlIGtlcHQgaW4gYSBzZWN1cmUgcGxhY2UgYW5kIHNob3VsZCBuZXZlciBiZSBzaGFyZWQKIyBJZiBwcml2YXRlIGtleSBpcyBjb21wcm9taXNlZCwgdGhpcyBzZXJ2aWNlIGFuZCBhbGwgb3RoZXIgc2VydmljZXMgdGhhdCB0cnVzdCB0aGlzIHdpbGwgYmUgY29tcHJvbWlzZWQKIyBQdWJsaWMga2V5IGlzIHRvIHNoYXJlIHB1YmxpY2x5IGZvciB2ZXJpZmljYXRpb24KClNFUlZJQ0VfUFJJVkFURV9LRVkgPSBOb25lClNFUlZJQ0VfUFVCTElDX0tFWSA9IE5vbmUKCmRpcmVjdG9yeV9saXN0aW5nX2FsbG93ZWQgPSBUcnVlCgpDT05GSUdVUkVfTE9HID0gRmFsc2UKU1RBUlRfV0VCX1NFUlZFUiA9IFRydWUKU1RBUlRfT0JKRUNUX0NIQU5HRV9NT05JVE9SID0gRmFsc2UKCkdPT0dMRV9PQVVUSDJfQ0xJRU5UX0lEID0gTm9uZQpHT09HTEVfT0FVVEgyX0NMSUVOVF9TRUNSRVQgPSBOb25lCkdPT0dMRV9PQVVUSDJfUkVESVJFQ1RfVVJJID0gTm9uZQoKR0lUSFVCX0NMSUVOVF9JRCA9IE5vbmUKR0lUSFVCX0NMSUVOVF9TRUNSRVQgPSBOb25lCkdJVEhVQl9PQVVUSDJfQ0FMTEJBQ0tfVVJJID0gTm9uZQoKVVNFUlNfSURFTlRJVFlfQ09MX05BTUUgPSAiY29zbW9zLnVzZXJzLmlkZW50aXR5IgpVU0VSU19QUk9GSUxFX0ZCX0NPTF9OQU1FID0gImNvc21vcy51c2Vycy5wcm9maWxlLmZhY2Vib29rIgpVU0VSU19GQl9GUklFTkRTX0NPTF9OQU1FID0gImNvc21vcy51c2Vycy5mYWNlYm9vay5mcmllbmRzIgoKbG9naW5fdXJsID0gIi9sb2dpbi8iCgpvYnNlcnZlcnMgPSBbXQoKdHJ5OgogICAgZnJvbSBsb2NhbF9zZXR0aW5ncyBpbXBvcnQgKgpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBwYXNzCgppZiBEQl9VU0VSX05BTUUgYW5kIERCX1VTRVJfUEFTU1dPUkQ6CiAgICBEQVRBQkFTRV9VUkkgPSAibW9uZ29kYjovLyIrIERCX1VTRVJfTkFNRSArICI6IisgREJfVVNFUl9QQVNTV09SRCArIkAiKyBEQl9IT1NUKyI6IitzdHIoREJfUE9SVCkrIi8iK0RCX05BTUUKZWxzZToKICAgIERBVEFCQVNFX1VSSSA9ICJtb25nb2RiOi8vIitEQl9IT1NUKyI6IitzdHIoREJfUE9SVCkKCmlmIExPR19EQl9VU0VSX05BTUUgYW5kIExPR19EQl9VU0VSX1BBU1NXT1JEOgogICAgTE9HX0RBVEFCQVNFX1VSSSA9ICJtb25nb2RiOi8vIisgTE9HX0RCX1VTRVJfTkFNRSArICI6IisgTE9HX0RCX1VTRVJfUEFTU1dPUkQgKyJAIisgTE9HX0RCX0hPU1QrIjoiK3N0cihMT0dfREJfUE9SVCkrIi8iK0xPR19EQl9OQU1FCmVsc2U6CiAgICBMT0dfREFUQUJBU0VfVVJJID0gIm1vbmdvZGI6Ly8iKyBMT0dfREJfSE9TVCsiOiIrc3RyKExPR19EQl9QT1JUKQoKCkdPT0dMRV9PQVVUSDJfU0VUVElOR1MgPSB7ImtleSI6IEdPT0dMRV9PQVVUSDJfQ0xJRU5UX0lELCAic2VjcmV0IjogR09PR0xFX09BVVRIMl9DTElFTlRfU0VDUkVULCAicmVkaXJlY3RfdXJpIjogR09PR0xFX09BVVRIMl9SRURJUkVDVF9VUkl9CgpHSVRIVUJfT0FVVEhfU0VUVElOR1MgPSB7ImNsaWVudF9pZCI6IEdJVEhVQl9DTElFTlRfSUQsICJzZWNyZXQiOiBHSVRIVUJfQ0xJRU5UX1NFQ1JFVCwgInJlZGlyZWN0X3VyaSI6IEdJVEhVQl9PQVVUSDJfQ0FMTEJBQ0tfVVJJfQo=')
},
{
'name': '/endpoints.py', 'data': base64.b64decode('aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLnNlYXJjaCBpbXBvcnQgU2VhcmNoSGFuZGxlcgpmcm9tIGNvc21vcy5zZXJ2aWNlLnNlcnZpY2VoYW5kbGVyIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuZ3JpZGZzc2VydmljZSBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLmFwcHNlcnZpY2UgaW1wb3J0ICoKZnJvbSB2aWV3cyBpbXBvcnQgSW5kZXhIYW5kbGVyCmltcG9ydCBzZXR0aW5ncwoKCkVORF9QT0lOVFMgPSBbCiAgICAociIvbG9naW4vZ29vZ2xlLyIsIEdvb2dsZU9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vb3BlbmlkLyIsIE9wZW5pZExvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vZmFjZWJvb2tncmFwaC8iLCBGYWNlYm9va0dyYXBoTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9naXRodWIvIiwgR2l0aHViT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi8iLCBMb2dpbkhhbmRsZXIpLAogICAgKHIiL2xvZ291dC8iLCBMb2dvdXRIYW5kbGVyKSwKICAgIChyIi9zZXJ2aWNlLyguKikiLCBTZXJ2aWNlSGFuZGxlciksCiAgICAociIvc2VhcmNoLyguKikvIiwgU2VhcmNoSGFuZGxlciksCiAgICAociIvZ3JpZGZzLyguKikiLCBHcmlkRlNTZXJ2aWNlSGFuZGxlciksCiAgICAociIvYXBwbGljYXRpb24vaW5zdGFsbC8iLCBBcHBJbnN0YWxsSGFuZGxlciksCiAgICAociIvYXBwbGljYXRpb24vcGFja2FnZS8oLiopIiwgQXBwUGFja2FnZUhhbmRsZXIpLAogICAgI1RPRE86IGF1dGhlbnRpY2Fpb24gYW5kIGF1dGhvcml6YXRpb24gcmVxdWlyZWQgZm9yIGNoYW5nZSBtb25pdG9yIGFuZCBoYW5kbGVyLgogICAgKHIiL2NoYW5nZW1vbml0b3IiLCBDaGFuZ2VNb25pdG9yKSwKICAgIChyIi9oYW5kbGVjaGFuZ2UiLCBDaGFuZ2VSZXF1ZXN0SGFuZGxlciksCiAgICAociIvIiwgIEluZGV4SGFuZGxlciksCiAgICAocicvKC4qKScsIHRvcm5hZG8ud2ViLlN0YXRpY0ZpbGVIYW5kbGVyLCB7J3BhdGgnOiBzZXR0aW5ncy5TVEFUSUNfUEFUSH0pLApd')
},
{
'name': '/__init__.py', 'data': base64.b64decode('IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
},
{
'name': '/views.py', 'data': base64.b64decode('aW1wb3J0IHNldHRpbmdzCgpfX2F1dGhvcl9fID0gJ01hcnVmIE1hbmlydXp6YW1hbicKCmltcG9ydCB0b3JuYWRvCmZyb20gdG9ybmFkbyBpbXBvcnQgZ2VuCgpmcm9tIGNvc21vcy5zZXJ2aWNlLnJlcXVlc3RoYW5kbGVyIGltcG9ydCBSZXF1ZXN0SGFuZGxlcgoKCmNsYXNzIEluZGV4SGFuZGxlcihSZXF1ZXN0SGFuZGxlcik6CiAgICBAZ2VuLmNvcm91dGluZQogICAgZGVmIGdldChzZWxmKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIHdpdGggb3BlbihzZXR0aW5ncy5JTkRFWF9IVE1MX1BBVEgpIGFzIGY6CiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKGYucmVhZCgpKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgo=')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode('')
}]
