# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/settings.py', 'data': base64.b64decode(b'')
},
{
'name': '/endpoints.py', 'data': base64.b64decode(b'aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLm9hdXRoMnNlcnZpY2UgaW1wb3J0IE9BdXRoMlNlcnZpY2VIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VhcmNoIGltcG9ydCBTZWFyY2hIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VydmljZWhhbmRsZXIgaW1wb3J0ICoKZnJvbSBjb3Ntb3Muc2VydmljZS5ncmlkZnNzZXJ2aWNlIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuYXBwc2VydmljZSBpbXBvcnQgKgpmcm9tIHZpZXdzIGltcG9ydCBJbmRleEhhbmRsZXIsIExvZ2luSGFuZGxlcgppbXBvcnQgc2V0dGluZ3MKCmZyb20gdmlld3MgaW1wb3J0IE9BdXRoMkR1bW15Q2xpZW50SGFuZGxlcgoKRU5EX1BPSU5UUyA9IFsKICAgIChyIi9sb2dpbi9nb29nbGUvIiwgR29vZ2xlT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9vcGVuaWQvIiwgT3BlbmlkTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9mYWNlYm9va2dyYXBoLyIsIEZhY2Vib29rR3JhcGhMb2dpbkhhbmRsZXIpLAogICAgKHIiL2xvZ2luL2dpdGh1Yi8iLCBHaXRodWJPQXV0aDJMb2dpbkhhbmRsZXIpLAogICAgKHIiL2xvZ2luLyIsIExvZ2luSGFuZGxlciksCiAgICAociIvbG9nb3V0LyIsIExvZ291dEhhbmRsZXIpLAogICAgKHNldHRpbmdzLk9BVVRIMl9TRVJWSUNFX1VSTCwgT0F1dGgyU2VydmljZUhhbmRsZXIpLAogICAgKHIiL29hdXRoMmNsaWVudC8oP1A8ZnVuY3Rpb24+W15cL10rKS8iLCBPQXV0aDJEdW1teUNsaWVudEhhbmRsZXIpLAogICAgKHIiL3NlcnZpY2UvKC4qKSIsIFNlcnZpY2VIYW5kbGVyKSwKICAgIChyIi9zZWFyY2gvKC4qKS8iLCBTZWFyY2hIYW5kbGVyKSwKICAgIChyIi9ncmlkZnMvKC4qKSIsIEdyaWRGU1NlcnZpY2VIYW5kbGVyKSwKICAgIChyIi9hcHBsaWNhdGlvbi9pbnN0YWxsLyIsIEFwcEluc3RhbGxIYW5kbGVyKSwKICAgIChyIi9hcHBsaWNhdGlvbi9wYWNrYWdlLyguKikiLCBBcHBQYWNrYWdlSGFuZGxlciksCiAgICAjVE9ETzogYXV0aGVudGljYWlvbiBhbmQgYXV0aG9yaXphdGlvbiByZXF1aXJlZCBmb3IgY2hhbmdlIG1vbml0b3IgYW5kIGhhbmRsZXIuCiAgICAociIvY2hhbmdlbW9uaXRvciIsIENoYW5nZU1vbml0b3IpLAogICAgKHIiL2hhbmRsZWNoYW5nZSIsIENoYW5nZVJlcXVlc3RIYW5kbGVyKSwKICAgIChyIi8iLCAgSW5kZXhIYW5kbGVyKSwKICAgIChyJy8oLiopJywgdG9ybmFkby53ZWIuU3RhdGljRmlsZUhhbmRsZXIsIHsncGF0aCc6IHNldHRpbmdzLlNUQVRJQ19QQVRIfSksCl0=')
},
{
'name': '/__init__.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
},
{
'name': '/views.py', 'data': base64.b64decode(b'aW1wb3J0IHNldHRpbmdzCgppbXBvcnQgY29zbW9zCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgQmFzaWNMb2dpbkhhbmRsZXIKCl9fYXV0aG9yX18gPSAnTWFydWYgTWFuaXJ1enphbWFuJwoKaW1wb3J0IHRvcm5hZG8KZnJvbSB0b3JuYWRvIGltcG9ydCBnZW4KaW1wb3J0IGpzb24KCmZyb20gY29zbW9zLnNlcnZpY2UucmVxdWVzdGhhbmRsZXIgaW1wb3J0IFJlcXVlc3RIYW5kbGVyCgoKY2xhc3MgSW5kZXhIYW5kbGVyKFJlcXVlc3RIYW5kbGVyKToKICAgIEBnZW4uY29yb3V0aW5lCiAgICBkZWYgZ2V0KHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLklOREVYX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIHNlbGYud3JpdGUoZi5yZWFkKCkpCiAgICAgICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICAgICAgcmFpc2UgdG9ybmFkby53ZWIuSFRUUEVycm9yKDQwNCwgIkZpbGUgbm90IGZvdW5kIikKCgpjbGFzcyBMb2dpbkhhbmRsZXIoQmFzaWNMb2dpbkhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZik6CiAgICAgICAgbmV4dCA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJuZXh0IiwgJy8nKQogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLkxPR0lOX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIGxvZ2luX3RlbXBsYXRlID0gZi5yZWFkKCkKICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dfbG9naW5fd2luZG93KG5leHQsIGxvZ2luX3RlbXBsYXRlPWxvZ2luX3RlbXBsYXRlKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgoKY2xhc3MgT0F1dGgyRHVtbXlDbGllbnRIYW5kbGVyKFJlcXVlc3RIYW5kbGVyKToKICAgIEBnZW4uY29yb3V0aW5lCiAgICBkZWYgZ2V0KHNlbGYsIGZ1bmN0aW9uKToKICAgICAgICBzZWxmLndyaXRlKHNlbGYucmVxdWVzdC51cmkgKyAiIDxiciAvPiIgKyBmdW5jdGlvbiArICI8YnIgLz4iKQogICAgICAgIHBhcmFtcyA9IGpzb24uZHVtcHMoeyBrOiBzZWxmLmdldF9hcmd1bWVudChrKSBmb3IgayBpbiBzZWxmLnJlcXVlc3QuYXJndW1lbnRzIH0pCiAgICAgICAgc2VsZi53cml0ZShwYXJhbXMpCiAgICAgICAgcHViX3BlbSA9IHNlbGYuc2V0dGluZ3MuZ2V0KCJvYXV0aDJfcHVibGljX2tleV9wZW0iKQogICAgICAgIGNvZGUgPSBzZWxmLmdldF9hcmd1bWVudCgiY29kZSIsICJ0ZW1wIikKICAgICAgICB0b2tlbiA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJhY2Nlc3NfdG9rZW4iLCBkZWZhdWx0PU5vbmUpCiAgICAgICAgaWYgdG9rZW46CiAgICAgICAgICAgIGhlYWRlciwgY2xhaW1zID0gY29zbW9zLmF1dGgub2F1dGgyLnZlcmlmeV90b2tlbih0b2tlbiwgcHViX3BlbSwgWydSUzI1NiddKQogICAgICAgICAgICBzZWxmLndyaXRlKCI8YnIgLz48aHIgLz4iKQogICAgICAgICAgICBzZWxmLndyaXRlKGpzb24uZHVtcHMoaGVhZGVyKSkKICAgICAgICAgICAgc2VsZi53cml0ZSgiPGJyIC8+PGhyIC8+IikKICAgICAgICAgICAgc2VsZi53cml0ZShqc29uLmR1bXBzKGNsYWltcykpCgogICAgICAgIHNlbGYud3JpdGUoIjxiciAvPjxociAvPiIpCiAgICAgICAgc2VsZi53cml0ZSgiPGEgaHJlZj0nL3RlbmFudC9vYXV0aDIvYXV0aG9yaXplLz9yZXNwb25zZV90eXBlPWNvZGUmc3RhdGU9bXlzdGF0ZSZyZXNvdXJjZT1teXJlc291cmNlLmNvbS90ZXN0JnJlZGlyZWN0X3VyaT0vb2F1dGgyY2xpZW50L2F1dGhvcml6ZS8/dGFnPTInPlJlcXVlc3QgQ29kZTwvYT48YnIgLz4iKQogICAgICAgIHNlbGYud3JpdGUoIjxhIGhyZWY9Jy90ZW5hbnQvb2F1dGgyL3Rva2VuLz9jb2RlPXt9JnN0YXRlPW15c3RhdGUmZ3JhbnRfdHlwZT1jb2RlJnJlZGlyZWN0X3VyaT0vb2F1dGgyY2xpZW50L2F1dGhvcml6ZS8/dGFnPTInPlJlcXVlc3QgVG9rZW48L2E+PGJyIC8+Ii5mb3JtYXQoY29kZSkpCgogICAgICAgIHNlbGYuZmluaXNoKCkKCgo=')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode(b'')
},
{
'name': '/partials/login.html', 'data': base64.b64decode(b'')
}]
