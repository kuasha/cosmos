# ------------------------------------------------- #
# Auto generated. Modification will be overwritten. #
# ------------------------------------------------- #

import base64

file_data_list=[
{
'name': '/settings.py', 'data': base64.b64decode(b'')
},
{
'name': '/endpoints.py', 'data': base64.b64decode(b'aW1wb3J0IHRvcm5hZG8KCmZyb20gY29zbW9zLmRhdGFtb25pdG9yLm1vbml0b3IgaW1wb3J0IENoYW5nZU1vbml0b3IsIENoYW5nZVJlcXVlc3RIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLm9hdXRoMnNlcnZpY2UgaW1wb3J0IE9BdXRoMlNlcnZpY2VIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VhcmNoIGltcG9ydCBTZWFyY2hIYW5kbGVyCmZyb20gY29zbW9zLnNlcnZpY2Uuc2VydmljZWhhbmRsZXIgaW1wb3J0ICoKZnJvbSBjb3Ntb3Muc2VydmljZS5ncmlkZnNzZXJ2aWNlIGltcG9ydCAqCmZyb20gY29zbW9zLnNlcnZpY2UuYXBwc2VydmljZSBpbXBvcnQgKgppbXBvcnQgc2V0dGluZ3MKZnJvbSB2aWV3cyBpbXBvcnQgKgpmcm9tIHN5c3RlbXZpZXdzIGltcG9ydCBTeXN0ZW1TZXR1cEhhbmRsZXIKCkVORF9QT0lOVFMgPSBbCiAgICAociIvbG9naW4vZ29vZ2xlLyIsIEdvb2dsZU9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vb3BlbmlkLyIsIE9wZW5pZExvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vZmFjZWJvb2tncmFwaC8iLCBGYWNlYm9va0dyYXBoTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9naXRodWIvIiwgR2l0aHViT0F1dGgyTG9naW5IYW5kbGVyKSwKICAgIChyIi9sb2dpbi9hdXRocC8iLCBBdXRocE9BdXRoMkxvZ2luSGFuZGxlciksCiAgICAociIvbG9naW4vIiwgTG9naW5IYW5kbGVyKSwKICAgIChyIi91c2VyL2NoYW5nZXBhc3N3b3JkLyIsIENoYW5nZVBhc3N3b3JkSGFuZGxlciksCiAgICAociIvbG9nb3V0LyIsIExvZ291dEhhbmRsZXIpLAogICAgKHIiLyg/UDx0ZW5hbnRfaWQ+W15cL10rKS9vYXV0aDIvKD9QPGZ1bmN0aW9uPlteXC9dKykvIiwgT0F1dGgyU2VydmljZUhhbmRsZXIpLAogICAgKHIiLyg/UDx0ZW5hbnRfaWQ+W15cL10rKS9hdXRoL2tleS8iLCBBdXRoUHVibGljS2V5SGFuZGxlciksCiAgICAociIvb2F1dGgyY2xpZW50Lyg/UDxmdW5jdGlvbj5bXlwvXSspLyIsIE9BdXRoMkR1bW15Q2xpZW50SGFuZGxlciksCiAgICAociIvc2VydmljZS8oLiopIiwgU2VydmljZUhhbmRsZXIpLAogICAgKHIiL3NlYXJjaC8oLiopLyIsIFNlYXJjaEhhbmRsZXIpLAogICAgKHIiL2dyaWRmcy8oLiopIiwgR3JpZEZTU2VydmljZUhhbmRsZXIpLAogICAgKHIiL2FwcGxpY2F0aW9uL2luc3RhbGwvIiwgQXBwSW5zdGFsbEhhbmRsZXIpLAogICAgKHIiL2FwcGxpY2F0aW9uL3BhY2thZ2UvKC4qKSIsIEFwcFBhY2thZ2VIYW5kbGVyKSwKICAgICNUT0RPOiBhdXRoZW50aWNhaW9uIGFuZCBhdXRob3JpemF0aW9uIHJlcXVpcmVkIGZvciBjaGFuZ2UgbW9uaXRvciBhbmQgaGFuZGxlci4KICAgIChyIi9jaGFuZ2Vtb25pdG9yIiwgQ2hhbmdlTW9uaXRvciksCiAgICAociIvaGFuZGxlY2hhbmdlIiwgQ2hhbmdlUmVxdWVzdEhhbmRsZXIpLAogICAgKHIiL3N5c3RlbS9zZXR1cC8iLCBTeXN0ZW1TZXR1cEhhbmRsZXIpLAogICAgKHIiLyIsICBJbmRleEhhbmRsZXIpLAogICAgKHInLyguKiknLCB0b3JuYWRvLndlYi5TdGF0aWNGaWxlSGFuZGxlciwgeydwYXRoJzogc2V0dGluZ3MuU1RBVElDX1BBVEh9KSwKXQ==')
},
{
'name': '/__init__.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgo=')
},
{
'name': '/startuphelpers.py', 'data': base64.b64decode(b'')
},
{
'name': '/systemviews.py', 'data': base64.b64decode(b'')
},
{
'name': '/views.py', 'data': base64.b64decode(b'aW1wb3J0IGxvZ2dpbmcKCmltcG9ydCBzZXR0aW5ncwpmcm9tIHRvcm5hZG8uaHR0cGNsaWVudCBpbXBvcnQgQXN5bmNIVFRQQ2xpZW50CgppbXBvcnQgY29zbW9zCmZyb20gY29zbW9zLnNlcnZpY2UuYXV0aCBpbXBvcnQgQmFzaWNMb2dpbkhhbmRsZXIKCl9fYXV0aG9yX18gPSAnTWFydWYgTWFuaXJ1enphbWFuJwoKaW1wb3J0IHRvcm5hZG8KZnJvbSB0b3JuYWRvIGltcG9ydCBnZW4KaW1wb3J0IGpzb24KCmZyb20gY29zbW9zLnNlcnZpY2UucmVxdWVzdGhhbmRsZXIgaW1wb3J0IFJlcXVlc3RIYW5kbGVyCgoKY2xhc3MgSW5kZXhIYW5kbGVyKFJlcXVlc3RIYW5kbGVyKToKICAgIEBnZW4uY29yb3V0aW5lCiAgICBkZWYgZ2V0KHNlbGYpOgogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLklOREVYX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIHNlbGYud3JpdGUoZi5yZWFkKCkpCiAgICAgICAgZXhjZXB0IElPRXJyb3IgYXMgZToKICAgICAgICAgICAgcmFpc2UgdG9ybmFkby53ZWIuSFRUUEVycm9yKDQwNCwgIkZpbGUgbm90IGZvdW5kIikKCgpjbGFzcyBMb2dpbkhhbmRsZXIoQmFzaWNMb2dpbkhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZik6CiAgICAgICAgbmV4dCA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJuZXh0IiwgJy8nKQogICAgICAgIHRyeToKICAgICAgICAgICAgd2l0aCBvcGVuKHNldHRpbmdzLkxPR0lOX0hUTUxfUEFUSCkgYXMgZjoKICAgICAgICAgICAgICAgIGxvZ2luX3RlbXBsYXRlID0gZi5yZWFkKCkKICAgICAgICAgICAgICAgIHNlbGYuX3Nob3dfbG9naW5fd2luZG93KG5leHQsIGxvZ2luX3RlbXBsYXRlPWxvZ2luX3RlbXBsYXRlKQogICAgICAgIGV4Y2VwdCBJT0Vycm9yIGFzIGU6CiAgICAgICAgICAgIHJhaXNlIHRvcm5hZG8ud2ViLkhUVFBFcnJvcig0MDQsICJGaWxlIG5vdCBmb3VuZCIpCgoKY2xhc3MgQXV0aFB1YmxpY0tleUhhbmRsZXIoUmVxdWVzdEhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZiwgdGVuYW50X2lkKToKICAgICAgICBzZWxmLnNldF9oZWFkZXIoIkNvbnRlbnQtVHlwZSIsICdhcHBsaWNhdGlvbi94LXBlbS1maWxlJykKICAgICAgICBzZWxmLnNldF9oZWFkZXIoJ0NvbnRlbnQtRGlzcG9zaXRpb24nLCAnYXR0YWNobWVudDsgZmlsZW5hbWU9JXNfcHViLnBlbScgJSB0ZW5hbnRfaWQpCiAgICAgICAgc2VsZi53cml0ZShzZXR0aW5ncy5PQVVUSDJfUFVCTElDX0tFWV9QRU0pCgpjbGFzcyBPQXV0aDJEdW1teUNsaWVudEhhbmRsZXIoUmVxdWVzdEhhbmRsZXIpOgogICAgQGdlbi5jb3JvdXRpbmUKICAgIGRlZiBnZXQoc2VsZiwgZnVuY3Rpb24pOgogICAgICAgIHByb3RvY29sID0gc2VsZi5yZXF1ZXN0LnByb3RvY29sCiAgICAgICAgaG9zdCA9IHNlbGYucmVxdWVzdC5ob3N0CiAgICAgICAgI29hdXRoMl9zZXJ2aWNlX2hvc3QgPSBwcm90b2NvbCArICI6Ly8iKyBob3N0CiAgICAgICAgb2F1dGgyX3NlcnZpY2VfaG9zdCA9IHNldHRpbmdzLk9BVVRIMl9TRVJWSUNFX1VSTAoKICAgICAgICB0ZW5hbnRfaWQgPSBzZXR0aW5ncy5URU5BTlRfSUQKICAgICAgICBzZWxmLndyaXRlKHNlbGYucmVxdWVzdC51cmkgKyAiIDxiciAvPiIgKyBmdW5jdGlvbiArICI8YnIgLz4iKQogICAgICAgIHBhcmFtcyA9IGpzb24uZHVtcHMoe2s6IHNlbGYuZ2V0X2FyZ3VtZW50KGspIGZvciBrIGluIHNlbGYucmVxdWVzdC5hcmd1bWVudHN9KQogICAgICAgIHNlbGYud3JpdGUocGFyYW1zKQogICAgICAgIGNvZGUgPSBzZWxmLmdldF9hcmd1bWVudCgiY29kZSIsICJ0ZW1wIikKICAgICAgICB0b2tlbiA9IHNlbGYuZ2V0X2FyZ3VtZW50KCJhY2Nlc3NfdG9rZW4iLCBkZWZhdWx0PU5vbmUpCiAgICAgICAgaWYgdG9rZW46CiAgICAgICAgICAgIGh0dHBfY2xpZW50ID0gQXN5bmNIVFRQQ2xpZW50KCkKICAgICAgICAgICAgdXJsID0gInswfS97MX0vYXV0aC9rZXkvIi5mb3JtYXQob2F1dGgyX3NlcnZpY2VfaG9zdCwgdGVuYW50X2lkKQogICAgICAgICAgICBsb2dnaW5nLmRlYnVnKCJGZXRjaGluZyBwdWJsaWMga2V5IGZyb20gezB9Ii5mb3JtYXQodXJsKSkKICAgICAgICAgICAgcmVzcCA9IHlpZWxkIGh0dHBfY2xpZW50LmZldGNoKHVybCkKCiAgICAgICAgICAgIGlmIG5vdCByZXNwIG9yIG5vdCByZXNwLmNvZGUgPT0gMjAwIG9yIHJlc3AuYm9keSBpcyBOb25lOgogICAgICAgICAgICAgICAgc2VsZi53cml0ZSgiQ291bGQgbm90IGdldCBhdXRoIHNlcnZlciBwdWJsaWMga2V5IikKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHB1Yl9wZW0gPSByZXNwLmJvZHkKICAgICAgICAgICAgICAgIGxvZ2dpbmcuZGVidWcoIlB1YmxpYyBrZXk6IHswfSIuZm9ybWF0KHB1Yl9wZW0pKQogICAgICAgICAgICAgICAgaGVhZGVyLCBjbGFpbXMgPSBjb3Ntb3MuYXV0aC5vYXV0aDIudmVyaWZ5X3Rva2VuKHRva2VuLCBwdWJfcGVtLCBbJ1JTMjU2J10pCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKCI8YnIgLz48aHIgLz4iKQogICAgICAgICAgICAgICAgc2VsZi53cml0ZShqc29uLmR1bXBzKGhlYWRlcikpCiAgICAgICAgICAgICAgICBzZWxmLndyaXRlKCI8YnIgLz48aHIgLz4iKQogICAgICAgICAgICAgICAgc2VsZi53cml0ZShqc29uLmR1bXBzKGNsYWltcykpCgogICAgICAgIHNlbGYud3JpdGUoIjxiciAvPjxociAvPiIpCiAgICAgICAgc2VsZi53cml0ZSgiPGEgaHJlZj0ne30ve30vb2F1dGgyL2F1dGhvcml6ZS8/cmVzcG9uc2VfdHlwZT1jb2RlJnN0YXRlPW15c3RhdGUmcmVzb3VyY2U9bXlyZXNvdXJjZS5jb20vdGVzdCZyZWRpcmVjdF91cmk9e306Ly97fS9vYXV0aDJjbGllbnQvYXV0aG9yaXplLz90YWc9Mic+UmVxdWVzdCBDb2RlPC9hPjxiciAvPiIuZm9ybWF0KG9hdXRoMl9zZXJ2aWNlX2hvc3QsIHNldHRpbmdzLlRFTkFOVF9JRCwgcHJvdG9jb2wsIGhvc3QpKQogICAgICAgIHNlbGYud3JpdGUoIjxhIGhyZWY9J3t9L3t9L29hdXRoMi90b2tlbi8/Y29kZT17fSZzdGF0ZT1teXN0YXRlJmdyYW50X3R5cGU9Y29kZSZyZWRpcmVjdF91cmk9e306Ly97fS9vYXV0aDJjbGllbnQvYXV0aG9yaXplLz90YWc9Mic+UmVxdWVzdCBUb2tlbjwvYT48YnIgLz4iLmZvcm1hdChvYXV0aDJfc2VydmljZV9ob3N0LCB0ZW5hbnRfaWQsIGNvZGUsIHByb3RvY29sLCBob3N0KSkKCiAgICAgICAgc2VsZi5maW5pc2goKQo=')
},
{
'name': '/hivemain.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTYgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IG9zCmltcG9ydCBzeXMKCnRyeToKICAgIGltcG9ydCBzZXR0aW5ncwpleGNlcHQgSW1wb3J0RXJyb3IgYXMgaWU6CiAgICBzeXMucGF0aC5hcHBlbmQob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSkKICAgIGltcG9ydCBzZXR0aW5ncwoKZnJvbSBjb3Ntb3MuYmVlcy5jZWxlcnkud29ya2Zsb3cgaW1wb3J0IGNyZWF0ZV9hcHAKaW1wb3J0IGxvZ2dpbmcKCmZyb20gc3RhcnR1cGhlbHBlcnMgaW1wb3J0ICoKCmRlZiBleGVjdXRlX3dvcmtmbG93KG5hbWUsIHBhcmFtcyk6CiAgICBwcmludCgiUmVjZWl2ZWQgZXhlY3V0ZSB3b3JrZmxvdyByZXF1ZXN0OiIpCiAgICBwcmludChuYW1lKQogICAgcHJpbnQocGFyYW1zKQoKCmRlZiBtYWluKCk6CiAgICBjdXJyZW50X2RpcmVjdG9yeSA9IG9zLmdldGN3ZCgpCiAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKICAgIHByaW50KCJQeXRob24gdmVyc2lvbjogIiArIHN0cihzeXMudmVyc2lvbl9pbmZvKSkKICAgIHByaW50KCJSdW5uaW5nIGZyb20gZGlyZWN0b3J5OiAiICsgY3VycmVudF9kaXJlY3RvcnkpCiAgICBwcmludCgiRmlsZTogIisgX19maWxlX18pCiAgICBwcmludCgiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIikKCiAgICBsb2dnaW5nLmdldExvZ2dlcigpLnNldExldmVsKHNldHRpbmdzLkxPR19MRVZFTCkKCiAgICBvcHRpb25zID0gZ2V0X29wdGlvbnMoKQogICAgaW5pdF9sb2dnaW5nKG9wdGlvbnMpCgogICAgbG9nZ2luZy5pbmZvKCJQeXRob24gdmVyc2lvbjogIiArIHN0cihzeXMudmVyc2lvbl9pbmZvKSkKICAgIGxvZ2dpbmcuaW5mbygiUnVubmluZyBmcm9tIGRpcmVjdG9yeTogIiArIGN1cnJlbnRfZGlyZWN0b3J5KQogICAgbG9nZ2luZy5pbmZvKCJGaWxlOiAiKyBfX2ZpbGVfXykKCiAgICBpZiBub3Qgc2V0dGluZ3MuRU5BQkxFX1dPUktGTE9XX0VOR0lORVM6CiAgICAgICAgbG9nZ2luZy5jcml0aWNhbCgiV29ya2Zsb3cgZW5naW5lcyBhcmUgZGlzYWJsZWQuIFNldCBFTkFCTEVfV09SS0ZMT1dfRU5HSU5FUyB2YWx1ZSBpbiBzZXR0aW5ncy4iKQogICAgICAgIHJldHVybgoKICAgIHN5bmNfZGIgPSBnZXRfc3luY19kYihzZXR0aW5ncy5EQVRBQkFTRV9VUkksIHNldHRpbmdzLkRCX05BTUUpCiAgICBpbml0X3NvdXJjZV9tb2R1bGVzKHN5bmNfZGIpCgogICAgZW5naW5lcyA9IGluaXRfd29ya2Zsb3dfZW5naW5lcygpCgogICAgZm9yIGVuZ2luZV9uYW1lIGluIGVuZ2luZXMua2V5cygpOgogICAgICAgIGVuZ2luZV9kZWYgPSBlbmdpbmVzLmdldChlbmdpbmVfbmFtZSkKICAgICAgICBhcHAgPSBlbmdpbmVfZGVmLmdldCgiZW5naW5lIikKICAgICAgICBsb2dnaW5nLmRlYnVnKGFwcC50YXNrcy5rZXlzKCkpCiAgICAgICAgYXBwLndvcmtlcl9tYWluKCkKCgppZiBfX25hbWVfXyA9PSAnX19tYWluX18nOgogICAgbWFpbigp')
},
{
'name': '/cosmosmain.py', 'data': base64.b64decode(b'IiIiCiBDb3B5cmlnaHQgKEMpIDIwMTQgTWFydWYgTWFuaXJ1enphbWFuCiBXZWJzaXRlOiBodHRwOi8vY29zbW9zZnJhbWV3b3JrLmNvbQogQXV0aG9yOiBNYXJ1ZiBNYW5pcnV6emFtYW4KIExpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlCiIiIgoKaW1wb3J0IHN5cwppbXBvcnQgb3MKCnRyeToKICAgIGltcG9ydCBlbmRwb2ludHMKICAgIGltcG9ydCBzZXR0aW5ncwpleGNlcHQgSW1wb3J0RXJyb3IgYXMgaWU6CiAgICBzeXMucGF0aC5hcHBlbmQob3MucGF0aC5kaXJuYW1lKG9zLnBhdGgucmVhbHBhdGgoX19maWxlX18pKSkKICAgIGltcG9ydCBzZXR0aW5ncwogICAgaW1wb3J0IGVuZHBvaW50cwoKaW1wb3J0IGltcG9ydGxpYgppbXBvcnQgbG9nZ2luZwoKaW1wb3J0IHNpZ25hbAppbXBvcnQgaW1wCmltcG9ydCBtb3Rvcgpmcm9tIHB5bW9uZ28gaW1wb3J0IE1vbmdvQ2xpZW50CmltcG9ydCBncmlkZnMKCmZyb20gY29zbW9zLmFkbWluLmNvbW1hbmRzIGltcG9ydCBDb21tYW5kSGFuZGxlcgpmcm9tIGNvc21vcy5jb21tb24uY29uc3RhbnRzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvcgpmcm9tIGNvc21vcy5yYmFjLnNlcnZpY2UgaW1wb3J0IFJiYWNTZXJ2aWNlCmltcG9ydCBjb3Ntb3Muc2VydmljZS5zZXJ2aWNlbWFpbgoKZnJvbSBjb3Ntb3Muc2VydmljZSBpbXBvcnQgKgpmcm9tIGNvc21vcy5zZXJ2aWNlLnV0aWxzIGltcG9ydCAqCmltcG9ydCBjb3Ntb3MuZGF0YW1vbml0b3IubW9uaXRvciBhcyBtb25pdG9yCgpmcm9tIHN0YXJ0dXBoZWxwZXJzIGltcG9ydCAqCgptb25pdG9yX3dvcmtlciA9IE5vbmUKCgpkZWYgaW5pdF9kYXRhYmFzZShvcHRpb25zKToKICAgIGNsaWVudCA9IG1vdG9yLk1vdG9yQ2xpZW50KG9wdGlvbnMuZGJfdXJpKQogICAgZGIgPSBjbGllbnRbb3B0aW9ucy5kYl9uYW1lXQogICAgcmV0dXJuIGRiCgoKZGVmIGNsZWFudXAoKToKICAgIG1vbml0b3IuY29udGludWVfbW9uaXRvciA9IEZhbHNlCgpkZWYgaW50X3NpZ25hbF9oYW5kbGVyKHNpZ25hbCwgZnJhbWUpOgogICAgbG9nZ2luZy5pbmZvKCdFeGl0aW5nLi4uJykKICAgIGNsZWFudXAoKQogICAgc3lzLmV4aXQoMCkKCgojIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgaW4gdGhlIGNvbnRleHQgb2YgbW9uaXRvciB3b3JrZXIgdGhyZWFkLCBOT1QgZnJvbSB0aGUgdGhyZWFkIF9fbWFpbl9fIGJlbG93IGlzIHJ1bm5pbmcuCmRlZiBlbmRfbW9uaXRvcl9jYWxsYmFjayhyZWFzb249Tm9uZSk6CiAgICBwYXNzCgoKZGVmIHN0YXJ0X21vbml0b3Iob3B0aW9ucyk6CiAgICBtb25pdG9yLmNvbnRpbnVlX21vbml0b3IgPSBUcnVlCiAgICBtb25pdG9yLnN0YXJ0X29iamVjdF9jaGFuZ2VfbW9uaXRvcihvcHRpb25zLmRiX3Byb2Nlc3Nvcl9lbmRwb2ludCwgb3B0aW9ucy5kYl91cmksIGVuZF9tb25pdG9yX2NhbGxiYWNrKQoKCmRlZiBzdGFydF9zZXJ2aWNlKG9wdGlvbnMpOgogICAgY29zbW9zLnNlcnZpY2Uuc2VydmljZW1haW4uc3RhcnRfd2ViX3NlcnZpY2Uob3B0aW9ucykKCgpkZWYgaW5pdF93ZWJzZXJ2aWNlX29wdGlvbnMoc3luY19kYiwgcG9ydCk6CiAgICBvcHRpb25zID0gZ2V0X29wdGlvbnMoKQogICAgb3B0aW9ucy53ZWJfc2VydmljZV9wb3J0ID0gcG9ydAogICAgb3B0aW9ucy5kYl9wcm9jZXNzb3JfZW5kcG9pbnQgPSBzZXR0aW5ncy5EQl9DSEFOR0VfUFJPQ0VTU09SX0VORFBPSU5UX0ZPUk1BVC5mb3JtYXQocG9ydCkKICAgIG9wdGlvbnMuZGIgPSBpbml0X2RhdGFiYXNlKG9wdGlvbnMpCiAgICBpbml0X2xvZ2dpbmcob3B0aW9ucykKCiAgICBhcHBfZW5kcG9pbnRzID0gW10KICAgIGlmIHN5bmNfZGI6CiAgICAgICAgYXBwX2VuZHBvaW50cyA9IGxvYWRfYXBwX2VuZHBvaW50cyhzeW5jX2RiKQoKICAgIG9wdGlvbnMuZW5kcG9pbnRzID0gYXBwX2VuZHBvaW50cyArIGVuZHBvaW50cy5FTkRfUE9JTlRTCgogICAgcmV0dXJuIG9wdGlvbnMKCgpkZWYgcHJlcGFyZShwb3J0KToKICAgICAgICBzeW5jX2RiID0gZ2V0X3N5bmNfZGIoc2V0dGluZ3MuREFUQUJBU0VfVVJJLCBzZXR0aW5ncy5EQl9OQU1FKQogICAgICAgIGRiX29ic2VydmVycyA9IFtdCgogICAgICAgIGlmIHN5bmNfZGI6CiAgICAgICAgICAgIGluaXRfc291cmNlX21vZHVsZXMoc3luY19kYikKICAgICAgICAgICAgZGJfb2JzZXJ2ZXJzID0gbG9hZF9pbnRlcmNlcHRvcnMoc3luY19kYikKCiAgICAgICAgb3B0aW9ucyA9IGluaXRfd2Vic2VydmljZV9vcHRpb25zKHN5bmNfZGIsIHBvcnQpCgogICAgICAgIG9wdGlvbnMub2JzZXJ2ZXJzID0gZGJfb2JzZXJ2ZXJzICsgc2V0dGluZ3Mub2JzZXJ2ZXJzCgogICAgICAgIHJldHVybiBvcHRpb25zCgpkZWYgbWFpbigpOgogICAgY3VycmVudF9kaXJlY3RvcnkgPSBvcy5nZXRjd2QoKQogICAgcHJpbnQoIlB5dGhvbiB2ZXJzaW9uOiAiICsgc3RyKHN5cy52ZXJzaW9uX2luZm8pKQogICAgcHJpbnQoIlJ1bm5pbmcgZnJvbSBkaXJlY3Rvcnk6ICIgKyBjdXJyZW50X2RpcmVjdG9yeSkKCiAgICBsb2dnaW5nLmdldExvZ2dlcigpLnNldExldmVsKHNldHRpbmdzLkxPR19MRVZFTCkKCiAgICBwb3J0ID0gc2V0dGluZ3MuV0VCX1NFUlZFUl9MSVNURU5fUE9SVAoKICAgIGlmIGxlbihzeXMuYXJndikgPCAyOgogICAgICAgIGNvbW1hbmQgPSAic3RhcnQtc2VydmljZSIKICAgIGVsc2U6CiAgICAgICAgY29tbWFuZCA9IHN5cy5hcmd2WzFdLnN0cmlwKCkKCiAgICBpZiBsZW4oc3lzLmFyZ3YpID49IDM6CiAgICAgICAgcG9ydCA9IGludChzeXMuYXJndlsyXS5zdHJpcCgpKQoKICAgIG9wdGlvbnMgPSBwcmVwYXJlKHBvcnQpCgogICAgaWYgY29tbWFuZCA9PSAic3RhcnQtc2VydmljZSI6CgogICAgICAgIGlmIG9wdGlvbnMuc3RhcnRfd2ViX3NlcnZpY2U6CiAgICAgICAgICAgIHN0YXJ0X3NlcnZpY2Uob3B0aW9ucykKICAgICAgICBpZiBvcHRpb25zLnN0YXJ0X2RiX21vbml0b3I6CiAgICAgICAgICAgc3RhcnRfbW9uaXRvcihvcHRpb25zKQoKICAgICAgICBpZiBzZXR0aW5ncy5FTkFCTEVfV09SS0ZMT1dfRU5HSU5FUzoKICAgICAgICAgICAgZW5naW5lcyA9IGluaXRfd29ya2Zsb3dfZW5naW5lcygpCiAgICAgICAgICAgIGFwcF9kZWY9ZW5naW5lc1sid29ya2Zsb3dfZW5naW5lIl0KICAgICAgICAgICAgZm4gPSBhcHBfZGVmLmdldCgiZXhlY3V0ZV93b3JrZmxvdyIpCiAgICAgICAgICAgIGZuLmRlbGF5KCJ0ZXN0IiwgeyJuYW1lIjoidGVzdCJ9KQoKICAgICAgICBzaWduYWwuc2lnbmFsKHNpZ25hbC5TSUdJTlQsIGludF9zaWduYWxfaGFuZGxlcikKICAgICAgICB0b3JuYWRvLmlvbG9vcC5JT0xvb3AuaW5zdGFuY2UoKS5zdGFydCgpCiAgICBlbHNlOgogICAgICAgIGNvc21vcy5hZG1pbi5jb21tYW5kcy5hZG1pbl9tYWluKCkKCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6CiAgICBtYWluKCkK')
},
{
'name': '/templates/login.html', 'data': base64.b64decode(b'PCFET0NUWVBFIGh0bWw+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDx0aXRsZT5Mb2dpbjwvdGl0bGU+CiAgICA8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iIj4KICAgIDxtZXRhIG5hbWU9InZpZXdwb3J0IiBjb250ZW50PSJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MSI+CiAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyX21hdGVyaWFsLzEuMC4wL2FuZ3VsYXItbWF0ZXJpYWwubWluLmNzcyI+CiAgICA8c3R5bGU+CiAgICAgICAgaHRtbCwKICAgICAgICBib2R5IHsKICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgIH0KCiAgICAgICAgaHRtbCB7CiAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlOwogICAgICAgICAgICBtYXJnaW46IGF1dG87CiAgICAgICAgfQoKICAgICAgICBib2R5IHsKICAgICAgICAgICAgZGlzcGxheTogdGFibGUtY2VsbDsKICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICAgICAgICB9CgogICAgICAgIC5sb2dpbmljb257CiAgICAgICAgICAgIGhlaWdodDozMnB4OwogICAgICAgICAgICB3aWR0aDozMnB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CjwvaGVhZD4KPGJvZHkgbmctYXBwPSJsb2dpbkFwcCIgbmctY2xvYWs+CiAgICA8Zm9ybSBhY3Rpb249Ii4iIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgPG1kLWNvbnRlbnQgY2xhc3M9Im1kLXBhZGRpbmciIGxheW91dC14cz0iY29sdW1uIiBsYXlvdXQ9InJvdyI+CiAgICAgICAgICAgIDxkaXYgbGF5b3V0PSJjb2x1bW4iPgogICAgICAgICAgICAgICAgPG1kLWNhcmQ+CiAgICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtdGl0bGU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkLXRpdGxlLXRleHQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibWQtaGVhZGxpbmUiPkxvZ2luIHdpdGg8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC10aXRsZS10ZXh0PgogICAgICAgICAgICAgICAgICAgICAgICA8bWQtY2FyZC10aXRsZS1tZWRpYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLXRpdGxlLW1lZGlhPgogICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC10aXRsZT4KICAgICAgICAgICAgICAgICAgICA8bWQtY2FyZC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIEljb25zIGFyZSBmcm9tIGh0dHBzOi8vd3d3Lmljb25maW5kZXIuY29tLyB3aXRoIGZyZWUgZm9yIGNvbW1lcmNpYWwgdXNlIGxpY2Vuc2UgYW5kIG5vIGxpbmtiYWNrIHJlcXVpcmVkIC0tPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvbG9naW4vZmFjZWJvb2tncmFwaC8iPjxpbWcgY2xhc3M9ImxvZ2luaWNvbiIgc3JjPSJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQS9QandoUkU5RFZGbFFSU0J6ZG1jZ0lGQlZRa3hKUXlBbkxTOHZWek5ETHk5RVZFUWdVMVpISURFdU1TOHZSVTRuSUNBbmFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdlIzSmhjR2hwWTNNdlUxWkhMekV1TVM5RVZFUXZjM1puTVRFdVpIUmtKejQ4YzNabklHaGxhV2RvZEQwaU5ETXVNelE1TW0xdElpQnpkSGxzWlQwaWMyaGhjR1V0Y21WdVpHVnlhVzVuT21kbGIyMWxkSEpwWTFCeVpXTnBjMmx2YmpzZ2RHVjRkQzF5Wlc1a1pYSnBibWM2WjJWdmJXVjBjbWxqVUhKbFkybHphVzl1T3lCcGJXRm5aUzF5Wlc1a1pYSnBibWM2YjNCMGFXMXBlbVZSZFdGc2FYUjVPeUJtYVd4c0xYSjFiR1U2WlhabGJtOWtaRHNnWTJ4cGNDMXlkV3hsT21WMlpXNXZaR1FpSUhabGNuTnBiMjQ5SWpFdU1TSWdkbWxsZDBKdmVEMGlNQ0F3SURJMU9DQXlOVGdpSUhkcFpIUm9QU0kwTXk0ek5Ea3liVzBpSUhodGJEcHpjR0ZqWlQwaWNISmxjMlZ5ZG1VaUlIaHRiRzV6UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMM04yWnlJZ2VHMXNibk02ZUd4cGJtczlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MekU1T1RrdmVHeHBibXNpUGp4a1pXWnpQanh6ZEhsc1pTQjBlWEJsUFNKMFpYaDBMMk56Y3lJK0NpQWdJRHdoVzBORVFWUkJXd29nSUNBZ0xtWnBiRElnZTJacGJHdzZJek13TkRnM1EzMEtJQ0FnSUM1bWFXd3dJSHRtYVd4c09pTXpRalU1T1RsOUNpQWdJQ0F1Wm1sc01TQjdabWxzYkRwM2FHbDBaWDBLSUNBZ1hWMCtDaUFnUEM5emRIbHNaVDQ4TDJSbFpuTStQR2NnYVdROUlreGhlV1Z5WDNnd01ESXdYekVpUGp4bklHbGtQU0pmTkRRME1qTXpOVEk0SWo0OGNtVmpkQ0JqYkdGemN6MGlabWxzTUNJZ2FHVnBaMmgwUFNJeU5UZ2lJSEo0UFNJeU9DSWdjbms5SWpJNElpQjNhV1IwYUQwaU1qVTRJaTgrUEhCaGRHZ2dZMnhoYzNNOUltWnBiREVpSUdROUlrMDROQ0F4TURac01qY2dNQ0F3SUMwMVl6QXNMVGdnTFRFc0xURTRJREFzTFRJMklERXNMVEU1SURFeExDMHpNU0F6Tnl3dE16SnNNallnTVNBd0lESTRZeTB4TVN3d0lDMHpNQ3d0TkNBdE16SXNNVEJzTUNBeU5DQXpNQ0F3SUMweklETXhJQzB5TnlBd0lEQWdOemdnTFRNeElEQWdNQ0F0TnpnZ0xUSTNJQzB4SURBZ0xUTXdlaUl2UGp4d1lYUm9JR05zWVhOelBTSm1hV3d5SWlCa1BTSk5NalU0SURFeU9Hd3RPRFFnTFRnMElEQWdNamhqTFRFeExEQWdMVE13TEMwMElDMHpNaXd4TUd3d0lESTBJRE13SURBZ0xUTWdNekVnTFRJM0lEQWdNQ0EzT0NBdE16RWdNQ0EwTXlBME15QTNOaUF3SURJNElDMHlPQ0F3SUMweE1ESjZJaTgrUEM5blBqd3ZaejQ4TDNOMlp6ND0iIC8+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvbG9naW4vZ29vZ2xlLyI+PGltZyBjbGFzcz0ibG9naW5pY29uIiBzcmM9ImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEQ5NGJXd2dkbVZ5YzJsdmJqMGlNUzR3SWlBL1Bqd2hSRTlEVkZsUVJTQnpkbWNnSUZCVlFreEpReUFuTFM4dlZ6TkRMeTlFVkVRZ1UxWkhJREV1TVM4dlJVNG5JQ0FuYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2UjNKaGNHaHBZM012VTFaSEx6RXVNUzlFVkVRdmMzWm5NVEV1WkhSa0p6NDhjM1puSUdWdVlXSnNaUzFpWVdOclozSnZkVzVrUFNKdVpYY2dNQ0F3SURVd0lEVXdJaUJwWkQwaVRHRjVaWEpmTVNJZ2RtVnljMmx2YmowaU1TNHhJaUIyYVdWM1FtOTRQU0l3SURBZ05UQWdOVEFpSUhodGJEcHpjR0ZqWlQwaWNISmxjMlZ5ZG1VaUlIaHRiRzV6UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMM04yWnlJZ2VHMXNibk02ZUd4cGJtczlJbWgwZEhBNkx5OTNkM2N1ZHpNdWIzSm5MekU1T1RrdmVHeHBibXNpUGp4d1lYUm9JR1E5SWswME5Td3hTRFZETWk0NExERXNNU3d5TGpnc01TdzFkalF3WXpBc01pNHlMREV1T0N3MExEUXNOR2cwTUdNeUxqSXNNQ3cwTFRFdU9DdzBMVFJXTlVNME9Td3lMamdzTkRjdU1pd3hMRFExTERGNklpQm1hV3hzUFNJalJURXpOekU1SWk4K1BHY2dhV1E5SWtkZmVESkNYeUkrUEhCdmJIbG5iMjRnWm1sc2JEMGlJMFpHUmtaR1JpSWdhV1E5SWw5NE1rSmZYekZmSWlCd2IybHVkSE05SWpRd0xESXpJRE0yTERJeklETTJMREU1SURNMExERTVJRE0wTERJeklETXdMREl6SURNd0xESTFJRE0wTERJMUlETTBMREk1SURNMkxESTVJRE0yTERJMUlEUXdMREkxSUNBaUx6NDhjR0YwYUNCa1BTSk5NalVzTWpkak1Dd3dMVEl0TVM0eUxUSXRNbU13TERBdE1DNDFMVEV1T0N3eExUTmpNUzQxTFRFdU1pd3pMVE1zTXkwMVl6QXRNaTR6TFRFdE5TMHpMVFpvTTJ3eUxqUXRNV013TERBdE55NHhMREF0T1M0MExEQWdJQ0JqTFRRdU1pd3dMVGdzTXk0ekxUZ3NOMk13TERNdU55d3lMamdzTmk0MkxEY3VNU3cyTGpaak1DNHpMREFzTUM0MkxEQXNNQzQ1TERCakxUQXVNeXd3TGpVdE1DNDFMREV1TVMwd0xqVXNNUzQzWXpBc01Td3dMamdzTWl3eExqVXNNaTQzWXkwd0xqVXNNQzB4TGpRc01DMHlMREFnSUNCakxUVXVNaXd3TFRrc01pNDJMVGtzTm1Nd0xETXVOQ3cwTGprc05pd3hNQ3cyWXpVdU9Td3dMREV3TFRNc01UQXROME16TUN3ek1DNHpMREkzTGpVc01qZ3VOeXd5TlN3eU4zb2dUVEl4TERJell5MHlMalFzTUMwMUxqWXRNaTQ1TFRZdE5tTXRNQzQwTFRNdU1Td3hMall0Tmk0eExEUXROaUFnSUhNMExqWXNNaTQ1TERVc05pNHhRekkwTGpRc01qQXVNaXd5TXl3eU15d3lNU3d5TTNvZ1RUSXdMRE00WXkwekxqWXNNQzAzTFRFdU15MDNMVFJqTUMweUxqY3NNeTQwTFRVc055MDFZekF1T0N3d0xESXNNQ3d5TERCak1Td3dMREl1T1N3d0xqa3NOQ3d5WXpFc01Td3hMREl1Tnl3eExETWdJQ0JETWpjc016Y3NNalVzTXpnc01qQXNNemg2SWlCbWFXeHNQU0lqUmtaR1JrWkdJaUJwWkQwaVoxOHhYeUl2UGp3dlp6NDhMM04yWno0PSIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sb2dpbi9naXRodWIvIj48aW1nIGNsYXNzPSJsb2dpbmljb24iIHNyYz0iZGF0YTppbWFnZS9zdmcreG1sO2Jhc2U2NCxQRDk0Yld3Z2RtVnljMmx2YmowaU1TNHdJaUEvUGp4emRtY2dhR1ZwWjJoMFBTSTJNSEI0SWlCMlpYSnphVzl1UFNJeExqRWlJSFpwWlhkQ2IzZzlJakFnTUNBMk1DQTJNQ0lnZDJsa2RHZzlJall3Y0hnaUlIaHRiRzV6UFNKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eU1EQXdMM04yWnlJZ2VHMXNibk02YzJ0bGRHTm9QU0pvZEhSd09pOHZkM2QzTG1KdmFHVnRhV0Z1WTI5a2FXNW5MbU52YlM5emEyVjBZMmd2Ym5NaUlIaHRiRzV6T25oc2FXNXJQU0pvZEhSd09pOHZkM2QzTG5jekxtOXlaeTh4T1RrNUwzaHNhVzVySWo0OGRHbDBiR1V2UGp4a1pYTmpMejQ4WkdWbWN5OCtQR2NnWm1sc2JEMGlibTl1WlNJZ1ptbHNiQzF5ZFd4bFBTSmxkbVZ1YjJSa0lpQnBaRDBpYzI5cFkyRnNJaUJ6ZEhKdmEyVTlJbTV2Ym1VaUlITjBjbTlyWlMxM2FXUjBhRDBpTVNJK1BHY2dhV1E5SW5OdlkybGhiQ0lnZEhKaGJuTm1iM0p0UFNKMGNtRnVjMnhoZEdVb0xURXdOek11TURBd01EQXdMQ0F0TmpNNExqQXdNREF3TUNraVBqeG5JR2xrUFNKemJHbGpaWE1pSUhSeVlXNXpabTl5YlQwaWRISmhibk5zWVhSbEtERTNNeTR3TURBd01EQXNJREV6T0M0d01EQXdNREFwSWk4K1BHY2dabWxzYkQwaUl6UXlOREkwTWlJZ2FXUTlJbk54ZFdGeVpTMW1iR0YwSWlCMGNtRnVjMlp2Y20wOUluUnlZVzV6YkdGMFpTZ3hOek11TURBd01EQXdMQ0F4TXpndU1EQXdNREF3S1NJK1BIQmhkR2dnWkQwaVRUa3dNaTQ1T1RVNU16Y3NOVEF3SUV3NU5UY3VNREEwTURZekxEVXdNQ0JET1RVNExqWTFPRFkzTXl3MU1EQWdPVFl3TERVd01TNHpNemN6TVNBNU5qQXNOVEF5TGprNU5Ua3pOeUJNT1RZd0xEVTFOeTR3TURRd05qTWdRemsyTUN3MU5UZ3VOalU0TmpjeklEazFPQzQyTmpJMk9TdzFOakFnT1RVM0xqQXdOREEyTXl3MU5qQWdURGt3TWk0NU9UVTVNemNzTlRZd0lFTTVNREV1TXpReE16STNMRFUyTUNBNU1EQXNOVFU0TGpZMk1qWTVJRGt3TUN3MU5UY3VNREEwTURZeklFdzVNREFzTlRBeUxqazVOVGt6TnlCRE9UQXdMRFV3TVM0ek5ERXpNamNnT1RBeExqTXpOek14TERVd01DQTVNREl1T1RrMU9UTTNMRFV3TUNCYUlpQnBaRDBpYzNGMVlYSmxMVFl3SWk4K1BDOW5QanhuSUdacGJHdzlJaU13TURBd01EQWlJR1pwYkd3dGIzQmhZMmwwZVQwaU1DNDBJaUJwWkQwaWMzRjFZWEpsTFhOb1lXUnZkeUlnZEhKaGJuTm1iM0p0UFNKMGNtRnVjMnhoZEdVb01UY3pMakF3TURBd01Dd2dNVFV5TGpBd01EQXdNQ2tpUGp4d1lYUm9JR1E5SWswNU1UUXVPVGszT1RZNUxEVTBOaUJNT1RBeUxqazVOVGt6Tnl3MU5EWWdRemt3TVM0ek5ERXpNamNzTlRRMklEa3dNQ3cxTkRRdU5qWXlOamtnT1RBd0xEVTBNeTR3TURRd05qTWdURGt3TUN3MU16RXVOVEV4TkRFMklFdzVNREFzTlRJd0xqQXhPRGMzSUV3NU1UY3VNRGt6TURjNUxEVXdNaTQ1TWpVMk9URWdURGswTUM0eU5UQXlOemdzTlRBeUxqa3lOVFk1TVNCTU9UUTFMamt5TVRjMk1TdzFNVE11TlRVMU5USTFJRXc1TkRNdU1EVTVOak01TERVeU9TNDVOREF6TmpFZ1REa3lOeXcxTkRZZ1REa3hOQzQ1T1RjNU5qa3NOVFEySUV3NU1UUXVPVGszT1RZNUxEVTBOaUJhSWlCcFpEMGljM0YxWVhKbExUWXdJaTgrUEM5blBqeG5JR1pwYkd3OUlpTkdSa1pHUmtZaUlHbGtQU0pwWTI5dUlpQjBjbUZ1YzJadmNtMDlJblJ5WVc1emJHRjBaU2d4T0RJdU1EQXdNREF3TENBeE5UQXVNREF3TURBd0tTSStQSEJoZEdnZ1pEMGlUVGt4Tmk0ME1qVXlOelFzTlRNMUxqVXhOamc0T1NCRE9URTJMalF5TlRJM05DdzFNelV1TURZM01UY3pJRGt4Tmk0ME1EazBNRGNzTlRNekxqZzNOekl5TnlBNU1UWXVOREF3TXpRc05UTXlMakk1Tmpnek1TQkRPVEV4TGpJMk5URTNPQ3cxTXpNdU5EUXdNamswSURreE1DNHhPREUzTURVc05USTVMamMxT0RnNU9TQTVNVEF1TVRneE56QTFMRFV5T1M0M05UZzRPVGtnUXprd09TNHpOREU1TERVeU55NDFOekU1TURrZ09UQTRMakV6TVRRNU15dzFNall1T1RnNU56RTVJRGt3T0M0eE16RTBPVE1zTlRJMkxqazRPVGN4T1NCRE9UQTJMalExTlRJNE5DdzFNalV1T0RFME9EZ2dPVEE0TGpJMU9EUXlOeXcxTWpVdU9ETTVNamd6SURrd09DNHlOVGcwTWpjc05USTFMamd6T1RJNE15QkRPVEV3TGpFeE1UUXpPQ3cxTWpVdU9UY3lPVElnT1RFeExqQTROakV4TERVeU55NDNPVEF6TnpZZ09URXhMakE0TmpFeExEVXlOeTQzT1RBek56WWdRemt4TWk0M016STROVE1zTlRNd0xqWTRNamN6TkNBNU1UVXVOREEyTkRBeExEVXlPUzQ0TkRnek56Z2dPVEUyTGpRMU9USTNOQ3cxTWprdU16WXpPQ0JET1RFMkxqWXlOekF3T0N3MU1qZ3VNVFF3TVRVMUlEa3hOeTR4TURReE5EUXNOVEkzTGpNd05UYzVPQ0E1TVRjdU5qTXhNVFEzTERVeU5pNDRNekk0TkRFZ1F6a3hNeTQxTXpFNE5UY3NOVEkyTGpNMU5USXpOaUE1TURrdU1qSXhOelkyTERVeU5DNDNNekEyT0RJZ09UQTVMakl5TVRjMk5pdzFNVGN1TkRjM01USTJJRU01TURrdU1qSXhOelkyTERVeE5TNDBNVEE1T0RrZ09UQTVMamswTVRRek55dzFNVE11TnpJeE16VTVJRGt4TVM0eE1qSXpOemNzTlRFeUxqTTVOemMzTnlCRE9URXdMamt6TXpFd09TdzFNVEV1T1RFNU1ERWdPVEV3TGpJNU9EUXpPU3cxTURrdU9UazBOalExSURreE1TNHpNRE0zTVRFc05UQTNMak00T0RFMU1pQkRPVEV4TGpNd016Y3hNU3cxTURjdU16ZzRNVFV5SURreE1pNDROVFF4TWl3MU1EWXVPRGM1TVRjeUlEa3hOaTR6TnprNU5DdzFNRGt1TXpJNE56ZzJJRU01TVRjdU9EVXlNVFE1TERVd09DNDVNRGt5T0RRZ09URTVMalF6TWpBeU5DdzFNRGd1TmprM056a2dPVEl4TGpBd01qZ3pNeXcxTURndU5qa3dPREUzSUVNNU1qSXVOVGN3TWpReUxEVXdPQzQyT1RjM09TQTVNalF1TVRRNE9UZzFMRFV3T0M0NU1Ea3lPRFFnT1RJMUxqWXlORFU1TXl3MU1Ea3VNekk0TnpnMklFTTVNamt1TVRRNE1UUTJMRFV3Tmk0NE56a3hOeklnT1RNd0xqWTVOakk0T1N3MU1EY3VNemc0TVRVeUlEa3pNQzQyT1RZeU9Ea3NOVEEzTGpNNE9ERTFNaUJET1RNeExqY3dNemd5T0N3MU1Ea3VPVGt6TkRneklEa3pNUzR3TnpBeU9URXNOVEV4TGpreE56ZzBPQ0E1TXpBdU9EYzVPRGtzTlRFeUxqTTVOemMzTnlCRE9UTXlMakEyTXpBNU5pdzFNVE11TnpJeE16VTVJRGt6TWk0M056Y3hMRFV4TlM0ME1UQTVPRGtnT1RNeUxqYzNOekVzTlRFM0xqUTNOekV5TmlCRE9UTXlMamMzTnpFc05USTBMamMwT1RJM05DQTVNamd1TkRZd01qQTVMRFV5Tmk0ek5EazBNallnT1RJMExqTTBOek14T1N3MU1qWXVPREUzTnpNMUlFTTVNalV1TURFeE5EVTJMRFV5Tnk0ME1ESXlORGtnT1RJMUxqWXdNRGM1TXl3MU1qZ3VOVFUzTXpNeklEa3lOUzQyTURBM09UTXNOVE13TGpNeU16WTFPU0JET1RJMUxqWXdNRGM1TXl3MU16SXVPRFUwTmpFNElEa3lOUzQxTnpZNU9UTXNOVE0wTGpnNU5qTTFNU0E1TWpVdU5UYzJPVGt6TERVek5TNDFNVFk0T0RrZ1F6a3lOUzQxTnpZNU9UTXNOVE0yTGpBeU16VTBOU0E1TWpVdU9URXdNVGsxTERVek5pNDJNVEUxTkRZZ09USTJMamcwTnpRMk55dzFNell1TkRJMk56YzVJRU01TXpRdU1UYzJOemMxTERVek15NDVNVGt3TmpFZ09UTTVMalEyTVRVek9DdzFNall1T0RJNE1Ua3pJRGt6T1M0ME5qRTFNemdzTlRFNExqUTJPRE0ySUVNNU16a3VORFl4TlRNNExEVXdPQzR3TVRNek16a2dPVE14TGpFNU5EazFPQ3cwT1RrdU5UTTRORFl5SURreU1DNDVPVGswTXpNc05EazVMalV6T0RRMk1pQkRPVEV3TGpnd05UQTBNaXcwT1RrdU5UTTRORFl5SURrd01pNDFNemcwTmpJc05UQTRMakF4TXpNek9TQTVNREl1TlRNNE5EWXlMRFV4T0M0ME5qZ3pOaUJET1RBeUxqVXpPVFU1TlN3MU1qWXVPRE13TlRFM0lEa3dOeTQ0TWpnNE9USXNOVE16TGpreU5qQXpOQ0E1TVRVdU1UWTFMRFV6Tmk0ME1qa3hNRE1nUXpreE5pNHdPRGMxTXprc05UTTJMall3TWpJME9TQTVNVFl1TkRJMU1qYzBMRFV6Tmk0d01UYzNNelVnT1RFMkxqUXlOVEkzTkN3MU16VXVOVEUyT0RnNUlGb2lJR2xrUFNKbmFYUm9kV0lpTHo0OEwyYytQQzluUGp3dlp6NDhMM04yWno0PSIgLz48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9ImxvZ2luaWNvbiIgc3JjPSJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LFBEOTRiV3dnZG1WeWMybHZiajBpTVM0d0lpQS9QandoUkU5RFZGbFFSU0J6ZG1jZ0lGQlZRa3hKUXlBbkxTOHZWek5ETHk5RVZFUWdVMVpISURFdU1TOHZSVTRuSUNBbmFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdlIzSmhjR2hwWTNNdlUxWkhMekV1TVM5RVZFUXZjM1puTVRFdVpIUmtKejQ4YzNabklHVnVZV0pzWlMxaVlXTnJaM0p2ZFc1a1BTSnVaWGNnTUNBd0lEVXdJRFV3SWlCcFpEMGlUR0Y1WlhKZk1TSWdkbVZ5YzJsdmJqMGlNUzR4SWlCMmFXVjNRbTk0UFNJd0lEQWdOVEFnTlRBaUlIaHRiRHB6Y0dGalpUMGljSEpsYzJWeWRtVWlJSGh0Ykc1elBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHlNREF3TDNOMlp5SWdlRzFzYm5NNmVHeHBibXM5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZlR3hwYm1zaVBqeHdZWFJvSUdROUlrMDBOU3d4U0RWRE1pNDRMREVzTVN3eUxqZ3NNU3cxZGpRd1l6QXNNaTR5TERFdU9DdzBMRFFzTkdnME1HTXlMaklzTUN3MExURXVPQ3cwTFRSV05VTTBPU3d5TGpnc05EY3VNaXd4TERRMUxERjZJaUJtYVd4c1BTSWpNa05CTjBVd0lpOCtQSEJoZEdnZ1pEMGlUVFF3TERFMkxqSmpMVEV1TVN3d0xqVXRNaTQ0TERFdU1TMDBMREV1TTJNeExqTXRNQzQ0TERJdU5TMHlMallzTXkwMFl5MHhMREF1TmkweUxqRXNNUzQwTFRNdU1pd3hMamhNTXpVc01UUXVOU0FnWXkweExqRXRNUzR5TFRJdU1pMHlMVFF0TW1NdE15NDBMREF0Tml3eUxqWXROaXcyWXpBc01DNDBMREFzTUM0M0xEQXVNU3d4YkMwd0xqRXNNR010Tml3d0xURXdMVEV1TXkweE15MDFZeTB3TGpVc01DNDVMVEVzTVM0NUxURXNNMk13TERJdU1Td3hMak1zTXk0NUxETXNOU0FnWXkweExEQXRNaTR5TFRBdU5TMHpMVEZqTUN3ekxEUXVNaXcyTGpRc055dzNZeTB4TERFdE5DNDJMREF1TVMwMUxEQmpNQzQ0TERJdU5Dd3pMak1zTXk0NUxEWXNOR010TWk0eExERXVOaTAwTGpZc01pNDFMVGN1TlN3eUxqVmpMVEF1TlN3d0xURXNNQzB4TGpVdE1DNHhJQ0JqTWk0M0xERXVOeXcyTGpVc01pNDJMREV3TERJdU5tTXhNUzR6TERBc01UY3RPQzQ1TERFM0xURTNZekF0TUM0ekxEQXRNQzQzTERBdE1VTXpPQzR5TERFNExqWXNNemt1TWl3eE55NDBMRFF3TERFMkxqSjZJaUJtYVd4c1BTSWpSa1pHUmtaR0lpQnBaRDBpUW5KcFpGOHhYeUl2UGp3dmMzWm5QZz09IiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8aHIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWQtdGl0bGUiPiBPciBvbiB0aGlzIHNpdGU8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIG1lc3NhZ2UgJX0KICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3ttZXNzYWdlfX08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZCAlfQogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJuZXh0IiB2YWx1ZT0ie3sgbmV4dCB9fSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8bWQtaW5wdXQtY29udGFpbmVyIGNsYXNzPSJtZC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlcm5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHJlcXVpcmVkIGlkPSJ1c2VybmFtZSIgdHlwZT0idGV4dCIgbmFtZT0idXNlcm5hbWUiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9Im1kLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbD5QYXNzd29yZDwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgcmVxdWlyZWQgdHlwZT0icGFzc3dvcmQiIGlkPSJwYXNzd29yZCIgbmFtZT0icGFzc3dvcmQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLWNvbnRlbnQ+CiAgICAgICAgICAgICAgICAgICAgPG1kLWNhcmQtYWN0aW9ucyBsYXlvdXQ9InJvdyIgbGF5b3V0LWFsaWduPSJlbmQgY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGlkPSJsb2dpbmJ0biIgdHlwZT0ic3VibWl0IiB2YWx1ZT0iTG9naW4iIGNsYXNzPSJtZC1idXR0b24gbWQtcmFpc2VkIG1kLXByaW1hcnkiIC8+CiAgICAgICAgICAgICAgICAgICAgPC9tZC1jYXJkLWFjdGlvbnM+CiAgICAgICAgICAgICAgICA8L21kLWNhcmQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbWQtY29udGVudD4KICAgIDwvZm9ybT4KICAgIDxzY3JpcHQgc3JjPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcmpzLzEuNC44L2FuZ3VsYXIubWluLmpzIj48L3NjcmlwdD4KICAgIDxzY3JpcHQgc3JjPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcmpzLzEuNC44L2FuZ3VsYXItYW5pbWF0ZS5taW4uanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCBzcmM9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyanMvMS40LjgvYW5ndWxhci1hcmlhLm1pbi5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHNyYz0iaHR0cDovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2FuZ3VsYXJqcy8xLjQuOC9hbmd1bGFyLW1lc3NhZ2VzLm1pbi5qcyI+PC9zY3JpcHQ+CgogICAgPCEtLSBBbmd1bGFyIE1hdGVyaWFsIExpYnJhcnkgLS0+CiAgICA8c2NyaXB0IHNyYz0iaHR0cDovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2FuZ3VsYXJfbWF0ZXJpYWwvMS4wLjAvYW5ndWxhci1tYXRlcmlhbC5taW4uanMiPjwvc2NyaXB0PgoKICAgIDwhLS0gWW91ciBhcHBsaWNhdGlvbiBib290c3RyYXAgIC0tPgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgIGFuZ3VsYXIubW9kdWxlKCdsb2dpbkFwcCcsIFsnbmdNYXRlcmlhbCddKTsKICAgIDwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K')
},
{
'name': '/templates/setup.html', 'data': base64.b64decode(b'PCFET0NUWVBFIGh0bWw+CjxoZWFkPgogICAgPG1ldGEgY2hhcnNldD0idXRmLTgiPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iWC1VQS1Db21wYXRpYmxlIiBjb250ZW50PSJJRT1lZGdlIj4KICAgIDx0aXRsZT5TeXN0ZW08L3RpdGxlPgogICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iIGNvbnRlbnQ9IiI+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEiPgogICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcl9tYXRlcmlhbC8xLjAuMC9hbmd1bGFyLW1hdGVyaWFsLm1pbi5jc3MiPgogICAgPHN0eWxlPgogICAgICAgIGh0bWwsCiAgICAgICAgYm9keSB7CiAgICAgICAgICAgIGhlaWdodDogMTAwJTsKICAgICAgICB9CgogICAgICAgIGh0bWwgewogICAgICAgICAgICBtYXJnaW46IGF1dG87CiAgICAgICAgfQoKICAgICAgICAubG9naW5pY29uIHsKICAgICAgICAgICAgaGVpZ2h0OiAzMnB4OwogICAgICAgICAgICB3aWR0aDogMzJweDsKICAgICAgICB9CiAgICA8L3N0eWxlPgo8L2hlYWQ+Cjxib2R5IG5nLWFwcD0ic2V0dXBBcHAiIG5nLWNsb2FrPgo8bWQtdGFicyBtZC1hbGlnbi10YWJzPSJ0b3AiIGZsZXggbGF5b3V0PSJjb2x1bW4iIGxheW91dC1maWxsPgogICAgeyUgIGlmIHNob3dfY3JlYXRlX2FkbWluX2Zvcm0gJX0KICAgIDxtZC10YWIgaWQ9InRhYkNyZWF0ZUFkbWluIj4KICAgICAgICA8bWQtdGFiLWxhYmVsPkNyZWF0ZSBhZG1pbjwvbWQtdGFiLWxhYmVsPgogICAgICAgIDxtZC10YWItYm9keT4KICAgICAgICAgICAgPGZvcm0gYWN0aW9uPSIuIiBtZXRob2Q9IlBPU1QiPgogICAgICAgICAgICAgICAgPG1kLWNvbnRlbnQgbGF5b3V0PSJyb3ciPgogICAgICAgICAgICAgICAgICAgIDxtZC1jYXJkPgogICAgICAgICAgICAgICAgICAgICAgICA8bWQtY2FyZC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgbWVzc2FnZSAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3sgbWVzc2FnZSB9fTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGVuZCAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibmV4dCIgdmFsdWU9Int7IG5leHQgfX0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9Im1kLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+VXNlcm5hbWU8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCByZXF1aXJlZCBpZD0idXNlcm5hbWUiIHR5cGU9InRleHQiIG5hbWU9InVzZXJuYW1lIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxtZC1pbnB1dC1jb250YWluZXIgY2xhc3M9Im1kLWJsb2NrIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+UGFzc3dvcmQ8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCByZXF1aXJlZCB0eXBlPSJwYXNzd29yZCIgaWQ9InBhc3N3b3JkIiBuYW1lPSJwYXNzd29yZCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9tZC1pbnB1dC1jb250YWluZXI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZC1jb250ZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgbmFtZT0iY29tbWFuZCIgdmFsdWU9Im5ldy1hZG1pbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibWQtYnV0dG9uIG1kLXJhaXNlZCBtZC1wcmltYXJ5Ij5DcmVhdGUgbmV3IGFkbWluCiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvbWQtY2FyZD4KICAgICAgICAgICAgICAgIDwvbWQtY29udGVudD4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgIDwvbWQtdGFiLWJvZHk+CiAgICA8L21kLXRhYj4KICAgIHslIGVuZCAlfQogICAgPC9tZC10YWI+CiAgICA8bWQtdGFiIGlkPSJ0YWJTeXN0ZW0iPgogICAgICAgIDxtZC10YWItbGFiZWw+U3lzdGVtPC9tZC10YWItbGFiZWw+CiAgICAgICAgPG1kLXRhYi1ib2R5PgogICAgICAgICAgICB7JSAgaWYgc2hvd19zeXN0ZW1fZm9ybSAlfQogICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii4iIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT0ic3VibWl0IiBuYW1lPSJjb21tYW5kIiB2YWx1ZT0icmVzdGFydF9zZXJ2aWNlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kLWJ1dHRvbiBtZC1yYWlzZWQgbWQtcHJpbWFyeSI+UmVzdGFydCBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICA8cD5QbGVhc2UgbG9naW4gYXMgYWRtaW4gdG8gdmlldyBzeXN0ZW0gY29tbWFuZHMuPC9wPgogICAgICAgICAgICB7JSBlbmQgJX0KICAgICAgICA8L21kLXRhYi1ib2R5PgogICAgPC9tZC10YWI+CiAgICA8bWQtdGFiIGlkPSJ0YWJTZXR0aW5ncyI+CiAgICAgICAgPG1kLXRhYi1sYWJlbD5TZXR0aW5nczwvbWQtdGFiLWxhYmVsPgogICAgICAgIDxtZC10YWItYm9keT4KICAgICAgICAgICAgeyUgIGlmIHNob3dfc2V0dGluZ3NfZm9ybSAlfQogICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii4iIG1ldGhvZD0iUE9TVCI+CiAgICAgICAgICAgICAgICA8ZGl2PgogICAgICAgICAgICAgICAgICAgIHslIGlmIG1lc3NhZ2UgJX0KICAgICAgICAgICAgICAgICAgICA8c3Bhbj57eyBtZXNzYWdlIH19PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIHslIGVuZCAlfQogICAgICAgICAgICAgICAgICAgIHslIGZvciBjb25maWcgaW4gY29uZmlndXJhYmxlX3NldHRpbmdzICV9CiAgICAgICAgICAgICAgICAgICAgPG1kLWlucHV0LWNvbnRhaW5lciBjbGFzcz0ibWQtYmxvY2siPgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWw+e3sgY29uZmlnWyduYW1lJ10gfX08L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBpZiBjb25maWdbInNldHRpbmdzIl1bInR5cGUiXSA9PSAidGV4dGFyZWEiICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgaWQ9Int7IGNvbmZpZ1snbmFtZSddIH19IiB0eXBlPSJ0ZXh0IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9Int7IGNvbmZpZ1snbmFtZSddIH19Ij57eyBjb25maWdbJ3ZhbHVlJ10gfX08L3RleHRhcmVhPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbHNlICV9CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCBpZD0ie3sgY29uZmlnWyduYW1lJ10gfX0iIHR5cGU9InRleHQiIG5hbWU9Int7IGNvbmZpZ1snbmFtZSddIH19IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9Int7IGNvbmZpZ1sndmFsdWUnXSB9fSIvPgogICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmQgJX0KICAgICAgICAgICAgICAgICAgICA8L21kLWlucHV0LWNvbnRhaW5lcj4KICAgICAgICAgICAgICAgICAgICB7JSBlbmQgJX0KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgbmFtZT0iY29tbWFuZCIgdmFsdWU9ImFwcGx5X3NldHRpbmdzIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1kLWJ1dHRvbiBtZC1yYWlzZWQgbWQtcHJpbWFyeSI+QXBwbHkgc2V0dGluZ3MKICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgIHslIGVsc2UgJX0KICAgICAgICAgICAgICAgIDxwPlBsZWFzZSBsb2dpbiBhcyBhZG1pbiB0byBlZGl0IHNldHRpbmdzLjwvcD4KICAgICAgICAgICAgeyUgZW5kICV9CiAgICAgICAgPC9tZC10YWItYm9keT4KICAgIDwvbWQtdGFiPgo8L21kLXRhYnM+CgoKCjxzY3JpcHQgc3JjPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcmpzLzEuNC44L2FuZ3VsYXIubWluLmpzIj48L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyanMvMS40LjgvYW5ndWxhci1hbmltYXRlLm1pbi5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgc3JjPSJodHRwOi8vYWpheC5nb29nbGVhcGlzLmNvbS9hamF4L2xpYnMvYW5ndWxhcmpzLzEuNC44L2FuZ3VsYXItYXJpYS5taW4uanMiPjwvc2NyaXB0Pgo8c2NyaXB0IHNyYz0iaHR0cDovL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2FuZ3VsYXJqcy8xLjQuOC9hbmd1bGFyLW1lc3NhZ2VzLm1pbi5qcyI+PC9zY3JpcHQ+Cgo8IS0tIEFuZ3VsYXIgTWF0ZXJpYWwgTGlicmFyeSAtLT4KPHNjcmlwdCBzcmM9Imh0dHA6Ly9hamF4Lmdvb2dsZWFwaXMuY29tL2FqYXgvbGlicy9hbmd1bGFyX21hdGVyaWFsLzEuMC4wL2FuZ3VsYXItbWF0ZXJpYWwubWluLmpzIj48L3NjcmlwdD4KCjwhLS0gWW91ciBhcHBsaWNhdGlvbiBib290c3RyYXAgIC0tPgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICBhbmd1bGFyLm1vZHVsZSgnc2V0dXBBcHAnLCBbJ25nTWF0ZXJpYWwnXSk7Cjwvc2NyaXB0Pgo8L2JvZHk+CjwvaHRtbD4K')
}]
